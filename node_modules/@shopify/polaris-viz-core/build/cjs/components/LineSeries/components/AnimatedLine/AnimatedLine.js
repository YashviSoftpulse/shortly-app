'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var core = require('@react-spring/core');
var useSpringConfig = require('../../../../hooks/useSpringConfig.js');
var constants = require('../../../../constants.js');
var jsxRuntime = require('react/jsx-runtime');
var usePolarisVizContext = require('../../../../hooks/usePolarisVizContext.js');
var getColorVisionStylesForActiveIndex = require('../../../../utilities/getColorVisionStylesForActiveIndex.js');

function AnimatedLine({
  immediate,
  fromData,
  toData,
  zeroLineData,
  delay,
  lineGenerator,
  activeLineIndex,
  index,
  strokeWidth,
  strokeDasharray,
  lastY,
  zeroLineY
}) {
  const {
    components: {
      Path
    },
    animated
  } = usePolarisVizContext.usePolarisVizContext();
  const AnimatedPath = animated(Path);
  const springConfig = useSpringConfig.useSpringConfig({
    shouldAnimate: !immediate,
    animationDelay: immediate ? 0 : delay,
    mountedSpringConfig: constants.LINES_TRANSITION_CONFIG,
    unmountedSpringConfig: constants.LINES_LOAD_ANIMATION_CONFIG
  });
  const mounted = react.useRef(false);
  const {
    animatedLineShape
  } = core.useSpring({
    from: {
      cy: mounted.current ? lastY : zeroLineY,
      animatedLineShape: lineGenerator(mounted.current ? fromData.data : zeroLineData)
    },
    to: {
      cy: lastY,
      animatedLineShape: lineGenerator(toData.data)
    },
    ...springConfig
  });
  return /*#__PURE__*/jsxRuntime.jsx(react.Fragment, {
    children: /*#__PURE__*/jsxRuntime.jsx(AnimatedPath, {
      d: animatedLineShape,
      stroke: "white",
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth: strokeWidth,
      style: { ...getColorVisionStylesForActiveIndex.getColorVisionStylesForActiveIndex({
          activeIndex: activeLineIndex,
          index
        }),
        strokeDasharray
      }
    })
  });
}

exports.AnimatedLine = AnimatedLine;
