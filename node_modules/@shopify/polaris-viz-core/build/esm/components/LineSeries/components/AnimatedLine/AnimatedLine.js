import { useRef, Fragment } from 'react';
import { useSpring } from '@react-spring/core';
import { useSpringConfig } from '../../../../hooks/useSpringConfig.js';
import { LINES_TRANSITION_CONFIG, LINES_LOAD_ANIMATION_CONFIG } from '../../../../constants.js';
import { jsx } from 'react/jsx-runtime';
import { usePolarisVizContext } from '../../../../hooks/usePolarisVizContext.js';
import { getColorVisionStylesForActiveIndex } from '../../../../utilities/getColorVisionStylesForActiveIndex.js';

function AnimatedLine({
  immediate,
  fromData,
  toData,
  zeroLineData,
  delay,
  lineGenerator,
  activeLineIndex,
  index,
  strokeWidth,
  strokeDasharray,
  lastY,
  zeroLineY
}) {
  const {
    components: {
      Path
    },
    animated
  } = usePolarisVizContext();
  const AnimatedPath = animated(Path);
  const springConfig = useSpringConfig({
    shouldAnimate: !immediate,
    animationDelay: immediate ? 0 : delay,
    mountedSpringConfig: LINES_TRANSITION_CONFIG,
    unmountedSpringConfig: LINES_LOAD_ANIMATION_CONFIG
  });
  const mounted = useRef(false);
  const {
    animatedLineShape
  } = useSpring({
    from: {
      cy: mounted.current ? lastY : zeroLineY,
      animatedLineShape: lineGenerator(mounted.current ? fromData.data : zeroLineData)
    },
    to: {
      cy: lastY,
      animatedLineShape: lineGenerator(toData.data)
    },
    ...springConfig
  });
  return /*#__PURE__*/jsx(Fragment, {
    children: /*#__PURE__*/jsx(AnimatedPath, {
      d: animatedLineShape,
      stroke: "white",
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth: strokeWidth,
      style: { ...getColorVisionStylesForActiveIndex({
          activeIndex: activeLineIndex,
          index
        }),
        strokeDasharray
      }
    })
  });
}

export { AnimatedLine };
