import { useMemo } from 'react';
import { getRoundedRectPath } from '../../utilities/getRoundedRectPath.js';
import { jsx } from 'react/jsx-runtime';
import { usePolarisVizContext } from '../../hooks/usePolarisVizContext.js';

function Bar({
  borderRadius = 0,
  fill,
  height,
  value,
  width,
  x,
  yScale
}) {
  const {
    components: {
      Path
    },
    animated
  } = usePolarisVizContext();
  const AnimatedPath = animated(Path);
  const zeroScale = yScale(0);
  const isNegative = value != null && value < 0;
  const rotation = isNegative ? 180 : 0;
  const xPosition = isNegative ? x + width : x;
  const yPosition = useMemo(() => {
    if (height == null) return;

    const getYPosition = value => isNegative ? zeroScale + value : zeroScale - value;

    if (typeof height === 'number') {
      return getYPosition(height);
    }

    return height.to(getYPosition);
  }, [height, isNegative, zeroScale]);
  const style = useMemo(() => {
    if (yPosition == null) return;

    const getStyle = y => `translate(${xPosition} ${y}), rotate(${rotation})`;

    if (typeof yPosition === 'number') return getStyle(yPosition);
    return yPosition.to(getStyle);
  }, [yPosition, xPosition, rotation]);
  const path = useMemo(() => {
    if (height == null) return;

    const calculatePath = heightValue => {
      if (heightValue === 0) {
        return '';
      }

      return getRoundedRectPath({
        height: heightValue,
        width,
        borderRadius: `${borderRadius} ${borderRadius} 0 0`
      });
    };

    if (typeof height === 'number') {
      return calculatePath(height);
    }

    return height.to(calculatePath);
  }, [borderRadius, height, width]);

  if (value == null || width < 0) {
    return null;
  }

  return /*#__PURE__*/jsx(AnimatedPath, {
    d: path,
    transform: style,
    fill: fill
  });
}

export { Bar };
