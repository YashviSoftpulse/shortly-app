import type { DataGroup, DataSeries, Dimensions, ErrorBoundaryResponse } from '@shopify/polaris-viz-core';
import type { ErrorInfo, ReactNode } from 'react';
import { Component } from 'react';
import type { SkeletonType } from '../ChartSkeleton';
interface ErrorBoundaryProps {
    data: DataSeries[] | DataGroup[];
    dimensions: Dimensions;
    type: SkeletonType;
    children?: ReactNode;
    onError?: ErrorBoundaryResponse;
}
interface ErrorBoundaryState {
    hasError: boolean;
}
export declare class ChartErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
    static getDerivedStateFromError(_: Error): {
        hasError: boolean;
    };
    state: ErrorBoundaryState;
    constructor(props: any);
    onError: (error: any, errorInfo: any) => void;
    componentDidCatch(error: Error, errorInfo: ErrorInfo): void;
    render(): string | number | boolean | JSX.Element | import("react").ReactFragment | null | undefined;
}
export {};
//# sourceMappingURL=ChartErrorBoundary.d.ts.map