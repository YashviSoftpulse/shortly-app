import { useRef, Fragment } from 'react';
import { usePolarisVizContext, DEFAULT_CHART_PROPS, useTheme, uniqueId, InternalChartType, ChartState } from '@shopify/polaris-viz-core';
import { getTooltipContentRenderer } from '../../utilities/getTooltipContentRenderer.esnext';
import { fillMissingDataPoints } from '../../utilities/fillMissingDataPoints.esnext';
import { getLineChartDataWithDefaults } from '../../utilities/getLineChartDataWithDefaults.esnext';
import { useThemeSeriesColors } from '../../hooks/useThemeSeriesColors.esnext';
import { Chart } from './Chart.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { getXAxisOptionsWithDefaults, getYAxisOptionsWithDefaults } from '../../utilities/getAxisOptions.esnext';
import { normalizeData } from '../../utilities/normalizeData.esnext';
import { SkipLink } from '../SkipLink/SkipLink.esnext';
import { ChartContainer } from '../ChartContainer/ChartContainer.esnext';
import { ChartSkeleton } from '../ChartSkeleton/ChartSkeleton.esnext';

function LineChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    data: dataSeries,
    emptyStateText,
    errorText,
    id,
    isAnimated,
    onError,
    renderLegendContent,
    renderHiddenLegendLabel,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    hideLegendOverflow = true,
    skipLinkText,
    state,
    theme = defaultTheme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = { ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints(dataSeries, true);
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(data, selectedTheme);
  const skipLinkAnchorId = useRef(uniqueId('lineChart'));
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  const annotationsLookupTable = normalizeData(annotations, 'startKey');
  const dataWithDefaults = getLineChartDataWithDefaults(data, seriesColors);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [skipLinkText == null || skipLinkText.length === 0 || data.length === 0 ? null : /*#__PURE__*/jsx(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), /*#__PURE__*/jsx(ChartContainer, {
      id: id,
      data: data,
      theme: theme,
      isAnimated: isAnimated,
      type: InternalChartType.Line,
      onError: onError,
      children: state !== ChartState.Success ? /*#__PURE__*/jsx(ChartSkeleton, {
        state: state,
        errorText: errorText,
        theme: theme
      }) : /*#__PURE__*/jsx(Chart, {
        annotationsLookupTable: annotationsLookupTable,
        data: dataWithDefaults,
        emptyStateText: emptyStateText,
        renderLegendContent: renderLegendContent,
        renderTooltipContent: renderTooltip,
        renderHiddenLegendLabel: renderHiddenLegendLabel,
        seriesNameFormatter: seriesNameFormatter,
        showLegend: showLegend,
        hideLegendOverflow: hideLegendOverflow,
        theme: theme,
        xAxisOptions: xAxisOptionsWithDefaults,
        yAxisOptions: yAxisOptionsWithDefaults,
        slots: props.slots
      })
    }), skipLinkText == null || skipLinkText.length === 0 ? null : /*#__PURE__*/jsx(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

export { LineChart };
