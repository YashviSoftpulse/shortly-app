import { useRef, useMemo, Fragment } from 'react';
import { useTheme, useChartContext, uniqueId, curveStepRounded } from '@shopify/polaris-viz-core';
import { line } from 'd3-shape';
import { CROSSHAIR_ID } from '../../../../constants.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useLinearChartAnimations } from '../../../../hooks/useLinearChartAnimations.esnext';
import { Crosshair } from '../../../Crosshair/Crosshair.esnext';
import { Points } from '../Points/Points.esnext';

function PointsAndCrosshair({
  activeIndex,
  data,
  drawableHeight,
  emptyState,
  hiddenIndexes = [],
  longestSeriesIndex,
  theme,
  tooltipId,
  xScale,
  yScale
}) {
  const selectedTheme = useTheme(theme);
  const {
    shouldAnimate,
    isPerformanceImpacted
  } = useChartContext();
  const gradientId = useRef(uniqueId('lineChartGradient'));
  const lineGenerator = useMemo(() => {
    const generator = line().x((_, index) => xScale == null ? 0 : xScale(index)).y(({
      value
    }) => yScale(value !== null && value !== void 0 ? value : 0));

    if (selectedTheme.line.hasSpline) {
      generator.curve(curveStepRounded);
    }

    return generator;
  }, [selectedTheme.line.hasSpline, xScale, yScale]);
  const {
    animatedCoordinates
  } = useLinearChartAnimations({
    data,
    lineGenerator,
    activeIndex
  });

  const getXPosition = ({
    isCrosshair
  } = {
    isCrosshair: false
  }) => {
    if (xScale == null) {
      return 0;
    }

    const offset = isCrosshair ? selectedTheme.crossHair.width / 2 : 0;

    if (animatedCoordinates != null && animatedCoordinates[longestSeriesIndex] != null && shouldAnimate) {
      return animatedCoordinates[longestSeriesIndex].to(coord => coord.x - offset);
    }

    return xScale(activeIndex == null ? 0 : activeIndex) - offset;
  };

  return /*#__PURE__*/jsxs(Fragment, {
    children: [emptyState ? null : /*#__PURE__*/jsx(Crosshair, {
      height: drawableHeight,
      id: `${tooltipId}-${CROSSHAIR_ID}`,
      opacity: activeIndex == null ? 0 : 1,
      theme: theme,
      x: getXPosition({
        isCrosshair: true
      })
    }), isPerformanceImpacted ? null : /*#__PURE__*/jsx(Points, {
      activeIndex: emptyState ? null : activeIndex,
      animatedCoordinates: animatedCoordinates,
      data: data,
      getXPosition: getXPosition,
      gradientId: gradientId.current,
      hiddenIndexes: hiddenIndexes,
      longestSeriesIndex: longestSeriesIndex,
      tooltipId: tooltipId,
      xScale: xScale,
      yScale: yScale
    })]
  });
}

export { PointsAndCrosshair };
