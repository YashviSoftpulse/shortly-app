import { useState, Fragment } from 'react';
import { useChartContext, COLOR_VISION_SINGLE_ITEM, isGradientType, changeColorOpacity, LinearGradientWithStops, changeGradientOpacity, getColorVisionStylesForActiveIndex, DataType } from '@shopify/polaris-viz-core';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useWatchColorVisionEvents } from '../../../../hooks/ColorVisionA11y/useWatchColorVisionEvents.esnext';
import { Point } from '../../../Point/Point.esnext';

function Points({
  activeIndex,
  animatedCoordinates,
  data,
  getXPosition,
  gradientId,
  hiddenIndexes = [],
  longestSeriesIndex,
  tooltipId,
  xScale,
  yScale
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const [activeLineIndex, setActiveLineIndex] = useState(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveLineIndex(detail.index);
    }
  });
  return /*#__PURE__*/jsx(Fragment, {
    children: data.map((singleSeries, seriesIndex) => {
      var _singleSeries$metadat, _singleSeries$metadat2, _singleSeries$metadat3, _singleData;

      if ((singleSeries === null || singleSeries === void 0 ? void 0 : (_singleSeries$metadat = singleSeries.metadata) === null || _singleSeries$metadat === void 0 ? void 0 : _singleSeries$metadat.isVisuallyHidden) === true) {
        return null;
      }

      const index = (_singleSeries$metadat2 = (_singleSeries$metadat3 = singleSeries.metadata) === null || _singleSeries$metadat3 === void 0 ? void 0 : _singleSeries$metadat3.relatedIndex) !== null && _singleSeries$metadat2 !== void 0 ? _singleSeries$metadat2 : seriesIndex;

      if (hiddenIndexes.includes(index)) {
        return null;
      }

      const {
        data: singleData,
        name,
        color
      } = singleSeries;
      const isLongestLine = index === longestSeriesIndex;
      const pointGradientId = `${gradientId}-point-${index}`;
      const animatedYPosition = animatedCoordinates == null || animatedCoordinates[index] == null ? 0 : animatedCoordinates[index].to(coord => coord.y);
      const hasValidData = activeIndex == null ? false : ((_singleData = singleData[activeIndex !== null && activeIndex !== void 0 ? activeIndex : -1]) === null || _singleData === void 0 ? void 0 : _singleData.value) != null;
      const isLineActive = activeLineIndex !== -1 && activeLineIndex !== index;
      const isPointVisuallyHidden = !hasValidData || animatedCoordinates == null || isLineActive;
      const isPointActive = hasValidData && activeIndex != null;
      const pointColor = isGradientType(color) ? `url(#${pointGradientId})` : changeColorOpacity(color);
      return /*#__PURE__*/jsxs(Fragment, {
        children: [isGradientType(color) ? /*#__PURE__*/jsx("defs", {
          children: /*#__PURE__*/jsx(LinearGradientWithStops, {
            id: pointGradientId,
            gradient: changeGradientOpacity(color),
            gradientUnits: "userSpaceOnUse",
            y1: "100%",
            y2: "0%"
          })
        }) : null, shouldAnimate ? /*#__PURE__*/jsx(Point, {
          color: pointColor,
          cx: getXPosition({
            isCrosshair: false
          }),
          cy: animatedYPosition,
          active: isPointActive,
          index: index,
          tabIndex: -1,
          isAnimated: shouldAnimate,
          visuallyHidden: isPointVisuallyHidden,
          ariaHidden: true
        }) : null, singleData.map(({
          value
        }, dataIndex) => {
          if (value == null) {
            return null;
          }

          return /*#__PURE__*/jsx("g", {
            style: getColorVisionStylesForActiveIndex({
              activeIndex: activeLineIndex,
              index,
              fadedOpacity: 0
            }),
            children: /*#__PURE__*/jsx(Point, {
              dataType: DataType.Point,
              color: pointColor,
              cx: xScale(dataIndex),
              cy: yScale(value),
              active: activeIndex === dataIndex,
              index: dataIndex,
              tabIndex: isLongestLine ? 0 : -1,
              ariaLabelledby: tooltipId,
              isAnimated: false,
              ariaHidden: false,
              visuallyHidden: shouldAnimate
            })
          }, `${name}-${index}-${dataIndex}`);
        })]
      }, `${name}-${index}`);
    })
  });
}

export { Points };
