import { clamp } from '@shopify/polaris-viz-core';

// The space between the cursor and the tooltip
const TOOLTIP_MARGIN = 20;
const SCROLLBAR_WIDTH = 20;
function getAlteredLineChartPosition(props) {
  const {
    currentX,
    currentY,
    chartBounds
  } = props;
  let x = currentX;
  let y = currentY; //
  // Y POSITIONING
  //

  if (props.isPerformanceImpacted) {
    var _chartBounds$y;

    y = (_chartBounds$y = chartBounds.y) !== null && _chartBounds$y !== void 0 ? _chartBounds$y : 0;
  } //
  // X POSITIONING
  //


  const right = getRightPosition(x, props);
  x = right.value;

  if (right.wasOutsideBounds) {
    const left = getLeftPosition(x, props);
    x = left.value;
  }

  return {
    x: clamp({
      amount: x,
      min: TOOLTIP_MARGIN,
      max: window.innerWidth - props.tooltipDimensions.width - TOOLTIP_MARGIN - SCROLLBAR_WIDTH
    }),
    y: clamp({
      amount: y,
      min: window.scrollY + TOOLTIP_MARGIN,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN
    })
  };
}

function isOutsideBounds(data) {
  const {
    current,
    alteredPosition
  } = data;
  const min = TOOLTIP_MARGIN;
  const max = window.innerWidth - TOOLTIP_MARGIN - SCROLLBAR_WIDTH;
  const isLeft = current < min;
  const isRight = current + alteredPosition.tooltipDimensions.width > max;
  return {
    left: isLeft,
    right: isRight
  };
}

function getLeftPosition(...args) {
  const [value] = args;
  return {
    value: value - TOOLTIP_MARGIN,
    wasOutsideBounds: false
  };
}

function getRightPosition(...args) {
  const [value, props] = args;
  let x = value + props.bandwidth;
  const wasOutsideBounds = isOutsideBounds({
    current: x,
    alteredPosition: props
  });

  if (wasOutsideBounds.right) {
    x -= props.tooltipDimensions.width + props.bandwidth + TOOLTIP_MARGIN;
  } else {
    x += TOOLTIP_MARGIN;
  }

  return {
    value: x,
    wasOutsideBounds: wasOutsideBounds.right
  };
}

export { SCROLLBAR_WIDTH, TOOLTIP_MARGIN, getAlteredLineChartPosition };
