import { useState, useMemo } from 'react';
import { COLOR_VISION_GROUP_ITEM, HORIZONTAL_GROUP_LABEL_HEIGHT, LOAD_ANIMATION_DURATION, getColorVisionStylesForActiveIndex, getColorVisionEventAttrs, DataType, HORIZONTAL_SPACE_BETWEEN_SINGLE } from '@shopify/polaris-viz-core';
import style from './HorizontalGroup.scss.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useWatchColorVisionEvents } from '../../../hooks/ColorVisionA11y/useWatchColorVisionEvents.esnext';
import { GroupLabel } from '../GroupLabel/GroupLabel.esnext';
import { HorizontalStackedBars } from '../HorizontalStackedBars/HorizontalStackedBars.esnext';
import { HorizontalBars } from '../HorizontalBars/HorizontalBars.esnext';

function HorizontalGroup({
  areAllNegative,
  ariaLabel,
  barHeight,
  containerWidth,
  data,
  groupHeight,
  id,
  index,
  isSimple,
  isStacked,
  name,
  stackedValues,
  xAxisOptions,
  yAxisOptions,
  xScale,
  zeroPosition
}) {
  const [activeGroupIndex, setActiveGroupIndex] = useState(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_GROUP_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveGroupIndex(detail.index);
    }
  });
  const dataKeys = useMemo(() => {
    return data.map(({
      name
    }) => name !== null && name !== void 0 ? name : '');
  }, [data]);
  const rowHeight = useMemo(() => {
    const barPlusSpaceHeight = barHeight + HORIZONTAL_SPACE_BETWEEN_SINGLE;

    if (isStacked) {
      return HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight;
    }

    return HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight * data.length;
  }, [barHeight, data.length, isStacked]);
  const animationDelay = index * (LOAD_ANIMATION_DURATION / data[0].data.length);
  return /*#__PURE__*/jsxs("g", {
    style: getColorVisionStylesForActiveIndex({
      activeIndex: activeGroupIndex,
      index
    }),
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_GROUP_ITEM,
      index
    }),
    "data-type": DataType.BarGroup,
    "data-index": index,
    "aria-hidden": "false",
    "aria-label": ariaLabel,
    role: "list",
    className: style.Group,
    children: [/*#__PURE__*/jsx("rect", {
      fill: "transparent",
      height: groupHeight,
      width: containerWidth,
      y: -(groupHeight - rowHeight) / 2
    }), /*#__PURE__*/jsx(GroupLabel, {
      areAllNegative: areAllNegative,
      containerWidth: containerWidth,
      label: yAxisOptions.labelFormatter(name),
      zeroPosition: zeroPosition
    }), isStacked ? /*#__PURE__*/jsx(HorizontalStackedBars, {
      activeGroupIndex: activeGroupIndex,
      animationDelay: animationDelay,
      ariaLabel: ariaLabel,
      barHeight: barHeight,
      dataKeys: dataKeys,
      groupIndex: index,
      id: id,
      name: name,
      stackedValues: stackedValues,
      xScale: xScale,
      areAllNegative: areAllNegative,
      labelFormatter: xAxisOptions.labelFormatter,
      isSimple: isSimple
    }) : /*#__PURE__*/jsx(HorizontalBars, {
      animationDelay: animationDelay,
      activeGroupIndex: activeGroupIndex,
      barHeight: barHeight,
      data: data,
      groupIndex: index,
      id: id,
      isSimple: isSimple,
      labelFormatter: xAxisOptions.labelFormatter,
      name: name,
      xScale: xScale,
      zeroPosition: zeroPosition,
      containerWidth: containerWidth,
      areAllNegative: areAllNegative
    })]
  });
}

export { HorizontalGroup };
