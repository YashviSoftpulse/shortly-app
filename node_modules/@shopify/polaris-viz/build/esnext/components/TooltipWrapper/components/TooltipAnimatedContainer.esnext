import { useRef, useState, useMemo, useEffect } from 'react';
import { useChartContext } from '@shopify/polaris-viz-core';
import { getAlteredVerticalBarPosition } from '../utilities.esnext';
import { DEFAULT_TOOLTIP_POSITION } from '../constants.esnext';
import styles from './TooltipAnimatedContainer.scss.esnext';
import { jsx } from 'react/jsx-runtime';

function TooltipAnimatedContainer({
  activePointIndex,
  bandwidth = 0,
  chartBounds,
  children,
  currentX,
  currentY,
  id = '',
  getAlteredPosition = getAlteredVerticalBarPosition,
  margin,
  position = DEFAULT_TOOLTIP_POSITION,
  chartDimensions
}) {
  const {
    isPerformanceImpacted
  } = useChartContext();
  const tooltipRef = useRef(null);
  const [tooltipDimensions, setTooltipDimensions] = useState(null);
  const firstRender = useRef(true);
  const {
    x,
    y,
    opacity,
    immediate
  } = useMemo(() => {
    if (tooltipDimensions == null) {
      return {
        x: 0,
        y: 0,
        opacity: 0
      };
    }

    const {
      x,
      y
    } = getAlteredPosition({
      currentX,
      currentY,
      position,
      tooltipDimensions,
      chartBounds,
      margin,
      bandwidth,
      isPerformanceImpacted,
      chartDimensions
    });
    const shouldRenderImmediate = firstRender.current;
    firstRender.current = false;
    return {
      x,
      y,
      opacity: 1,
      immediate: isPerformanceImpacted || shouldRenderImmediate
    };
  }, [bandwidth, chartBounds, currentX, currentY, getAlteredPosition, margin, position, isPerformanceImpacted, tooltipDimensions, chartDimensions]);
  useEffect(() => {
    if (tooltipRef.current == null) {
      return;
    }

    setTooltipDimensions(tooltipRef.current.getBoundingClientRect());
  }, [activePointIndex]);
  return /*#__PURE__*/jsx("div", {
    id: id,
    className: styles.Container,
    "data-tooltip": true,
    style: {
      top: 0,
      left: 0,
      opacity,
      transform: `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0px)`,
      transition: immediate ? 'none' : 'opacity 300ms ease, transform 150ms'
    },
    ref: tooltipRef,
    "aria-hidden": "true",
    children: children
  });
}

export { TooltipAnimatedContainer };
