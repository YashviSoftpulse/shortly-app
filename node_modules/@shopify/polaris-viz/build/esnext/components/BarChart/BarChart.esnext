import { useRef, Fragment } from 'react';
import { usePolarisVizContext, DEFAULT_CHART_PROPS, uniqueId, InternalChartType, ChartState } from '@shopify/polaris-viz-core';
import { bucketDataSeries } from '../../utilities/bucketDataSeries.esnext';
import { getTooltipContentRenderer } from '../../utilities/getTooltipContentRenderer.esnext';
import { fillMissingDataPoints } from '../../utilities/fillMissingDataPoints.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { getXAxisOptionsWithDefaults, getYAxisOptionsWithDefaults } from '../../utilities/getAxisOptions.esnext';
import { normalizeData } from '../../utilities/normalizeData.esnext';
import { SkipLink } from '../SkipLink/SkipLink.esnext';
import { ChartContainer } from '../ChartContainer/ChartContainer.esnext';
import { ChartSkeleton } from '../ChartSkeleton/ChartSkeleton.esnext';
import { VerticalBarChart } from '../VerticalBarChart/VerticalBarChart.esnext';
import { HorizontalBarChart } from '../HorizontalBarChart/HorizontalBarChart.esnext';

function BarChart(props) {
  var _dataSeries$, _dataSeries$$data$;

  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    data: dataSeries,
    state,
    errorText,
    direction = 'vertical',
    emptyStateText,
    id,
    isAnimated,
    tooltipOptions,
    renderLegendContent,
    showLegend = true,
    maxSeries,
    skipLinkText,
    theme = defaultTheme,
    type = 'default',
    xAxisOptions,
    yAxisOptions,
    onError,
    renderHiddenLegendLabel,
    renderBucketLegendLabel,
    seriesNameFormatter = value => `${value}`
  } = { ...DEFAULT_CHART_PROPS,
    ...props
  };
  const filledData = fillMissingDataPoints(dataSeries, isValidDate((_dataSeries$ = dataSeries[0]) === null || _dataSeries$ === void 0 ? void 0 : (_dataSeries$$data$ = _dataSeries$.data[0]) === null || _dataSeries$$data$ === void 0 ? void 0 : _dataSeries$$data$.key));
  const data = maxSeries ? bucketDataSeries({
    dataSeries: filledData,
    maxSeries,
    renderBucketLegendLabel
  }) : filledData;
  const skipLinkAnchorId = useRef(uniqueId('BarChart'));
  const emptyState = data.length === 0;
  const hideSkipLink = skipLinkText == null || skipLinkText.length === 0 || emptyState;
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData(annotations, 'startKey');
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  const ChartByDirection = direction === 'vertical' ? /*#__PURE__*/jsx(VerticalBarChart, {
    annotationsLookupTable: annotationsLookupTable,
    data: data,
    emptyStateText: emptyStateText,
    renderLegendContent: renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    type: type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults,
    renderHiddenLegendLabel: renderHiddenLegendLabel
  }) : /*#__PURE__*/jsx(HorizontalBarChart, {
    annotationsLookupTable: annotationsLookupTable,
    data: data,
    renderHiddenLegendLabel: renderHiddenLegendLabel,
    renderLegendContent: renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    type: type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults
  });
  return /*#__PURE__*/jsxs(Fragment, {
    children: [hideSkipLink ? null : /*#__PURE__*/jsx(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), /*#__PURE__*/jsx(ChartContainer, {
      id: id,
      isAnimated: isAnimated,
      data: data,
      onError: onError,
      theme: theme,
      type: InternalChartType.Bar,
      children: state !== ChartState.Success ? /*#__PURE__*/jsx(ChartSkeleton, {
        state: state,
        errorText: errorText,
        theme: theme
      }) : ChartByDirection
    }), hideSkipLink ? null : /*#__PURE__*/jsx(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

function isValidDate(dateString) {
  if (dateString == null) {
    return false;
  }

  const parsedDate = Date.parse(dateString.toString());
  return !isNaN(parsedDate);
}

export { BarChart };
