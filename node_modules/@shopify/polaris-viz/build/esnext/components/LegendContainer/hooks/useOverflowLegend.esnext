import { useMemo } from 'react';

const LEGEND_GAP = 10;
function useOverflowLegend(props) {
  const {
    direction,
    enableHideOverflow,
    legendItemDimensions,
    data: allData
  } = props;
  const {
    displayedData,
    hiddenData
  } = useMemo(() => {
    if (!enableHideOverflow || !legendItemDimensions.current || allData.length <= 1) {
      return {
        displayedData: allData,
        hiddenData: []
      };
    }

    if (direction === 'vertical') {
      const {
        height
      } = props;
      let lastVisibleIndex = allData.length;
      legendItemDimensions.current.reduce((totalHeight, card, index) => {
        if (totalHeight + card.height + index * LEGEND_GAP > height) {
          lastVisibleIndex = index;
        } else {
          return totalHeight + card.height;
        }
      }, lastVisibleIndex);
      return {
        displayedData: allData.slice(0, lastVisibleIndex || 1),
        hiddenData: allData.slice(lastVisibleIndex || 1, allData.length)
      };
    }

    const {
      width,
      leftMargin,
      horizontalMargin,
      activatorWidth
    } = props;
    let lastVisibleIndex = allData.length;
    const containerWidth = width - leftMargin - horizontalMargin - activatorWidth;
    legendItemDimensions.current.reduce((totalWidth, card, index) => {
      if (totalWidth + card.width + index * LEGEND_GAP > containerWidth) {
        lastVisibleIndex = index;
      } else {
        return totalWidth + card.width;
      }
    }, lastVisibleIndex);
    return {
      displayedData: allData.slice(0, lastVisibleIndex || 1),
      hiddenData: allData.slice(lastVisibleIndex || 1, allData.length)
    };
  }, [enableHideOverflow, legendItemDimensions, direction, props, allData]);
  return {
    displayedData,
    hiddenData
  };
}

export { useOverflowLegend };
