import { useRef, useMemo, useState, useEffect, useCallback, Fragment } from 'react';
import { createPortal } from 'react-dom';
import { useTheme, useChartContext, changeColorOpacity } from '@shopify/polaris-viz-core';
import { TOOLTIP_BG_OPACITY } from '../../../constants.esnext';
import { useBrowserCheck } from '../../../hooks/useBrowserCheck.esnext';
import { useRootContainer } from '../../../hooks/useRootContainer.esnext';
import style from './HiddenLegendTooltip.scss.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useColorVisionEvents } from '../../../hooks/ColorVisionA11y/useColorVisionEvents.esnext';
import { Legend } from '../../Legend/Legend.esnext';
import { TOOLTIP_MARGIN } from '../../TooltipWrapper/utilities.esnext';

const LEGEND_TOOLTIP_ID = 'legend-toolip';
const LEGEND_TOOLIP_Z_INDEX = 520;
function HiddenLegendTooltip({
  activeIndex,
  colorVisionType,
  data,
  theme,
  label,
  lastVisibleIndex = 0,
  setActivatorWidth,
  dimensions,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme();
  const {
    isFirefox
  } = useBrowserCheck();
  const {
    id
  } = useChartContext();
  const tooltipId = `${LEGEND_TOOLTIP_ID}_${id}`;
  const container = useRootContainer(tooltipId);
  const tooltipRef = useRef(null);
  const activatorRef = useRef(null);
  useColorVisionEvents({
    enabled: true,
    root: LEGEND_TOOLTIP_ID,
    dimensions
  });
  const defaultPosition = useMemo(() => ({
    top: 0,
    left: 0
  }), []);
  const [position, setPosition] = useState(defaultPosition);
  const [active, setActive] = useState(false);
  useEffect(() => {
    if (activatorRef.current == null) {
      return;
    }

    const activator = activatorRef.current.getBoundingClientRect();
    setActivatorWidth(activator.width);
  }, [setActivatorWidth]);
  const getTooltipPosition = useCallback(() => {
    if (tooltipRef.current == null || activatorRef.current == null) {
      return;
    }

    setActive(true);
    const activator = activatorRef.current.getBoundingClientRect();
    const tooltip = tooltipRef.current.getBoundingClientRect();
    const xPosition = activator.x + window.scrollX;
    const yPosition = activator.y + window.scrollY + activator.height;

    function getXPosition() {
      const goesPastRightOfWindow = xPosition + tooltip.width + TOOLTIP_MARGIN > window.innerWidth;

      if (goesPastRightOfWindow) {
        return xPosition - tooltip.width + activator.width;
      }

      return xPosition;
    }

    function getYPosition() {
      const goesPastBottomOfWindow = yPosition + tooltip.height + TOOLTIP_MARGIN >= window.innerHeight + window.scrollY;

      if (goesPastBottomOfWindow) {
        return yPosition - tooltip.height - activator.height;
      }

      return yPosition;
    }

    setPosition({
      top: getYPosition(),
      left: getXPosition()
    });
  }, [setPosition]);
  const handleMouseLeave = useCallback(event => {
    if ((event === null || event === void 0 ? void 0 : event.relatedTarget.id) !== tooltipId) {
      setActive(false);
      setPosition(defaultPosition);
    }
  }, [setActive, setPosition, defaultPosition, tooltipId]);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx("button", {
      className: style.MoreText,
      ref: activatorRef,
      onMouseEnter: getTooltipPosition,
      onMouseLeave: handleMouseLeave,
      onFocus: getTooltipPosition,
      onBlur: handleMouseLeave,
      style: {
        color: selectedTheme.legend.labelColor
      },
      children: label
    }), /*#__PURE__*/createPortal( /*#__PURE__*/jsx("div", {
      className: style.Tooltip,
      ref: tooltipRef,
      onMouseLeave: handleMouseLeave,
      onBlur: handleMouseLeave,
      id: tooltipId,
      style: {
        visibility: active ? 'visible' : 'hidden',
        zIndex: active ? LEGEND_TOOLIP_Z_INDEX : -100000,
        background: changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : TOOLTIP_BG_OPACITY),
        ...position
      },
      children: /*#__PURE__*/jsx(Legend, {
        activeIndex: activeIndex,
        colorVisionType: colorVisionType,
        data: data,
        theme: theme,
        indexOffset: lastVisibleIndex,
        backgroundColor: "transparent",
        seriesNameFormatter: seriesNameFormatter
      })
    }), container)]
  });
}

export { HiddenLegendTooltip, LEGEND_TOOLIP_Z_INDEX, LEGEND_TOOLTIP_ID };
