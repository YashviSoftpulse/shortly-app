import * as React from 'react';
import { useState } from 'react';
import { useTheme, LINE_HEIGHT, useChartPositions, DataType, ChartMargin, COLOR_VISION_SINGLE_ITEM } from '@shopify/polaris-viz-core';
import { ChartElements } from '../ChartElements/index.esnext';
import { sortBarChartData } from '../../utilities/sortBarChartData.esnext';
import { getVerticalBarChartTooltipPosition } from '../../utilities/getVerticalBarChartTooltipPosition.esnext';
import { useThemeSeriesColorsForDataGroup } from '../../hooks/useThemeSeriesColorsForDataGroup.esnext';
import { ANNOTATIONS_LABELS_OFFSET } from '../../constants.esnext';
import { useDualAxisTicks } from './hooks/useDualAxisTicks.esnext';
import { useDualAxisTicksWidth } from './hooks/useDualAxisTickWidths.esnext';
import { useDualAxisScale } from './hooks/useDualAxisScale.esnext';
import { useXScale } from './hooks/useXScale.esnext';
import { useSplitDataForCharts } from './hooks/useSplitDataForCharts.esnext';
import { useComboChartTooltipContent } from './hooks/useComboChartTooltipContent.esnext';
import { useComboChartPositions } from './hooks/useComboChartPositions.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useColorVisionEvents } from '../../hooks/ColorVisionA11y/useColorVisionEvents.esnext';
import { useLegend } from '../LegendContainer/hooks/useLegend.esnext';
import { useReducedLabelIndexes } from '../../hooks/useReducedLabelIndexes.esnext';
import { checkAvailableAnnotations } from '../Annotations/utilities/checkAvailableAnnotations.esnext';
import { HorizontalGridLines } from '../HorizontalGridLines/HorizontalGridLines.esnext';
import { XAxis } from '../XAxis/XAxis.esnext';
import { AxisLabel } from './components/AxisLabel/AxisLabel.esnext';
import { YAxis } from '../YAxis/YAxis.esnext';
import { ComboBarChart } from './components/ComboBarChart/ComboBarChart.esnext';
import { ComboLineChart } from './components/ComboLineChart/ComboLineChart.esnext';
import { Annotations } from '../Annotations/Annotations.esnext';
import { YAxisAnnotations } from '../Annotations/YAxisAnnotations.esnext';
import { TooltipWrapper } from '../TooltipWrapper/TooltipWrapper.esnext';
import { LegendContainer } from '../LegendContainer/LegendContainer.esnext';
import { TOOLTIP_POSITION_DEFAULT_RETURN } from '../TooltipWrapper/constants.esnext';
import { TooltipHorizontalOffset, TooltipVerticalOffset } from '../TooltipWrapper/types.esnext';

function Chart({
  annotationsLookupTable,
  data,
  dimensions,
  renderTooltipContent,
  showLegend,
  theme,
  xAxisOptions,
  renderLegendContent,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme(theme);
  useColorVisionEvents();
  const colors = useThemeSeriesColorsForDataGroup(data, selectedTheme);
  const [xAxisHeight, setXAxisHeight] = useState(LINE_HEIGHT);
  const [svgRef, setSvgRef] = useState(null);
  const [activeIndex, setActiveIndex] = useState(null);
  const [annotationsHeight, setAnnotationsHeight] = useState(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    colors,
    data,
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  const {
    drawableHeight,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: 0
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const {
    doBothChartsContainMixedValues,
    doesOneChartContainAllNegativeValues,
    primaryTicks,
    primaryAxis,
    secondaryTicks,
    secondaryAxis,
    shouldPlaceZeroInMiddleOfChart,
    ticksBetweenZeroAndMax,
    yScale
  } = useDualAxisTicks({
    data,
    drawableHeight
  });
  const {
    leftTickWidth,
    rightTickWidth
  } = useDualAxisTicksWidth(primaryTicks, secondaryTicks);
  const {
    barYScale,
    lineYScale,
    primaryYScale,
    secondaryYScale
  } = useDualAxisScale({
    doesOneChartContainAllNegativeValues,
    doBothChartsContainMixedValues,
    drawableHeight: annotationsDrawableHeight,
    primaryAxis,
    secondaryAxis,
    yScale,
    shouldPlaceZeroInMiddleOfChart,
    ticksBetweenZeroAndMax
  });
  const {
    chartXPosition,
    drawableWidth,
    leftAxis,
    rightAxis
  } = useComboChartPositions({
    leftTickWidth,
    primaryAxis,
    rightTickWidth,
    secondaryAxis,
    width
  });
  const {
    barChartData,
    barChartColors,
    lineChartColors,
    lineChartData,
    barChartIndexOffset,
    lineChartIndexOffset
  } = useSplitDataForCharts(data, colors);
  const {
    xScale,
    labels
  } = useXScale({
    drawableWidth,
    data,
    xAxisOptions
  });
  const reducedLabelIndexes = useReducedLabelIndexes({
    dataLength: labels.length
  });
  const labelWidth = drawableWidth / labels.length;
  const chartBounds = {
    width,
    height,
    x: chartXPosition,
    y: chartYPosition
  };
  const getTooltipMarkup = useComboChartTooltipContent({
    renderTooltipContent,
    data,
    seriesColors: colors,
    seriesNameFormatter
  });
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  return /*#__PURE__*/jsxs(ChartElements.Div, {
    height: height,
    width: width,
    children: [/*#__PURE__*/jsxs(ChartElements.Svg, {
      width: width,
      setRef: setSvgRef,
      height: height,
      children: [selectedTheme.grid.showHorizontalLines ? /*#__PURE__*/jsx(HorizontalGridLines, {
        ticks: primaryTicks,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, /*#__PURE__*/jsx(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        labels: labels,
        labelWidth: labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes: reducedLabelIndexes,
        x: chartXPosition,
        xScale: xScale,
        y: xAxisBounds.y
      }), primaryAxis.name != null && /*#__PURE__*/jsx(AxisLabel, {
        axis: "primary",
        height: drawableHeight,
        name: primaryAxis.name,
        x: leftAxis.labelX,
        y: yAxisBounds.y
      }), /*#__PURE__*/jsx(YAxis, {
        ticks: primaryTicks,
        textAlign: "right",
        width: leftTickWidth,
        x: leftAxis.x,
        y: yAxisBounds.y
      }), /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: /*#__PURE__*/jsx(ComboBarChart, {
          indexOffset: barChartIndexOffset,
          colors: barChartColors,
          data: barChartData,
          drawableHeight: drawableHeight,
          drawableWidth: drawableWidth,
          labels: labels,
          yScale: barYScale
        })
      }), /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition + drawableWidth / labels.length / 2},${chartYPosition})`,
        children: /*#__PURE__*/jsx(ComboLineChart, {
          activeIndex: activeIndex,
          colors: lineChartColors,
          data: lineChartData,
          drawableHeight: drawableHeight,
          drawableWidth: drawableWidth,
          indexOffset: lineChartIndexOffset,
          theme: theme,
          xScale: xScale,
          yScale: lineYScale
        })
      }), hasXAxisAnnotations && /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: /*#__PURE__*/jsx(Annotations, {
          annotationsLookupTable: annotationsLookupTable,
          axisLabelWidth: labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth: drawableWidth,
          labels: labels,
          onHeightChange: setAnnotationsHeight,
          xScale: xScale
        })
      }), hasYAxisAnnotations && /*#__PURE__*/jsx(React.Fragment, {
        children: /*#__PURE__*/jsxs("g", {
          transform: `translate(${chartXPosition},${chartYPosition})`,
          tabIndex: -1,
          children: [/*#__PURE__*/jsx(YAxisAnnotations, {
            axis: "y1",
            annotationsLookupTable: annotationsLookupTable,
            drawableHeight: annotationsDrawableHeight,
            drawableWidth: drawableWidth,
            ticks: primaryTicks,
            yScale: primaryYScale
          }), /*#__PURE__*/jsx(YAxisAnnotations, {
            axis: "y2",
            annotationsLookupTable: annotationsLookupTable,
            drawableHeight: annotationsDrawableHeight,
            drawableWidth: drawableWidth,
            ticks: secondaryTicks,
            yScale: secondaryYScale
          })]
        })
      }), /*#__PURE__*/jsx(YAxis, {
        ticks: secondaryTicks,
        textAlign: "left",
        width: rightTickWidth,
        x: rightAxis.x,
        y: yAxisBounds.y
      }), secondaryAxis.name != null && /*#__PURE__*/jsx(AxisLabel, {
        axis: "secondary",
        height: drawableHeight,
        name: secondaryAxis.name,
        x: rightAxis.labelX,
        y: yAxisBounds.y
      })]
    }), /*#__PURE__*/jsx(TooltipWrapper, {
      bandwidth: labelWidth,
      chartBounds: chartBounds,
      focusElementDataType: DataType.BarGroup,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      margin: ChartMargin,
      onIndexChange: index => setActiveIndex(index),
      parentRef: svgRef
    }), showLegend && /*#__PURE__*/jsx(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent: renderLegendContent
    })]
  });

  function formatPositionForTooltip(index) {
    var _xScale;

    if (index == null) {
      return TOOLTIP_POSITION_DEFAULT_RETURN;
    }

    const sortedData = sortBarChartData(labels, barChartData.series);
    const xPosition = (_xScale = xScale(index)) !== null && _xScale !== void 0 ? _xScale : 0;
    const sortedDataPos = sortedData[index].map(num => Math.abs(num !== null && num !== void 0 ? num : 0));
    const highestValuePos = Math.max(...sortedDataPos);
    const x = xPosition + chartXPosition;
    const y = barYScale(highestValuePos) + ChartMargin.Top;
    return {
      x,
      y: Math.abs(y),
      position: {
        horizontal: TooltipHorizontalOffset.Left,
        vertical: TooltipVerticalOffset.Above
      },
      activeIndex: index
    };
  }

  function getTooltipPosition({
    event,
    index,
    eventType
  }) {
    return getVerticalBarChartTooltipPosition({
      tooltipPosition: {
        event,
        index,
        eventType
      },
      chartXPosition,
      formatPositionForTooltip,
      maxIndex: labels.length - 1,
      step: labelWidth,
      yMin: ChartMargin.Top,
      yMax: drawableHeight + Number(ChartMargin.Bottom) + xAxisHeight
    });
  }
}

export { Chart };
