import { useYScale, getClosestDivisibleNumber } from '@shopify/polaris-viz-core';
import { getSecondaryDataForMixedData } from '../utilities/getSecondaryDataForMixedData.esnext';

function useDualAxisScale({
  doBothChartsContainMixedValues,
  doesOneChartContainAllNegativeValues,
  drawableHeight,
  primaryAxis,
  secondaryAxis,
  shouldPlaceZeroInMiddleOfChart,
  ticksBetweenZeroAndMax,
  yScale
}) {
  const {
    secondaryDrawableHeight,
    secondaryMax,
    secondaryMin
  } = getSecondaryDataForMixedData({
    doBothChartsContainMixedValues,
    doesOneChartContainAllNegativeValues,
    drawableHeight,
    secondaryAxis,
    shouldPlaceZeroInMiddleOfChart,
    yScale
  });
  const {
    yScale: secondaryYScale
  } = useYScale({
    drawableHeight: secondaryDrawableHeight,
    formatYAxisLabel: secondaryAxis.yAxisOptions.labelFormatter,
    integersOnly: secondaryAxis.yAxisOptions.integersOnly,
    max: getClosestDivisibleNumber(secondaryMax, ticksBetweenZeroAndMax),
    min: secondaryMin,
    // For non-source of truth, the ticks are exactly
    // what they should be, so we don't want to apply .nice()
    // to the scale.
    shouldRoundUp: false
  });
  const barYScale = primaryAxis.shape === 'Bar' ? yScale : secondaryYScale;
  const lineYScale = primaryAxis.shape === 'Bar' ? secondaryYScale : yScale;
  return {
    barYScale,
    lineYScale,
    primaryYScale: yScale,
    secondaryYScale
  };
}

export { useDualAxisScale };
