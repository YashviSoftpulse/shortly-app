import { Fragment } from 'react';
import { DEFAULT_THEME_NAME } from '@shopify/polaris-viz-core';
import { useGetLongestLabelFromData } from './hooks/useGetLongestLabelFromData.esnext';
import { SPACE_BETWEEN_LABEL_AND_VALUE } from './constants.esnext';
import { jsx, jsxs } from 'react/jsx-runtime';
import { TooltipContentContainer } from './components/TooltipContentContainer/TooltipContentContainer.esnext';
import { TooltipTitle } from './components/TooltipTitle/TooltipTitle.esnext';
import { TooltipSeries } from './components/TooltipSeries/TooltipSeries.esnext';
import { TooltipSeriesName } from './components/TooltipSeriesName/TooltipSeriesName.esnext';
import { TooltipRow } from './components/TooltipRow/TooltipRow.esnext';

const FONT_SIZE_OFFSET = 1.061;
const PREVIEW_WIDTH = 14;
function TooltipContent({
  data,
  theme = DEFAULT_THEME_NAME,
  title
}) {
  const {
    keyWidth,
    valueWidth
  } = useGetLongestLabelFromData(data);
  const leftWidth = keyWidth * FONT_SIZE_OFFSET;
  const rightWidth = valueWidth * FONT_SIZE_OFFSET;
  return /*#__PURE__*/jsx(TooltipContentContainer, {
    maxWidth: PREVIEW_WIDTH + leftWidth + SPACE_BETWEEN_LABEL_AND_VALUE + rightWidth,
    theme: theme,
    children: ({
      activeColorVisionIndex
    }) => /*#__PURE__*/jsxs(Fragment, {
      children: [title != null && /*#__PURE__*/jsx(TooltipTitle, {
        theme: theme,
        children: title
      }), data.map(({
        data: series,
        name,
        shape
      }, dataIndex) => {
        const hasName = name != null;
        const isEmpty = !hasName && series.length === 0;
        return /*#__PURE__*/jsxs(TooltipSeries, {
          isEmpty: isEmpty,
          children: [hasName && /*#__PURE__*/jsx(TooltipSeriesName, {
            theme: theme,
            children: name
          }), series.map(({
            key,
            value,
            color,
            isComparison,
            isHidden
          }, seriesIndex) => {
            const indexOffset = data[dataIndex - 1] ? data[dataIndex - 1].data.length : 0;
            return /*#__PURE__*/jsx(TooltipRow, {
              activeIndex: activeColorVisionIndex,
              color: color,
              index: seriesIndex + indexOffset,
              isComparison: isComparison,
              isHidden: isHidden,
              label: key,
              shape: shape,
              value: value
            }, `row-${seriesIndex}`);
          })]
        }, dataIndex);
      })]
    })
  });
}

export { TooltipContent };
