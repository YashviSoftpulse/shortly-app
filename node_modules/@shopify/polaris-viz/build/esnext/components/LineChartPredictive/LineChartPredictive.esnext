import { DEFAULT_CHART_PROPS, useTheme, useThemeSeriesColors, DEFAULT_THEME_NAME } from '@shopify/polaris-viz-core';
import { useMemo } from 'react';
import { renderLinearPredictiveTooltipContent } from './utilities/renderLinearPredictiveTooltipContent.esnext';
import { jsx } from 'react/jsx-runtime';
import { LineChart } from '../LineChart/LineChart.esnext';
import { PredictiveLinePoints } from './components/PredictiveLinePoints/PredictiveLinePoints.esnext';
import { CustomLegend } from './components/CustomLegend/CustomLegend.esnext';

function LineChartPredictive(props) {
  const {
    annotations = [],
    data,
    errorText,
    emptyStateText,
    id,
    isAnimated,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    skipLinkText,
    state,
    theme,
    tooltipOptions: initialTooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = { ...DEFAULT_CHART_PROPS,
    ...props
  };
  const nonPredictiveData = [];
  const predictiveData = [];

  for (const series of data) {
    var _series$metadata;

    if (((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.isPredictive) === true) {
      predictiveData.push(series);
    } else {
      nonPredictiveData.push(series);
    }
  }

  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(nonPredictiveData, selectedTheme);
  const predictiveSeriesNames = predictiveData.map(({
    metadata
  }) => {
    var _metadata$relatedInde;

    return data[(_metadata$relatedInde = metadata === null || metadata === void 0 ? void 0 : metadata.relatedIndex) !== null && _metadata$relatedInde !== void 0 ? _metadata$relatedInde : -1].name;
  }).filter(value => value != null);
  const dataWithColors = [];
  let index = -1;

  for (const series of data) {
    var _series$metadata2;

    if (((_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) == null) {
      index += 1;
    }

    dataWithColors.push({ ...series,
      color: seriesColors[index]
    });
  }

  const tooltipOptions = useMemo(() => {
    function renderTooltipContent(tooltipData) {
      return renderLinearPredictiveTooltipContent(tooltipData);
    }

    return { ...initialTooltipOptions,
      renderTooltipContent
    };
  }, [initialTooltipOptions]);
  return /*#__PURE__*/jsx(LineChart, {
    annotations: annotations,
    data: dataWithColors,
    emptyStateText: emptyStateText,
    errorText: errorText,
    id: id,
    isAnimated: isAnimated,
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    skipLinkText: skipLinkText,
    slots: {
      chart: ({
        xScale,
        yScale,
        drawableHeight,
        drawableWidth,
        theme
      }) => {
        return /*#__PURE__*/jsx(PredictiveLinePoints, {
          data: dataWithColors,
          drawableHeight: drawableHeight,
          drawableWidth: drawableWidth,
          theme: theme,
          xScale: xScale,
          yScale: yScale
        });
      }
    },
    state: state,
    theme: theme,
    tooltipOptions: tooltipOptions,
    xAxisOptions: xAxisOptions,
    yAxisOptions: yAxisOptions,
    renderLegendContent: ({
      getColorVisionStyles,
      getColorVisionEventAttrs
    }) => {
      return /*#__PURE__*/jsx(CustomLegend, {
        getColorVisionStyles: getColorVisionStyles,
        getColorVisionEventAttrs: getColorVisionEventAttrs,
        predictiveSeriesNames: predictiveSeriesNames,
        data: dataWithColors,
        theme: theme !== null && theme !== void 0 ? theme : DEFAULT_THEME_NAME,
        seriesNameFormatter: seriesNameFormatter
      });
    }
  });
}

export { LineChartPredictive };
