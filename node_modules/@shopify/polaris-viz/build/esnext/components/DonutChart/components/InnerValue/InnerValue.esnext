import { Fragment } from 'react';
import { useSpring, config, animated } from '@react-spring/web';
import { useTheme } from '@shopify/polaris-viz-core';
import styles from '../../DonutChart.scss.esnext';
import { jsx, jsxs } from 'react/jsx-runtime';
import { classNames } from '../../../../utilities/classnames.esnext';
import { ComparisonMetric } from '../../../ComparisonMetric/ComparisonMetric.esnext';

const SCALING_FACTOR = 0.07;
function InnerValue({
  activeValue,
  activeIndex,
  comparisonMetric,
  labelFormatter,
  isAnimated,
  renderInnerValueContent,
  totalValue,
  diameter,
  dimensions
}) {
  var _renderInnerValueCont;

  const selectedTheme = useTheme();
  const {
    animatedValue
  } = useSpring({
    animatedValue: totalValue,
    from: {
      animatedValue: 0
    },
    config: config.stiff,
    default: {
      immediate: !isAnimated
    }
  });
  const fontSize = diameter * SCALING_FACTOR;

  const animatedTotalValue = /*#__PURE__*/jsx(animated.span, {
    children: animatedValue.to(value => animatedValue.isPaused ? labelFormatter(value) : labelFormatter(Math.abs(Math.floor(value))))
  });

  const activeValueExists = activeValue !== null && activeValue !== undefined;
  const valueToDisplay = activeValueExists ? labelFormatter(activeValue) : animatedTotalValue;
  const innerContent = (_renderInnerValueCont = renderInnerValueContent === null || renderInnerValueContent === void 0 ? void 0 : renderInnerValueContent({
    activeValue,
    activeIndex,
    animatedTotalValue,
    totalValue,
    dimensions
  })) !== null && _renderInnerValueCont !== void 0 ? _renderInnerValueCont : /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(animated.p, {
      className: classNames(styles.ContentValue),
      style: {
        color: selectedTheme.xAxis.labelColor,
        fontSize
      },
      children: valueToDisplay
    }), comparisonMetric != null && !activeValueExists && /*#__PURE__*/jsx("div", {
      className: styles.ComparisonMetric,
      children: /*#__PURE__*/jsx(ComparisonMetric, {
        metric: comparisonMetric.metric,
        trend: comparisonMetric.trend,
        accessibilityLabel: comparisonMetric.accessibilityLabel
      })
    })]
  });
  return /*#__PURE__*/jsx("div", {
    className: styles.ContentWrapper,
    children: innerContent
  });
}

export { InnerValue };
