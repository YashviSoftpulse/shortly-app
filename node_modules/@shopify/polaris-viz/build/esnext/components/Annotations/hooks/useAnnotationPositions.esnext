import { useMemo, useEffect } from 'react';
import { useChartContext, estimateStringWidth, getValueFromXScale, clamp } from '@shopify/polaris-viz-core';
import { COLLAPSED_ANNOTATIONS_COUNT } from '../../../constants.esnext';
import { PILL_PADDING, PILL_X_MIN, PILL_HEIGHT, PILL_ROW_GAP } from '../constants.esnext';
import { checkForHorizontalSpace } from '../utilities/checkForHorizontalSpace.esnext';
import { useShowMoreAnnotationsButton } from './useShowMoreAnnotationsButton.esnext';

function useAnnotationPositions({
  annotations,
  axisLabelWidth,
  dataIndexes,
  drawableWidth,
  isShowingAllAnnotations,
  onHeightChange,
  xScale
}) {
  const {
    characterWidths
  } = useChartContext();
  const textWidths = useMemo(() => {
    return annotations.map(annotation => {
      return estimateStringWidth(annotation.label, characterWidths);
    });
  }, [annotations, characterWidths]);
  const {
    positions,
    hiddenAnnotationsCount
  } = useMemo(() => {
    let positions = annotations.map((annotation, dataIndex) => {
      const xPosition = getValueFromXScale(dataIndexes[annotation.startKey], xScale);
      const textWidth = textWidths[dataIndex];
      const width = clamp({
        amount: textWidth + PILL_PADDING * 2,
        min: textWidth + PILL_PADDING * 2,
        max: drawableWidth
      });
      const rawX = clamp({
        amount: xPosition,
        min: xPosition,
        max: xPosition + axisLabelWidth
      });
      let x = clamp({
        amount: rawX - width / 2,
        min: PILL_X_MIN,
        max: Infinity
      });
      const right = x + width;

      if (right > drawableWidth) {
        x -= right - drawableWidth;
      }

      return {
        index: dataIndex,
        line: {
          x: rawX,
          y: 0
        },
        row: 1,
        width,
        x,
        y: 0
      };
    });
    positions = positions.sort((one, two) => one.x - two.x);
    checkForHorizontalSpace({
      positions,
      totalRows: 1
    });
    positions.forEach(current => {
      const row = current.row - 1;
      current.y = row * PILL_HEIGHT + row * PILL_ROW_GAP;
    });
    const hiddenAnnotationsCount = positions.filter(({
      row
    }) => row >= COLLAPSED_ANNOTATIONS_COUNT).length;
    return {
      positions,
      hiddenAnnotationsCount
    };
  }, [annotations, dataIndexes, textWidths, axisLabelWidth, xScale, drawableWidth]);
  const {
    totalRowHeight,
    rowCount
  } = useShowMoreAnnotationsButton({
    isShowingAllAnnotations,
    positions
  });
  useEffect(() => {
    onHeightChange(totalRowHeight);
  }, [onHeightChange, totalRowHeight]);
  return {
    positions,
    rowCount,
    hiddenAnnotationsCount: isShowingAllAnnotations ? 0 : hiddenAnnotationsCount
  };
}

export { useAnnotationPositions };
