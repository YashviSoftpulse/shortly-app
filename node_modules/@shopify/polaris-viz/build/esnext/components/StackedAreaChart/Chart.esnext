import { useState, useMemo } from 'react';
import { line } from 'd3-shape';
import { useTheme, useThemeSeriesColors, LINE_HEIGHT, useUniqueId, useYScale, useChartPositions, curveStepRounded, DataType, ChartMargin, COLOR_VISION_SINGLE_ITEM, clamp } from '@shopify/polaris-viz-core';
import { ChartElements } from '../ChartElements/index.esnext';
import { ANNOTATIONS_LABELS_OFFSET } from '../../constants.esnext';
import { useStackedChartTooltipContent } from './hooks/useStackedChartTooltipContent.esnext';
import { yAxisMinMax } from './utilities/yAxisMinMax.esnext';
import { getAlteredStackedAreaChartPosition } from './utilities/getAlteredStackedAreaChartPosition.esnext';
import styles from './Chart.scss.esnext';
import { jsxs, jsx } from 'react/jsx-runtime';
import { TooltipHorizontalOffset, TooltipVerticalOffset } from '../TooltipWrapper/types.esnext';
import { useColorVisionEvents } from '../../hooks/ColorVisionA11y/useColorVisionEvents.esnext';
import { useLegend } from '../LegendContainer/hooks/useLegend.esnext';
import { useStackedData } from './hooks/useStackedData.esnext';
import { useLinearLabelsAndDimensions } from '../../hooks/useLinearLabelsAndDimensions.esnext';
import { useLinearChartAnimations } from '../../hooks/useLinearChartAnimations.esnext';
import { checkAvailableAnnotations } from '../Annotations/utilities/checkAvailableAnnotations.esnext';
import { XAxis } from '../XAxis/XAxis.esnext';
import { HorizontalGridLines } from '../HorizontalGridLines/HorizontalGridLines.esnext';
import { YAxis } from '../YAxis/YAxis.esnext';
import { VisuallyHiddenRows } from '../VisuallyHiddenRows/VisuallyHiddenRows.esnext';
import { StackedAreas } from './components/StackedAreas/StackedAreas.esnext';
import { Crosshair } from '../Crosshair/Crosshair.esnext';
import { Points } from './components/Points/Points.esnext';
import { Annotations } from '../Annotations/Annotations.esnext';
import { YAxisAnnotations } from '../Annotations/YAxisAnnotations.esnext';
import { TooltipWrapper } from '../TooltipWrapper/TooltipWrapper.esnext';
import { LegendContainer } from '../LegendContainer/LegendContainer.esnext';
import { eventPointNative } from '../../utilities/eventPoint.esnext';
import { TOOLTIP_POSITION_DEFAULT_RETURN } from '../TooltipWrapper/constants.esnext';

const TOOLTIP_POSITION = {
  horizontal: TooltipHorizontalOffset.Left,
  vertical: TooltipVerticalOffset.Center
};
function Chart({
  annotationsLookupTable,
  xAxisOptions,
  data,
  dimensions,
  renderLegendContent,
  renderTooltipContent,
  showLegend,
  theme,
  yAxisOptions,
  renderHiddenLegendLabel,
  seriesNameFormatter
}) {
  var _dimensions$x, _dimensions$y;

  useColorVisionEvents({
    enabled: data.length > 1
  });
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(data, selectedTheme);
  const [activePointIndex, setActivePointIndex] = useState(null);
  const [svgRef, setSvgRef] = useState(null);
  const [xAxisHeight, setXAxisHeight] = useState(LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = useState(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    colors: seriesColors,
    data: [{
      shape: 'Line',
      series: data
    }],
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  const tooltipId = useUniqueId('stackedAreaChart');
  const hideXAxis = xAxisOptions.hide || selectedTheme.xAxis.hide;
  const {
    stackedValues,
    longestSeriesIndex,
    longestSeriesLength,
    labels: formattedLabels
  } = useStackedData({
    data,
    xAxisOptions
  });
  const zeroLineData = data.map(series => ({ ...series,
    data: series.data.map(point => ({ ...point,
      value: 0
    }))
  }));
  const {
    stackedValues: zeroLineValues
  } = useStackedData({
    data: zeroLineData,
    xAxisOptions
  });
  const {
    minY,
    maxY
  } = yAxisMinMax(stackedValues);
  const yScaleOptions = {
    formatYAxisLabel: yAxisOptions.labelFormatter,
    integersOnly: yAxisOptions.integersOnly,
    maxYOverride: yAxisOptions.maxYOverride,
    max: maxY,
    min: minY
  };
  const {
    yAxisLabelWidth
  } = useYScale({ ...yScaleOptions,
    drawableHeight: height,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const {
    drawableWidth,
    drawableHeight,
    chartXPosition,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: yAxisLabelWidth
  });
  const {
    xAxisDetails,
    xScale,
    labels
  } = useLinearLabelsAndDimensions({
    data,
    drawableWidth,
    hideXAxis,
    labels: formattedLabels,
    longestSeriesLength
  });
  const {
    ticks,
    yScale
  } = useYScale({ ...yScaleOptions,
    drawableHeight,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const getTooltipMarkup = useStackedChartTooltipContent({
    data,
    renderTooltipContent,
    seriesColors,
    seriesNameFormatter
  });
  const lineGenerator = useMemo(() => {
    const generator = line().x((_, index) => xScale == null ? 0 : xScale(index)).y(({
      value
    }) => yScale(value !== null && value !== void 0 ? value : 0)).defined(({
      value
    }) => value != null);

    if (selectedTheme.line.hasSpline) {
      generator.curve(curveStepRounded);
    }

    return generator;
  }, [xScale, yScale, selectedTheme.line.hasSpline]);
  const seriesForAnimation = useMemo(() => {
    return stackedValues.map(value => {
      return {
        name: '',
        data: value.map(val => {
          return {
            key: '',
            value: val[1]
          };
        })
      };
    });
  }, [stackedValues]);
  const {
    animatedCoordinates
  } = useLinearChartAnimations({
    data: seriesForAnimation,
    lineGenerator,
    activeIndex: activePointIndex
  });

  const getXPosition = ({
    isCrosshair,
    index
  }) => {
    if (xScale == null) {
      return 0;
    }

    const offset = isCrosshair ? selectedTheme.crossHair.width / 2 : 0;

    if (index != null && animatedCoordinates != null && animatedCoordinates[index] != null && animatedCoordinates[index]) {
      return animatedCoordinates[index].to(coord => coord.x - offset);
    }

    return xScale(activePointIndex == null ? 0 : activePointIndex) - offset;
  };

  if (xScale == null || drawableWidth == null || yAxisLabelWidth == null) {
    return null;
  }

  const chartBounds = {
    width,
    height,
    x: (_dimensions$x = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x !== void 0 ? _dimensions$x : chartXPosition,
    y: (_dimensions$y = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y !== void 0 ? _dimensions$y : chartYPosition
  };
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  const halfXAxisLabelWidth = xAxisDetails.labelWidth / 2;
  return /*#__PURE__*/jsxs(ChartElements.Div, {
    height: height,
    width: width,
    children: [/*#__PURE__*/jsxs(ChartElements.Svg, {
      width: width,
      setRef: setSvgRef,
      role: "table",
      height: height,
      children: [hideXAxis ? null : /*#__PURE__*/jsx(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        isLinearChart: true,
        labels: labels,
        labelWidth: xAxisDetails.labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes: xAxisDetails.reducedLabelIndexes,
        x: xAxisBounds.x - halfXAxisLabelWidth,
        xScale: xScale,
        y: xAxisBounds.y
      }), selectedTheme.grid.showHorizontalLines ? /*#__PURE__*/jsx(HorizontalGridLines, {
        ticks: ticks,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, /*#__PURE__*/jsx(YAxis, {
        ticks: ticks,
        width: yAxisLabelWidth,
        textAlign: "right",
        x: yAxisBounds.x,
        y: yAxisBounds.y
      }), /*#__PURE__*/jsx(VisuallyHiddenRows, {
        data: data,
        formatYAxisLabel: yAxisOptions.labelFormatter,
        xAxisLabels: labels
      }), /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        className: styles.Group,
        "area-hidden": "true",
        children: /*#__PURE__*/jsx(StackedAreas, {
          stackedValues: stackedValues,
          zeroLineValues: zeroLineValues,
          xScale: xScale,
          yScale: yScale,
          colors: seriesColors,
          theme: theme
        })
      }), activePointIndex == null ? null : /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: /*#__PURE__*/jsx(Crosshair, {
          x: getXPosition({
            isCrosshair: true,
            index: 0
          }),
          height: drawableHeight,
          theme: theme
        })
      }), /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: /*#__PURE__*/jsx(Points, {
          activePointIndex: activePointIndex,
          animatedCoordinates: animatedCoordinates,
          colors: seriesColors,
          getXPosition: getXPosition,
          stackedValues: stackedValues,
          tooltipId: tooltipId,
          xScale: xScale,
          yScale: yScale
        })
      }), hasXAxisAnnotations && /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: /*#__PURE__*/jsx(Annotations, {
          annotationsLookupTable: annotationsLookupTable,
          axisLabelWidth: xAxisDetails.labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth: drawableWidth,
          labels: labels,
          onHeightChange: setAnnotationsHeight,
          xScale: xScale
        })
      }), hasYAxisAnnotations && /*#__PURE__*/jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        tabIndex: -1,
        children: /*#__PURE__*/jsx(YAxisAnnotations, {
          annotationsLookupTable: annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth: drawableWidth,
          ticks: ticks,
          yScale: yScale
        })
      })]
    }), longestSeriesLength !== -1 && /*#__PURE__*/jsx(TooltipWrapper, {
      alwaysUpdatePosition: true,
      chartBounds: chartBounds,
      focusElementDataType: DataType.Point,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      getAlteredPosition: getAlteredStackedAreaChartPosition,
      id: tooltipId,
      margin: ChartMargin,
      onIndexChange: index => setActivePointIndex(index),
      parentRef: svgRef,
      usePortal: true
    }), showLegend && /*#__PURE__*/jsx(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent: renderLegendContent,
      enableHideOverflow: true,
      dimensions: chartBounds,
      renderHiddenLegendLabel: renderHiddenLegendLabel
    })]
  });

  function getTooltipPosition({
    event,
    index,
    eventType
  }) {
    if (eventType === 'mouse' && event) {
      const point = eventPointNative(event);

      if (point == null || xScale == null) {
        return TOOLTIP_POSITION_DEFAULT_RETURN;
      }

      const {
        svgX
      } = point;
      const closestIndex = Math.round(xScale.invert(svgX - chartXPosition));
      const activeIndex = clamp({
        amount: closestIndex,
        min: 0,
        max: data[longestSeriesIndex].data.length - 1
      });
      return {
        x: event.pageX,
        y: event.pageY,
        position: TOOLTIP_POSITION,
        activeIndex
      };
    } else if (index != null) {
      var _xScale, _dimensions$x2, _dimensions$y2;

      const activeIndex = index !== null && index !== void 0 ? index : 0;
      const x = (_xScale = xScale === null || xScale === void 0 ? void 0 : xScale(activeIndex)) !== null && _xScale !== void 0 ? _xScale : 0;
      return {
        x: x + ((_dimensions$x2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x2 !== void 0 ? _dimensions$x2 : 0),
        y: (_dimensions$y2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y2 !== void 0 ? _dimensions$y2 : 0,
        position: TOOLTIP_POSITION,
        activeIndex: index
      };
    }

    return TOOLTIP_POSITION_DEFAULT_RETURN;
  }
}

export { Chart };
