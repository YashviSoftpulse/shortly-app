import { useState, useMemo } from 'react';
import { uniqueId, isLargeDataSet, useTheme, ChartContext } from '@shopify/polaris-viz-core';
import { getChartId } from '../../utilities/getChartId.esnext';
import characterWidths from '../../data/character-widths.json.esnext';
import characterWidthOffsets from '../../data/character-width-offsets.json.esnext';
import styles from './ChartContainer.scss.esnext';
import { jsx } from 'react/jsx-runtime';
import { usePrefersReducedMotion } from '../../hooks/usePrefersReducedMotion.esnext';
import { ChartDimensions } from './components/ChartDimensions/ChartDimensions.esnext';

const ChartContainer = props => {
  var _props$id;

  const id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : uniqueId('chart');
  const {
    prefersReducedMotion
  } = usePrefersReducedMotion();
  const [isPrinting, setIsPrinting] = useState(false);
  const dataTooBigToAnimate = useMemo(() => {
    return isLargeDataSet(props.data, props.type);
  }, [props.data, props.type]);
  const value = useMemo(() => {
    const shouldAnimate = props.isAnimated && !prefersReducedMotion && !dataTooBigToAnimate;
    const printFriendlyTheme = isPrinting ? 'Print' : props.theme;
    return {
      shouldAnimate,
      id,
      characterWidths,
      characterWidthOffsets,
      theme: printFriendlyTheme,
      isPerformanceImpacted: dataTooBigToAnimate
    };
  }, [id, isPrinting, prefersReducedMotion, props.isAnimated, props.theme, dataTooBigToAnimate]);
  const {
    chartContainer,
    grid
  } = useTheme(value.theme); // If there is no vertical overflow and a custom padding is not defined, add padding so that the top y-axis label is not cut off

  const padding = !grid.verticalOverflow && chartContainer.padding == null ? '3px 0 0 0' : chartContainer.padding;
  return /*#__PURE__*/jsx(ChartContext.Provider, {
    value: value,
    children: /*#__PURE__*/jsx("div", {
      className: styles.ChartContainer,
      style: {
        background: chartContainer.backgroundColor,
        padding,
        borderRadius: chartContainer.borderRadius
      },
      id: getChartId(value.id),
      children: /*#__PURE__*/jsx(ChartDimensions, {
        data: props.data,
        onError: props.onError,
        onIsPrintingChange: setIsPrinting,
        skeletonType: props.skeletonType,
        sparkChart: props.sparkChart,
        children: props.children
      })
    })
  });
};

export { ChartContainer };
