import { useState, useCallback, useLayoutEffect, cloneElement } from 'react';
import { useTheme, usePolarisVizContext, usePrevious } from '@shopify/polaris-viz-core';
import { useDebouncedCallback } from 'use-debounce';
import styles from './ChartDimensions.scss.esnext';
import { jsx } from 'react/jsx-runtime';
import { useResizeObserver } from '../../../../hooks/useResizeObserver.esnext';
import { usePrintResizing } from '../../../../hooks/usePrintResizing.esnext';
import { ChartErrorBoundary } from '../../../ChartErrorBoundary/ChartErrorBoundary.esnext';

function ChartDimensions({
  children,
  data,
  onIsPrintingChange,
  sparkChart = false,
  skeletonType = 'Default',
  onError
}) {
  const {
    chartContainer
  } = useTheme();
  const {
    onError: onErrorProvider
  } = usePolarisVizContext();
  const [chartDimensions, setChartDimensions] = useState(null);
  const {
    ref,
    setRef,
    entry
  } = useResizeObserver();
  const previousEntry = usePrevious(entry);
  usePrintResizing({
    ref,
    setChartDimensions,
    onIsPrintingChange
  });
  const updateDimensions = useCallback(() => {
    if ((previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.width) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.width) && (previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.height) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.height) || entry == null) {
      return;
    }

    const {
      width,
      height
    } = entry.contentRect;
    const {
      x,
      y
    } = entry.target.getBoundingClientRect();
    setChartDimensions({
      width,
      height,
      x,
      y: y + window.scrollY
    });
  }, [entry, previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect]);
  const debouncedUpdateDimensions = useDebouncedCallback(() => {
    updateDimensions();
  }, 100);
  useLayoutEffect(() => {
    updateDimensions();

    if (chartDimensions === null) {
      setChartDimensions({
        width: 0,
        height: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight,
        x: 0,
        y: 0
      });
    }

    const isServer = typeof window === 'undefined';

    if (!isServer) {
      window.addEventListener('resize', debouncedUpdateDimensions);
    }

    return () => {
      if (!isServer) {
        window.removeEventListener('resize', debouncedUpdateDimensions);
      }
    };
  }, [entry, updateDimensions, debouncedUpdateDimensions, chartDimensions, chartContainer.minHeight, sparkChart, chartContainer.sparkChartMinHeight]);
  return /*#__PURE__*/jsx("div", {
    className: styles.ChartDimensions,
    ref: setRef,
    style: {
      minHeight: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight
    },
    children: !hasValidDimensions(chartDimensions) ? null : /*#__PURE__*/jsx(ChartErrorBoundary, {
      type: skeletonType !== null && skeletonType !== void 0 ? skeletonType : 'Default',
      dimensions: chartDimensions,
      data: data,
      onError: onError !== null && onError !== void 0 ? onError : onErrorProvider,
      children: /*#__PURE__*/jsx("div", {
        className: styles.Chart,
        style: {
          height: chartDimensions.height,
          width: chartDimensions.width
        },
        children: /*#__PURE__*/cloneElement(children, {
          dimensions: chartDimensions
        })
      })
    })
  });
}

function hasValidDimensions(chartDimensions) {
  if (chartDimensions == null) {
    return false;
  }

  return chartDimensions.width > 0 && chartDimensions.height > 0;
}

export { ChartDimensions };
