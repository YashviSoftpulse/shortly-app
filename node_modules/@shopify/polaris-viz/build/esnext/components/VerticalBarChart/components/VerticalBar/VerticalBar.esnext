import { memo, useMemo, useCallback, Fragment } from 'react';
import { useSpring, animated } from '@react-spring/web';
import { useTheme, getRoundedRectPath, DataType } from '@shopify/polaris-viz-core';
import { useBarSpringConfig } from '../../../../hooks/useBarSpringConfig.esnext';
import styles from './VerticalBar.scss.esnext';
import { jsx } from 'react/jsx-runtime';
import { ZeroValueLine } from '../../../shared/ZeroValueLine/ZeroValueLine.esnext';

const VerticalBar = /*#__PURE__*/memo(function Bar({
  animationDelay = 0,
  ariaLabel,
  color,
  height,
  index,
  rawValue,
  role,
  width,
  x,
  zeroPosition,
  areAllNegative
}) {
  const selectedTheme = useTheme();
  const borderRadius = selectedTheme.bar.borderRadius;
  const treatAsNegative = rawValue < 0;
  const zeroValue = rawValue === 0;
  const yPosition = useMemo(() => {
    return treatAsNegative ? zeroPosition + height : zeroPosition - height;
  }, [height, treatAsNegative, zeroPosition]);
  const style = useMemo(() => {
    if (yPosition == null) return;
    return {
      transform: `translateX(${treatAsNegative ? x + width : x}px)`
    };
  }, [yPosition, treatAsNegative, x, width]);
  const getPath = useCallback((height = 0, width = 0) => {
    return getRoundedRectPath({
      height,
      width,
      borderRadius: `${borderRadius} ${borderRadius} 0 0`
    });
  }, [borderRadius]);
  const springConfig = useBarSpringConfig({
    animationDelay
  });
  const rotate = `${treatAsNegative ? 'rotate(180)' : 'rotate(0)'}`;
  const {
    pathD,
    transform
  } = useSpring({
    from: {
      pathD: getPath(1, width),
      transform: `translate(0 ${zeroPosition}) ${rotate}`
    },
    to: {
      pathD: getPath(height, width),
      transform: `translate(0 ${yPosition}) ${rotate}`
    },
    ...springConfig
  });
  return /*#__PURE__*/jsx(Fragment, {
    children: !zeroValue ? /*#__PURE__*/jsx("g", {
      "aria-hidden": "true",
      style: style,
      children: /*#__PURE__*/jsx(animated.path, {
        "data-id": `bar-${index}`,
        "data-index": index,
        "data-type": DataType.Bar,
        d: pathD,
        fill: color,
        "aria-label": ariaLabel,
        role: role,
        className: styles.Bar,
        "aria-hidden": "true",
        transform: transform
      })
    }) : /*#__PURE__*/jsx(ZeroValueLine, {
      x: x + width / 2,
      y: yPosition,
      direction: "vertical",
      areAllNegative: areAllNegative
    })
  });
});

export { VerticalBar };
