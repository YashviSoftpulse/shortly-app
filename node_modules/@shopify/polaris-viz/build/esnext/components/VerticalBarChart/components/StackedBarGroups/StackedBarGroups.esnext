import { useMemo, Fragment } from 'react';
import { BAR_SPACING, getColorVisionEventAttrs, COLOR_VISION_GROUP_ITEM, getColorVisionStylesForActiveIndex, DataType } from '@shopify/polaris-viz-core';
import { getLoadAnimationDelay } from '../../../../utilities/getLoadAnimationDelay.esnext';
import styles from './StackedBarGroups.scss.esnext';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useStackedGapsForVerticalChart } from '../../hooks/useStackedGapsForVerticalChart.esnext';
import { formatAriaLabel } from '../../utilities/formatAriaLabel.esnext';
import { Stack } from './components/Stack/Stack.esnext';

function StackedBarGroups({
  accessibilityData,
  activeBarGroup,
  drawableHeight,
  gapWidth,
  id,
  labels,
  stackedValues,
  xScale,
  yScale
}) {
  const width = xScale.bandwidth() - BAR_SPACING;
  const formattedStackedValues = useMemo(() => {
    return labels.map((_, labelIndex) => {
      return stackedValues.map(data => {
        return data[labelIndex];
      });
    });
  }, [labels, stackedValues]);
  const gaps = useStackedGapsForVerticalChart({
    stackedValues,
    labels
  });
  return /*#__PURE__*/jsx(Fragment, {
    children: formattedStackedValues.map((item, groupIndex) => {
      var _xScale;

      const x = (_xScale = xScale(groupIndex.toString())) !== null && _xScale !== void 0 ? _xScale : 0;
      const groupAriaLabel = formatAriaLabel(accessibilityData[groupIndex]);
      const animationDelay = getLoadAnimationDelay(groupIndex, formattedStackedValues.length);
      return /*#__PURE__*/jsxs("g", { ...getColorVisionEventAttrs({
          type: COLOR_VISION_GROUP_ITEM,
          index: groupIndex
        }),
        className: styles.Group,
        style: getColorVisionStylesForActiveIndex({
          activeIndex: activeBarGroup,
          index: groupIndex
        }),
        "aria-label": groupAriaLabel,
        role: "list",
        "data-type": DataType.BarGroup,
        "data-index": groupIndex,
        "aria-hidden": "false",
        children: [/*#__PURE__*/jsx("rect", {
          height: drawableHeight,
          fill: "transparent",
          x: x - gapWidth / 2,
          width: xScale.bandwidth() + gapWidth,
          "aria-hidden": "true"
        }), /*#__PURE__*/jsx(Stack, {
          activeBarGroup: activeBarGroup,
          animationDelay: animationDelay,
          data: item,
          gaps: gaps,
          groupIndex: groupIndex,
          id: id,
          width: width,
          x: x,
          yScale: yScale
        })]
      }, groupIndex);
    })
  });
}

export { StackedBarGroups };
