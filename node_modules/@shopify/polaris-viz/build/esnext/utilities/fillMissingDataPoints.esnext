function fillMissingDataPoints(dataSeries, isLinearData) {
  if (isLinearData) {
    const areAnyComparison = dataSeries.some(({
      isComparison
    }) => isComparison === true);

    if (areAnyComparison) {
      return dataSeries;
    }
  }

  const allKeys = new Set();
  const dataValueMap = {};

  for (const [index, {
    data
  }] of dataSeries.entries()) {
    for (const {
      key,
      value
    } of data) {
      allKeys.add(`${key}`);

      if (dataValueMap[index] == null) {
        dataValueMap[index] = {};
      }

      dataValueMap[index][key] = value;
    }
  }

  return dataSeries.map((series, index) => {
    const newData = [...allKeys].map(key => {
      var _dataValue$key;

      const dataValue = dataValueMap[index];
      const fillValue = series.fillValue !== undefined ? series.fillValue : null;
      return {
        key,
        value: dataValue == null ? null : (_dataValue$key = dataValue[key]) !== null && _dataValue$key !== void 0 ? _dataValue$key : fillValue
      };
    });
    return { ...series,
      data: newData
    };
  });
}

export { fillMissingDataPoints };
