import { DEFAULT_CHART_PROPS, DEFAULT_THEME_NAME } from '@shopify/polaris-viz-core';
import { Fragment } from 'react';
import { jsx, jsxs } from 'react/jsx-runtime';
import { LineChart } from '../LineChart/LineChart.js';
import { CustomLegend } from './components/CustomLegend/CustomLegend.js';
import { MissingDataArea } from './components/MissingDataArea/MissingDataArea.js';
import { RelatedAreas } from './components/RelatedAreas/RelatedAreas.js';

function LineChartRelational(props) {
  const {
    annotations = [],
    data,
    errorText,
    emptyStateText,
    id,
    isAnimated,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    skipLinkText,
    state,
    theme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = { ...DEFAULT_CHART_PROPS,
    ...props
  };
  const dataWithHiddenRelational = data.map(series => {
    var _series$metadata;

    return { ...series,
      metadata: { ...series.metadata,
        isVisuallyHidden: ((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) != null
      }
    };
  });
  const relatedAreasKey = buildRelatedAreasKey(dataWithHiddenRelational);
  return /*#__PURE__*/jsx(LineChart, {
    annotations: annotations,
    data: dataWithHiddenRelational,
    emptyStateText: emptyStateText,
    errorText: errorText,
    id: id,
    isAnimated: isAnimated,
    renderLegendContent: ({
      getColorVisionStyles,
      getColorVisionEventAttrs
    }) => {
      return /*#__PURE__*/jsx(CustomLegend, {
        getColorVisionStyles: getColorVisionStyles,
        getColorVisionEventAttrs: getColorVisionEventAttrs,
        data: data,
        theme: theme !== null && theme !== void 0 ? theme : DEFAULT_THEME_NAME,
        seriesNameFormatter: seriesNameFormatter
      });
    },
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    skipLinkText: skipLinkText,
    slots: {
      chart: props => {
        return /*#__PURE__*/jsxs(Fragment, {
          children: [/*#__PURE__*/jsx(MissingDataArea, { ...props,
            data: data
          }), /*#__PURE__*/jsx(RelatedAreas, {
            data: data // remount the area otherwise it can't animate
            // between areas that are differently sized
            ,
            ...props
          }, relatedAreasKey)]
        });
      }
    },
    state: state,
    theme: theme,
    tooltipOptions: tooltipOptions,
    xAxisOptions: xAxisOptions,
    yAxisOptions: yAxisOptions
  });
}

function buildRelatedAreasKey(data) {
  const relatedSeries = data.find(series => {
    var _series$metadata2;

    return (series === null || series === void 0 ? void 0 : (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) != null;
  });

  if (relatedSeries == null) {
    return '';
  }

  return relatedSeries.data.map(({
    value
  }) => value === null || value === void 0 ? void 0 : value.toString()).join(':');
}

export { LineChartRelational };
