import { useSpring, animated } from '@react-spring/web';
import { useChartContext, getColorVisionStylesForActiveIndex, getColorVisionEventAttrs, COLOR_VISION_SINGLE_ITEM } from '@shopify/polaris-viz-core';
import { getCSSBackgroundFromColor } from '../../../../utilities/getCSSBackgroundFromColor.js';
import { useBarSpringConfig } from '../../../../hooks/useBarSpringConfig.js';
import styles from './BarSegment.scss.js';
import { jsx } from 'react/jsx-runtime';
import { classNames } from '../../../../utilities/classnames.js';

const DELAY = 150;
function BarSegment({
  activeIndex,
  color,
  index,
  scale,
  size,
  direction,
  roundedCorners
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const scaleNeedsRounding = scale > 0 && scale < 1.5;
  const safeScale = scaleNeedsRounding ? 1.5 : scale;
  const isMaxScale = scale >= 100;
  const delay = index * DELAY;
  const angle = direction === 'horizontal' ? 90 : 180;
  const dimension = direction === 'horizontal' ? 'width' : 'height';
  const backgroundColor = getCSSBackgroundFromColor(color, angle);
  const springConfig = useBarSpringConfig({
    animationDelay: delay
  });
  const spring = useSpring({
    from: {
      [dimension]: `0%`
    },
    to: {
      [dimension]: `${safeScale}%`
    },
    ...springConfig
  });
  return /*#__PURE__*/jsx(animated.div, {
    className: classNames(styles.Segment, roundedCorners && !isMaxScale && styles[`${direction}-RoundedCorners`], roundedCorners && isMaxScale && styles.RoundedCorners, styles[`${direction}-${size}`]),
    style: {
      [dimension]: shouldAnimate ? spring[dimension] : `${safeScale}%`,
      background: backgroundColor,
      ...getColorVisionStylesForActiveIndex({
        activeIndex,
        index
      })
    },
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index
    }),
    tabIndex: 0
  });
}

export { BarSegment };
