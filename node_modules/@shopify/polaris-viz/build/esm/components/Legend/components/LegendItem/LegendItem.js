import { useTheme, getColorVisionEventAttrs, getColorVisionStylesForActiveIndex } from '@shopify/polaris-viz-core';
import { useRef, useState, useEffect } from 'react';
import { LEGEND_ITEM_LEFT_PADDING, LEGEND_ITEM_RIGHT_PADDING, LEGEND_ITEM_GAP } from '../../constants.js';
import { PREVIEW_ICON_SIZE } from '../../../../constants.js';
import style from './LegendItem.scss.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { SeriesIcon } from '../../../shared/SeriesIcon/SeriesIcon.js';

const MINIMUM_LEGEND_ITEM_WIDTH = 100;
function LegendItem({
  activeIndex = -1,
  color,
  colorVisionType,
  index,
  isComparison,
  name,
  renderSeriesIcon,
  shape,
  theme,
  value,
  onDimensionChange,
  backgroundColor,
  truncate = false,
  showLegendValues = false,
  seriesNameFormatter = value => `${value}`
}) {
  const selectedTheme = useTheme(theme);
  const ref = useRef(null);
  const [width, setWidth] = useState(0);
  const renderLegendValues = showLegendValues && value != null;
  useEffect(() => {
    if (onDimensionChange && ref.current != null) {
      const {
        width,
        height
      } = ref.current.getBoundingClientRect();
      setWidth(width);
      onDimensionChange(index, {
        width: Math.min(MINIMUM_LEGEND_ITEM_WIDTH, Math.round(width)),
        height
      });
    }
  }, [onDimensionChange, ref, index]);
  const colorBlindAttrs = colorVisionType == null ? {} : getColorVisionEventAttrs({
    type: colorVisionType,
    index
  });
  const background = backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : selectedTheme.legend.backgroundColor;
  return /*#__PURE__*/jsxs("button", { ...colorBlindAttrs,
    style: {
      background: background !== null && background !== void 0 ? background : 'none',
      ...getColorVisionStylesForActiveIndex({
        activeIndex,
        index
      }),
      paddingLeft: background ? LEGEND_ITEM_LEFT_PADDING : 0,
      paddingRight: background ? LEGEND_ITEM_RIGHT_PADDING : LEGEND_ITEM_LEFT_PADDING,
      gap: LEGEND_ITEM_GAP,
      // if there is overflow, add a max width and truncate with ellipsis
      maxWidth: truncate ? MINIMUM_LEGEND_ITEM_WIDTH : '100%',
      // if the item width is already less than MINIMUM_LEGEND_ITEM_WIDTH, don't set a minWidth
      minWidth: width < MINIMUM_LEGEND_ITEM_WIDTH ? undefined : MINIMUM_LEGEND_ITEM_WIDTH
    },
    className: style.Legend,
    ref: ref,
    title: name,
    children: [renderSeriesIcon == null ? /*#__PURE__*/jsx("span", {
      style: {
        height: PREVIEW_ICON_SIZE,
        width: PREVIEW_ICON_SIZE
      },
      className: style.IconContainer,
      children: /*#__PURE__*/jsx(SeriesIcon, {
        shape: shape,
        color: color,
        isComparison: isComparison
      })
    }) : renderSeriesIcon(), /*#__PURE__*/jsxs("span", {
      className: style.TextContainer,
      children: [/*#__PURE__*/jsx("span", {
        className: style.Text,
        style: {
          color: selectedTheme.legend.labelColor
        },
        children: seriesNameFormatter(name)
      }), renderLegendValues ? /*#__PURE__*/jsx("span", {
        className: style.Text,
        style: {
          color: selectedTheme.legend.valueColor
        },
        children: value
      }) : null]
    })]
  });
}

export { LegendItem, MINIMUM_LEGEND_ITEM_WIDTH };
