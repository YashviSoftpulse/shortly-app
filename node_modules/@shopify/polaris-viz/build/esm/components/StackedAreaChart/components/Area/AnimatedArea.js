import { useRef } from 'react';
import { useSpring, animated } from '@react-spring/web';
import { useChartContext, useSpringConfig, AREAS_TRANSITION_CONFIG, AREAS_LOAD_ANIMATION_CONFIG, getGradientFromColor, getColorVisionEventAttrs, COLOR_VISION_SINGLE_ITEM, LinearGradientWithStops, getColorVisionStylesForActiveIndex } from '@shopify/polaris-viz-core';
import styles from './Area.scss.js';
import { jsxs, jsx } from 'react/jsx-runtime';

function AnimatedArea({
  activeLineIndex,
  animationIndex,
  areaGenerator,
  colors,
  data,
  duration,
  id,
  index,
  lineGenerator,
  selectedTheme,
  zeroLineValues
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const delay = animationIndex * (duration / 2);
  const mounted = useRef(false);
  const springConfig = useSpringConfig({
    shouldAnimate,
    animationDelay: shouldAnimate ? delay : 0,
    mountedSpringConfig: AREAS_TRANSITION_CONFIG,
    unmountedSpringConfig: AREAS_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedAreaShape,
    animatedLineShape,
    opacity
  } = useSpring({
    from: {
      opacity: 0,
      animatedAreaShape: areaGenerator(mounted.current ? data : zeroLineValues),
      animatedLineShape: lineGenerator(mounted.current ? data : zeroLineValues)
    },
    to: {
      opacity: 0.25,
      animatedAreaShape: areaGenerator(data),
      animatedLineShape: lineGenerator(data)
    },
    ...springConfig
  });

  if (animatedAreaShape == null || animatedLineShape == null) {
    return null;
  }

  const gradient = getGradientFromColor(colors[index]);
  return /*#__PURE__*/jsxs("g", { ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index
    }),
    tabIndex: -1,
    children: [/*#__PURE__*/jsx("defs", {
      children: /*#__PURE__*/jsx(LinearGradientWithStops, {
        id: `area-${id}-${index}`,
        gradient: gradient,
        gradientUnits: "userSpaceOnUse",
        y1: "100%",
        y2: "0%"
      })
    }), /*#__PURE__*/jsxs("g", {
      style: getColorVisionStylesForActiveIndex({
        activeIndex: activeLineIndex,
        index
      }),
      "aria-hidden": "true",
      tabIndex: -1,
      className: styles.Group,
      children: [/*#__PURE__*/jsx(animated.path, {
        d: animatedLineShape,
        fill: "none",
        stroke: `url(#area-${id}-${index})`,
        strokeWidth: selectedTheme.line.width
      }, `line-${index}`), /*#__PURE__*/jsx(animated.path, {
        style: {
          opacity
        },
        d: animatedAreaShape,
        fill: `url(#area-${id}-${index})`
      }, index)]
    })]
  });
}

export { AnimatedArea };
