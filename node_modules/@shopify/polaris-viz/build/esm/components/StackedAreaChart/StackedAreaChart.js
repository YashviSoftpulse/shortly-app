import { useRef, Fragment } from 'react';
import { usePolarisVizContext, DEFAULT_CHART_PROPS, uniqueId, ChartState } from '@shopify/polaris-viz-core';
import { getTooltipContentRenderer } from '../../utilities/getTooltipContentRenderer.js';
import { fillMissingDataPoints } from '../../utilities/fillMissingDataPoints.js';
import { Chart } from './Chart.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { getXAxisOptionsWithDefaults, getYAxisOptionsWithDefaults } from '../../utilities/getAxisOptions.js';
import { normalizeData } from '../../utilities/normalizeData.js';
import { SkipLink } from '../SkipLink/SkipLink.js';
import { ChartContainer } from '../ChartContainer/ChartContainer.js';
import { ChartSkeleton } from '../ChartSkeleton/ChartSkeleton.js';

function StackedAreaChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    xAxisOptions,
    yAxisOptions,
    data: dataSeries,
    state,
    errorText,
    onError,
    tooltipOptions,
    id,
    isAnimated,
    renderLegendContent,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    skipLinkText,
    theme = defaultTheme,
    renderHiddenLegendLabel
  } = { ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints(dataSeries, true);
  const skipLinkAnchorId = useRef(uniqueId('stackedAreaChart'));
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });

  if (data.length === 0) {
    return null;
  }

  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData(annotations, 'startKey');
  return /*#__PURE__*/jsxs(Fragment, {
    children: [skipLinkText == null || skipLinkText.length === 0 ? null : /*#__PURE__*/jsx(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), /*#__PURE__*/jsx(ChartContainer, {
      data: data,
      theme: theme,
      id: id,
      isAnimated: isAnimated,
      onError: onError,
      children: state !== ChartState.Success ? /*#__PURE__*/jsx(ChartSkeleton, {
        state: state,
        errorText: errorText,
        theme: theme
      }) : /*#__PURE__*/jsx(Chart, {
        annotationsLookupTable: annotationsLookupTable,
        data: data,
        renderLegendContent: renderLegendContent,
        renderTooltipContent: renderTooltip,
        seriesNameFormatter: seriesNameFormatter,
        showLegend: showLegend,
        theme: theme,
        xAxisOptions: xAxisOptionsWithDefaults,
        yAxisOptions: yAxisOptionsWithDefaults,
        renderHiddenLegendLabel: renderHiddenLegendLabel
      })
    }), skipLinkText == null || skipLinkText.length === 0 ? null : /*#__PURE__*/jsx(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

export { StackedAreaChart };
