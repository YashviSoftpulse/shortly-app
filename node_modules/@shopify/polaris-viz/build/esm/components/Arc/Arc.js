import { useMemo, Fragment } from 'react';
import { arc } from 'd3-shape';
import { uniqueId, getGradientFromColor, useSpringConfig, ARC_DATA_CHANGE_ANIMATION_CONFIG, ARC_LOAD_ANIMATION_CONFIG, getColorVisionStylesForActiveIndex, getColorVisionEventAttrs, COLOR_VISION_SINGLE_ITEM } from '@shopify/polaris-viz-core';
import { useSpring, animated, to } from '@react-spring/web';
import { ARC_PAD_ANGLE } from '../../constants.js';
import styles from './Arc.scss.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { classNames } from '../../utilities/classnames.js';
import { ConicGradientWithStops } from '../ConicGradientWithStops/ConicGradientWithStops.js';

const ANIMATION_SIZE_BUFFER = 30;
function Arc({
  animationDelay = 100,
  radius,
  width,
  height,
  startAngle,
  endAngle,
  color,
  cornerRadius,
  thickness,
  index = 0,
  isAnimated,
  activeIndex = 0
}) {
  const gradientId = useMemo(() => uniqueId('DonutChart'), []);
  const createArc = arc().cornerRadius(cornerRadius);
  const gradient = getGradientFromColor(color);
  const springConfig = useSpringConfig({
    animationDelay: index * animationDelay,
    shouldAnimate: isAnimated,
    mountedSpringConfig: ARC_DATA_CHANGE_ANIMATION_CONFIG,
    unmountedSpringConfig: ARC_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedInnerRadius,
    animatedOuterRadius,
    animatedStartAngle,
    animatedEndAngle,
    animatedPadAngle
  } = useSpring({
    animatedInnerRadius: radius - thickness,
    animatedOuterRadius: radius,
    animatedStartAngle: startAngle,
    animatedEndAngle: endAngle,
    animatedPadAngle: ARC_PAD_ANGLE,
    from: {
      animatedOuterRadius: radius - thickness
    },
    ...springConfig
  });
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx("clipPath", {
      id: gradientId,
      transform: `translate(${width / 2 - ANIMATION_SIZE_BUFFER} ${height / 2 - ANIMATION_SIZE_BUFFER})`,
      children: /*#__PURE__*/jsx(animated.path, {
        className: classNames(styles.Arc),
        d: to([animatedInnerRadius, animatedOuterRadius, animatedStartAngle, animatedEndAngle, animatedPadAngle], (animatedInnerRadius, animatedOuterRadius, animatedStartAngle, animatedEndAngle, animatedPadAngle) => {
          return createArc({
            innerRadius: animatedInnerRadius,
            outerRadius: animatedOuterRadius,
            startAngle: animatedStartAngle,
            endAngle: animatedEndAngle,
            padAngle: animatedPadAngle
          });
        })
      })
    }), /*#__PURE__*/jsx("g", {
      style: { ...getColorVisionStylesForActiveIndex({
          activeIndex,
          index
        })
      },
      className: classNames(styles.Arc),
      ...getColorVisionEventAttrs({
        type: COLOR_VISION_SINGLE_ITEM,
        index
      }),
      clipPath: `url(#${gradientId})`,
      children: /*#__PURE__*/jsx(ConicGradientWithStops, {
        x: width / -2 - ANIMATION_SIZE_BUFFER,
        y: height / -2 - ANIMATION_SIZE_BUFFER,
        height: radius * 4,
        width: radius * 4,
        gradient: gradient
      })
    })]
  });
}

export { Arc };
