import { Fragment } from 'react';
import { PREVIEW_ICON_SIZE } from '../../../constants.js';
import styles from './Styles.scss.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { TooltipContentContainer } from '../../TooltipContent/components/TooltipContentContainer/TooltipContentContainer.js';
import { TooltipTitle } from '../../TooltipContent/components/TooltipTitle/TooltipTitle.js';
import { TooltipRow } from '../../TooltipContent/components/TooltipRow/TooltipRow.js';
import { LinePreview } from '../../LinePreview/LinePreview.js';
import { SeriesIcon } from '../components/SeriesIcon/SeriesIcon.js';

function renderLinearPredictiveTooltipContent(tooltipData) {
  const {
    theme
  } = tooltipData;
  const formatters = {
    keyFormatter: key => `${key}`,
    valueFormatter: value => `${value}`,
    titleFormatter: title => `${title}`,
    ...tooltipData.formatters
  };

  function renderSeriesIcon(color, isComparison) {
    return /*#__PURE__*/jsx("div", {
      className: styles.Icon,
      style: {
        height: PREVIEW_ICON_SIZE,
        width: PREVIEW_ICON_SIZE
      },
      children: isComparison ? /*#__PURE__*/jsx(LinePreview, {
        color: color,
        lineStyle: "dotted"
      }) : /*#__PURE__*/jsx(SeriesIcon, {
        color: color
      })
    });
  }

  function renderContent({
    activeColorVisionIndex
  }) {
    const item = tooltipData.data[0];
    return item.data.map(({
      color,
      key,
      value,
      isComparison
    }, seriesIndex) => {
      var _metadata$relatedInde;

      const metadata = tooltipData.dataSeries[seriesIndex].metadata;
      const activeKey = tooltipData.dataSeries[seriesIndex].data[tooltipData.activeIndex].key;
      const index = (_metadata$relatedInde = metadata === null || metadata === void 0 ? void 0 : metadata.relatedIndex) !== null && _metadata$relatedInde !== void 0 ? _metadata$relatedInde : seriesIndex;
      const isNull = value == null;
      const isPredictiveStartKey = (metadata === null || metadata === void 0 ? void 0 : metadata.startKey) === activeKey;
      const isHidden = isNull || isPredictiveStartKey;
      return /*#__PURE__*/jsx(TooltipRow, {
        activeIndex: activeColorVisionIndex,
        color: color,
        index: index,
        isHidden: isHidden,
        label: formatters.keyFormatter(key),
        renderSeriesIcon: () => renderSeriesIcon(color, isComparison),
        shape: "Line",
        value: formatters.valueFormatter(value !== null && value !== void 0 ? value : 0)
      }, `row-${seriesIndex}`);
    });
  }

  return /*#__PURE__*/jsx(TooltipContentContainer, {
    maxWidth: 300,
    theme: theme,
    children: ({
      activeColorVisionIndex
    }) => /*#__PURE__*/jsxs(Fragment, {
      children: [tooltipData.title != null && /*#__PURE__*/jsx(TooltipTitle, {
        theme: theme,
        children: formatters.titleFormatter(tooltipData.title)
      }), renderContent({
        activeColorVisionIndex
      })]
    })
  });
}

export { renderLinearPredictiveTooltipContent };
