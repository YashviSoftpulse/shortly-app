import { useMemo, useEffect } from 'react';
import { useChartContext, estimateStringWidth, DIAGONAL_LABEL_MIN_WIDTH, VERTICAL_LABEL_MIN_WIDTH, LINE_HEIGHT, HORIZONTAL_LABEL_TARGET_HEIGHT, HORIZONTAL_LABEL_MIN_WIDTH } from '@shopify/polaris-viz-core';
import { getDiagonalLabels } from '../utilities/getDiagonalLabels.js';
import { getHorizontalLabels } from '../utilities/getHorizontalLabels.js';
import { getVerticalLabels } from '../utilities/getVerticalLabels.js';

function useLabels({
  allowLineWrap,
  labels,
  onHeightChange = () => {},
  targetWidth
}) {
  const {
    characterWidths
  } = useChartContext();
  const preparedLabels = useMemo(() => {
    return labels.map(label => {
      return {
        text: label,
        words: [],
        truncatedWords: [],
        truncatedName: '',
        truncatedWidth: 0
      };
    });
  }, [labels]);
  const longestLabelWidth = useMemo(() => {
    return labels.reduce((prev, string) => {
      const newWidth = estimateStringWidth(string, characterWidths);

      if (newWidth > prev) {
        return newWidth;
      }

      return prev;
    }, 0);
  }, [labels, characterWidths]);
  const {
    lines,
    containerHeight
  } = useMemo(() => {
    const shouldDrawHorizontal = checkIfShouldDrawHorizontal({
      allowLineWrap,
      longestLabelWidth,
      targetWidth
    });
    const shouldDrawDiagonal = targetWidth > DIAGONAL_LABEL_MIN_WIDTH;
    const shouldDrawVertical = targetWidth > VERTICAL_LABEL_MIN_WIDTH;

    switch (true) {
      case shouldDrawHorizontal:
        {
          return getHorizontalLabels({
            labels: preparedLabels,
            targetWidth,
            targetHeight: HORIZONTAL_LABEL_TARGET_HEIGHT,
            characterWidths
          });
        }

      case shouldDrawDiagonal:
        {
          return getDiagonalLabels({
            characterWidths,
            labels: preparedLabels,
            longestLabelWidth,
            targetHeight: LINE_HEIGHT,
            targetWidth
          });
        }

      case shouldDrawVertical:
        {
          return getVerticalLabels({
            characterWidths,
            labels: preparedLabels,
            longestLabelWidth,
            targetWidth
          });
        }

      default:
        {
          return {
            lines: [],
            containerHeight: 0
          };
        }
    }
  }, [allowLineWrap, targetWidth, characterWidths, preparedLabels, longestLabelWidth]);
  useEffect(() => {
    onHeightChange(containerHeight);
  }, [containerHeight, onHeightChange]);
  return {
    lines,
    containerHeight
  };
}

function checkIfShouldDrawHorizontal({
  allowLineWrap,
  longestLabelWidth,
  targetWidth
}) {
  const isLabelLongerThanTarget = targetWidth > longestLabelWidth;

  if (allowLineWrap === false) {
    return isLabelLongerThanTarget;
  }

  return targetWidth >= HORIZONTAL_LABEL_MIN_WIDTH || isLabelLongerThanTarget;
}

export { useLabels };
