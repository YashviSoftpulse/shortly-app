'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var jsxRuntime = require('react/jsx-runtime');
var Bar = require('../../../shared/Bar/Bar.js');
var ErrorText = require('../ErrorText/ErrorText.js');

function FunnelSkeleton({
  dimensions,
  state,
  errorText
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    grid: {
      color: gridColor
    }
  } = polarisVizCore.useTheme();
  const barsQuantity = 4;
  const gap = width * 0.05;
  const innerWidth = width - gap;
  const segmentWidth = innerWidth / barsQuantity;
  const barWidth = segmentWidth / 2;
  const id = polarisVizCore.useUniqueId('loadingFunnel');
  const heightGap = height * 1.3 / barsQuantity;
  return /*#__PURE__*/jsxRuntime.jsxs("svg", {
    viewBox: `0 0 ${width} ${height}`,
    children: [state === polarisVizCore.ChartState.Loading && Array(barsQuantity).fill(null).map((_, index) => {
      const barHeight = height - heightGap * index;
      const nextBarHeight = height - heightGap * (index + 1);
      const connector = {
        height,
        startX: segmentWidth / 2 * index,
        startY: height - barHeight,
        nextX: segmentWidth / 2 * (index + 1),
        nextY: height - nextBarHeight
      };
      return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.jsx(Bar.Bar, {
          color: gridColor,
          x: segmentWidth * index,
          y: height - barHeight,
          height: barHeight,
          width: barWidth
        }), index !== barsQuantity - 1 && /*#__PURE__*/jsxRuntime.jsx("path", {
          style: {
            transform: `translateX(${segmentWidth / 2 * (index + 1)}px)`
          },
          fill: polarisVizCore.changeColorOpacity(gridColor, 0.2),
          d: `M${connector.startX} ${connector.startY}
                    L ${connector.nextX} ${connector.nextY}
                    V ${connector.height} H ${connector.startX} Z`
        })]
      }, `${id}${index}`);
    }), state === polarisVizCore.ChartState.Error && /*#__PURE__*/jsxRuntime.jsx(ErrorText.ErrorText, {
      errorText: errorText,
      width: width,
      height: height
    })]
  });
}

exports.FunnelSkeleton = FunnelSkeleton;
