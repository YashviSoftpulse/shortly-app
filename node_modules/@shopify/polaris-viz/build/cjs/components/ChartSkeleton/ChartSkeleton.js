'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var ChartSkeleton$1 = require('./ChartSkeleton.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var Shimmer = require('./components/Shimmer/Shimmer.js');
var GridSkeleton = require('./components/GridSkeleton/GridSkeleton.js');
var SparkSkeleton = require('./components/SparkSkeleton/SparkSkeleton.js');
var SimpleNormalizedSkeleton = require('./components/SimpleNormalizedSkeleton/SimpleNormalizedSkeleton.js');
var SimpleBarSkeleton = require('./components/SimpleBarSkeleton/SimpleBarSkeleton.js');
var FunnelSkeleton = require('./components/FunnelSkeleton/FunnelSkeleton.js');
var DonutSkeleton = require('./components/DonutSkeleton/DonutSkeleton.js');

function ChartSkeleton(props) {
  const {
    dimensions,
    errorText = 'Could not load the chart',
    state = polarisVizCore.ChartState.Loading,
    theme,
    type
  } = props;
  const {
    chartContainer: {
      backgroundColor
    }
  } = polarisVizCore.useTheme(theme);
  const {
    width,
    height
  } = dimensions || {
    width: 0,
    height: 0
  };

  const SkeletonMarkup = () => {
    switch (type) {
      case 'Donut':
        return /*#__PURE__*/jsxRuntime.jsx(DonutSkeleton.DonutSkeleton, {
          dimensions: {
            width,
            height
          },
          state: state,
          errorText: errorText
        });

      case 'Funnel':
        return /*#__PURE__*/jsxRuntime.jsx(FunnelSkeleton.FunnelSkeleton, {
          dimensions: {
            width,
            height
          },
          state: state,
          errorText: errorText
        });

      case 'SimpleBar':
        return /*#__PURE__*/jsxRuntime.jsx(SimpleBarSkeleton.SimpleBarSkeleton, {
          dimensions: {
            width,
            height
          },
          state: state,
          errorText: errorText
        });

      case 'SimpleNormalized':
        {
          const {
            showLegend = true,
            size = 'small'
          } = props;
          return /*#__PURE__*/jsxRuntime.jsx(SimpleNormalizedSkeleton.SimpleNormalizedSkeleton, {
            dimensions: {
              width,
              height
            },
            state: state,
            errorText: errorText,
            showLegend: showLegend,
            size: size
          });
        }

      case 'Spark':
        return /*#__PURE__*/jsxRuntime.jsx(SparkSkeleton.SparkSkeleton, {
          dimensions: {
            width,
            height
          },
          state: state,
          errorText: errorText
        });

      default:
        return /*#__PURE__*/jsxRuntime.jsx(GridSkeleton.GridSkeleton, {
          dimensions: {
            width,
            height
          },
          state: state,
          errorText: errorText
        });
    }
  };

  if (width === 0) return null;
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    className: ChartSkeleton$1["default"].Container,
    children: [/*#__PURE__*/jsxRuntime.jsx(SkeletonMarkup, {}), state === polarisVizCore.ChartState.Loading && /*#__PURE__*/jsxRuntime.jsx(Shimmer.Shimmer, {
      backgroundColor: backgroundColor,
      width: width,
      height: height
    })]
  });
}

exports.ChartSkeleton = ChartSkeleton;
