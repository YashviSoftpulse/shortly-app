'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var web = require('@react-spring/web');
var index = require('../ChartElements/index.js');
var utilities = require('./utilities.js');
var jsxRuntime = require('react/jsx-runtime');
var useColorVisionEvents = require('../../hooks/ColorVisionA11y/useColorVisionEvents.js');
var useHorizontalSeriesColors = require('../../hooks/useHorizontalSeriesColors.js');
var useLegend = require('../LegendContainer/hooks/useLegend.js');
var useDataForHorizontalChart = require('../../hooks/useDataForHorizontalChart.js');
var useHorizontalStackedValues = require('../../hooks/useHorizontalStackedValues.js');
var useHorizontalXScale = require('../../hooks/useHorizontalXScale.js');
var useHorizontalBarSizes = require('../../hooks/useHorizontalBarSizes.js');
var useHorizontalTransitions = require('../../hooks/useHorizontalTransitions.js');
var getContainerAlignmentForLegend = require('../../utilities/getContainerAlignmentForLegend.js');
var GradientDefs = require('../shared/GradientDefs/GradientDefs.js');
var HorizontalGroup = require('../shared/HorizontalGroup/HorizontalGroup.js');
var LegendContainer = require('../LegendContainer/LegendContainer.js');

function Chart({
  data,
  dimensions,
  renderLegendContent,
  legendPosition = 'bottom-right',
  seriesNameFormatter,
  showLegend,
  type,
  xAxisOptions,
  yAxisOptions
}) {
  useColorVisionEvents.useColorVisionEvents({
    enabled: data.length > 1
  });
  const id = React.useMemo(() => polarisVizCore.uniqueId('SimpleBarChart'), []);
  const {
    labelFormatter
  } = xAxisOptions;
  const isStacked = type === 'stacked';
  const {
    longestSeriesCount,
    seriesColors
  } = useHorizontalSeriesColors.useHorizontalSeriesColors(data);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend.useLegend({
    data: [{
      shape: 'Bar',
      series: data
    }],
    dimensions,
    colors: seriesColors,
    showLegend,
    seriesNameFormatter
  });
  const {
    allNumbers,
    longestLabel,
    highestPositive,
    lowestNegative,
    areAllNegative
  } = useDataForHorizontalChart.useDataForHorizontalChart({
    data,
    isSimple: true,
    isStacked,
    labelFormatter
  });
  const {
    stackedValues,
    stackedMin,
    stackedMax
  } = useHorizontalStackedValues.useHorizontalStackedValues({
    isStacked,
    data
  });
  const longestTrendIndicator = utilities.getLongestTrendIndicator(data, highestPositive, lowestNegative);
  const trendIndicatorOffset = longestTrendIndicator.positive + longestTrendIndicator.negative;
  const {
    xScale
  } = useHorizontalXScale.useHorizontalXScale({
    allNumbers,
    isStacked,
    labelFormatter,
    maxWidth: width - trendIndicatorOffset,
    stackedMax,
    stackedMin,
    longestLabel
  });
  const {
    barHeight,
    groupHeight
  } = useHorizontalBarSizes.useHorizontalBarSizes({
    chartDimensions: {
      width,
      height
    },
    isSimple: true,
    isStacked,
    seriesLength: longestSeriesCount,
    singleBarCount: data.length,
    xAxisHeight: 0
  });
  const {
    transitions
  } = useHorizontalTransitions.useHorizontalTransitions({
    series: data,
    groupHeight,
    chartXPosition: 0
  });
  const zeroPosition = xScale(0) + longestLabel.negative + longestTrendIndicator.negative;
  const getAriaLabel = polarisVizCore.useAriaLabel(data, {
    xAxisLabelFormatter: labelFormatter
  });
  const containerStyle = getContainerAlignmentForLegend.getContainerAlignmentForLegend(legendPosition, true);
  return /*#__PURE__*/jsxRuntime.jsxs(index.ChartElements.Div, {
    style: containerStyle,
    width: "auto",
    height: "auto",
    children: [/*#__PURE__*/jsxRuntime.jsxs(index.ChartElements.Svg, {
      height: height,
      width: width,
      children: [/*#__PURE__*/jsxRuntime.jsx(GradientDefs.GradientDefs, {
        direction: "horizontal",
        gradientUnits: isStacked ? 'objectBoundingBox' : 'userSpaceOnUse',
        id: id,
        seriesColors: seriesColors,
        size: isStacked ? '100%' : `${width}px`
      }), transitions((style, item, _transition, index) => {
        var _item$key, _data$0$data$item$ind;

        const {
          opacity,
          transform
        } = style;
        const name = (_item$key = item.key) !== null && _item$key !== void 0 ? _item$key : '';
        const ariaLabel = getAriaLabel({
          seriesIndex: item.index,
          key: (_data$0$data$item$ind = data[0].data[item.index]) === null || _data$0$data$item$ind === void 0 ? void 0 : _data$0$data$item$ind.key
        });
        return /*#__PURE__*/jsxRuntime.jsx(web.animated.g, {
          style: {
            opacity,
            transform
          },
          children: /*#__PURE__*/jsxRuntime.jsx(HorizontalGroup.HorizontalGroup, {
            areAllNegative: areAllNegative,
            ariaLabel: ariaLabel,
            barHeight: barHeight,
            containerWidth: width,
            data: data,
            groupHeight: groupHeight,
            id: id,
            index: index,
            isSimple: true,
            isStacked: isStacked,
            name: name,
            stackedValues: stackedValues,
            xAxisOptions: xAxisOptions,
            xScale: xScale,
            yAxisOptions: yAxisOptions,
            zeroPosition: zeroPosition
          })
        }, `group-${name}`);
      })]
    }), showLegend && /*#__PURE__*/jsxRuntime.jsx(LegendContainer.LegendContainer, {
      colorVisionType: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent: renderLegendContent,
      position: legendPosition
    })]
  });
}

exports.Chart = Chart;
