'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useGetLongestLabelFromData = require('./hooks/useGetLongestLabelFromData.js');
var constants = require('./constants.js');
var jsxRuntime = require('react/jsx-runtime');
var TooltipContentContainer = require('./components/TooltipContentContainer/TooltipContentContainer.js');
var TooltipTitle = require('./components/TooltipTitle/TooltipTitle.js');
var TooltipSeries = require('./components/TooltipSeries/TooltipSeries.js');
var TooltipSeriesName = require('./components/TooltipSeriesName/TooltipSeriesName.js');
var TooltipRow = require('./components/TooltipRow/TooltipRow.js');

const FONT_SIZE_OFFSET = 1.061;
const PREVIEW_WIDTH = 14;
function TooltipContent({
  data,
  theme = polarisVizCore.DEFAULT_THEME_NAME,
  title
}) {
  const {
    keyWidth,
    valueWidth
  } = useGetLongestLabelFromData.useGetLongestLabelFromData(data);
  const leftWidth = keyWidth * FONT_SIZE_OFFSET;
  const rightWidth = valueWidth * FONT_SIZE_OFFSET;
  return /*#__PURE__*/jsxRuntime.jsx(TooltipContentContainer.TooltipContentContainer, {
    maxWidth: PREVIEW_WIDTH + leftWidth + constants.SPACE_BETWEEN_LABEL_AND_VALUE + rightWidth,
    theme: theme,
    children: ({
      activeColorVisionIndex
    }) => /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
      children: [title != null && /*#__PURE__*/jsxRuntime.jsx(TooltipTitle.TooltipTitle, {
        theme: theme,
        children: title
      }), data.map(({
        data: series,
        name,
        shape
      }, dataIndex) => {
        const hasName = name != null;
        const isEmpty = !hasName && series.length === 0;
        return /*#__PURE__*/jsxRuntime.jsxs(TooltipSeries.TooltipSeries, {
          isEmpty: isEmpty,
          children: [hasName && /*#__PURE__*/jsxRuntime.jsx(TooltipSeriesName.TooltipSeriesName, {
            theme: theme,
            children: name
          }), series.map(({
            key,
            value,
            color,
            isComparison,
            isHidden
          }, seriesIndex) => {
            const indexOffset = data[dataIndex - 1] ? data[dataIndex - 1].data.length : 0;
            return /*#__PURE__*/jsxRuntime.jsx(TooltipRow.TooltipRow, {
              activeIndex: activeColorVisionIndex,
              color: color,
              index: seriesIndex + indexOffset,
              isComparison: isComparison,
              isHidden: isHidden,
              label: key,
              shape: shape,
              value: value
            }, `row-${seriesIndex}`);
          })]
        }, dataIndex);
      })]
    })
  });
}

exports.TooltipContent = TooltipContent;
