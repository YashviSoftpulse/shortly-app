'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var d3Shape = require('d3-shape');
var jsxRuntime = require('react/jsx-runtime');
var useExternalHideEvents = require('../../../../hooks/ExternalEvents/useExternalHideEvents.js');
var useWatchActiveSeries = require('../../../../hooks/useWatchActiveSeries.js');
var Area = require('../Area/Area.js');

function RelatedAreas({
  yScale,
  xScale,
  data
}) {
  const [activeIndex, setActiveIndex] = React.useState(-1);
  const lineSeries = data.filter(series => {
    var _series$metadata;

    return (series === null || series === void 0 ? void 0 : (_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) == null;
  });
  const percentileIndex = lineSeries.length + 1;
  const {
    hiddenIndexes
  } = useExternalHideEvents.useExternalHideEvents();
  const {
    id
  } = polarisVizCore.useChartContext();
  useWatchActiveSeries.useWatchActiveSeries(id !== null && id !== void 0 ? id : '', ({
    detail: {
      index
    }
  }) => {
    setActiveIndex(index);
  });

  function getAreaGenerator(series) {
    var _series$metadata2;

    const relatedIndex = (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex;
    const areaGenerator = d3Shape.area().x((_, index) => {
      return xScale(index);
    }).y0(({
      value
    }) => {
      return yScale(value !== null && value !== void 0 ? value : 0);
    }).y1((_, index) => {
      var _data$relatedIndex$da;

      if (data[relatedIndex] == null) {
        return yScale(0);
      }

      return yScale((_data$relatedIndex$da = data[relatedIndex].data[index].value) !== null && _data$relatedIndex$da !== void 0 ? _data$relatedIndex$da : 0);
    }).defined(({
      value
    }) => value != null).curve(polarisVizCore.curveStepRounded);
    return areaGenerator(series.data);
  }

  return /*#__PURE__*/jsxRuntime.jsx("g", {
    children: data.map((series, index) => {
      var _series$metadata3, _series$metadata4, _series$metadata5;

      if (((_series$metadata3 = series.metadata) === null || _series$metadata3 === void 0 ? void 0 : _series$metadata3.relatedIndex) == null || ((_series$metadata4 = series.metadata) === null || _series$metadata4 === void 0 ? void 0 : _series$metadata4.areaColor) == null) {
        return null;
      }

      return /*#__PURE__*/jsxRuntime.jsx(Area.Area, {
        activeIndex: activeIndex,
        fill: (_series$metadata5 = series.metadata) === null || _series$metadata5 === void 0 ? void 0 : _series$metadata5.areaColor,
        getAreaGenerator: getAreaGenerator,
        hiddenIndexes: hiddenIndexes,
        index: percentileIndex,
        series: series,
        shouldAnimate: false
      }, index);
    })
  });
}

exports.RelatedAreas = RelatedAreas;
