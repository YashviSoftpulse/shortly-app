'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');
var LineChart = require('../LineChart/LineChart.js');
var CustomLegend = require('./components/CustomLegend/CustomLegend.js');
var MissingDataArea = require('./components/MissingDataArea/MissingDataArea.js');
var RelatedAreas = require('./components/RelatedAreas/RelatedAreas.js');

function LineChartRelational(props) {
  const {
    annotations = [],
    data,
    errorText,
    emptyStateText,
    id,
    isAnimated,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    skipLinkText,
    state,
    theme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = { ...polarisVizCore.DEFAULT_CHART_PROPS,
    ...props
  };
  const dataWithHiddenRelational = data.map(series => {
    var _series$metadata;

    return { ...series,
      metadata: { ...series.metadata,
        isVisuallyHidden: ((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) != null
      }
    };
  });
  const relatedAreasKey = buildRelatedAreasKey(dataWithHiddenRelational);
  return /*#__PURE__*/jsxRuntime.jsx(LineChart.LineChart, {
    annotations: annotations,
    data: dataWithHiddenRelational,
    emptyStateText: emptyStateText,
    errorText: errorText,
    id: id,
    isAnimated: isAnimated,
    renderLegendContent: ({
      getColorVisionStyles,
      getColorVisionEventAttrs
    }) => {
      return /*#__PURE__*/jsxRuntime.jsx(CustomLegend.CustomLegend, {
        getColorVisionStyles: getColorVisionStyles,
        getColorVisionEventAttrs: getColorVisionEventAttrs,
        data: data,
        theme: theme !== null && theme !== void 0 ? theme : polarisVizCore.DEFAULT_THEME_NAME,
        seriesNameFormatter: seriesNameFormatter
      });
    },
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    skipLinkText: skipLinkText,
    slots: {
      chart: props => {
        return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
          children: [/*#__PURE__*/jsxRuntime.jsx(MissingDataArea.MissingDataArea, { ...props,
            data: data
          }), /*#__PURE__*/jsxRuntime.jsx(RelatedAreas.RelatedAreas, {
            data: data // remount the area otherwise it can't animate
            // between areas that are differently sized
            ,
            ...props
          }, relatedAreasKey)]
        });
      }
    },
    state: state,
    theme: theme,
    tooltipOptions: tooltipOptions,
    xAxisOptions: xAxisOptions,
    yAxisOptions: yAxisOptions
  });
}

function buildRelatedAreasKey(data) {
  const relatedSeries = data.find(series => {
    var _series$metadata2;

    return (series === null || series === void 0 ? void 0 : (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) != null;
  });

  if (relatedSeries == null) {
    return '';
  }

  return relatedSeries.data.map(({
    value
  }) => value === null || value === void 0 ? void 0 : value.toString()).join(':');
}

exports.LineChartRelational = LineChartRelational;
