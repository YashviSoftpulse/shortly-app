'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactDom = require('react-dom');
var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useBarSpringConfig = require('../../../hooks/useBarSpringConfig.js');
var Label = require('./Label.js');
var jsxRuntime = require('react/jsx-runtime');

const Y_AXIS_LABEL_VERTICAL_OFFSET = 32;
const PERCENT_LABEL_VERTICAL_OFFSET = 24;
function FunnelSegment({
  barWidth,
  barHeight,
  drawableHeight,
  x,
  ariaLabel,
  index = 0,
  color,
  connector,
  isLast,
  portalTo,
  percentLabel,
  formattedYValue,
  labelHelper
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const mounted = React.useRef(false);
  const borderRadius = selectedTheme.bar.borderRadius;
  const {
    xAxis: {
      labelColor: axisLabelColor
    },
    chartContainer: {
      backgroundColor
    }
  } = polarisVizCore.useTheme();
  const springConfig = useBarSpringConfig.useBarSpringConfig({
    animationDelay: index * 150
  });
  const {
    animatedHeight,
    animatedStartY,
    animatedNextY
  } = web.useSpring({
    from: {
      animatedHeight: mounted.current ? barHeight : 0,
      animatedStartY: drawableHeight,
      animatedNextY: drawableHeight
    },
    to: {
      animatedHeight: barHeight,
      animatedStartY: connector.startY,
      animatedNextY: connector.nextY
    },
    ...springConfig
  });
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/reactDom.createPortal( /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
      "aria-label": ariaLabel,
      fill: color,
      width: barWidth,
      d: animatedHeight.to(value => polarisVizCore.getRoundedRectPath({
        height: value,
        width: barWidth,
        borderRadius: `${borderRadius} ${borderRadius} 0 0`
      })),
      style: {
        transform: animatedHeight.to(value => `translate(${x}px, ${drawableHeight - value}px)`)
      }
    }), portalTo), !isLast && /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
      d: web.to([animatedStartY, animatedNextY, animatedHeight], (startY, nextY) => `M${connector.startX} ${startY}
               L ${connector.nextX} ${nextY}
               V ${connector.height} H ${connector.startX} Z`),
      fill: connector.fill
    }), /*#__PURE__*/jsxRuntime.jsx(Label.Label, {
      transform: animatedStartY.to(value => `translate(${x}px, ${value - Y_AXIS_LABEL_VERTICAL_OFFSET}px)`),
      label: formattedYValue,
      labelWidth: barWidth,
      size: "large",
      color: axisLabelColor
    }), /*#__PURE__*/jsxRuntime.jsx(Label.Label, {
      backgroundColor: backgroundColor,
      label: percentLabel,
      labelWidth: barWidth,
      labelHelper: labelHelper,
      transform: animatedNextY.to(value => `translate(${Number(x) + Number(barWidth)}px, ${value - PERCENT_LABEL_VERTICAL_OFFSET}px)`),
      size: "small",
      color: polarisVizCore.changeColorOpacity(axisLabelColor, 0.7)
    })]
  });
}

exports.FunnelSegment = FunnelSegment;
