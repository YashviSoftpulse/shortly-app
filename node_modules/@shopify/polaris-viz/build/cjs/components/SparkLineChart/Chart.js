'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var d3Scale = require('d3-scale');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useThemeSeriesColors = require('../../hooks/useThemeSeriesColors.js');
var SparkLineChart = require('./SparkLineChart.scss.js');
var jsxRuntime = require('react/jsx-runtime');

const SVG_MARGIN = 2;
function Chart({
  data,
  dimensions,
  accessibilityLabel,
  offsetLeft = 0,
  offsetRight = 0
}) {
  const {
    theme
  } = polarisVizCore.useChartContext();
  const selectedTheme = polarisVizCore.useTheme();
  const seriesColors = useThemeSeriesColors.useThemeSeriesColors(data, selectedTheme);
  const {
    width,
    height
  } = dimensions !== null && dimensions !== void 0 ? dimensions : {
    height: 0,
    width: 0
  };
  const {
    minXDomain,
    maxXDomain,
    yScale
  } = polarisVizCore.useSparkLine({
    data,
    height
  });
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [accessibilityLabel ? /*#__PURE__*/jsxRuntime.jsx("span", {
      className: SparkLineChart["default"].VisuallyHidden,
      children: accessibilityLabel
    }) : null, /*#__PURE__*/jsxRuntime.jsx("svg", {
      xmlns: polarisVizCore.XMLNS,
      "aria-hidden": true,
      width: width,
      height: height,
      children: data.map((series, index) => {
        const singleOffsetLeft = series.isComparison ? 0 : offsetLeft;
        const singleOffsetRight = series.isComparison ? 0 : offsetRight;
        const xScale = d3Scale.scaleLinear().range([singleOffsetLeft + SVG_MARGIN, width - singleOffsetRight - SVG_MARGIN]).domain([minXDomain, maxXDomain]);
        const seriesWithColor = {
          color: seriesColors[index],
          strokeDasharray: series.isComparison ? polarisVizCore.STROKE_DOT_ARRAY_WIDTH : 'none',
          ...series
        };
        return /*#__PURE__*/jsxRuntime.jsx("g", {
          children: /*#__PURE__*/jsxRuntime.jsx(polarisVizCore.LineSeries, {
            index: index,
            xScale: xScale,
            yScale: yScale,
            data: seriesWithColor,
            svgDimensions: {
              height,
              width
            },
            theme: theme,
            type: "spark"
          }, index)
        }, index);
      })
    })]
  });
}

exports.Chart = Chart;
