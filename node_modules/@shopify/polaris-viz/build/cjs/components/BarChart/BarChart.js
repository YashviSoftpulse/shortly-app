'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var bucketDataSeries = require('../../utilities/bucketDataSeries.js');
var getTooltipContentRenderer = require('../../utilities/getTooltipContentRenderer.js');
var fillMissingDataPoints = require('../../utilities/fillMissingDataPoints.js');
var jsxRuntime = require('react/jsx-runtime');
var getAxisOptions = require('../../utilities/getAxisOptions.js');
var normalizeData = require('../../utilities/normalizeData.js');
var SkipLink = require('../SkipLink/SkipLink.js');
var ChartContainer = require('../ChartContainer/ChartContainer.js');
var ChartSkeleton = require('../ChartSkeleton/ChartSkeleton.js');
var VerticalBarChart = require('../VerticalBarChart/VerticalBarChart.js');
var HorizontalBarChart = require('../HorizontalBarChart/HorizontalBarChart.js');

function BarChart(props) {
  var _dataSeries$, _dataSeries$$data$;

  const {
    defaultTheme
  } = polarisVizCore.usePolarisVizContext();
  const {
    annotations = [],
    data: dataSeries,
    state,
    errorText,
    direction = 'vertical',
    emptyStateText,
    id,
    isAnimated,
    tooltipOptions,
    renderLegendContent,
    showLegend = true,
    maxSeries,
    skipLinkText,
    theme = defaultTheme,
    type = 'default',
    xAxisOptions,
    yAxisOptions,
    onError,
    renderHiddenLegendLabel,
    renderBucketLegendLabel,
    seriesNameFormatter = value => `${value}`
  } = { ...polarisVizCore.DEFAULT_CHART_PROPS,
    ...props
  };
  const filledData = fillMissingDataPoints.fillMissingDataPoints(dataSeries, isValidDate((_dataSeries$ = dataSeries[0]) === null || _dataSeries$ === void 0 ? void 0 : (_dataSeries$$data$ = _dataSeries$.data[0]) === null || _dataSeries$$data$ === void 0 ? void 0 : _dataSeries$$data$.key));
  const data = maxSeries ? bucketDataSeries.bucketDataSeries({
    dataSeries: filledData,
    maxSeries,
    renderBucketLegendLabel
  }) : filledData;
  const skipLinkAnchorId = React.useRef(polarisVizCore.uniqueId('BarChart'));
  const emptyState = data.length === 0;
  const hideSkipLink = skipLinkText == null || skipLinkText.length === 0 || emptyState;
  const xAxisOptionsWithDefaults = getAxisOptions.getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getAxisOptions.getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData.normalizeData(annotations, 'startKey');
  const renderTooltip = getTooltipContentRenderer.getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  const ChartByDirection = direction === 'vertical' ? /*#__PURE__*/jsxRuntime.jsx(VerticalBarChart.VerticalBarChart, {
    annotationsLookupTable: annotationsLookupTable,
    data: data,
    emptyStateText: emptyStateText,
    renderLegendContent: renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    type: type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults,
    renderHiddenLegendLabel: renderHiddenLegendLabel
  }) : /*#__PURE__*/jsxRuntime.jsx(HorizontalBarChart.HorizontalBarChart, {
    annotationsLookupTable: annotationsLookupTable,
    data: data,
    renderHiddenLegendLabel: renderHiddenLegendLabel,
    renderLegendContent: renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter: seriesNameFormatter,
    showLegend: showLegend,
    type: type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults
  });
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [hideSkipLink ? null : /*#__PURE__*/jsxRuntime.jsx(SkipLink.SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), /*#__PURE__*/jsxRuntime.jsx(ChartContainer.ChartContainer, {
      id: id,
      isAnimated: isAnimated,
      data: data,
      onError: onError,
      theme: theme,
      type: polarisVizCore.InternalChartType.Bar,
      children: state !== polarisVizCore.ChartState.Success ? /*#__PURE__*/jsxRuntime.jsx(ChartSkeleton.ChartSkeleton, {
        state: state,
        errorText: errorText,
        theme: theme
      }) : ChartByDirection
    }), hideSkipLink ? null : /*#__PURE__*/jsxRuntime.jsx(SkipLink.SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

function isValidDate(dateString) {
  if (dateString == null) {
    return false;
  }

  const parsedDate = Date.parse(dateString.toString());
  return !isNaN(parsedDate);
}

exports.BarChart = BarChart;
