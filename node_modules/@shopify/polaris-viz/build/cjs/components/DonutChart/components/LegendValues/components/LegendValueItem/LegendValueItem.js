'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var React = require('react');
var LegendValueItem$1 = require('./LegendValueItem.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var SquareColorPreview = require('../../../../../SquareColorPreview/SquareColorPreview.js');
var TrendIndicator = require('../../../../../TrendIndicator/TrendIndicator.js');

function LegendValueItem({
  name,
  value,
  index,
  labelFormatter,
  longestLegendValueWidth,
  trend,
  seriesColors,
  seriesNameFormatter,
  maxTrendIndicatorWidth,
  onDimensionChange,
  getColorVisionStyles,
  getColorVisionEventAttrs
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const ref = React.useRef(null);
  const minWidth = 200;
  React.useEffect(() => {
    if (onDimensionChange && ref.current != null) {
      const {
        width,
        height
      } = ref.current.getBoundingClientRect();
      onDimensionChange({
        width: Math.min(minWidth, Math.round(width)),
        height
      });
    }
  }, [onDimensionChange, ref, minWidth]);
  const valueExists = value !== null && value !== undefined;
  return /*#__PURE__*/jsxRuntime.jsxs("tr", {
    ref: ref,
    style: { ...getColorVisionStyles(index)
    },
    ...getColorVisionEventAttrs(index),
    children: [/*#__PURE__*/jsxRuntime.jsx("td", {
      className: LegendValueItem$1["default"].ColorPreview,
      children: /*#__PURE__*/jsxRuntime.jsx(SquareColorPreview.SquareColorPreview, {
        color: seriesColors[index]
      })
    }), /*#__PURE__*/jsxRuntime.jsx("td", {
      className: LegendValueItem$1["default"].Name,
      style: {
        color: selectedTheme.legend.labelColor
      },
      title: name,
      children: /*#__PURE__*/jsxRuntime.jsx("span", {
        children: seriesNameFormatter(name)
      })
    }), /*#__PURE__*/jsxRuntime.jsx("td", {
      className: LegendValueItem$1["default"].alignRight,
      width: longestLegendValueWidth,
      children: /*#__PURE__*/jsxRuntime.jsx("span", {
        style: {
          color: selectedTheme.legend.labelColor
        },
        children: valueExists ? labelFormatter(value) : '-'
      })
    }), trend && valueExists && /*#__PURE__*/jsxRuntime.jsx("td", {
      className: LegendValueItem$1["default"].alignLeft,
      width: maxTrendIndicatorWidth,
      style: {
        minWidth: maxTrendIndicatorWidth,
        paddingLeft: '4px'
      },
      children: /*#__PURE__*/jsxRuntime.jsx("span", {
        children: /*#__PURE__*/jsxRuntime.jsx(TrendIndicator.TrendIndicator, { ...trend
        })
      })
    })]
  }, name);
}

exports.LegendValueItem = LegendValueItem;
