'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var DonutChart = require('../../DonutChart.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var classnames = require('../../../../utilities/classnames.js');
var ComparisonMetric = require('../../../ComparisonMetric/ComparisonMetric.js');

const SCALING_FACTOR = 0.07;
function InnerValue({
  activeValue,
  activeIndex,
  comparisonMetric,
  labelFormatter,
  isAnimated,
  renderInnerValueContent,
  totalValue,
  diameter,
  dimensions
}) {
  var _renderInnerValueCont;

  const selectedTheme = polarisVizCore.useTheme();
  const {
    animatedValue
  } = web.useSpring({
    animatedValue: totalValue,
    from: {
      animatedValue: 0
    },
    config: web.config.stiff,
    default: {
      immediate: !isAnimated
    }
  });
  const fontSize = diameter * SCALING_FACTOR;

  const animatedTotalValue = /*#__PURE__*/jsxRuntime.jsx(web.animated.span, {
    children: animatedValue.to(value => animatedValue.isPaused ? labelFormatter(value) : labelFormatter(Math.abs(Math.floor(value))))
  });

  const activeValueExists = activeValue !== null && activeValue !== undefined;
  const valueToDisplay = activeValueExists ? labelFormatter(activeValue) : animatedTotalValue;
  const innerContent = (_renderInnerValueCont = renderInnerValueContent === null || renderInnerValueContent === void 0 ? void 0 : renderInnerValueContent({
    activeValue,
    activeIndex,
    animatedTotalValue,
    totalValue,
    dimensions
  })) !== null && _renderInnerValueCont !== void 0 ? _renderInnerValueCont : /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(web.animated.p, {
      className: classnames.classNames(DonutChart["default"].ContentValue),
      style: {
        color: selectedTheme.xAxis.labelColor,
        fontSize
      },
      children: valueToDisplay
    }), comparisonMetric != null && !activeValueExists && /*#__PURE__*/jsxRuntime.jsx("div", {
      className: DonutChart["default"].ComparisonMetric,
      children: /*#__PURE__*/jsxRuntime.jsx(ComparisonMetric.ComparisonMetric, {
        metric: comparisonMetric.metric,
        trend: comparisonMetric.trend,
        accessibilityLabel: comparisonMetric.accessibilityLabel
      })
    })]
  });
  return /*#__PURE__*/jsxRuntime.jsx("div", {
    className: DonutChart["default"].ContentWrapper,
    children: innerContent
  });
}

exports.InnerValue = InnerValue;
