'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var React = require('react');
var useOverflowLegend = require('../../../LegendContainer/hooks/useOverflowLegend.js');
var getTrendIndicatorData = require('../../../../utilities/getTrendIndicatorData.js');
var HiddenLegendTooltip = require('../../../LegendContainer/components/HiddenLegendTooltip.js');
var useLegend = require('../../../LegendContainer/hooks/useLegend.js');
var LegendValues$1 = require('./LegendValues.scss.js');
var LegendValueItem = require('./components/LegendValueItem/LegendValueItem.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/* eslint-disable @shopify/strict-component-boundaries */
const TABLE_LEGEND_PADDING = 50;
function LegendValues({
  data: allData,
  activeIndex,
  dimensions,
  legendFullWidth,
  labelFormatter,
  renderHiddenLegendLabel = count => `+${count} more`,
  getColorVisionStyles,
  getColorVisionEventAttrs,
  seriesNameFormatter
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const {
    theme,
    characterWidths
  } = polarisVizCore.useChartContext();
  const legendItemDimensions = React.useRef([{
    width: 0,
    height: 0
  }]);
  const seriesCount = polarisVizCore.clamp({
    amount: allData.length,
    min: 1,
    max: Infinity
  });
  const seriesColors = polarisVizCore.getSeriesColors(seriesCount, selectedTheme);
  const {
    legend: legendData,
    height
  } = useLegend.useLegend({
    showLegend: true,
    data: [{
      series: allData,
      shape: 'Bar'
    }],
    colors: seriesColors,
    dimensions,
    seriesNameFormatter
  });
  const {
    displayedData,
    hiddenData
  } = useOverflowLegend.useOverflowLegend({
    direction: 'vertical',
    data: legendData,
    height,
    legendItemDimensions,
    enableHideOverflow: true
  });
  const hasHiddenData = displayedData.length < allData.length;
  const maxTrendIndicatorWidth = allData.reduce((maxWidth, {
    metadata
  }) => {
    if (!(metadata !== null && metadata !== void 0 && metadata.trend)) {
      return maxWidth;
    }

    const {
      trendIndicatorWidth
    } = getTrendIndicatorData.getTrendIndicatorData(metadata.trend);
    return Math.max(maxWidth, trendIndicatorWidth);
  }, 0);
  const longestLegendNameWidth = React.useMemo(() => {
    return legendData.reduce((previous, current) => {
      const estimatedLegendNameWidth = polarisVizCore.estimateStringWidth(`${seriesNameFormatter(`${current.name || ''}`)}`, characterWidths);

      if (estimatedLegendNameWidth > previous) {
        return estimatedLegendNameWidth;
      }

      return previous;
    }, 0);
  }, [legendData, seriesNameFormatter, characterWidths]);
  const longestLegendValueWidth = React.useMemo(() => {
    return legendData.reduce((previous, current) => {
      const estimatedLegendValueWidth = polarisVizCore.estimateStringWidth(`${labelFormatter(`${current.value || ''}`)}`, characterWidths);

      if (estimatedLegendValueWidth > previous) {
        return estimatedLegendValueWidth;
      }

      return previous;
    }, 0);
  }, [legendData, labelFormatter, characterWidths]);
  const legendTableMaxWidth = React.useMemo(() => longestLegendNameWidth + longestLegendValueWidth + maxTrendIndicatorWidth + TABLE_LEGEND_PADDING, [longestLegendNameWidth, longestLegendValueWidth, maxTrendIndicatorWidth]);
  return /*#__PURE__*/jsxRuntime.jsxs(React__default["default"].Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx("table", {
      className: LegendValues$1["default"].Table,
      style: {
        maxWidth: legendTableMaxWidth,
        width: legendFullWidth ? 'auto' : '100%'
      },
      children: /*#__PURE__*/jsxRuntime.jsx("tbody", {
        children: displayedData.map(({
          name,
          value,
          trend
        }, index) => {
          return /*#__PURE__*/jsxRuntime.jsx(LegendValueItem.LegendValueItem, {
            name: name,
            value: value,
            trend: trend,
            index: index,
            longestLegendValueWidth: longestLegendValueWidth,
            maxTrendIndicatorWidth: maxTrendIndicatorWidth,
            seriesColors: seriesColors,
            seriesNameFormatter: seriesNameFormatter,
            onDimensionChange: dimensions => {
              if (legendItemDimensions.current) {
                legendItemDimensions.current[index] = dimensions;
              }
            },
            getColorVisionEventAttrs: getColorVisionEventAttrs,
            getColorVisionStyles: getColorVisionStyles,
            labelFormatter: labelFormatter
          }, index);
        })
      })
    }), hasHiddenData && /*#__PURE__*/jsxRuntime.jsx(HiddenLegendTooltip.HiddenLegendTooltip, {
      activeIndex: activeIndex,
      colorVisionType: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
      data: hiddenData,
      theme: theme,
      label: renderHiddenLegendLabel(allData.length - displayedData.length),
      lastVisibleIndex: allData.length - hiddenData.length,
      setActivatorWidth: () => null,
      dimensions: dimensions,
      seriesNameFormatter: seriesNameFormatter
    })]
  });
}

exports.LegendValues = LegendValues;
