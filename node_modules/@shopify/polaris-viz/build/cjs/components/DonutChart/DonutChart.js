'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var bucketDataSeries = require('../../utilities/bucketDataSeries.js');
var Chart = require('./Chart.js');
var jsxRuntime = require('react/jsx-runtime');
var ChartContainer = require('../ChartContainer/ChartContainer.js');

function DonutChart(props) {
  const {
    defaultTheme
  } = polarisVizCore.usePolarisVizContext();
  const {
    data: dataSeries,
    theme = defaultTheme,
    comparisonMetric,
    showLegend = true,
    maxSeries,
    showLegendValues = false,
    labelFormatter = value => `${value}`,
    legendFullWidth,
    legendPosition = 'left',
    onError,
    id,
    isAnimated,
    state,
    errorText,
    renderInnerValueContent,
    renderLegendContent,
    renderHiddenLegendLabel,
    renderBucketLegendLabel,
    seriesNameFormatter = value => `${value}`
  } = { ...polarisVizCore.DEFAULT_CHART_PROPS,
    ...props
  };
  const data = maxSeries ? bucketDataSeries.bucketDataSeries({
    dataSeries,
    maxSeries,
    renderBucketLegendLabel
  }) : dataSeries;
  return /*#__PURE__*/jsxRuntime.jsx(ChartContainer.ChartContainer, {
    skeletonType: "Donut",
    data: data,
    onError: onError,
    theme: theme,
    isAnimated: isAnimated,
    id: id,
    children: /*#__PURE__*/jsxRuntime.jsx(Chart.Chart, {
      errorText: errorText,
      state: state,
      data: data,
      labelFormatter: labelFormatter,
      comparisonMetric: comparisonMetric,
      showLegend: showLegend,
      showLegendValues: showLegendValues,
      legendFullWidth: legendFullWidth,
      legendPosition: legendPosition,
      renderInnerValueContent: renderInnerValueContent,
      renderLegendContent: renderLegendContent,
      renderHiddenLegendLabel: renderHiddenLegendLabel,
      seriesNameFormatter: seriesNameFormatter,
      theme: theme
    })
  });
}

exports.DonutChart = DonutChart;
