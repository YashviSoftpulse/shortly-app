'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var endLineTruncate = require('./endLineTruncate.js');
var endWordTruncate = require('./endWordTruncate.js');

function truncateLabels({
  labels,
  targetWidth,
  targetHeight,
  characterWidths,
  skipEndWordTruncate = false
}) {
  const truncatedLabels = [...labels];
  labels.forEach((_, index) => {
    truncatedLabels[index].truncatedWords = [];
    truncatedLabels[index].words = [];
    const words = truncatedLabels[index].text.split(/(\s+)/).filter(word => word.trim().length > 0);

    if (skipEndWordTruncate) {
      truncatedLabels[index].truncatedWords.push(truncatedLabels[index].text);
    } else {
      words.forEach(word => {
        const wordWidth = polarisVizCore.estimateStringWidth(word, characterWidths);
        truncatedLabels[index].words.push({
          word,
          wordWidth
        });

        if (wordWidth > targetWidth) {
          truncatedLabels[index].truncatedWords.push(endWordTruncate.endWordTruncate({
            word,
            targetWidth,
            characterWidths
          }));
        } else {
          truncatedLabels[index].truncatedWords.push(word);
        }
      });
    }

    truncatedLabels[index].truncatedName = truncatedLabels[index].truncatedWords.join(' ');
    truncatedLabels[index].truncatedName = endLineTruncate.endLineTruncate({
      label: truncatedLabels[index].truncatedName,
      targetWidth,
      targetHeight,
      characterWidths
    });
    truncatedLabels[index].truncatedWidth = polarisVizCore.estimateStringWidth(truncatedLabels[index].truncatedName, characterWidths);
    truncatedLabels[index].truncatedWords = truncatedLabels[index].truncatedName.split(' ');
  });
  return truncatedLabels;
}

exports.truncateLabels = truncateLabels;
