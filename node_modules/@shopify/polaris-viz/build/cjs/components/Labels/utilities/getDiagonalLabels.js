'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var getWidestLabel = require('./getWidestLabel.js');
var truncateLabels = require('./truncateLabels.js');

function getDiagonalLabels({
  characterWidths,
  labels,
  longestLabelWidth,
  targetHeight,
  targetWidth
}) {
  const clampedTargetWidth = polarisVizCore.clamp({
    amount: longestLabelWidth,
    min: targetWidth,
    max: polarisVizCore.MAX_DIAGONAL_LABEL_WIDTH
  });
  const truncatedLabels = truncateLabels.truncateLabels({
    labels,
    targetWidth: clampedTargetWidth,
    targetHeight,
    characterWidths,
    skipEndWordTruncate: true
  });
  const lines = [];
  const centerPoint = targetWidth / 2 - polarisVizCore.LINE_HEIGHT / 2;

  for (let i = 0; i < labels.length; i++) {
    lines[i] = [];
    lines[i].push({
      truncatedText: truncatedLabels[i].truncatedName,
      fullText: truncatedLabels[i].text,
      y: centerPoint,
      x: centerPoint,
      dominantBaseline: 'hanging',
      width: clampedTargetWidth,
      height: polarisVizCore.LINE_HEIGHT,
      textAnchor: 'end',
      transform: `rotate(-45)`
    });
  }

  const {
    truncatedWidth
  } = getWidestLabel.getWidestLabel(truncatedLabels);
  return {
    lines,
    containerHeight: polarisVizCore.clamp({
      amount: getRotatedHeight(truncatedWidth, 45, targetHeight),
      min: 0,
      max: polarisVizCore.MAX_DIAGONAL_VISIBLE_HEIGHT
    })
  };
}

function getRotatedHeight(width, angle, originalHeight) {
  const radians = Math.PI / 180 * angle;
  const hypotenuse = width * Math.sin(radians);
  const opp = originalHeight * Math.cos(radians);
  return Math.round(hypotenuse + opp);
}

exports.getDiagonalLabels = getDiagonalLabels;
