'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var getDiagonalLabels = require('../utilities/getDiagonalLabels.js');
var getHorizontalLabels = require('../utilities/getHorizontalLabels.js');
var getVerticalLabels = require('../utilities/getVerticalLabels.js');

function useLabels({
  allowLineWrap,
  labels,
  onHeightChange = () => {},
  targetWidth
}) {
  const {
    characterWidths
  } = polarisVizCore.useChartContext();
  const preparedLabels = React.useMemo(() => {
    return labels.map(label => {
      return {
        text: label,
        words: [],
        truncatedWords: [],
        truncatedName: '',
        truncatedWidth: 0
      };
    });
  }, [labels]);
  const longestLabelWidth = React.useMemo(() => {
    return labels.reduce((prev, string) => {
      const newWidth = polarisVizCore.estimateStringWidth(string, characterWidths);

      if (newWidth > prev) {
        return newWidth;
      }

      return prev;
    }, 0);
  }, [labels, characterWidths]);
  const {
    lines,
    containerHeight
  } = React.useMemo(() => {
    const shouldDrawHorizontal = checkIfShouldDrawHorizontal({
      allowLineWrap,
      longestLabelWidth,
      targetWidth
    });
    const shouldDrawDiagonal = targetWidth > polarisVizCore.DIAGONAL_LABEL_MIN_WIDTH;
    const shouldDrawVertical = targetWidth > polarisVizCore.VERTICAL_LABEL_MIN_WIDTH;

    switch (true) {
      case shouldDrawHorizontal:
        {
          return getHorizontalLabels.getHorizontalLabels({
            labels: preparedLabels,
            targetWidth,
            targetHeight: polarisVizCore.HORIZONTAL_LABEL_TARGET_HEIGHT,
            characterWidths
          });
        }

      case shouldDrawDiagonal:
        {
          return getDiagonalLabels.getDiagonalLabels({
            characterWidths,
            labels: preparedLabels,
            longestLabelWidth,
            targetHeight: polarisVizCore.LINE_HEIGHT,
            targetWidth
          });
        }

      case shouldDrawVertical:
        {
          return getVerticalLabels.getVerticalLabels({
            characterWidths,
            labels: preparedLabels,
            longestLabelWidth,
            targetWidth
          });
        }

      default:
        {
          return {
            lines: [],
            containerHeight: 0
          };
        }
    }
  }, [allowLineWrap, targetWidth, characterWidths, preparedLabels, longestLabelWidth]);
  React.useEffect(() => {
    onHeightChange(containerHeight);
  }, [containerHeight, onHeightChange]);
  return {
    lines,
    containerHeight
  };
}

function checkIfShouldDrawHorizontal({
  allowLineWrap,
  longestLabelWidth,
  targetWidth
}) {
  const isLabelLongerThanTarget = targetWidth > longestLabelWidth;

  if (allowLineWrap === false) {
    return isLabelLongerThanTarget;
  }

  return targetWidth >= polarisVizCore.HORIZONTAL_LABEL_MIN_WIDTH || isLabelLongerThanTarget;
}

exports.useLabels = useLabels;
