'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactDom = require('react-dom');
var polarisVizCore = require('@shopify/polaris-viz-core');
var constants = require('../../../../constants.js');
var useBrowserCheck = require('../../../../hooks/useBrowserCheck.js');
var AnnotationContent$1 = require('./AnnotationContent.scss.js');
var jsxRuntime = require('react/jsx-runtime');

const MAX_WIDTH = 350;
function AnnotationContent({
  annotation,
  drawableWidth,
  index,
  onMouseLeave,
  parentRef,
  tabIndex,
  x,
  y
}) {
  var _bounds$width;

  const selectedTheme = polarisVizCore.useTheme();
  const {
    isFirefox
  } = useBrowserCheck.useBrowserCheck();
  const [ref, setRef] = React.useState(null);
  const [bounds, setBounds] = React.useState();
  React.useLayoutEffect(() => {
    setBounds(ref === null || ref === void 0 ? void 0 : ref.getBoundingClientRect());
  }, [ref]);
  React.useEffect(() => {
    const tooltip = document.querySelector('[data-tooltip]');

    if (tooltip) {
      tooltip.style.display = 'none';
    }

    return () => {
      if (tooltip) {
        tooltip.style.display = 'block';
      }
    };
  }, []);

  if (annotation.content == null) {
    return null;
  }

  const {
    content,
    title,
    linkText = 'Learn more',
    linkUrl
  } = annotation.content;
  const width = (_bounds$width = bounds === null || bounds === void 0 ? void 0 : bounds.width) !== null && _bounds$width !== void 0 ? _bounds$width : 0;
  let xPosition = x - width / 2;

  if (xPosition + width > drawableWidth) {
    xPosition = drawableWidth - width;
  }

  return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/jsxRuntime.jsx(Wrapper, {
    height: "100%",
    width: "100%",
    style: {
      pointerEvents: 'none',
      overflow: 'visible'
    },
    x: polarisVizCore.clamp({
      amount: xPosition,
      min: 0,
      max: drawableWidth
    }),
    y: y,
    parentRef: parentRef,
    children: /*#__PURE__*/jsxRuntime.jsxs("div", {
      className: AnnotationContent$1["default"].Container,
      "data-block-tooltip-events": true,
      onMouseLeave: onMouseLeave,
      ref: setRef,
      style: {
        width: 'fit-content',
        maxWidth: Math.min(drawableWidth, MAX_WIDTH),
        // Firefox doesn't support blur so we'll remove
        // the opacity on this element.
        background: polarisVizCore.changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : constants.TOOLTIP_BG_OPACITY)
      },
      id: `annotation-content-${index}`,
      role: "dialog",
      children: [title != null && /*#__PURE__*/jsxRuntime.jsx("p", {
        className: AnnotationContent$1["default"].Title,
        style: {
          color: selectedTheme.tooltip.textColor
        },
        role: "heading",
        "aria-level": 2,
        children: title
      }), /*#__PURE__*/jsxRuntime.jsxs("p", {
        className: AnnotationContent$1["default"].Content,
        style: {
          color: selectedTheme.tooltip.textColor
        },
        "data-is-annotation-content": true,
        children: [content, linkUrl != null && /*#__PURE__*/jsxRuntime.jsx("a", {
          href: linkUrl,
          className: AnnotationContent$1["default"].Link,
          tabIndex: tabIndex,
          style: {
            color: selectedTheme.annotations.linkColor
          },
          children: linkText
        })]
      })]
    })
  }), parentRef !== null && parentRef !== void 0 ? parentRef : document.body);
}

function Wrapper({
  children,
  parentRef,
  ...theRest
}) {
  const Tag = parentRef ? 'foreignObject' : 'div';
  return /*#__PURE__*/jsxRuntime.jsx(Tag, { ...theRest,
    children: children
  });
}

exports.AnnotationContent = AnnotationContent;
