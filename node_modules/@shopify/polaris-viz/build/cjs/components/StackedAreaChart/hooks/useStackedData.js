'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var d3Shape = require('d3-shape');
var useIndexForLabels = require('../../../hooks/useIndexForLabels.js');
var getStackedValues = require('../../../utilities/getStackedValues.js');
var useFormattedLabels = require('../../../hooks/useFormattedLabels.js');

function useStackedData({
  data,
  xAxisOptions
}) {
  const indexForLabels = useIndexForLabels.useIndexForLabels(data);
  const {
    formattedLabels
  } = useFormattedLabels.useFormattedLabels({
    data: [data[indexForLabels]],
    labelFormatter: xAxisOptions.labelFormatter
  });
  const stackedValues = getStackedValues.getStackedValues({
    series: data,
    labels: formattedLabels,
    order: d3Shape.stackOrderReverse,
    offset: d3Shape.stackOffsetNone
  });
  const longestSeriesLength = React.useMemo(() => {
    return Math.max(...stackedValues.map(stack => stack.length)) - 1;
  }, [stackedValues]);
  const longestSeriesIndex = React.useMemo(() => data.reduce((maxIndex, currentSeries, currentIndex) => {
    return data[maxIndex].data.length < currentSeries.data.length ? currentIndex : maxIndex;
  }, 0), [data]);
  return {
    labels: formattedLabels,
    longestSeriesIndex,
    longestSeriesLength,
    stackedValues
  };
}

exports.useStackedData = useStackedData;
