'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var Area = require('./Area.scss.js');
var jsxRuntime = require('react/jsx-runtime');

function AnimatedArea({
  activeLineIndex,
  animationIndex,
  areaGenerator,
  colors,
  data,
  duration,
  id,
  index,
  lineGenerator,
  selectedTheme,
  zeroLineValues
}) {
  const {
    shouldAnimate
  } = polarisVizCore.useChartContext();
  const delay = animationIndex * (duration / 2);
  const mounted = React.useRef(false);
  const springConfig = polarisVizCore.useSpringConfig({
    shouldAnimate,
    animationDelay: shouldAnimate ? delay : 0,
    mountedSpringConfig: polarisVizCore.AREAS_TRANSITION_CONFIG,
    unmountedSpringConfig: polarisVizCore.AREAS_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedAreaShape,
    animatedLineShape,
    opacity
  } = web.useSpring({
    from: {
      opacity: 0,
      animatedAreaShape: areaGenerator(mounted.current ? data : zeroLineValues),
      animatedLineShape: lineGenerator(mounted.current ? data : zeroLineValues)
    },
    to: {
      opacity: 0.25,
      animatedAreaShape: areaGenerator(data),
      animatedLineShape: lineGenerator(data)
    },
    ...springConfig
  });

  if (animatedAreaShape == null || animatedLineShape == null) {
    return null;
  }

  const gradient = polarisVizCore.getGradientFromColor(colors[index]);
  return /*#__PURE__*/jsxRuntime.jsxs("g", { ...polarisVizCore.getColorVisionEventAttrs({
      type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
      index
    }),
    tabIndex: -1,
    children: [/*#__PURE__*/jsxRuntime.jsx("defs", {
      children: /*#__PURE__*/jsxRuntime.jsx(polarisVizCore.LinearGradientWithStops, {
        id: `area-${id}-${index}`,
        gradient: gradient,
        gradientUnits: "userSpaceOnUse",
        y1: "100%",
        y2: "0%"
      })
    }), /*#__PURE__*/jsxRuntime.jsxs("g", {
      style: polarisVizCore.getColorVisionStylesForActiveIndex({
        activeIndex: activeLineIndex,
        index
      }),
      "aria-hidden": "true",
      tabIndex: -1,
      className: Area["default"].Group,
      children: [/*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
        d: animatedLineShape,
        fill: "none",
        stroke: `url(#area-${id}-${index})`,
        strokeWidth: selectedTheme.line.width
      }, `line-${index}`), /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
        style: {
          opacity
        },
        d: animatedAreaShape,
        fill: `url(#area-${id}-${index})`
      }, index)]
    })]
  });
}

exports.AnimatedArea = AnimatedArea;
