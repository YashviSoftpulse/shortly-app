'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var getTooltipContentRenderer = require('../../utilities/getTooltipContentRenderer.js');
var fillMissingDataPoints = require('../../utilities/fillMissingDataPoints.js');
var Chart = require('./Chart.js');
var jsxRuntime = require('react/jsx-runtime');
var getAxisOptions = require('../../utilities/getAxisOptions.js');
var normalizeData = require('../../utilities/normalizeData.js');
var SkipLink = require('../SkipLink/SkipLink.js');
var ChartContainer = require('../ChartContainer/ChartContainer.js');
var ChartSkeleton = require('../ChartSkeleton/ChartSkeleton.js');

function StackedAreaChart(props) {
  const {
    defaultTheme
  } = polarisVizCore.usePolarisVizContext();
  const {
    annotations = [],
    xAxisOptions,
    yAxisOptions,
    data: dataSeries,
    state,
    errorText,
    onError,
    tooltipOptions,
    id,
    isAnimated,
    renderLegendContent,
    seriesNameFormatter = value => `${value}`,
    showLegend = true,
    skipLinkText,
    theme = defaultTheme,
    renderHiddenLegendLabel
  } = { ...polarisVizCore.DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints.fillMissingDataPoints(dataSeries, true);
  const skipLinkAnchorId = React.useRef(polarisVizCore.uniqueId('stackedAreaChart'));
  const renderTooltip = getTooltipContentRenderer.getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });

  if (data.length === 0) {
    return null;
  }

  const xAxisOptionsWithDefaults = getAxisOptions.getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getAxisOptions.getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData.normalizeData(annotations, 'startKey');
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [skipLinkText == null || skipLinkText.length === 0 ? null : /*#__PURE__*/jsxRuntime.jsx(SkipLink.SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), /*#__PURE__*/jsxRuntime.jsx(ChartContainer.ChartContainer, {
      data: data,
      theme: theme,
      id: id,
      isAnimated: isAnimated,
      onError: onError,
      children: state !== polarisVizCore.ChartState.Success ? /*#__PURE__*/jsxRuntime.jsx(ChartSkeleton.ChartSkeleton, {
        state: state,
        errorText: errorText,
        theme: theme
      }) : /*#__PURE__*/jsxRuntime.jsx(Chart.Chart, {
        annotationsLookupTable: annotationsLookupTable,
        data: data,
        renderLegendContent: renderLegendContent,
        renderTooltipContent: renderTooltip,
        seriesNameFormatter: seriesNameFormatter,
        showLegend: showLegend,
        theme: theme,
        xAxisOptions: xAxisOptionsWithDefaults,
        yAxisOptions: yAxisOptionsWithDefaults,
        renderHiddenLegendLabel: renderHiddenLegendLabel
      })
    }), skipLinkText == null || skipLinkText.length === 0 ? null : /*#__PURE__*/jsxRuntime.jsx(SkipLink.SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

exports.StackedAreaChart = StackedAreaChart;
