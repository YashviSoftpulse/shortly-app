'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var utilities = require('../../TooltipWrapper/utilities.js');

// The space between the cursor and the tooltip
const TOOLTIP_MARGIN = 20;
const SCROLLBAR_WIDTH = 20;
function getAlteredStackedAreaChartPosition(props) {
  const {
    currentX,
    currentY,
    chartBounds,
    margin,
    tooltipDimensions
  } = props;
  let x = currentX;
  let y = currentY; // Y POSITIONING
  // If y is below the chart, adjust the tooltip position to the bottom of the chart
  //

  y = currentY >= chartBounds.y + chartBounds.height ? chartBounds.height - tooltipDimensions.height - TOOLTIP_MARGIN - margin.Bottom : currentY; // X POSITIONING

  const right = utilities.getRightPosition(x, props);
  x = right.value;

  if (right.wasOutsideBounds) {
    const left = getLeftPosition(x);
    x = left.value;
  }

  return {
    x: polarisVizCore.clamp({
      amount: x,
      min: TOOLTIP_MARGIN,
      max: window.innerWidth - props.tooltipDimensions.width - TOOLTIP_MARGIN - SCROLLBAR_WIDTH
    }),
    y: polarisVizCore.clamp({
      amount: y,
      min: window.scrollY + TOOLTIP_MARGIN,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN
    })
  };
}

function getLeftPosition(value) {
  return {
    value: value - TOOLTIP_MARGIN,
    wasOutsideBounds: false
  };
}

exports.getAlteredStackedAreaChartPosition = getAlteredStackedAreaChartPosition;
