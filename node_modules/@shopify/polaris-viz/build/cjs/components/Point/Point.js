'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var web = require('@react-spring/web');
var Point$1 = require('./Point.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var classnames = require('../../utilities/classnames.js');

const DEFAULT_RADIUS = 5;
const Point = /*#__PURE__*/React.memo(function Point({
  dataType,
  cx,
  cy,
  active,
  color,
  onFocus,
  index,
  ariaLabelledby,
  tabIndex = -1,
  isAnimated,
  ariaHidden = false,
  visuallyHidden = false
}) {
  const selectedTheme = polarisVizCore.useTheme();

  const handleFocus = () => {
    if (onFocus != null) {
      return onFocus({
        index,
        x: typeof cx === 'number' ? cx : cx.get(),
        y: typeof cy === 'number' ? cy : cy.get()
      });
    }
  };

  const radius = active ? DEFAULT_RADIUS : 0;
  const {
    animatedRadius
  } = web.useSpring({
    animatedRadius: radius,
    from: {
      animatedRadius: 0
    },
    config: {
      duration: polarisVizCore.BASE_ANIMATION_DURATION
    },
    default: {
      immediate: !isAnimated
    }
  });
  return /*#__PURE__*/jsxRuntime.jsx(web.animated.circle, {
    "data-type": dataType,
    "data-index": index,
    role: ariaLabelledby == null ? '' : 'image',
    "aria-labelledby": ariaLabelledby,
    tabIndex: tabIndex,
    cx: cx,
    cy: cy,
    r: isAnimated ? animatedRadius : radius,
    fill: color,
    stroke: selectedTheme.line.pointStroke,
    strokeWidth: 2,
    onFocus: handleFocus,
    className: classnames.classNames(Point$1["default"].Point, visuallyHidden ? Point$1["default"].VisuallyHidden : null),
    "aria-hidden": ariaHidden
  });
});

exports.Point = Point;
