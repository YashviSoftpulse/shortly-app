'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var polarisVizCore = require('@shopify/polaris-viz-core');
var getCSSBackgroundFromColor = require('../../../../utilities/getCSSBackgroundFromColor.js');
var BarLabel$1 = require('./BarLabel.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var ComparisonMetric = require('../../../ComparisonMetric/ComparisonMetric.js');
var classnames = require('../../../../utilities/classnames.js');

function BarLabel({
  activeIndex,
  index,
  label,
  value,
  color,
  comparisonMetric,
  direction,
  legendPosition
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const {
    labelColor,
    valueColor
  } = selectedTheme.legend;
  const comparisonIndicator = comparisonMetric ? /*#__PURE__*/jsxRuntime.jsx(ComparisonMetric.ComparisonMetric, { ...comparisonMetric
  }) : null;
  const angle = direction === 'horizontal' ? 90 : 180;
  const backgroundColor = getCSSBackgroundFromColor.getCSSBackgroundFromColor(color, angle);
  return /*#__PURE__*/jsxRuntime.jsxs("li", {
    className: classnames.classNames(BarLabel$1["default"].Container, legendPosition.includes('bottom') ? BarLabel$1["default"].ContaineBottomLabel : BarLabel$1["default"].ContainerDefaultLabel),
    style: polarisVizCore.getColorVisionStylesForActiveIndex({
      activeIndex,
      index
    }),
    ...polarisVizCore.getColorVisionEventAttrs({
      type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
      index
    }),
    children: [/*#__PURE__*/jsxRuntime.jsx("div", {
      style: {
        background: backgroundColor
      },
      className: BarLabel$1["default"].LabelColor
    }), /*#__PURE__*/jsxRuntime.jsxs("div", {
      className: BarLabel$1["default"].Label,
      children: [/*#__PURE__*/jsxRuntime.jsx("div", {
        style: {
          color: labelColor
        },
        className: direction === 'horizontal' ? BarLabel$1["default"].FormattedHorizontalLabel : BarLabel$1["default"].FormattedVerticalLabel,
        children: label
      }), /*#__PURE__*/jsxRuntime.jsxs("div", {
        style: {
          color: valueColor
        },
        className: direction === 'horizontal' ? BarLabel$1["default"].ValueHorizontalContainer : BarLabel$1["default"].ValueContainer,
        children: [/*#__PURE__*/jsxRuntime.jsx("span", {
          className: BarLabel$1["default"].Value,
          children: value
        }), comparisonIndicator]
      })]
    })]
  });
}

exports.BarLabel = BarLabel;
