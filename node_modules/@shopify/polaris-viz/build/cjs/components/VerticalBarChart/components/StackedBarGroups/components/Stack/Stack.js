'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var web = require('@react-spring/web');
var Stack$1 = require('./Stack.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var useWatchColorVisionEvents = require('../../../../../../hooks/ColorVisionA11y/useWatchColorVisionEvents.js');
var getBorderRadiusForStackedValues = require('../../../../utilities/getBorderRadiusForStackedValues.js');
var getYPosition = require('../../../../utilities/getYPosition.js');
var GradientDefs = require('../../../../../shared/GradientDefs/GradientDefs.js');

function Stack({
  activeBarGroup,
  animationDelay,
  data,
  gaps,
  groupIndex,
  id,
  width,
  x,
  yScale
}) {
  const [activeBarIndex, setActiveBarIndex] = React.useState(-1);
  const {
    theme,
    shouldAnimate
  } = polarisVizCore.useChartContext();
  const keys = data[0] ? Object.keys(data[0].data) : [];
  useWatchColorVisionEvents.useWatchColorVisionEvents({
    type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      if (detail.index === -1 || activeBarGroup === -1 || activeBarGroup === groupIndex) {
        setActiveBarIndex(detail.index);
      }
    }
  });
  const {
    transform
  } = web.useSpring({
    from: {
      transform: `scale(1, 0)`
    },
    to: {
      transform: `scale(1, 1)`
    },
    config: polarisVizCore.BARS_TRANSITION_CONFIG,
    delay: shouldAnimate ? animationDelay : 0,
    default: {
      immediate: !shouldAnimate
    }
  });
  return /*#__PURE__*/jsxRuntime.jsx(web.animated.g, {
    style: {
      transform,
      transformOrigin: `0px ${yScale(0)}px`
    },
    children: data.map((data, index) => {
      const [start, end] = data;
      const height = Math.abs(yScale(end) - yScale(start));
      const values = data.data ? Object.values(data.data) : [];
      const ariaLabel = `${keys[index]} ${values[index]}`;
      const pathD = polarisVizCore.getRoundedRectPath({
        height,
        width,
        borderRadius: getBorderRadiusForStackedValues.getBorderRadiusForStackedValues(values, index)
      });
      const y = getYPosition.getYPosition({
        start,
        end,
        groupIndex: index,
        gaps: gaps[groupIndex],
        yScale
      });
      return /*#__PURE__*/jsxRuntime.jsxs("g", {
        "aria-hidden": "true",
        children: [/*#__PURE__*/jsxRuntime.jsx("path", {
          fill: `url(#${GradientDefs.getGradientDefId(theme, index, id)})`,
          d: pathD,
          transform: `translate(${x},${y})`,
          style: polarisVizCore.getColorVisionStylesForActiveIndex({
            activeIndex: activeBarIndex,
            index
          }),
          "aria-hidden": "true"
        }, index), /*#__PURE__*/jsxRuntime.jsx("rect", {
          className: Stack$1["default"].Bar,
          fill: "transparent",
          height: height + polarisVizCore.STACKED_BAR_GAP,
          width: width,
          transform: `translate(${x},${y})`,
          ...polarisVizCore.getColorVisionEventAttrs({
            type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
            index
          }),
          tabIndex: -1,
          role: "listitem",
          "aria-label": ariaLabel
        })]
      }, `${groupIndex}-${index}`);
    })
  });
}

exports.Stack = Stack;
