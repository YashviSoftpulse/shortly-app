'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useBarSpringConfig = require('../../../../hooks/useBarSpringConfig.js');
var VerticalBar$1 = require('./VerticalBar.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var ZeroValueLine = require('../../../shared/ZeroValueLine/ZeroValueLine.js');

const VerticalBar = /*#__PURE__*/React.memo(function Bar({
  animationDelay = 0,
  ariaLabel,
  color,
  height,
  index,
  rawValue,
  role,
  width,
  x,
  zeroPosition,
  areAllNegative
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const borderRadius = selectedTheme.bar.borderRadius;
  const treatAsNegative = rawValue < 0;
  const zeroValue = rawValue === 0;
  const yPosition = React.useMemo(() => {
    return treatAsNegative ? zeroPosition + height : zeroPosition - height;
  }, [height, treatAsNegative, zeroPosition]);
  const style = React.useMemo(() => {
    if (yPosition == null) return;
    return {
      transform: `translateX(${treatAsNegative ? x + width : x}px)`
    };
  }, [yPosition, treatAsNegative, x, width]);
  const getPath = React.useCallback((height = 0, width = 0) => {
    return polarisVizCore.getRoundedRectPath({
      height,
      width,
      borderRadius: `${borderRadius} ${borderRadius} 0 0`
    });
  }, [borderRadius]);
  const springConfig = useBarSpringConfig.useBarSpringConfig({
    animationDelay
  });
  const rotate = `${treatAsNegative ? 'rotate(180)' : 'rotate(0)'}`;
  const {
    pathD,
    transform
  } = web.useSpring({
    from: {
      pathD: getPath(1, width),
      transform: `translate(0 ${zeroPosition}) ${rotate}`
    },
    to: {
      pathD: getPath(height, width),
      transform: `translate(0 ${yPosition}) ${rotate}`
    },
    ...springConfig
  });
  return /*#__PURE__*/jsxRuntime.jsx(React.Fragment, {
    children: !zeroValue ? /*#__PURE__*/jsxRuntime.jsx("g", {
      "aria-hidden": "true",
      style: style,
      children: /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
        "data-id": `bar-${index}`,
        "data-index": index,
        "data-type": polarisVizCore.DataType.Bar,
        d: pathD,
        fill: color,
        "aria-label": ariaLabel,
        role: role,
        className: VerticalBar$1["default"].Bar,
        "aria-hidden": "true",
        transform: transform
      })
    }) : /*#__PURE__*/jsxRuntime.jsx(ZeroValueLine.ZeroValueLine, {
      x: x + width / 2,
      y: yPosition,
      direction: "vertical",
      areAllNegative: areAllNegative
    })
  });
});

exports.VerticalBar = VerticalBar;
