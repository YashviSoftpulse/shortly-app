'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useBarSpringConfig = require('../../../hooks/useBarSpringConfig.js');
var Bar$1 = require('./Bar.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var ZeroValueLine = require('../ZeroValueLine/ZeroValueLine.js');

const Bar = /*#__PURE__*/React.memo(function Bar({
  animationDelay = 0,
  areAllNegative,
  ariaLabel,
  color,
  height,
  index,
  isActive = true,
  transform,
  width,
  x,
  y
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const borderRadius = `0 ${selectedTheme.bar.borderRadius} ${selectedTheme.bar.borderRadius} 0`;
  const getPath = React.useCallback((height = 0, width = 0) => {
    return polarisVizCore.getRoundedRectPath({
      height,
      width,
      borderRadius
    });
  }, [borderRadius]);
  const springConfig = useBarSpringConfig.useBarSpringConfig({
    animationDelay
  });
  const spring = web.useSpring({
    from: {
      pathD: getPath(height, 1)
    },
    to: {
      pathD: getPath(height, width)
    },
    ...springConfig
  });
  const ariaHidden = !ariaLabel;
  return /*#__PURE__*/jsxRuntime.jsx("g", {
    className: Bar$1["default"].Group,
    "aria-hidden": ariaHidden,
    role: "img",
    "aria-label": ariaLabel,
    transform: `translate(${x}, ${y})`,
    children: width !== 0 ? /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
      d: spring.pathD,
      "data-id": `bar-${index}`,
      "data-index": index,
      "data-type": polarisVizCore.DataType.Bar,
      fill: color,
      "aria-hidden": "true",
      style: {
        transform,
        opacity: isActive ? polarisVizCore.COLOR_VISION_ACTIVE_OPACITY : polarisVizCore.COLOR_VISION_FADED_OPACITY
      },
      className: Bar$1["default"].Bar
    }) : /*#__PURE__*/jsxRuntime.jsx(web.animated.g, {
      style: {
        transform: `translate(${x}px, ${-y}px)`
      },
      children: /*#__PURE__*/jsxRuntime.jsx(ZeroValueLine.ZeroValueLine, {
        x: x,
        y: y + height / 2,
        direction: "horizontal",
        areAllNegative: areAllNegative
      })
    })
  });
});

exports.Bar = Bar;
