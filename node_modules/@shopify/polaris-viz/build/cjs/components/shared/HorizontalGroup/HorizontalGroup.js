'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var HorizontalGroup$1 = require('./HorizontalGroup.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var useWatchColorVisionEvents = require('../../../hooks/ColorVisionA11y/useWatchColorVisionEvents.js');
var GroupLabel = require('../GroupLabel/GroupLabel.js');
var HorizontalStackedBars = require('../HorizontalStackedBars/HorizontalStackedBars.js');
var HorizontalBars = require('../HorizontalBars/HorizontalBars.js');

function HorizontalGroup({
  areAllNegative,
  ariaLabel,
  barHeight,
  containerWidth,
  data,
  groupHeight,
  id,
  index,
  isSimple,
  isStacked,
  name,
  stackedValues,
  xAxisOptions,
  yAxisOptions,
  xScale,
  zeroPosition
}) {
  const [activeGroupIndex, setActiveGroupIndex] = React.useState(-1);
  useWatchColorVisionEvents.useWatchColorVisionEvents({
    type: polarisVizCore.COLOR_VISION_GROUP_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveGroupIndex(detail.index);
    }
  });
  const dataKeys = React.useMemo(() => {
    return data.map(({
      name
    }) => name !== null && name !== void 0 ? name : '');
  }, [data]);
  const rowHeight = React.useMemo(() => {
    const barPlusSpaceHeight = barHeight + polarisVizCore.HORIZONTAL_SPACE_BETWEEN_SINGLE;

    if (isStacked) {
      return polarisVizCore.HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight;
    }

    return polarisVizCore.HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight * data.length;
  }, [barHeight, data.length, isStacked]);
  const animationDelay = index * (polarisVizCore.LOAD_ANIMATION_DURATION / data[0].data.length);
  return /*#__PURE__*/jsxRuntime.jsxs("g", {
    style: polarisVizCore.getColorVisionStylesForActiveIndex({
      activeIndex: activeGroupIndex,
      index
    }),
    ...polarisVizCore.getColorVisionEventAttrs({
      type: polarisVizCore.COLOR_VISION_GROUP_ITEM,
      index
    }),
    "data-type": polarisVizCore.DataType.BarGroup,
    "data-index": index,
    "aria-hidden": "false",
    "aria-label": ariaLabel,
    role: "list",
    className: HorizontalGroup$1["default"].Group,
    children: [/*#__PURE__*/jsxRuntime.jsx("rect", {
      fill: "transparent",
      height: groupHeight,
      width: containerWidth,
      y: -(groupHeight - rowHeight) / 2
    }), /*#__PURE__*/jsxRuntime.jsx(GroupLabel.GroupLabel, {
      areAllNegative: areAllNegative,
      containerWidth: containerWidth,
      label: yAxisOptions.labelFormatter(name),
      zeroPosition: zeroPosition
    }), isStacked ? /*#__PURE__*/jsxRuntime.jsx(HorizontalStackedBars.HorizontalStackedBars, {
      activeGroupIndex: activeGroupIndex,
      animationDelay: animationDelay,
      ariaLabel: ariaLabel,
      barHeight: barHeight,
      dataKeys: dataKeys,
      groupIndex: index,
      id: id,
      name: name,
      stackedValues: stackedValues,
      xScale: xScale,
      areAllNegative: areAllNegative,
      labelFormatter: xAxisOptions.labelFormatter,
      isSimple: isSimple
    }) : /*#__PURE__*/jsxRuntime.jsx(HorizontalBars.HorizontalBars, {
      animationDelay: animationDelay,
      activeGroupIndex: activeGroupIndex,
      barHeight: barHeight,
      data: data,
      groupIndex: index,
      id: id,
      isSimple: isSimple,
      labelFormatter: xAxisOptions.labelFormatter,
      name: name,
      xScale: xScale,
      zeroPosition: zeroPosition,
      containerWidth: containerWidth,
      areAllNegative: areAllNegative
    })]
  });
}

exports.HorizontalGroup = HorizontalGroup;
