'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var web = require('@react-spring/web');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useBarSpringConfig = require('../../../../../hooks/useBarSpringConfig.js');
var jsxRuntime = require('react/jsx-runtime');

function StackedBar({
  animationDelay,
  activeBarIndex,
  ariaLabel,
  borderRadius,
  color,
  height,
  seriesIndex,
  setActiveBarIndex,
  width,
  x,
  zeroPosition
}) {
  const springConfig = useBarSpringConfig.useBarSpringConfig({
    animationDelay
  });
  const {
    transform
  } = web.useSpring({
    from: {
      transform: `scale(0, 1)`
    },
    to: {
      transform: `scale(1, 1)`
    },
    ...springConfig
  });
  const pathD = polarisVizCore.getRoundedRectPath({
    height,
    width,
    borderRadius
  });
  return /*#__PURE__*/jsxRuntime.jsxs(web.animated.g, {
    style: {
      transform,
      transformOrigin: `${zeroPosition}px 0px`
    },
    children: [/*#__PURE__*/jsxRuntime.jsx("path", {
      d: pathD,
      fill: `url(#${color})`,
      height: height,
      style: {
        outline: 'none',
        transformOrigin: `${x}px 0px`,
        ...polarisVizCore.getColorVisionStylesForActiveIndex({
          activeIndex: activeBarIndex,
          index: seriesIndex
        })
      },
      width: width,
      transform: `translate(${x},0)`,
      "aria-hidden": "true"
    }), /*#__PURE__*/jsxRuntime.jsx("rect", {
      fill: "transparent",
      height: height,
      width: width + polarisVizCore.STACKED_BAR_GAP,
      x: x,
      ...polarisVizCore.getColorVisionEventAttrs({
        type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
        index: seriesIndex
      }),
      "aria-label": ariaLabel,
      role: "img",
      tabIndex: -1,
      onMouseOver: () => setActiveBarIndex(seriesIndex),
      onMouseLeave: () => setActiveBarIndex(-1)
    })]
  });
}

exports.StackedBar = StackedBar;
