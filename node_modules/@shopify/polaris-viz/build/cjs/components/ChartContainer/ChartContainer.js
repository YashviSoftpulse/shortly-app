'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var getChartId = require('../../utilities/getChartId.js');
var characterWidths = require('../../data/character-widths.json.js');
var characterWidthOffsets = require('../../data/character-width-offsets.json.js');
var ChartContainer$1 = require('./ChartContainer.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var usePrefersReducedMotion = require('../../hooks/usePrefersReducedMotion.js');
var ChartDimensions = require('./components/ChartDimensions/ChartDimensions.js');

const ChartContainer = props => {
  var _props$id;

  const id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : polarisVizCore.uniqueId('chart');
  const {
    prefersReducedMotion
  } = usePrefersReducedMotion.usePrefersReducedMotion();
  const [isPrinting, setIsPrinting] = React.useState(false);
  const dataTooBigToAnimate = React.useMemo(() => {
    return polarisVizCore.isLargeDataSet(props.data, props.type);
  }, [props.data, props.type]);
  const value = React.useMemo(() => {
    const shouldAnimate = props.isAnimated && !prefersReducedMotion && !dataTooBigToAnimate;
    const printFriendlyTheme = isPrinting ? 'Print' : props.theme;
    return {
      shouldAnimate,
      id,
      characterWidths: characterWidths["default"],
      characterWidthOffsets: characterWidthOffsets["default"],
      theme: printFriendlyTheme,
      isPerformanceImpacted: dataTooBigToAnimate
    };
  }, [id, isPrinting, prefersReducedMotion, props.isAnimated, props.theme, dataTooBigToAnimate]);
  const {
    chartContainer,
    grid
  } = polarisVizCore.useTheme(value.theme); // If there is no vertical overflow and a custom padding is not defined, add padding so that the top y-axis label is not cut off

  const padding = !grid.verticalOverflow && chartContainer.padding == null ? '3px 0 0 0' : chartContainer.padding;
  return /*#__PURE__*/jsxRuntime.jsx(polarisVizCore.ChartContext.Provider, {
    value: value,
    children: /*#__PURE__*/jsxRuntime.jsx("div", {
      className: ChartContainer$1["default"].ChartContainer,
      style: {
        background: chartContainer.backgroundColor,
        padding,
        borderRadius: chartContainer.borderRadius
      },
      id: getChartId.getChartId(value.id),
      children: /*#__PURE__*/jsxRuntime.jsx(ChartDimensions.ChartDimensions, {
        data: props.data,
        onError: props.onError,
        onIsPrintingChange: setIsPrinting,
        skeletonType: props.skeletonType,
        sparkChart: props.sparkChart,
        children: props.children
      })
    })
  });
};

exports.ChartContainer = ChartContainer;
