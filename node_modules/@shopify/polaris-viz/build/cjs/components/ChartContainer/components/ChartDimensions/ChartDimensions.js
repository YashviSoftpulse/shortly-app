'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useDebounce = require('use-debounce');
var ChartDimensions$1 = require('./ChartDimensions.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var useResizeObserver = require('../../../../hooks/useResizeObserver.js');
var usePrintResizing = require('../../../../hooks/usePrintResizing.js');
var ChartErrorBoundary = require('../../../ChartErrorBoundary/ChartErrorBoundary.js');

function ChartDimensions({
  children,
  data,
  onIsPrintingChange,
  sparkChart = false,
  skeletonType = 'Default',
  onError
}) {
  const {
    chartContainer
  } = polarisVizCore.useTheme();
  const {
    onError: onErrorProvider
  } = polarisVizCore.usePolarisVizContext();
  const [chartDimensions, setChartDimensions] = React.useState(null);
  const {
    ref,
    setRef,
    entry
  } = useResizeObserver.useResizeObserver();
  const previousEntry = polarisVizCore.usePrevious(entry);
  usePrintResizing.usePrintResizing({
    ref,
    setChartDimensions,
    onIsPrintingChange
  });
  const updateDimensions = React.useCallback(() => {
    if ((previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.width) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.width) && (previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.height) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.height) || entry == null) {
      return;
    }

    const {
      width,
      height
    } = entry.contentRect;
    const {
      x,
      y
    } = entry.target.getBoundingClientRect();
    setChartDimensions({
      width,
      height,
      x,
      y: y + window.scrollY
    });
  }, [entry, previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect]);
  const debouncedUpdateDimensions = useDebounce.useDebouncedCallback(() => {
    updateDimensions();
  }, 100);
  React.useLayoutEffect(() => {
    updateDimensions();

    if (chartDimensions === null) {
      setChartDimensions({
        width: 0,
        height: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight,
        x: 0,
        y: 0
      });
    }

    const isServer = typeof window === 'undefined';

    if (!isServer) {
      window.addEventListener('resize', debouncedUpdateDimensions);
    }

    return () => {
      if (!isServer) {
        window.removeEventListener('resize', debouncedUpdateDimensions);
      }
    };
  }, [entry, updateDimensions, debouncedUpdateDimensions, chartDimensions, chartContainer.minHeight, sparkChart, chartContainer.sparkChartMinHeight]);
  return /*#__PURE__*/jsxRuntime.jsx("div", {
    className: ChartDimensions$1["default"].ChartDimensions,
    ref: setRef,
    style: {
      minHeight: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight
    },
    children: !hasValidDimensions(chartDimensions) ? null : /*#__PURE__*/jsxRuntime.jsx(ChartErrorBoundary.ChartErrorBoundary, {
      type: skeletonType !== null && skeletonType !== void 0 ? skeletonType : 'Default',
      dimensions: chartDimensions,
      data: data,
      onError: onError !== null && onError !== void 0 ? onError : onErrorProvider,
      children: /*#__PURE__*/jsxRuntime.jsx("div", {
        className: ChartDimensions$1["default"].Chart,
        style: {
          height: chartDimensions.height,
          width: chartDimensions.width
        },
        children: /*#__PURE__*/React.cloneElement(children, {
          dimensions: chartDimensions
        })
      })
    })
  });
}

function hasValidDimensions(chartDimensions) {
  if (chartDimensions == null) {
    return false;
  }

  return chartDimensions.width > 0 && chartDimensions.height > 0;
}

exports.ChartDimensions = ChartDimensions;
