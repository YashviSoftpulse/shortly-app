'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactDom = require('react-dom');
var polarisVizCore = require('@shopify/polaris-viz-core');
var constants = require('../../../constants.js');
var useBrowserCheck = require('../../../hooks/useBrowserCheck.js');
var useRootContainer = require('../../../hooks/useRootContainer.js');
var HiddenLegendTooltip$1 = require('./HiddenLegendTooltip.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var useColorVisionEvents = require('../../../hooks/ColorVisionA11y/useColorVisionEvents.js');
var Legend = require('../../Legend/Legend.js');
var utilities = require('../../TooltipWrapper/utilities.js');

const LEGEND_TOOLTIP_ID = 'legend-toolip';
const LEGEND_TOOLIP_Z_INDEX = 520;
function HiddenLegendTooltip({
  activeIndex,
  colorVisionType,
  data,
  theme,
  label,
  lastVisibleIndex = 0,
  setActivatorWidth,
  dimensions,
  seriesNameFormatter
}) {
  const selectedTheme = polarisVizCore.useTheme();
  const {
    isFirefox
  } = useBrowserCheck.useBrowserCheck();
  const {
    id
  } = polarisVizCore.useChartContext();
  const tooltipId = `${LEGEND_TOOLTIP_ID}_${id}`;
  const container = useRootContainer.useRootContainer(tooltipId);
  const tooltipRef = React.useRef(null);
  const activatorRef = React.useRef(null);
  useColorVisionEvents.useColorVisionEvents({
    enabled: true,
    root: LEGEND_TOOLTIP_ID,
    dimensions
  });
  const defaultPosition = React.useMemo(() => ({
    top: 0,
    left: 0
  }), []);
  const [position, setPosition] = React.useState(defaultPosition);
  const [active, setActive] = React.useState(false);
  React.useEffect(() => {
    if (activatorRef.current == null) {
      return;
    }

    const activator = activatorRef.current.getBoundingClientRect();
    setActivatorWidth(activator.width);
  }, [setActivatorWidth]);
  const getTooltipPosition = React.useCallback(() => {
    if (tooltipRef.current == null || activatorRef.current == null) {
      return;
    }

    setActive(true);
    const activator = activatorRef.current.getBoundingClientRect();
    const tooltip = tooltipRef.current.getBoundingClientRect();
    const xPosition = activator.x + window.scrollX;
    const yPosition = activator.y + window.scrollY + activator.height;

    function getXPosition() {
      const goesPastRightOfWindow = xPosition + tooltip.width + utilities.TOOLTIP_MARGIN > window.innerWidth;

      if (goesPastRightOfWindow) {
        return xPosition - tooltip.width + activator.width;
      }

      return xPosition;
    }

    function getYPosition() {
      const goesPastBottomOfWindow = yPosition + tooltip.height + utilities.TOOLTIP_MARGIN >= window.innerHeight + window.scrollY;

      if (goesPastBottomOfWindow) {
        return yPosition - tooltip.height - activator.height;
      }

      return yPosition;
    }

    setPosition({
      top: getYPosition(),
      left: getXPosition()
    });
  }, [setPosition]);
  const handleMouseLeave = React.useCallback(event => {
    if ((event === null || event === void 0 ? void 0 : event.relatedTarget.id) !== tooltipId) {
      setActive(false);
      setPosition(defaultPosition);
    }
  }, [setActive, setPosition, defaultPosition, tooltipId]);
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx("button", {
      className: HiddenLegendTooltip$1["default"].MoreText,
      ref: activatorRef,
      onMouseEnter: getTooltipPosition,
      onMouseLeave: handleMouseLeave,
      onFocus: getTooltipPosition,
      onBlur: handleMouseLeave,
      style: {
        color: selectedTheme.legend.labelColor
      },
      children: label
    }), /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/jsxRuntime.jsx("div", {
      className: HiddenLegendTooltip$1["default"].Tooltip,
      ref: tooltipRef,
      onMouseLeave: handleMouseLeave,
      onBlur: handleMouseLeave,
      id: tooltipId,
      style: {
        visibility: active ? 'visible' : 'hidden',
        zIndex: active ? LEGEND_TOOLIP_Z_INDEX : -100000,
        background: polarisVizCore.changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : constants.TOOLTIP_BG_OPACITY),
        ...position
      },
      children: /*#__PURE__*/jsxRuntime.jsx(Legend.Legend, {
        activeIndex: activeIndex,
        colorVisionType: colorVisionType,
        data: data,
        theme: theme,
        indexOffset: lastVisibleIndex,
        backgroundColor: "transparent",
        seriesNameFormatter: seriesNameFormatter
      })
    }), container)]
  });
}

exports.HiddenLegendTooltip = HiddenLegendTooltip;
exports.LEGEND_TOOLIP_Z_INDEX = LEGEND_TOOLIP_Z_INDEX;
exports.LEGEND_TOOLTIP_ID = LEGEND_TOOLTIP_ID;
