'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var constants = require('../../../constants.js');

function getAlteredDimensions(dimensions, legendsHeight, legendsWidth, direction) {
  const {
    width,
    height
  } = dimensions !== null && dimensions !== void 0 ? dimensions : {
    width: 0,
    height: 0
  };
  const isHorizontal = direction === 'horizontal';
  return {
    height: isHorizontal ? height - legendsHeight - polarisVizCore.LEGENDS_TOP_MARGIN : height,
    width: !isHorizontal ? width - legendsWidth : width
  };
}

function useLegend({
  colors = [],
  data,
  dimensions = {
    height: 0,
    width: 0
  },
  showLegend,
  direction = 'horizontal',
  maxWidth = 0,
  seriesNameFormatter
}) {
  const defaultHeight = showLegend ? constants.DEFAULT_LEGEND_HEIGHT : 0;
  const [legendDimensions, setLegendDimensions] = React.useState({
    height: defaultHeight,
    width: maxWidth
  });
  const legend = React.useMemo(() => {
    if (showLegend === false) {
      return [];
    }

    const legends = data.map(({
      series,
      shape
    }) => {
      return series.map(({
        name,
        color,
        isComparison,
        data,
        metadata
      }) => {
        return {
          name: seriesNameFormatter(name !== null && name !== void 0 ? name : ''),
          ...(data && {
            value: data.reduce((totalSum, current) => totalSum + (current.value || 0), 0).toString()
          }),
          ...(metadata && {
            trend: metadata.trend
          }),
          color,
          shape,
          isComparison
        };
      });
    });
    return legends.flat().map(({
      color,
      ...rest
    }, index) => {
      return { ...rest,
        color: color !== null && color !== void 0 ? color : colors[index]
      };
    });
  }, [colors, data, seriesNameFormatter, showLegend]);
  const {
    height,
    width
  } = React.useMemo(() => {
    if (showLegend === false) {
      return dimensions;
    }

    return getAlteredDimensions(dimensions, legendDimensions.height, legendDimensions.width, direction);
  }, [showLegend, dimensions, legendDimensions.height, legendDimensions.width, direction]);
  const hasValidDimensions = legendDimensions.height !== defaultHeight || legendDimensions.width !== maxWidth;
  return {
    legend,
    height,
    width,
    setLegendDimensions,
    isLegendMounted: showLegend === false || hasValidDimensions
  };
}

exports.useLegend = useLegend;
