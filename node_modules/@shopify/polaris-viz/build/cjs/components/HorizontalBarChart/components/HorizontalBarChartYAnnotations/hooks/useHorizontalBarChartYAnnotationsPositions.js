'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var constants = require('../../../../Annotations/constants.js');

const Y_OFFSET = polarisVizCore.LINE_HEIGHT / 2;
const LABEL_PADDING = 5;
function useHorizontalBarChartYAnnotationsPositions({
  annotations,
  dataIndexes,
  groupHeight,
  drawableWidth,
  zeroPosition
}) {
  const {
    characterWidths
  } = polarisVizCore.useChartContext();
  const textWidths = React.useMemo(() => {
    return annotations.map(annotation => {
      return polarisVizCore.estimateStringWidth(annotation.label, characterWidths);
    });
  }, [annotations, characterWidths]);
  const {
    positions
  } = React.useMemo(() => {
    const positions = annotations.map((annotation, dataIndex) => {
      const rawY = dataIndexes[annotation.startKey] * groupHeight + Y_OFFSET;
      const textWidth = textWidths[dataIndex];
      const labelWidth = polarisVizCore.estimateStringWidth(`${annotation.startKey}`, characterWidths);
      const width = polarisVizCore.clamp({
        amount: textWidth + constants.PILL_PADDING * 2,
        min: textWidth + constants.PILL_PADDING * 2,
        max: drawableWidth
      });
      const y = polarisVizCore.clamp({
        amount: rawY - constants.PILL_HEIGHT / 2,
        min: 0,
        max: Infinity
      });
      return {
        index: dataIndex,
        line: {
          x: zeroPosition + labelWidth + LABEL_PADDING,
          y: rawY
        },
        row: 1,
        width,
        x: drawableWidth - width,
        y
      };
    });
    return {
      positions
    };
  }, [annotations, dataIndexes, groupHeight, textWidths, drawableWidth, characterWidths, zeroPosition]);
  return {
    positions
  };
}

exports.useHorizontalBarChartYAnnotationsPositions = useHorizontalBarChartYAnnotationsPositions;
