'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useSVGBlurEvent = require('../../../../hooks/useSVGBlurEvent.js');
var isShowMoreAnnotationsButtonVisible = require('../../../../utilities/isShowMoreAnnotationsButtonVisible.js');
var shouldHideAnnotation = require('../../../../utilities/shouldHideAnnotation.js');
var useHorizontalBarChartXAnnotationPositions = require('./hooks/useHorizontalBarChartXAnnotationPositions.js');
var jsxRuntime = require('react/jsx-runtime');
var ShowMoreAnnotationsButton = require('../../../Annotations/components/ShowMoreAnnotationsButton/ShowMoreAnnotationsButton.js');
var AnnotationLine = require('../../../Annotations/components/AnnotationLine/AnnotationLine.js');
var constants = require('../../../Annotations/constants.js');
var AnnotationLabel = require('../../../Annotations/components/AnnotationLabel/AnnotationLabel.js');
var AnnotationContent = require('../../../Annotations/components/AnnotationContent/AnnotationContent.js');

function HorizontalBarChartXAnnotations({
  annotationsLookupTable,
  drawableHeight,
  drawableWidth,
  onHeightChange,
  xScale
}) {
  const [activeIndex, setActiveIndex] = React.useState(-1);
  const [isShowingAllAnnotations, setIsShowingAllAnnotations] = React.useState(false);
  const [ref, setRef] = React.useState(null);
  const {
    annotations
  } = React.useMemo(() => {
    const annotations = Object.keys(annotationsLookupTable).map(key => {
      const annotation = annotationsLookupTable[key];

      if (!polarisVizCore.isValueWithinDomain(Number(annotation.startKey), xScale.domain())) {
        return null;
      }

      if (annotation == null || annotation.axis == null || annotation.axis === 'y') {
        return null;
      }

      return annotation;
    }).filter(Boolean);
    return {
      annotations
    };
  }, [annotationsLookupTable, xScale]);
  const {
    hiddenAnnotationsCount,
    positions,
    rowCount
  } = useHorizontalBarChartXAnnotationPositions.useHorizontalBarChartXAnnotationPositions({
    annotations,
    drawableWidth,
    isShowingAllAnnotations,
    onHeightChange,
    xScale
  });

  const handleToggleAllAnnotations = () => {
    setIsShowingAllAnnotations(!isShowingAllAnnotations);
  };

  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };

  useSVGBlurEvent.useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: activeElement => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== 'true';
    }
  });
  const isShowMoreButtonVisible = isShowMoreAnnotationsButtonVisible.isShowMoreAnnotationsButtonVisible(rowCount);
  const showMoreButtonOffset = isShowMoreButtonVisible ? constants.SHOW_MORE_BUTTON_OFFSET : 0;
  return /*#__PURE__*/jsxRuntime.jsxs("g", {
    ref: setRef,
    tabIndex: -1,
    children: [isShowMoreButtonVisible && /*#__PURE__*/jsxRuntime.jsx(ShowMoreAnnotationsButton.ShowMoreAnnotationsButton, {
      annotationsCount: hiddenAnnotationsCount,
      collapseText: annotations[0].collapseButtonText,
      expandText: annotations[0].expandButtonText,
      isShowingAllAnnotations: isShowingAllAnnotations,
      onClick: handleToggleAllAnnotations,
      tabIndex: annotations.length,
      width: drawableWidth
    }), /*#__PURE__*/jsxRuntime.jsx("g", {
      transform: `translate(0, ${showMoreButtonOffset})`,
      children: positions.map(position => {
        const {
          line,
          y,
          row,
          index
        } = position;
        const annotation = annotations[index];

        if (shouldHideAnnotation.shouldHideAnnotation({
          row,
          isShowingAllAnnotations,
          rowCount
        })) {
          return null;
        }

        const hasContent = annotation.content != null;
        const isContentVisible = index === activeIndex && hasContent;
        const tabIndex = index + 1;
        const ariaLabel = `${annotation.startKey}`;
        return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
          children: [/*#__PURE__*/jsxRuntime.jsx(AnnotationLine.AnnotationLine, {
            size: drawableHeight - showMoreButtonOffset,
            x: line.x,
            y: y + constants.PILL_HEIGHT
          }), /*#__PURE__*/jsxRuntime.jsx(AnnotationLabel.AnnotationLabel, {
            ariaLabel: ariaLabel,
            hasContent: hasContent,
            index: index,
            isVisible: !isContentVisible,
            label: annotation.label,
            position: position,
            setActiveIndex: setActiveIndex,
            tabIndex: tabIndex
          }), isContentVisible && /*#__PURE__*/jsxRuntime.jsx(AnnotationContent.AnnotationContent, {
            annotation: annotation,
            drawableWidth: drawableWidth,
            index: index,
            onMouseLeave: handleOnMouseLeave,
            parentRef: ref,
            position: position,
            tabIndex: tabIndex,
            x: line.x,
            y: y
          })]
        }, `annotation${index}${annotation.startKey}`);
      })
    })]
  });
}

exports.HorizontalBarChartXAnnotations = HorizontalBarChartXAnnotations;
