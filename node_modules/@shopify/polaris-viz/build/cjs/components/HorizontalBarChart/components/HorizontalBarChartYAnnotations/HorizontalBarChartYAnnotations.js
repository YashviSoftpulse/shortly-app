'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useSVGBlurEvent = require('../../../../hooks/useSVGBlurEvent.js');
var useHorizontalBarChartYAnnotationsPositions = require('./hooks/useHorizontalBarChartYAnnotationsPositions.js');
var jsxRuntime = require('react/jsx-runtime');
var AnnotationLine = require('../../../Annotations/components/AnnotationLine/AnnotationLine.js');
var AnnotationLabel = require('../../../Annotations/components/AnnotationLabel/AnnotationLabel.js');
var AnnotationContent = require('../../../Annotations/components/AnnotationContent/AnnotationContent.js');

function HorizontalBarChartYAnnotations({
  annotationsLookupTable,
  drawableWidth,
  groupHeight,
  labels,
  zeroPosition
}) {
  const [activeIndex, setActiveIndex] = React.useState(-1);
  const [ref, setRef] = React.useState(null);
  const {
    annotations,
    dataIndexes
  } = React.useMemo(() => {
    const dataIndexes = {};
    const annotations = Object.keys(annotationsLookupTable).map(key => {
      const annotation = annotationsLookupTable[key];

      if (!labels.includes(key) || annotation == null || annotation.axis === 'x') {
        return null;
      }

      dataIndexes[key] = labels.indexOf(key);
      return annotation;
    }).filter(Boolean);
    return {
      annotations,
      dataIndexes
    };
  }, [annotationsLookupTable, labels]);
  const {
    positions
  } = useHorizontalBarChartYAnnotationsPositions.useHorizontalBarChartYAnnotationsPositions({
    annotations,
    dataIndexes,
    drawableWidth,
    groupHeight,
    zeroPosition
  });

  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };

  useSVGBlurEvent.useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: activeElement => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== 'true';
    }
  });
  return /*#__PURE__*/jsxRuntime.jsx("g", {
    ref: setRef,
    tabIndex: -1,
    children: /*#__PURE__*/jsxRuntime.jsx("g", {
      transform: `translate(0, ${0})`,
      children: positions.map(position => {
        const index = position.index;
        const annotation = annotations[index];
        const {
          line,
          x,
          y
        } = position;
        const hasContent = annotation.content != null;
        const isContentVisible = index === activeIndex && hasContent;
        const tabIndex = index + 1;
        const ariaLabel = `${annotation.startKey}`;
        return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
          children: [/*#__PURE__*/jsxRuntime.jsx(AnnotationLine.AnnotationLine, {
            direction: "horizontal",
            hasCaret: false,
            size: drawableWidth - (drawableWidth - x),
            x: line.x,
            y: line.y
          }), /*#__PURE__*/jsxRuntime.jsx(AnnotationLabel.AnnotationLabel, {
            ariaLabel: ariaLabel,
            hasContent: hasContent,
            index: index,
            isVisible: !isContentVisible,
            label: annotation.label,
            position: position,
            setActiveIndex: setActiveIndex,
            tabIndex: tabIndex
          }), isContentVisible && /*#__PURE__*/jsxRuntime.jsx(AnnotationContent.AnnotationContent, {
            annotation: annotation,
            drawableWidth: drawableWidth,
            index: index,
            onMouseLeave: handleOnMouseLeave,
            parentRef: ref,
            position: position,
            tabIndex: tabIndex,
            x: drawableWidth - (drawableWidth - x),
            y: y
          })]
        }, `annotation${index}${annotation.startKey}`);
      })
    })
  });
}

exports.HorizontalBarChartYAnnotations = HorizontalBarChartYAnnotations;
