'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useIndexForLabels = require('../../hooks/useIndexForLabels.js');
var useFormattedLabels = require('../../hooks/useFormattedLabels.js');
var constants = require('../../constants.js');
var index = require('../ChartElements/index.js');
var useLineChartTooltipContent = require('./hooks/useLineChartTooltipContent.js');
var jsxRuntime = require('react/jsx-runtime');
var useColorVisionEvents = require('../../hooks/ColorVisionA11y/useColorVisionEvents.js');
var useLegend = require('../LegendContainer/hooks/useLegend.js');
var useWatchColorVisionEvents = require('../../hooks/ColorVisionA11y/useWatchColorVisionEvents.js');
var useExternalHideEvents = require('../../hooks/ExternalEvents/useExternalHideEvents.js');
var yAxisMinMax = require('./utilities/yAxisMinMax.js');
var useFormatData = require('./hooks/useFormatData.js');
var useLinearLabelsAndDimensions = require('../../hooks/useLinearLabelsAndDimensions.js');
var checkAvailableAnnotations = require('../Annotations/utilities/checkAvailableAnnotations.js');
var XAxis = require('../XAxis/XAxis.js');
var HorizontalGridLines = require('../HorizontalGridLines/HorizontalGridLines.js');
var YAxis = require('../YAxis/YAxis.js');
var VisuallyHiddenRows = require('../VisuallyHiddenRows/VisuallyHiddenRows.js');
var PointsAndCrosshair = require('./components/PointsAndCrosshair/PointsAndCrosshair.js');
var Annotations = require('../Annotations/Annotations.js');
var YAxisAnnotations = require('../Annotations/YAxisAnnotations.js');
var TooltipWrapper = require('../TooltipWrapper/TooltipWrapper.js');
var getAlteredLineChartPosition = require('./utilities/getAlteredLineChartPosition.js');
var LegendContainer = require('../LegendContainer/LegendContainer.js');
var eventPoint = require('../../utilities/eventPoint.js');
var constants$1 = require('../TooltipWrapper/constants.js');

function Chart({
  annotationsLookupTable,
  emptyStateText,
  data,
  dimensions,
  renderLegendContent,
  renderTooltipContent,
  renderHiddenLegendLabel,
  seriesNameFormatter,
  showLegend = true,
  hideLegendOverflow = true,
  slots,
  theme = polarisVizCore.DEFAULT_THEME_NAME,
  xAxisOptions,
  yAxisOptions
}) {
  var _dimensions$x2, _dimensions$y2, _slots$chart;

  useColorVisionEvents.useColorVisionEvents({
    enabled: data.length > 1,
    dimensions
  });
  const selectedTheme = polarisVizCore.useTheme(theme);
  const {
    isPerformanceImpacted
  } = polarisVizCore.useChartContext();
  const [activeIndex, setActiveIndex] = React.useState(null);
  const [activeLineIndex, setActiveLineIndex] = React.useState(-1);
  const [xAxisHeight, setXAxisHeight] = React.useState(polarisVizCore.LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = React.useState(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend.useLegend({
    data: [{
      shape: 'Line',
      series: data
    }],
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  useWatchColorVisionEvents.useWatchColorVisionEvents({
    type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveLineIndex(detail.index)
  });
  const {
    hiddenIndexes: hiddenLineIndexes
  } = useExternalHideEvents.useExternalHideEvents();
  const indexForLabels = useIndexForLabels.useIndexForLabels(data);
  const {
    formattedLabels,
    unformattedLabels
  } = useFormattedLabels.useFormattedLabels({
    data: [data[indexForLabels]],
    labelFormatter: xAxisOptions.labelFormatter
  });
  const tooltipId = React.useRef(polarisVizCore.uniqueId('lineChart'));
  const [svgRef, setSvgRef] = React.useState(null);
  const emptyState = data.length === 0 || data.every(series => series.data.length === 0);
  const {
    minY,
    maxY
  } = yAxisMinMax.yAxisMinMax(data);
  const yScaleOptions = {
    formatYAxisLabel: yAxisOptions.labelFormatter,
    integersOnly: yAxisOptions.integersOnly,
    fixedWidth: yAxisOptions.fixedWidth,
    maxYOverride: yAxisOptions.maxYOverride,
    max: maxY,
    min: minY
  };
  const {
    yAxisLabelWidth
  } = polarisVizCore.useYScale({ ...yScaleOptions,
    drawableHeight: height,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const {
    longestSeriesLength,
    longestSeriesIndex
  } = useFormatData.useFormatData(data);
  const {
    drawableWidth,
    drawableHeight,
    chartXPosition,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = polarisVizCore.useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: yAxisLabelWidth
  });
  const hideXAxis = xAxisOptions.hide || selectedTheme.xAxis.hide;
  const {
    xAxisDetails,
    xScale,
    labels
  } = useLinearLabelsAndDimensions.useLinearLabelsAndDimensions({
    data,
    drawableWidth,
    hideXAxis,
    labels: formattedLabels,
    longestSeriesLength
  });
  const {
    ticks,
    yScale
  } = polarisVizCore.useYScale({ ...yScaleOptions,
    drawableHeight,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + constants.ANNOTATIONS_LABELS_OFFSET;
  const getTooltipMarkup = useLineChartTooltipContent.useLineChartTooltipContent({
    data,
    renderTooltipContent,
    indexForLabels,
    hiddenIndexes: hiddenLineIndexes,
    seriesNameFormatter
  });

  if (xScale == null || drawableWidth == null || yAxisLabelWidth == null) {
    return null;
  }

  function getTooltipPosition({
    event,
    index,
    eventType
  }) {
    if (eventType === 'mouse') {
      const point = eventPoint.eventPointNative(event);

      if (point == null || xScale == null || data[longestSeriesIndex] == null) {
        return constants$1.TOOLTIP_POSITION_DEFAULT_RETURN;
      }

      const {
        svgX
      } = point;
      const closestIndex = Math.round(xScale.invert(svgX - chartXPosition));
      const activeIndex = polarisVizCore.clamp({
        amount: closestIndex,
        min: 0,
        max: data[longestSeriesIndex].data.length - 1
      });
      return {
        x: event.pageX,
        y: event.pageY,
        activeIndex
      };
    } else {
      var _xScale, _dimensions$x, _dimensions$y;

      const activeIndex = index !== null && index !== void 0 ? index : 0;
      const x = (_xScale = xScale === null || xScale === void 0 ? void 0 : xScale(activeIndex)) !== null && _xScale !== void 0 ? _xScale : 0;
      return {
        x: x + ((_dimensions$x = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x !== void 0 ? _dimensions$x : 0),
        y: (_dimensions$y = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y !== void 0 ? _dimensions$y : 0,
        activeIndex
      };
    }
  }

  function moveCrosshair(index) {
    setActiveIndex(0);

    if (index == null) {
      return;
    }

    const crosshair = document.getElementById(`${tooltipId.current}-${constants.CROSSHAIR_ID}`);

    if (crosshair == null) {
      return;
    }

    crosshair.setAttribute('x', `${xScale(index) - selectedTheme.crossHair.width / 2}`);
  }

  const chartBounds = {
    width,
    height,
    x: (_dimensions$x2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x2 !== void 0 ? _dimensions$x2 : chartXPosition,
    y: (_dimensions$y2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y2 !== void 0 ? _dimensions$y2 : chartYPosition
  };
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations.checkAvailableAnnotations(annotationsLookupTable);
  const halfXAxisLabelWidth = xAxisDetails.labelWidth / 2;
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsxs(index.ChartElements.Svg, {
      emptyState: emptyState,
      emptyStateText: emptyStateText,
      height: height,
      role: "table",
      setRef: setSvgRef,
      width: width,
      children: [hideXAxis ? null : /*#__PURE__*/jsxRuntime.jsx(XAxis.XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        ariaHidden: true,
        isLinearChart: true,
        labels: labels,
        labelWidth: xAxisDetails.labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes: xAxisDetails.reducedLabelIndexes,
        x: xAxisBounds.x - halfXAxisLabelWidth,
        xScale: xScale,
        y: xAxisBounds.y
      }), selectedTheme.grid.showHorizontalLines ? /*#__PURE__*/jsxRuntime.jsx(HorizontalGridLines.HorizontalGridLines, {
        ticks: ticks,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, /*#__PURE__*/jsxRuntime.jsx(YAxis.YAxis, {
        ticks: ticks,
        width: yAxisLabelWidth + constants.Y_AXIS_LABEL_OFFSET,
        textAlign: "right",
        ariaHidden: true,
        x: yAxisBounds.x,
        y: yAxisBounds.y
      }), emptyState ? null : /*#__PURE__*/jsxRuntime.jsx(VisuallyHiddenRows.VisuallyHiddenRows, {
        data: data,
        formatYAxisLabel: yAxisOptions.labelFormatter,
        xAxisLabels: labels
      }), /*#__PURE__*/jsxRuntime.jsxs("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: [slots === null || slots === void 0 ? void 0 : (_slots$chart = slots.chart) === null || _slots$chart === void 0 ? void 0 : _slots$chart.call(slots, {
          yScale,
          xScale,
          drawableWidth,
          drawableHeight,
          theme
        }), data.map((singleSeries, index) => {
          var _singleSeries$metadat;

          if (((_singleSeries$metadat = singleSeries.metadata) === null || _singleSeries$metadat === void 0 ? void 0 : _singleSeries$metadat.isVisuallyHidden) === true) {
            return null;
          }

          return /*#__PURE__*/jsxRuntime.jsx(polarisVizCore.LineSeries, {
            activeLineIndex: activeLineIndex,
            data: singleSeries,
            hiddenIndexes: hiddenLineIndexes,
            index: index,
            svgDimensions: {
              height: drawableHeight,
              width: drawableWidth
            },
            theme: theme,
            xScale: xScale,
            yScale: yScale,
            type: "default"
          }, `${name}-${index}`);
        }), /*#__PURE__*/jsxRuntime.jsx(PointsAndCrosshair.PointsAndCrosshair, {
          activeIndex: activeIndex,
          data: data,
          drawableHeight: drawableHeight,
          emptyState: emptyState,
          hiddenIndexes: hiddenLineIndexes,
          longestSeriesIndex: longestSeriesIndex,
          theme: theme,
          tooltipId: tooltipId.current,
          xScale: xScale,
          yScale: yScale
        })]
      }), hasXAxisAnnotations && /*#__PURE__*/jsxRuntime.jsx("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: /*#__PURE__*/jsxRuntime.jsx(Annotations.Annotations, {
          annotationsLookupTable: annotationsLookupTable,
          axisLabelWidth: xAxisDetails.labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth: drawableWidth,
          labels: unformattedLabels,
          onHeightChange: setAnnotationsHeight,
          xScale: xScale
        })
      }), hasYAxisAnnotations && /*#__PURE__*/jsxRuntime.jsx("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        tabIndex: -1,
        children: /*#__PURE__*/jsxRuntime.jsx(YAxisAnnotations.YAxisAnnotations, {
          annotationsLookupTable: annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth: drawableWidth,
          ticks: ticks,
          yScale: yScale
        })
      })]
    }), longestSeriesLength !== -1 && /*#__PURE__*/jsxRuntime.jsx(TooltipWrapper.TooltipWrapper, {
      alwaysUpdatePosition: true,
      chartBounds: chartBounds,
      focusElementDataType: polarisVizCore.DataType.Point,
      getAlteredPosition: getAlteredLineChartPosition.getAlteredLineChartPosition,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      id: tooltipId.current,
      margin: polarisVizCore.ChartMargin,
      onIndexChange: index => {
        if (index != null && isPerformanceImpacted) {
          moveCrosshair(index);
        } else {
          setActiveIndex(index);
        }
      },
      parentRef: svgRef,
      usePortal: true
    }), showLegend && /*#__PURE__*/jsxRuntime.jsx(LegendContainer.LegendContainer, {
      colorVisionType: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent: renderLegendContent,
      renderHiddenLegendLabel: renderHiddenLegendLabel,
      dimensions: dimensions,
      enableHideOverflow: hideLegendOverflow
    })]
  });
}

exports.Chart = Chart;
