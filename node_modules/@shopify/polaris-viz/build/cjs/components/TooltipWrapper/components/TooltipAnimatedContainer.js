'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var utilities = require('../utilities.js');
var constants = require('../constants.js');
var TooltipAnimatedContainer$1 = require('./TooltipAnimatedContainer.scss.js');
var jsxRuntime = require('react/jsx-runtime');

function TooltipAnimatedContainer({
  activePointIndex,
  bandwidth = 0,
  chartBounds,
  children,
  currentX,
  currentY,
  id = '',
  getAlteredPosition = utilities.getAlteredVerticalBarPosition,
  margin,
  position = constants.DEFAULT_TOOLTIP_POSITION,
  chartDimensions
}) {
  const {
    isPerformanceImpacted
  } = polarisVizCore.useChartContext();
  const tooltipRef = React.useRef(null);
  const [tooltipDimensions, setTooltipDimensions] = React.useState(null);
  const firstRender = React.useRef(true);
  const {
    x,
    y,
    opacity,
    immediate
  } = React.useMemo(() => {
    if (tooltipDimensions == null) {
      return {
        x: 0,
        y: 0,
        opacity: 0
      };
    }

    const {
      x,
      y
    } = getAlteredPosition({
      currentX,
      currentY,
      position,
      tooltipDimensions,
      chartBounds,
      margin,
      bandwidth,
      isPerformanceImpacted,
      chartDimensions
    });
    const shouldRenderImmediate = firstRender.current;
    firstRender.current = false;
    return {
      x,
      y,
      opacity: 1,
      immediate: isPerformanceImpacted || shouldRenderImmediate
    };
  }, [bandwidth, chartBounds, currentX, currentY, getAlteredPosition, margin, position, isPerformanceImpacted, tooltipDimensions, chartDimensions]);
  React.useEffect(() => {
    if (tooltipRef.current == null) {
      return;
    }

    setTooltipDimensions(tooltipRef.current.getBoundingClientRect());
  }, [activePointIndex]);
  return /*#__PURE__*/jsxRuntime.jsx("div", {
    id: id,
    className: TooltipAnimatedContainer$1["default"].Container,
    "data-tooltip": true,
    style: {
      top: 0,
      left: 0,
      opacity,
      transform: `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0px)`,
      transition: immediate ? 'none' : 'opacity 300ms ease, transform 150ms'
    },
    ref: tooltipRef,
    "aria-hidden": "true",
    children: children
  });
}

exports.TooltipAnimatedContainer = TooltipAnimatedContainer;
