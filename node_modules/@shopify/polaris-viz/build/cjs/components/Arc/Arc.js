'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var d3Shape = require('d3-shape');
var polarisVizCore = require('@shopify/polaris-viz-core');
var web = require('@react-spring/web');
var constants = require('../../constants.js');
var Arc$1 = require('./Arc.scss.js');
var jsxRuntime = require('react/jsx-runtime');
var classnames = require('../../utilities/classnames.js');
var ConicGradientWithStops = require('../ConicGradientWithStops/ConicGradientWithStops.js');

const ANIMATION_SIZE_BUFFER = 30;
function Arc({
  animationDelay = 100,
  radius,
  width,
  height,
  startAngle,
  endAngle,
  color,
  cornerRadius,
  thickness,
  index = 0,
  isAnimated,
  activeIndex = 0
}) {
  const gradientId = React.useMemo(() => polarisVizCore.uniqueId('DonutChart'), []);
  const createArc = d3Shape.arc().cornerRadius(cornerRadius);
  const gradient = polarisVizCore.getGradientFromColor(color);
  const springConfig = polarisVizCore.useSpringConfig({
    animationDelay: index * animationDelay,
    shouldAnimate: isAnimated,
    mountedSpringConfig: polarisVizCore.ARC_DATA_CHANGE_ANIMATION_CONFIG,
    unmountedSpringConfig: polarisVizCore.ARC_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedInnerRadius,
    animatedOuterRadius,
    animatedStartAngle,
    animatedEndAngle,
    animatedPadAngle
  } = web.useSpring({
    animatedInnerRadius: radius - thickness,
    animatedOuterRadius: radius,
    animatedStartAngle: startAngle,
    animatedEndAngle: endAngle,
    animatedPadAngle: constants.ARC_PAD_ANGLE,
    from: {
      animatedOuterRadius: radius - thickness
    },
    ...springConfig
  });
  return /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx("clipPath", {
      id: gradientId,
      transform: `translate(${width / 2 - ANIMATION_SIZE_BUFFER} ${height / 2 - ANIMATION_SIZE_BUFFER})`,
      children: /*#__PURE__*/jsxRuntime.jsx(web.animated.path, {
        className: classnames.classNames(Arc$1["default"].Arc),
        d: web.to([animatedInnerRadius, animatedOuterRadius, animatedStartAngle, animatedEndAngle, animatedPadAngle], (animatedInnerRadius, animatedOuterRadius, animatedStartAngle, animatedEndAngle, animatedPadAngle) => {
          return createArc({
            innerRadius: animatedInnerRadius,
            outerRadius: animatedOuterRadius,
            startAngle: animatedStartAngle,
            endAngle: animatedEndAngle,
            padAngle: animatedPadAngle
          });
        })
      })
    }), /*#__PURE__*/jsxRuntime.jsx("g", {
      style: { ...polarisVizCore.getColorVisionStylesForActiveIndex({
          activeIndex,
          index
        })
      },
      className: classnames.classNames(Arc$1["default"].Arc),
      ...polarisVizCore.getColorVisionEventAttrs({
        type: polarisVizCore.COLOR_VISION_SINGLE_ITEM,
        index
      }),
      clipPath: `url(#${gradientId})`,
      children: /*#__PURE__*/jsxRuntime.jsx(ConicGradientWithStops.ConicGradientWithStops, {
        x: width / -2 - ANIMATION_SIZE_BUFFER,
        y: height / -2 - ANIMATION_SIZE_BUFFER,
        height: radius * 4,
        width: radius * 4,
        gradient: gradient
      })
    })]
  });
}

exports.Arc = Arc;
