'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var d3Scale = require('d3-scale');
var jsxRuntime = require('react/jsx-runtime');
var useLabels = require('../Labels/hooks/useLabels.js');
var shouldSkipLabel = require('../Labels/utilities/shouldSkipLabel.js');
var TextLine = require('../TextLine/TextLine.js');

function XAxis({
  allowLineWrap,
  ariaHidden = false,
  isLinearChart = false,
  labels,
  labelWidth,
  onHeightChange,
  reducedLabelIndexes,
  x,
  xScale,
  y
}) {
  const {
    lines
  } = useLabels.useLabels({
    labels,
    onHeightChange,
    targetWidth: labelWidth,
    allowLineWrap
  });
  return /*#__PURE__*/jsxRuntime.jsx("g", {
    "aria-hidden": true,
    children: lines.map((line, index) => {
      // Skip last labels for linear charts so they
      // don't spill outside the chart area.
      const skipLastLabel = isLinearChart && labels.length > 1 && index === labels.length - 1;

      if (shouldSkipLabel.shouldSkipLabel(index, reducedLabelIndexes) || skipLastLabel) {
        return null;
      }

      const xPosition = getXPosition(index, xScale);
      return /*#__PURE__*/jsxRuntime.jsx("g", {
        transform: `translate(${x + (xPosition !== null && xPosition !== void 0 ? xPosition : 0)},${y})`,
        "aria-hidden": ariaHidden,
        children: /*#__PURE__*/jsxRuntime.jsx(TextLine.TextLine, {
          line: line,
          index: index
        })
      }, index);
    })
  });
}

function getXPosition(index, xScale) {
  if (xScale instanceof d3Scale.scaleLinear) {
    return xScale(index);
  }

  return xScale(`${index}`);
}

exports.XAxis = XAxis;
