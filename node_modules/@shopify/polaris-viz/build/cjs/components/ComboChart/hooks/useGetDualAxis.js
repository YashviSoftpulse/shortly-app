'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var types = require('../types.js');
var getAxisOptions = require('../../../utilities/getAxisOptions.js');
var getStackedMinMax = require('../../../utilities/getStackedMinMax.js');
var yAxisMinMax = require('../../LineChart/utilities/yAxisMinMax.js');

function useGetDualAxis({
  data
}) {
  return React.useMemo(() => {
    return data.map((series, index) => {
      let min;
      let max;
      const yAxisOptions = getAxisOptions.getYAxisOptionsWithDefaults(series.yAxisOptions);

      switch (series.shape) {
        case 'Line':
          {
            const {
              minY,
              maxY
            } = yAxisMinMax.yAxisMinMax(series.series);
            min = minY;
            max = maxY;
            break;
          }

        case 'Bar':
          {
            const {
              min: yMin,
              max: yMax
            } = getStackedMinMax.getStackedMinMax({
              stackedValues: null,
              data: series.series,
              integersOnly: yAxisOptions.integersOnly
            });
            min = yMin;
            max = yMax;
            break;
          }
      }

      return {
        valuesRange: getValuesRange(min, max),
        min,
        max,
        index,
        shape: series.shape,
        yAxisOptions,
        name: series.name
      };
    });
  }, [data]);
}

function getValuesRange(min, max) {
  if (min <= 0 && max <= 0) {
    return types.AxisValueRange.AllNegative;
  } else if (min < 0 || max < 0) {
    return types.AxisValueRange.SomeNegative;
  } else {
    return types.AxisValueRange.AllPositive;
  }
}

exports.useGetDualAxis = useGetDualAxis;
