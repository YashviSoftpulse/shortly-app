'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var jsxRuntime = require('react/jsx-runtime');
var TooltipContentContainer = require('../components/TooltipContent/components/TooltipContentContainer/TooltipContentContainer.js');
var TooltipTitle = require('../components/TooltipContent/components/TooltipTitle/TooltipTitle.js');
var TooltipSeries = require('../components/TooltipContent/components/TooltipSeries/TooltipSeries.js');
var TooltipSeriesName = require('../components/TooltipContent/components/TooltipSeriesName/TooltipSeriesName.js');
var TooltipRow = require('../components/TooltipContent/components/TooltipRow/TooltipRow.js');
var LinePreview = require('../components/LinePreview/LinePreview.js');

function renderLinearTooltipContent(tooltipData, options = {}) {
  const {
    title,
    groups = [{
      title: tooltipData.dataSeries[0].data[tooltipData.activeIndex].key,
      indexes: tooltipData.dataSeries.map((_, index) => index)
    }]
  } = options;
  const {
    theme
  } = tooltipData;
  const formatters = {
    keyFormatter: key => `${key}`,
    valueFormatter: value => `${value}`,
    titleFormatter: title => `${title}`,
    ...tooltipData.formatters
  };

  function renderSeriesIcon(color, styleOverride) {
    var _styleOverride$line$w, _styleOverride$line, _styleOverride$line2;

    if ((styleOverride === null || styleOverride === void 0 ? void 0 : styleOverride.line) == null) {
      return null;
    }

    return /*#__PURE__*/jsxRuntime.jsx(LinePreview.LinePreview, {
      color: color,
      lineStyle: "solid",
      width: (_styleOverride$line$w = styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$line = styleOverride.line) === null || _styleOverride$line === void 0 ? void 0 : _styleOverride$line.width) !== null && _styleOverride$line$w !== void 0 ? _styleOverride$line$w : 2,
      strokeDasharray: styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$line2 = styleOverride.line) === null || _styleOverride$line2 === void 0 ? void 0 : _styleOverride$line2.strokeDasharray
    });
  }

  function renderContent({
    activeColorVisionIndex
  }) {
    return groups.map(({
      title: seriesName,
      indexes
    }) => {
      const dataSeries = indexes.map(groupIndex => {
        if (tooltipData.data[0].data[groupIndex] == null) {
          return;
        }

        const rawDataSeries = tooltipData.data[0].data[groupIndex];
        return { ...tooltipData.dataSeries[groupIndex],
          color: rawDataSeries.color,
          groupIndex,
          isHidden: rawDataSeries.value == null || rawDataSeries.isHidden
        };
      }).filter(series => Boolean(series));
      const hasTitle = dataSeries.some(({
        isHidden
      }) => isHidden !== true);
      return /*#__PURE__*/jsxRuntime.jsxs(TooltipSeries.TooltipSeries, {
        isEmpty: !hasTitle,
        children: [hasTitle && /*#__PURE__*/jsxRuntime.jsx(TooltipSeriesName.TooltipSeriesName, {
          theme: theme,
          children: seriesName
        }), dataSeries.map(({
          name,
          data,
          color,
          groupIndex,
          styleOverride,
          isHidden
        }) => {
          var _styleOverride$toolti, _styleOverride$toolti2, _item$value;

          const item = data[tooltipData.activeIndex];
          return /*#__PURE__*/jsxRuntime.jsx(TooltipRow.TooltipRow, {
            activeIndex: activeColorVisionIndex,
            color: color,
            index: groupIndex,
            isHidden: isHidden,
            label: name,
            renderSeriesIcon: () => renderSeriesIcon(color, styleOverride),
            shape: (_styleOverride$toolti = styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$toolti2 = styleOverride.tooltip) === null || _styleOverride$toolti2 === void 0 ? void 0 : _styleOverride$toolti2.shape) !== null && _styleOverride$toolti !== void 0 ? _styleOverride$toolti : 'Line',
            value: formatters.valueFormatter((_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : 0)
          }, `row-${groupIndex}`);
        })]
      }, seriesName);
    });
  }

  return /*#__PURE__*/jsxRuntime.jsx(TooltipContentContainer.TooltipContentContainer, {
    maxWidth: 300,
    theme: theme,
    children: ({
      activeColorVisionIndex
    }) => /*#__PURE__*/jsxRuntime.jsxs(React.Fragment, {
      children: [title != null && /*#__PURE__*/jsxRuntime.jsx(TooltipTitle.TooltipTitle, {
        theme: theme,
        children: formatters.titleFormatter(title)
      }), renderContent({
        activeColorVisionIndex
      })]
    })
  });
}

exports.renderLinearTooltipContent = renderLinearTooltipContent;
