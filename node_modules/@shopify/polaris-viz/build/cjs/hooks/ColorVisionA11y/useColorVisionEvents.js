'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var utilities = require('./utilities.js');
var useExternalHideEvents = require('../ExternalEvents/useExternalHideEvents.js');

function useColorVisionEvents(props) {
  const {
    enabled = true,
    dimensions,
    root = 'chart'
  } = props || {};
  const {
    id
  } = polarisVizCore.useChartContext();
  const {
    hiddenIndexes
  } = useExternalHideEvents.useExternalHideEvents();
  React.useEffect(() => {
    if (!enabled) {
      return;
    }

    const items = document.querySelectorAll(`#${root}_${id} [${polarisVizCore.COLOR_VISION_EVENT.dataAttribute}-watch="true"]`);

    function onMouseEnter(event) {
      var _event$target;

      const dataset = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dataset;
      const index = utilities.getDataSetItem(dataset, 'index');
      const type = utilities.getDataSetItem(dataset, 'type');

      if (id == null || type == null) {
        return;
      }

      const custom = new CustomEvent(utilities.getEventName(id, type), {
        detail: {
          index: Number(index)
        }
      });
      window.dispatchEvent(custom);
    }

    function onMouseLeave(event) {
      var _event$target2;

      const dataset = (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.dataset;
      const type = utilities.getDataSetItem(dataset, 'type');

      if (id == null || type == null) {
        return;
      }

      const custom = new CustomEvent(utilities.getEventName(id, type), {
        detail: {
          index: -1
        }
      });
      window.dispatchEvent(custom);
    }

    items.forEach(item => {
      item.addEventListener('mouseenter', onMouseEnter);
      item.addEventListener('mouseleave', onMouseLeave);
      item.addEventListener('focus', onMouseEnter);
      item.addEventListener('blur', onMouseLeave);
    });
    return () => {
      items.forEach(item => {
        item.removeEventListener('mouseenter', onMouseEnter);
        item.removeEventListener('mouseleave', onMouseLeave);
        item.removeEventListener('focus', onMouseEnter);
        item.removeEventListener('blur', onMouseLeave);
      });
    };
  }, [id, enabled, hiddenIndexes, dimensions, root]);
}

exports.useColorVisionEvents = useColorVisionEvents;
