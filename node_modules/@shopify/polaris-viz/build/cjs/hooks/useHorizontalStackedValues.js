'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var d3Shape = require('d3-shape');
var getStackedValues = require('../utilities/getStackedValues.js');
var getStackedMinMax = require('../utilities/getStackedMinMax.js');

function useHorizontalStackedValues({
  data,
  isStacked
}) {
  const {
    stackedValues,
    stackedMin,
    stackedMax
  } = React.useMemo(() => {
    if (!isStacked || data.length === 0) {
      return {
        stackedMin: 0,
        stackedMax: 0,
        labels: [],
        stackedValues: []
      };
    }

    const longestSeries = data.reduce((prev, cur) => {
      if (cur.data.length > prev.data.length) {
        return cur;
      }

      return prev;
    }, data[0]);
    const labels = longestSeries.data.map(({
      key
    }) => `${key}`);
    const stackedValues = getStackedValues.getStackedValues({
      series: data,
      labels,
      order: d3Shape.stackOrderNone,
      offset: d3Shape.stackOffsetDiverging
    });
    const {
      min,
      max
    } = getStackedMinMax.getStackedMinMax({
      stackedValues,
      data,
      integersOnly: false
    });
    const formattedStackedValues = labels.map((_, labelIndex) => {
      return stackedValues.map(data => {
        return data[labelIndex];
      });
    });
    return {
      stackedMin: min,
      stackedMax: max,
      labels,
      stackedValues: formattedStackedValues
    };
  }, [isStacked, data]);
  return {
    stackedValues,
    stackedMin,
    stackedMax
  };
}

exports.useHorizontalStackedValues = useHorizontalStackedValues;
