'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var polarisVizCore = require('@shopify/polaris-viz-core');
var useLinearXScale = require('./useLinearXScale.js');
var useReducedLabelIndexes = require('./useReducedLabelIndexes.js');

const MAX_LINEAR_LABEL_WIDTH = 90;
function useLinearLabelsAndDimensions({
  data,
  drawableWidth: initialDrawableWidth,
  hideXAxis,
  labels,
  longestSeriesLength
}) {
  const {
    characterWidths
  } = polarisVizCore.useChartContext();
  const longestSeriesLastIndex = React.useMemo(() => data.reduce((max, currentSeries) => Math.max(max, currentSeries.data.length), 0), [data]);
  const longestLabelWidth = React.useMemo(() => {
    const longestLabelWidth = labels.reduce((prev, cur) => {
      const width = polarisVizCore.estimateStringWidth(cur, characterWidths);

      if (width > prev) {
        return width;
      }

      return prev;
    }, polarisVizCore.HORIZONTAL_LABEL_MIN_WIDTH) + polarisVizCore.LINEAR_LABELS_INNER_PADDING;
    return polarisVizCore.clamp({
      amount: longestLabelWidth,
      min: 0,
      max: MAX_LINEAR_LABEL_WIDTH
    });
  }, [labels, characterWidths]);
  const numberOfLabelsThatFit = Math.floor(initialDrawableWidth / longestLabelWidth);
  const skipEveryNthLabel = Math.ceil(labels.length / numberOfLabelsThatFit);
  const reducedLabelIndexes = useReducedLabelIndexes.useReducedLabelIndexes({
    dataLength: longestSeriesLastIndex,
    skipEveryNthLabel
  });
  const visibleLabelsCount = reducedLabelIndexes.length > 0 ? reducedLabelIndexes.length : labels.length;
  const labelWidth = React.useMemo(() => {
    if (visibleLabelsCount === 0 || hideXAxis) {
      return 0;
    }

    return polarisVizCore.clamp({
      amount: Math.min(initialDrawableWidth / visibleLabelsCount - polarisVizCore.LINEAR_LABELS_INNER_PADDING, longestLabelWidth),
      min: 0,
      max: initialDrawableWidth
    });
  }, [initialDrawableWidth, visibleLabelsCount, hideXAxis, longestLabelWidth]);
  const drawableWidth = initialDrawableWidth;
  const {
    xScale
  } = useLinearXScale.useLinearXScale({
    drawableWidth,
    longestSeriesLength
  });
  return {
    labels,
    xScale,
    xAxisDetails: {
      labelWidth,
      reducedLabelIndexes
    }
  };
}

exports.useLinearLabelsAndDimensions = useLinearLabelsAndDimensions;
