'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');

// Returns a callback function that doesn't change it's reference,
// but will always call the latest callback.
//
// useCallback will change its reference when the deps change, but useCallbackRef
// doesn't. It keeps the same reference but will always have an up-to-date
// version of the latest method passed as a dependency.
//
// Example: If you have a hook that adds/removes event listeners, you can
// use useCallbackRef so that the events aren't removed/re-added whenever
// the callback changes.
function useCallbackRef(callback) {
  const callbackRef = React.useRef(null);

  if (!callbackRef.current) {
    callbackRef.current = Proxy.create();
  }

  Proxy.update(callbackRef.current, callback);
  return callbackRef.current;
}
const Proxy = {
  create() {
    const proxy = (...args) => {
      return proxy.callback(...args);
    };

    return proxy;
  },

  update(proxy, callback) {
    proxy.callback = callback;
  }

};

exports.useCallbackRef = useCallbackRef;
