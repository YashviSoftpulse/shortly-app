import {
  require_jsx_runtime
} from "./chunk-4RJVQIZB.js";
import {
  require_react_dom
} from "./chunk-JPK6CJAI.js";
import {
  require_react
} from "./chunk-6I4Q4HDT.js";
import {
  __commonJS,
  __toESM
} from "./chunk-BQWMX7FD.js";

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a3, b2) {
      if (a3 === b2)
        return true;
      if (a3 && b2 && typeof a3 == "object" && typeof b2 == "object") {
        if (a3.constructor !== b2.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a3)) {
          length = a3.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a3[i2], b2[i2]))
              return false;
          return true;
        }
        if (a3.constructor === RegExp)
          return a3.source === b2.source && a3.flags === b2.flags;
        if (a3.valueOf !== Object.prototype.valueOf)
          return a3.valueOf() === b2.valueOf();
        if (a3.toString !== Object.prototype.toString)
          return a3.toString() === b2.toString();
        keys = Object.keys(a3);
        length = keys.length;
        if (length !== Object.keys(b2).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i2]))
            return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal(a3[key], b2[key]))
            return false;
        }
        return true;
      }
      return a3 !== a3 && b2 !== b2;
    };
  }
});

// node_modules/@shopify/polaris-viz-core/build/esm/constants.js
var import_react = __toESM(require_react());

// node_modules/@shopify/polaris-viz-core/build/esm/styles/shared/_variables.scss.js
var variables = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200"
};

// node_modules/d3-array/src/ascending.js
function ascending(a3, b2) {
  return a3 == null || b2 == null ? NaN : a3 < b2 ? -1 : a3 > b2 ? 1 : a3 >= b2 ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a3, b2) {
  return a3 == null || b2 == null ? NaN : b2 < a3 ? -1 : b2 > a3 ? 1 : b2 >= a3 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f2) {
  let compare1, compare2, delta;
  if (f2.length !== 2) {
    compare1 = ascending;
    compare2 = (d2, x3) => ascending(f2(d2), x3);
    delta = (d2, x3) => f2(d2) - x3;
  } else {
    compare1 = f2 === ascending || f2 === descending ? f2 : zero;
    compare2 = f2;
    delta = f2;
  }
  function left(a3, x3, lo = 0, hi = a3.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a3[mid], x3) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a3, x3, lo = 0, hi = a3.length) {
    if (lo < hi) {
      if (compare1(x3, x3) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a3[mid], x3) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a3, x3, lo = 0, hi = a3.length) {
    const i2 = left(a3, x3, lo, hi - 1);
    return i2 > lo && delta(a3[i2 - 1], x3) > -delta(a3[i2], x3) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x3) {
  return x3 === null ? NaN : +x3;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0))
      throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0))
      throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0))
      throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0))
      throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry)
      return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T2, S2, w2, h2) {
  for (let y3 = 0, n3 = w2 * h2; y3 < n3; ) {
    blur3(T2, S2, y3, y3 += w2, 1);
  }
}
function blurv(blur3, T2, S2, w2, h2) {
  for (let x3 = 0, n3 = w2 * h2; x3 < w2; ++x3) {
    blur3(T2, S2, x3, x3 + n3, w2);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T2, S2, start2, stop2, step) => {
    start2 <<= 2, stop2 <<= 2, step <<= 2;
    blur3(T2, S2, start2 + 0, stop2 + 0, step);
    blur3(T2, S2, start2 + 1, stop2 + 1, step);
    blur3(T2, S2, start2 + 2, stop2 + 2, step);
    blur3(T2, S2, start2 + 3, stop2 + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius)
    return bluri(radius);
  const t5 = radius - radius0;
  const w2 = 2 * radius + 1;
  return (T2, S2, start2, stop2, step) => {
    if (!((stop2 -= step) >= start2))
      return;
    let sum3 = radius0 * S2[start2];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i2 = start2, j2 = start2 + s0; i2 < j2; i2 += step) {
      sum3 += S2[Math.min(stop2, i2)];
    }
    for (let i2 = start2, j2 = stop2; i2 <= j2; i2 += step) {
      sum3 += S2[Math.min(stop2, i2 + s0)];
      T2[i2] = (sum3 + t5 * (S2[Math.max(start2, i2 - s1)] + S2[Math.min(stop2, i2 + s1)])) / w2;
      sum3 -= S2[Math.max(start2, i2 - s0)];
    }
  };
}
function bluri(radius) {
  const w2 = 2 * radius + 1;
  return (T2, S2, start2, stop2, step) => {
    if (!((stop2 -= step) >= start2))
      return;
    let sum3 = radius * S2[start2];
    const s3 = step * radius;
    for (let i2 = start2, j2 = start2 + s3; i2 < j2; i2 += step) {
      sum3 += S2[Math.min(stop2, i2)];
    }
    for (let i2 = start2, j2 = stop2; i2 <= j2; i2 += step) {
      sum3 += S2[Math.min(stop2, i2 + s3)];
      T2[i2] = sum3 / w2;
      sum3 -= S2[Math.max(start2, i2 - s3)];
    }
  };
}

// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min3;
  let max3;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min3 === void 0) {
          if (value >= value)
            min3 = max3 = value;
        } else {
          if (min3 > value)
            min3 = value;
          if (max3 < value)
            max3 = value;
        }
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null) {
        if (min3 === void 0) {
          if (value >= value)
            min3 = max3 = value;
        } else {
          if (min3 > value)
            min3 = value;
          if (max3 < value)
            max3 = value;
        }
      }
    }
  }
  return [min3, max3];
}

// node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null)
      for (const [key2, value] of entries)
        this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop2, count2) {
  const step = (stop2 - start2) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i2 = Math.round(stop2 * inc);
    if (i1 / inc < start2)
      ++i1;
    if (i2 / inc > stop2)
      --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i2 = Math.round(stop2 / inc);
    if (i1 * inc < start2)
      ++i1;
    if (i2 * inc > stop2)
      --i2;
  }
  if (i2 < i1 && 0.5 <= count2 && count2 < 2)
    return tickSpec(start2, stop2, count2 * 2);
  return [i1, i2, inc];
}
function ticks(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  if (!(count2 > 0))
    return [];
  if (start2 === stop2)
    return [start2];
  const reverse2 = stop2 < start2, [i1, i2, inc] = reverse2 ? tickSpec(stop2, start2, count2) : tickSpec(start2, stop2, count2);
  if (!(i2 >= i1))
    return [];
  const n3 = i2 - i1 + 1, ticks2 = new Array(n3);
  if (reverse2) {
    if (inc < 0)
      for (let i3 = 0; i3 < n3; ++i3)
        ticks2[i3] = (i2 - i3) / -inc;
    else
      for (let i3 = 0; i3 < n3; ++i3)
        ticks2[i3] = (i2 - i3) * inc;
  } else {
    if (inc < 0)
      for (let i3 = 0; i3 < n3; ++i3)
        ticks2[i3] = (i1 + i3) / -inc;
    else
      for (let i3 = 0; i3 < n3; ++i3)
        ticks2[i3] = (i1 + i3) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  return tickSpec(start2, stop2, count2)[2];
}
function tickStep(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  const reverse2 = stop2 < start2, inc = reverse2 ? tickIncrement(stop2, start2, count2) : tickIncrement(start2, stop2, count2);
  return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/maxIndex.js
function maxIndex(values, valueof) {
  let max3;
  let maxIndex2 = -1;
  let index2 = -1;
  if (valueof === void 0) {
    for (const value of values) {
      ++index2;
      if (value != null && (max3 < value || max3 === void 0 && value >= value)) {
        max3 = value, maxIndex2 = index2;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index2, values)) != null && (max3 < value || max3 === void 0 && value >= value)) {
        max3 = value, maxIndex2 = index2;
      }
    }
  }
  return maxIndex2;
}

// node_modules/d3-array/src/range.js
function range(start2, stop2, step) {
  start2 = +start2, stop2 = +stop2, step = (n3 = arguments.length) < 2 ? (stop2 = start2, start2 = 0, 1) : n3 < 3 ? 1 : +step;
  var i2 = -1, n3 = Math.max(0, Math.ceil((stop2 - start2) / step)) | 0, range2 = new Array(n3);
  while (++i2 < n3) {
    range2[i2] = start2 + i2 * step;
  }
  return range2;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m2 = i1 - (i0 = +i0);
    while (m2) {
      const i2 = random() * m2-- | 0, t5 = array2[m2 + i0];
      array2[m2 + i0] = array2[i2 + i0];
      array2[i2 + i0] = t5;
    }
    return array2;
  };
}

// node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum3 += value;
      }
    }
  } else {
    let index2 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index2, values)) {
        sum3 += value;
      }
    }
  }
  return sum3;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale(d2) {
    let i2 = index2.get(d2);
    if (i2 === void 0) {
      if (unknown !== implicit)
        return unknown;
      index2.set(d2, i2 = domain.push(d2) - 1);
    }
    return range2[i2 % range2.length];
  }
  scale.domain = function(_2) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _2) {
      if (index2.has(value))
        continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_2) {
    return arguments.length ? (range2 = Array.from(_2), scale) : range2.slice();
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n3 = domain().length, reverse2 = r1 < r0, start2 = reverse2 ? r1 : r0, stop2 = reverse2 ? r0 : r1;
    step = (stop2 - start2) / Math.max(1, n3 - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start2 += (stop2 - start2 - step * (n3 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range(n3).map(function(i2) {
      return start2 + step * i2;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale.range = function(_2) {
    return arguments.length ? ([r0, r1] = _2, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_2) {
    return [r0, r1] = _2, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_2) {
    return arguments.length ? (round = !!_2, rescale()) : round;
  };
  scale.padding = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_2), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_2) {
    return arguments.length ? (paddingInner = Math.min(1, _2), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_2) {
    return arguments.length ? (paddingOuter = +_2, rescale()) : paddingOuter;
  };
  scale.align = function(_2) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _2)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m2, l2;
  format2 = (format2 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format2)) ? (l2 = m2[1].length, m2 = parseInt(m2[1], 16), l2 === 6 ? rgbn(m2) : l2 === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l2 === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l2 === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format2)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format2)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format2)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format2)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format2)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n3) {
  return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba(r3, g2, b2, a3) {
  if (a3 <= 0)
    r3 = g2 = b2 = NaN;
  return new Rgb(r3, g2, b2, a3);
}
function rgbConvert(o2) {
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Rgb();
  o2 = o2.rgb();
  return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
}
function rgb(r3, g2, b2, opacity) {
  return arguments.length === 1 ? rgbConvert(r3) : new Rgb(r3, g2, b2, opacity == null ? 1 : opacity);
}
function Rgb(r3, g2, b2, opacity) {
  this.r = +r3;
  this.g = +g2;
  this.b = +b2;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a3 = clampa(this.opacity);
  return `${a3 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a3 === 1 ? ")" : `, ${a3})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h2, s3, l2, a3) {
  if (a3 <= 0)
    h2 = s3 = l2 = NaN;
  else if (l2 <= 0 || l2 >= 1)
    h2 = s3 = NaN;
  else if (s3 <= 0)
    h2 = NaN;
  return new Hsl(h2, s3, l2, a3);
}
function hslConvert(o2) {
  if (o2 instanceof Hsl)
    return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Color))
    o2 = color(o2);
  if (!o2)
    return new Hsl();
  if (o2 instanceof Hsl)
    return o2;
  o2 = o2.rgb();
  var r3 = o2.r / 255, g2 = o2.g / 255, b2 = o2.b / 255, min3 = Math.min(r3, g2, b2), max3 = Math.max(r3, g2, b2), h2 = NaN, s3 = max3 - min3, l2 = (max3 + min3) / 2;
  if (s3) {
    if (r3 === max3)
      h2 = (g2 - b2) / s3 + (g2 < b2) * 6;
    else if (g2 === max3)
      h2 = (b2 - r3) / s3 + 2;
    else
      h2 = (r3 - g2) / s3 + 4;
    s3 /= l2 < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h2 *= 60;
  } else {
    s3 = l2 > 0 && l2 < 1 ? 0 : h2;
  }
  return new Hsl(h2, s3, l2, o2.opacity);
}
function hsl(h2, s3, l2, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s3, l2, opacity == null ? 1 : opacity);
}
function Hsl(h2, s3, l2, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l2 = this.l, m2 = l2 + (l2 < 0.5 ? l2 : 1 - l2) * s3, m1 = 2 * l2 - m2;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
      hsl2rgb(h2, m1, m2),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a3 = clampa(this.opacity);
    return `${a3 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a3 === 1 ? ")" : `, ${a3})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o2) {
  if (o2 instanceof Lab)
    return new Lab(o2.l, o2.a, o2.b, o2.opacity);
  if (o2 instanceof Hcl)
    return hcl2lab(o2);
  if (!(o2 instanceof Rgb))
    o2 = rgbConvert(o2);
  var r3 = rgb2lrgb(o2.r), g2 = rgb2lrgb(o2.g), b2 = rgb2lrgb(o2.b), y3 = xyz2lab((0.2225045 * r3 + 0.7168786 * g2 + 0.0606169 * b2) / Yn), x3, z2;
  if (r3 === g2 && g2 === b2)
    x3 = z2 = y3;
  else {
    x3 = xyz2lab((0.4360747 * r3 + 0.3850649 * g2 + 0.1430804 * b2) / Xn);
    z2 = xyz2lab((0.0139322 * r3 + 0.0971045 * g2 + 0.7141733 * b2) / Zn);
  }
  return new Lab(116 * y3 - 16, 500 * (x3 - y3), 200 * (y3 - z2), o2.opacity);
}
function lab(l2, a3, b2, opacity) {
  return arguments.length === 1 ? labConvert(l2) : new Lab(l2, a3, b2, opacity == null ? 1 : opacity);
}
function Lab(l2, a3, b2, opacity) {
  this.l = +l2;
  this.a = +a3;
  this.b = +b2;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter(k3) {
    return new Lab(this.l + K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  darker(k3) {
    return new Lab(this.l - K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  rgb() {
    var y3 = (this.l + 16) / 116, x3 = isNaN(this.a) ? y3 : y3 + this.a / 500, z2 = isNaN(this.b) ? y3 : y3 - this.b / 200;
    x3 = Xn * lab2xyz(x3);
    y3 = Yn * lab2xyz(y3);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x3 - 1.6168667 * y3 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x3 + 1.9161415 * y3 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x3 - 0.2289914 * y3 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t5) {
  return t5 > t3 ? Math.pow(t5, 1 / 3) : t5 / t2 + t0;
}
function lab2xyz(t5) {
  return t5 > t1 ? t5 * t5 * t5 : t2 * (t5 - t0);
}
function lrgb2rgb(x3) {
  return 255 * (x3 <= 31308e-7 ? 12.92 * x3 : 1.055 * Math.pow(x3, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x3) {
  return (x3 /= 255) <= 0.04045 ? x3 / 12.92 : Math.pow((x3 + 0.055) / 1.055, 2.4);
}
function hclConvert(o2) {
  if (o2 instanceof Hcl)
    return new Hcl(o2.h, o2.c, o2.l, o2.opacity);
  if (!(o2 instanceof Lab))
    o2 = labConvert(o2);
  if (o2.a === 0 && o2.b === 0)
    return new Hcl(NaN, 0 < o2.l && o2.l < 100 ? 0 : NaN, o2.l, o2.opacity);
  var h2 = Math.atan2(o2.b, o2.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o2.a * o2.a + o2.b * o2.b), o2.l, o2.opacity);
}
function hcl(h2, c7, l2, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c7, l2, opacity == null ? 1 : opacity);
}
function Hcl(h2, c7, l2, opacity) {
  this.h = +h2;
  this.c = +c7;
  this.l = +l2;
  this.opacity = +opacity;
}
function hcl2lab(o2) {
  if (isNaN(o2.h))
    return new Lab(o2.l, 0, 0, o2.opacity);
  var h2 = o2.h * radians;
  return new Lab(o2.l, Math.cos(h2) * o2.c, Math.sin(h2) * o2.c, o2.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter(k3) {
    return new Hcl(this.h, this.c, this.l + K * (k3 == null ? 1 : k3), this.opacity);
  },
  darker(k3) {
    return new Hcl(this.h, this.c, this.l - K * (k3 == null ? 1 : k3), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o2) {
  if (o2 instanceof Cubehelix)
    return new Cubehelix(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Rgb))
    o2 = rgbConvert(o2);
  var r3 = o2.r / 255, g2 = o2.g / 255, b2 = o2.b / 255, l2 = (BC_DA * b2 + ED * r3 - EB * g2) / (BC_DA + ED - EB), bl = b2 - l2, k3 = (E * (g2 - l2) - C * bl) / D, s3 = Math.sqrt(k3 * k3 + bl * bl) / (E * l2 * (1 - l2)), h2 = s3 ? Math.atan2(k3, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s3, l2, o2.opacity);
}
function cubehelix(h2, s3, l2, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s3, l2, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s3, l2, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  darker(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l2 = +this.l, a3 = isNaN(this.s) ? 0 : this.s * l2 * (1 - l2), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l2 + a3 * (A * cosh2 + B * sinh2)),
      255 * (l2 + a3 * (C * cosh2 + D * sinh2)),
      255 * (l2 + a3 * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v2, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v2 + t32 * v3) / 6;
}
function basis_default(values) {
  var n3 = values.length - 1;
  return function(t5) {
    var i2 = t5 <= 0 ? t5 = 0 : t5 >= 1 ? (t5 = 1, n3 - 1) : Math.floor(t5 * n3), v1 = values[i2], v2 = values[i2 + 1], v0 = i2 > 0 ? values[i2 - 1] : 2 * v1 - v2, v3 = i2 < n3 - 1 ? values[i2 + 2] : 2 * v2 - v1;
    return basis((t5 - i2 / n3) * n3, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n3 = values.length;
  return function(t5) {
    var i2 = Math.floor(((t5 %= 1) < 0 ? ++t5 : t5) * n3), v0 = values[(i2 + n3 - 1) % n3], v1 = values[i2 % n3], v2 = values[(i2 + 1) % n3], v3 = values[(i2 + 2) % n3];
    return basis((t5 - i2 / n3) * n3, v0, v1, v2, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default = (x3) => () => x3;

// node_modules/d3-interpolate/src/color.js
function linear(a3, d2) {
  return function(t5) {
    return a3 + t5 * d2;
  };
}
function exponential(a3, b2, y3) {
  return a3 = Math.pow(a3, y3), b2 = Math.pow(b2, y3) - a3, y3 = 1 / y3, function(t5) {
    return Math.pow(a3 + t5 * b2, y3);
  };
}
function hue(a3, b2) {
  var d2 = b2 - a3;
  return d2 ? linear(a3, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default(isNaN(a3) ? b2 : a3);
}
function gamma(y3) {
  return (y3 = +y3) === 1 ? nogamma : function(a3, b2) {
    return b2 - a3 ? exponential(a3, b2, y3) : constant_default(isNaN(a3) ? b2 : a3);
  };
}
function nogamma(a3, b2) {
  var d2 = b2 - a3;
  return d2 ? linear(a3, d2) : constant_default(isNaN(a3) ? b2 : a3);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y3) {
  var color2 = gamma(y3);
  function rgb3(start2, end) {
    var r3 = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g2 = color2(start2.g, end.g), b2 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t5) {
      start2.r = r3(t5);
      start2.g = g2(t5);
      start2.b = b2(t5);
      start2.opacity = opacity(t5);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors3) {
    var n3 = colors3.length, r3 = new Array(n3), g2 = new Array(n3), b2 = new Array(n3), i2, color2;
    for (i2 = 0; i2 < n3; ++i2) {
      color2 = rgb(colors3[i2]);
      r3[i2] = color2.r || 0;
      g2[i2] = color2.g || 0;
      b2[i2] = color2.b || 0;
    }
    r3 = spline(r3);
    g2 = spline(g2);
    b2 = spline(b2);
    color2.opacity = 1;
    return function(t5) {
      color2.r = r3(t5);
      color2.g = g2(t5);
      color2.b = b2(t5);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a3, b2) {
  if (!b2)
    b2 = [];
  var n3 = a3 ? Math.min(b2.length, a3.length) : 0, c7 = b2.slice(), i2;
  return function(t5) {
    for (i2 = 0; i2 < n3; ++i2)
      c7[i2] = a3[i2] * (1 - t5) + b2[i2] * t5;
    return c7;
  };
}
function isNumberArray(x3) {
  return ArrayBuffer.isView(x3) && !(x3 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a3, b2) {
  var nb = b2 ? b2.length : 0, na = a3 ? Math.min(nb, a3.length) : 0, x3 = new Array(na), c7 = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2)
    x3[i2] = value_default(a3[i2], b2[i2]);
  for (; i2 < nb; ++i2)
    c7[i2] = b2[i2];
  return function(t5) {
    for (i2 = 0; i2 < na; ++i2)
      c7[i2] = x3[i2](t5);
    return c7;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a3, b2) {
  var d2 = /* @__PURE__ */ new Date();
  return a3 = +a3, b2 = +b2, function(t5) {
    return d2.setTime(a3 * (1 - t5) + b2 * t5), d2;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a3, b2) {
  return a3 = +a3, b2 = +b2, function(t5) {
    return a3 * (1 - t5) + b2 * t5;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a3, b2) {
  var i2 = {}, c7 = {}, k3;
  if (a3 === null || typeof a3 !== "object")
    a3 = {};
  if (b2 === null || typeof b2 !== "object")
    b2 = {};
  for (k3 in b2) {
    if (k3 in a3) {
      i2[k3] = value_default(a3[k3], b2[k3]);
    } else {
      c7[k3] = b2[k3];
    }
  }
  return function(t5) {
    for (k3 in i2)
      c7[k3] = i2[k3](t5);
    return c7;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b2) {
  return function() {
    return b2;
  };
}
function one(b2) {
  return function(t5) {
    return b2(t5) + "";
  };
}
function string_default(a3, b2) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s3 = [], q2 = [];
  a3 = a3 + "", b2 = b2 + "";
  while ((am = reA.exec(a3)) && (bm = reB.exec(b2))) {
    if ((bs = bm.index) > bi) {
      bs = b2.slice(bi, bs);
      if (s3[i2])
        s3[i2] += bs;
      else
        s3[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s3[i2])
        s3[i2] += bm;
      else
        s3[++i2] = bm;
    } else {
      s3[++i2] = null;
      q2.push({ i: i2, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b2.length) {
    bs = b2.slice(bi);
    if (s3[i2])
      s3[i2] += bs;
    else
      s3[++i2] = bs;
  }
  return s3.length < 2 ? q2[0] ? one(q2[0].x) : zero2(b2) : (b2 = q2.length, function(t5) {
    for (var i3 = 0, o2; i3 < b2; ++i3)
      s3[(o2 = q2[i3]).i] = o2.x(t5);
    return s3.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a3, b2) {
  var t5 = typeof b2, c7;
  return b2 == null || t5 === "boolean" ? constant_default(b2) : (t5 === "number" ? number_default : t5 === "string" ? (c7 = color(b2)) ? (b2 = c7, rgb_default) : string_default : b2 instanceof color ? rgb_default : b2 instanceof Date ? date_default : isNumberArray(b2) ? numberArray_default : Array.isArray(b2) ? genericArray : typeof b2.valueOf !== "function" && typeof b2.toString !== "function" || isNaN(b2) ? object_default : number_default)(a3, b2);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a3, b2) {
  return a3 = +a3, b2 = +b2, function(t5) {
    return Math.round(a3 * (1 - t5) + b2 * t5);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a3, b2, c7, d2, e4, f2) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a3 * a3 + b2 * b2))
    a3 /= scaleX, b2 /= scaleX;
  if (skewX = a3 * c7 + b2 * d2)
    c7 -= a3 * skewX, d2 -= b2 * skewX;
  if (scaleY = Math.sqrt(c7 * c7 + d2 * d2))
    c7 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a3 * d2 < b2 * c7)
    a3 = -a3, b2 = -b2, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e4,
    translateY: f2,
    rotate: Math.atan2(b2, a3) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity2 : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null)
    return identity2;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s3) {
    return s3.length ? s3.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s3, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s3.push("translate(", null, pxComma, null, pxParen);
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s3.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a3, b2, s3, q2) {
    if (a3 !== b2) {
      if (a3 - b2 > 180)
        b2 += 360;
      else if (b2 - a3 > 180)
        a3 += 360;
      q2.push({ i: s3.push(pop(s3) + "rotate(", null, degParen) - 2, x: number_default(a3, b2) });
    } else if (b2) {
      s3.push(pop(s3) + "rotate(" + b2 + degParen);
    }
  }
  function skewX(a3, b2, s3, q2) {
    if (a3 !== b2) {
      q2.push({ i: s3.push(pop(s3) + "skewX(", null, degParen) - 2, x: number_default(a3, b2) });
    } else if (b2) {
      s3.push(pop(s3) + "skewX(" + b2 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s3, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s3.push(pop(s3) + "scale(", null, ",", null, ")");
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s3.push(pop(s3) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a3, b2) {
    var s3 = [], q2 = [];
    a3 = parse(a3), b2 = parse(b2);
    translate(a3.translateX, a3.translateY, b2.translateX, b2.translateY, s3, q2);
    rotate(a3.rotate, b2.rotate, s3, q2);
    skewX(a3.skewX, b2.skewX, s3, q2);
    scale(a3.scaleX, a3.scaleY, b2.scaleX, b2.scaleY, s3, q2);
    a3 = b2 = null;
    return function(t5) {
      var i2 = -1, n3 = q2.length, o2;
      while (++i2 < n3)
        s3[(o2 = q2[i2]).i] = o2.x(t5);
      return s3.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x3) {
  return ((x3 = Math.exp(x3)) + 1 / x3) / 2;
}
function sinh(x3) {
  return ((x3 = Math.exp(x3)) - 1 / x3) / 2;
}
function tanh(x3) {
  return ((x3 = Math.exp(2 * x3)) - 1) / (x3 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S2;
    if (d2 < epsilon2) {
      S2 = Math.log(w1 / w0) / rho;
      i2 = function(t5) {
        return [
          ux0 + t5 * dx,
          uy0 + t5 * dy,
          w0 * Math.exp(rho * t5 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i2 = function(t5) {
        var s3 = t5 * S2, coshr0 = cosh(r0), u3 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s3 + r0) - sinh(r0));
        return [
          ux0 + u3 * dx,
          uy0 + u3 * dy,
          w0 * coshr0 / cosh(rho * s3 + r0)
        ];
      };
    }
    i2.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i2;
  }
  zoom.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hsl(start2)).h, (end = hsl(end)).h), s3 = nogamma(start2.s, end.s), l2 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t5) {
      start2.h = h2(t5);
      start2.s = s3(t5);
      start2.l = l2(t5);
      start2.opacity = opacity(t5);
      return start2 + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hcl(start2)).h, (end = hcl(end)).h), c7 = nogamma(start2.c, end.c), l2 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t5) {
      start2.h = h2(t5);
      start2.c = c7(t5);
      start2.l = l2(t5);
      start2.opacity = opacity(t5);
      return start2 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y3) {
    y3 = +y3;
    function cubehelix3(start2, end) {
      var h2 = hue2((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s3 = nogamma(start2.s, end.s), l2 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t5) {
        start2.h = h2(t5);
        start2.s = s3(t5);
        start2.l = l2(Math.pow(t5, y3));
        start2.opacity = opacity(t5);
        return start2 + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-scale/src/constant.js
function constants(x3) {
  return function() {
    return x3;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x3) {
  return +x3;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x3) {
  return x3;
}
function normalize(a3, b2) {
  return (b2 -= a3 = +a3) ? function(x3) {
    return (x3 - a3) / b2;
  } : constants(isNaN(b2) ? NaN : 0.5);
}
function clamper(a3, b2) {
  var t5;
  if (a3 > b2)
    t5 = a3, a3 = b2, b2 = t5;
  return function(x3) {
    return Math.max(a3, Math.min(b2, x3));
  };
}
function bimap(domain, range2, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x3) {
    return r0(d0(x3));
  };
}
function polymap(domain, range2, interpolate2) {
  var j2 = Math.min(domain.length, range2.length) - 1, d2 = new Array(j2), r3 = new Array(j2), i2 = -1;
  if (domain[j2] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i2 < j2) {
    d2[i2] = normalize(domain[i2], domain[i2 + 1]);
    r3[i2] = interpolate2(range2[i2], range2[i2 + 1]);
  }
  return function(x3) {
    var i3 = bisect_default(domain, x3, 1, j2) - 1;
    return r3[i3](d2[i3](x3));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate2 = value_default, transform, untransform, unknown, clamp3 = identity3, piecewise2, output, input;
  function rescale() {
    var n3 = Math.min(domain.length, range2.length);
    if (clamp3 !== identity3)
      clamp3 = clamper(domain[0], domain[n3 - 1]);
    piecewise2 = n3 > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x3) {
    return x3 == null || isNaN(x3 = +x3) ? unknown : (output || (output = piecewise2(domain.map(transform), range2, interpolate2)))(transform(clamp3(x3)));
  }
  scale.invert = function(y3) {
    return clamp3(untransform((input || (input = piecewise2(range2, domain.map(transform), number_default)))(y3)));
  };
  scale.domain = function(_2) {
    return arguments.length ? (domain = Array.from(_2, number2), rescale()) : domain.slice();
  };
  scale.range = function(_2) {
    return arguments.length ? (range2 = Array.from(_2), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_2) {
    return range2 = Array.from(_2), interpolate2 = round_default, rescale();
  };
  scale.clamp = function(_2) {
    return arguments.length ? (clamp3 = _2 ? true : identity3, rescale()) : clamp3 !== identity3;
  };
  scale.interpolate = function(_2) {
    return arguments.length ? (interpolate2 = _2, rescale()) : interpolate2;
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : unknown;
  };
  return function(t5, u3) {
    transform = t5, untransform = u3;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x3) {
  return Math.abs(x3 = Math.round(x3)) >= 1e21 ? x3.toLocaleString("en").replace(/,/g, "") : x3.toString(10);
}
function formatDecimalParts(x3, p2) {
  if ((i2 = (x3 = p2 ? x3.toExponential(p2 - 1) : x3.toExponential()).indexOf("e")) < 0)
    return null;
  var i2, coefficient = x3.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x3.slice(i2 + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x3) {
  return x3 = formatDecimalParts(Math.abs(x3)), x3 ? x3[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t5 = [], j2 = 0, g2 = grouping[0], length = 0;
    while (i2 > 0 && g2 > 0) {
      if (length + g2 + 1 > width)
        g2 = Math.max(1, width - length);
      t5.push(value.substring(i2 -= g2, i2 + g2));
      if ((length += g2 + 1) > width)
        break;
      g2 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t5.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s3) {
  out:
    for (var n3 = s3.length, i2 = 1, i0 = -1, i1; i2 < n3; ++i2) {
      switch (s3[i2]) {
        case ".":
          i0 = i1 = i2;
          break;
        case "0":
          if (i0 === 0)
            i0 = i2;
          i1 = i2;
          break;
        default:
          if (!+s3[i2])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x3, p2) {
  var d2 = formatDecimalParts(x3, p2);
  if (!d2)
    return x3 + "";
  var coefficient = d2[0], exponent = d2[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i2 === n3 ? coefficient : i2 > n3 ? coefficient + new Array(i2 - n3 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x3, Math.max(0, p2 + i2 - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x3, p2) {
  var d2 = formatDecimalParts(x3, p2);
  if (!d2)
    return x3 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x3, p2) => (x3 * 100).toFixed(p2),
  "b": (x3) => Math.round(x3).toString(2),
  "c": (x3) => x3 + "",
  "d": formatDecimal_default,
  "e": (x3, p2) => x3.toExponential(p2),
  "f": (x3, p2) => x3.toFixed(p2),
  "g": (x3, p2) => x3.toPrecision(p2),
  "o": (x3) => Math.round(x3).toString(8),
  "p": (x3, p2) => formatRounded_default(x3 * 100, p2),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x3) => Math.round(x3).toString(16).toUpperCase(),
  "x": (x3) => Math.round(x3).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x3) {
  return x3;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i2, n3, c7;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n3 = value.length;
          while (++i2 < n3) {
            if (c7 = value.charCodeAt(i2), 48 > c7 || c7 > 57) {
              valueSuffix = (c7 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e4 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k3 = Math.pow(10, -e4), prefix2 = prefixes[8 + e4 / 3];
    return function(value2) {
      return f2(k3 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop2, count2, specifier) {
  var step = tickStep(start2, stop2, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop2));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count2) {
    var d2 = domain();
    return ticks(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2);
  };
  scale.tickFormat = function(count2, specifier) {
    var d2 = domain();
    return tickFormat(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale.nice = function(count2) {
    if (count2 == null)
      count2 = 10;
    var d2 = domain();
    var i0 = 0;
    var i1 = d2.length - 1;
    var start2 = d2[i0];
    var stop2 = d2[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop2 < start2) {
      step = start2, start2 = stop2, stop2 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop2, count2);
      if (step === prestep) {
        d2[i0] = start2;
        d2[i1] = stop2;
        return domain(d2);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear2());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// node_modules/d3-scale/src/nice.js
function nice2(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t5;
  if (x1 < x0) {
    t5 = i0, i0 = i1, i1 = t5;
    t5 = x0, x0 = x1, x1 = t5;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

// node_modules/d3-scale/src/log.js
function transformLog(x3) {
  return Math.log(x3);
}
function transformExp(x3) {
  return Math.exp(x3);
}
function transformLogn(x3) {
  return -Math.log(-x3);
}
function transformExpn(x3) {
  return -Math.exp(-x3);
}
function pow10(x3) {
  return isFinite(x3) ? +("1e" + x3) : x3 < 0 ? 0 : x3;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x3) => Math.pow(base, x3);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x3) => Math.log(x3) / base);
}
function reflect(f2) {
  return (x3, k3) => -f2(-x3, k3);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_2) {
    return arguments.length ? (base = +_2, rescale()) : base;
  };
  scale.domain = function(_2) {
    return arguments.length ? (domain(_2), rescale()) : domain();
  };
  scale.ticks = (count2) => {
    const d2 = domain();
    let u3 = d2[0];
    let v2 = d2[d2.length - 1];
    const r3 = v2 < u3;
    if (r3)
      [u3, v2] = [v2, u3];
    let i2 = logs(u3);
    let j2 = logs(v2);
    let k3;
    let t5;
    const n3 = count2 == null ? 10 : +count2;
    let z2 = [];
    if (!(base % 1) && j2 - i2 < n3) {
      i2 = Math.floor(i2), j2 = Math.ceil(j2);
      if (u3 > 0)
        for (; i2 <= j2; ++i2) {
          for (k3 = 1; k3 < base; ++k3) {
            t5 = i2 < 0 ? k3 / pows(-i2) : k3 * pows(i2);
            if (t5 < u3)
              continue;
            if (t5 > v2)
              break;
            z2.push(t5);
          }
        }
      else
        for (; i2 <= j2; ++i2) {
          for (k3 = base - 1; k3 >= 1; --k3) {
            t5 = i2 > 0 ? k3 / pows(-i2) : k3 * pows(i2);
            if (t5 < u3)
              continue;
            if (t5 > v2)
              break;
            z2.push(t5);
          }
        }
      if (z2.length * 2 < n3)
        z2 = ticks(u3, v2, n3);
    } else {
      z2 = ticks(i2, j2, Math.min(j2 - i2, n3)).map(pows);
    }
    return r3 ? z2.reverse() : z2;
  };
  scale.tickFormat = (count2, specifier) => {
    if (count2 == null)
      count2 = 10;
    if (specifier == null)
      specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count2 === Infinity)
      return specifier;
    const k3 = Math.max(1, base * count2 / scale.ticks().length);
    return (d2) => {
      let i2 = d2 / pows(Math.round(logs(d2)));
      if (i2 * base < base - 0.5)
        i2 *= base;
      return i2 <= k3 ? specifier(d2) : "";
    };
  };
  scale.nice = () => {
    return domain(nice2(domain(), {
      floor: (x3) => pows(Math.floor(logs(x3))),
      ceil: (x3) => pows(Math.ceil(logs(x3)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer()).domain([1, 10]);
  scale.copy = () => copy(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}

// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n3 = 1, domain = [0.5], range2 = [0, 1], unknown;
  function scale(x3) {
    return x3 != null && x3 <= x3 ? range2[bisect_default(domain, x3, 0, n3)] : unknown;
  }
  function rescale() {
    var i2 = -1;
    domain = new Array(n3);
    while (++i2 < n3)
      domain[i2] = ((i2 + 1) * x1 - (i2 - n3) * x0) / (n3 + 1);
    return scale;
  }
  scale.domain = function(_2) {
    return arguments.length ? ([x0, x1] = _2, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };
  scale.range = function(_2) {
    return arguments.length ? (n3 = (range2 = Array.from(_2)).length - 1, rescale()) : range2.slice();
  };
  scale.invertExtent = function(y3) {
    var i2 = range2.indexOf(y3);
    return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x0, domain[0]] : i2 >= n3 ? [domain[n3 - 1], x1] : [domain[i2 - 1], domain[i2]];
  };
  scale.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale) : scale;
  };
  scale.thresholds = function() {
    return domain.slice();
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range2).unknown(unknown);
  };
  return initRange.apply(linearish(scale), arguments);
}

// node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count2, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = (date) => {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = (date, step) => {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = (start2, stop2, step) => {
    const range2 = [];
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0))
      return range2;
    let previous;
    do
      range2.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range2;
  };
  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date)
        while (floori(date), !test(date))
          date.setTime(date - 1);
    }, (date, step) => {
      if (date >= date) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date, -1), !test(date)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date, 1), !test(date)) {
            }
          }
      }
    });
  };
  if (count2) {
    interval.count = (start2, end) => {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d2) => field(d2) % step === 0 : (d2) => interval.count(0, d2) % step === 0);
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date, step) => {
  date.setTime(+date + step);
}, (start2, end) => {
  return end - start2;
});
millisecond.every = (k3) => {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond;
  return timeInterval((date) => {
    date.setTime(Math.floor(date / k3) * k3);
  }, (date, step) => {
    date.setTime(+date + step * k3);
  }, (start2, end) => {
    return (end - start2) / k3;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds());
}, (date, step) => {
  date.setTime(+date + step * durationSecond);
}, (start2, end) => {
  return (end - start2) / durationSecond;
}, (date) => {
  return date.getUTCSeconds();
});
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date) => {
  return date.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date) => {
  date.setUTCSeconds(0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date) => {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date) => {
  return date.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date) => {
  date.setUTCMinutes(0, 0, 0);
}, (date, step) => {
  date.setTime(+date + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date) => {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

// node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step) => date.setDate(date.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCDate(date.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});
var unixDays = unixDay.range;

// node_modules/d3-time/src/week.js
function timeWeekday(i2) {
  return timeInterval((date) => {
    date.setDate(date.getDate() - (date.getDay() + 7 - i2) % 7);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setDate(date.getDate() + step * 7);
  }, (start2, end) => {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i2) {
  return timeInterval((date) => {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i2) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, (start2, end) => {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date) => {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setMonth(date.getMonth() + step);
}, (start2, end) => {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, (date) => {
  return date.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date) => {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCMonth(date.getUTCMonth() + step);
}, (start2, end) => {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, (date) => {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/year.js
var timeYear = timeInterval((date) => {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, (date, step) => {
  date.setFullYear(date.getFullYear() + step);
}, (start2, end) => {
  return end.getFullYear() - start2.getFullYear();
}, (date) => {
  return date.getFullYear();
});
timeYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date) => {
    date.setFullYear(Math.floor(date.getFullYear() / k3) * k3);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setFullYear(date.getFullYear() + step * k3);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date) => {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step) => {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start2, end) => {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, (date) => {
  return date.getUTCFullYear();
});
utcYear.every = (k3) => {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : timeInterval((date) => {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k3) * k3);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step) => {
    date.setUTCFullYear(date.getUTCFullYear() + step * k3);
  });
};
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start2, stop2, count2) {
    const reverse2 = stop2 < start2;
    if (reverse2)
      [start2, stop2] = [stop2, start2];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start2, stop2, count2);
    const ticks3 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start2, stop2, count2) {
    const target = Math.abs(stop2 - start2) / count2;
    const i2 = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i2 === tickIntervals.length)
      return year.every(tickStep(start2 / durationYear, stop2 / durationYear, count2));
    if (i2 === 0)
      return millisecond.every(Math.max(tickStep(start2, stop2, count2), 1));
    const [t5, step] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t5.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// node_modules/d3-time-format/src/locale.js
function localDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    date.setFullYear(d2.y);
    return date;
  }
  return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
}
function utcDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    date.setUTCFullYear(d2.y);
    return date;
  }
  return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
}
function newDate(y3, m2, d2) {
  return { y: y3, m: m2, d: d2, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i2 = -1, j2 = 0, n3 = specifier.length, c7, pad2, format2;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i2 < n3) {
        if (specifier.charCodeAt(i2) === 37) {
          string.push(specifier.slice(j2, i2));
          if ((pad2 = pads[c7 = specifier.charAt(++i2)]) != null)
            c7 = specifier.charAt(++i2);
          else
            pad2 = c7 === "e" ? " " : "0";
          if (format2 = formats2[c7])
            c7 = format2(date, pad2);
          string.push(c7);
          j2 = i2 + 1;
        }
      }
      string.push(specifier.slice(j2, i2));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d2 = newDate(1900, void 0, 1), i2 = parseSpecifier(d2, specifier, string += "", 0), week, day;
      if (i2 != string.length)
        return null;
      if ("Q" in d2)
        return new Date(d2.Q);
      if ("s" in d2)
        return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
      if (Z2 && !("Z" in d2))
        d2.Z = 0;
      if ("p" in d2)
        d2.H = d2.H % 12 + d2.p * 12;
      if (d2.m === void 0)
        d2.m = "q" in d2 ? d2.q : 0;
      if ("V" in d2) {
        if (d2.V < 1 || d2.V > 53)
          return null;
        if (!("w" in d2))
          d2.w = 1;
        if ("Z" in d2) {
          week = utcDate(newDate(d2.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getUTCFullYear();
          d2.m = week.getUTCMonth();
          d2.d = week.getUTCDate() + (d2.w + 6) % 7;
        } else {
          week = localDate(newDate(d2.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getFullYear();
          d2.m = week.getMonth();
          d2.d = week.getDate() + (d2.w + 6) % 7;
        }
      } else if ("W" in d2 || "U" in d2) {
        if (!("w" in d2))
          d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
        day = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
        d2.m = 0;
        d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day + 5) % 7 : d2.w + d2.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d2) {
        d2.H += d2.Z / 100 | 0;
        d2.M += d2.Z % 100;
        return utcDate(d2);
      }
      return localDate(d2);
    };
  }
  function parseSpecifier(d2, specifier, string, j2) {
    var i2 = 0, n3 = specifier.length, m2 = string.length, c7, parse;
    while (i2 < n3) {
      if (j2 >= m2)
        return -1;
      c7 = specifier.charCodeAt(i2++);
      if (c7 === 37) {
        c7 = specifier.charAt(i2++);
        parse = parses[c7 in pads ? specifier.charAt(i2++) : c7];
        if (!parse || (j2 = parse(d2, string, j2)) < 0)
          return -1;
      } else if (c7 != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d2, string, i2) {
    var n3 = periodRe.exec(string.slice(i2));
    return n3 ? (d2.p = periodLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortWeekday(d2, string, i2) {
    var n3 = shortWeekdayRe.exec(string.slice(i2));
    return n3 ? (d2.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseWeekday(d2, string, i2) {
    var n3 = weekdayRe.exec(string.slice(i2));
    return n3 ? (d2.w = weekdayLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseShortMonth(d2, string, i2) {
    var n3 = shortMonthRe.exec(string.slice(i2));
    return n3 ? (d2.m = shortMonthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseMonth(d2, string, i2) {
    var n3 = monthRe.exec(string.slice(i2));
    return n3 ? (d2.m = monthLookup.get(n3[0].toLowerCase()), i2 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d2, string, i2) {
    return parseSpecifier(d2, locale_dateTime, string, i2);
  }
  function parseLocaleDate(d2, string, i2) {
    return parseSpecifier(d2, locale_date, string, i2);
  }
  function parseLocaleTime(d2, string, i2) {
    return parseSpecifier(d2, locale_time, string, i2);
  }
  function formatShortWeekday(d2) {
    return locale_shortWeekdays[d2.getDay()];
  }
  function formatWeekday(d2) {
    return locale_weekdays[d2.getDay()];
  }
  function formatShortMonth(d2) {
    return locale_shortMonths[d2.getMonth()];
  }
  function formatMonth(d2) {
    return locale_months[d2.getMonth()];
  }
  function formatPeriod(d2) {
    return locale_periods[+(d2.getHours() >= 12)];
  }
  function formatQuarter(d2) {
    return 1 + ~~(d2.getMonth() / 3);
  }
  function formatUTCShortWeekday(d2) {
    return locale_shortWeekdays[d2.getUTCDay()];
  }
  function formatUTCWeekday(d2) {
    return locale_weekdays[d2.getUTCDay()];
  }
  function formatUTCShortMonth(d2) {
    return locale_shortMonths[d2.getUTCMonth()];
  }
  function formatUTCMonth(d2) {
    return locale_months[d2.getUTCMonth()];
  }
  function formatUTCPeriod(d2) {
    return locale_periods[+(d2.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d2) {
    return 1 + ~~(d2.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s3) {
  return s3.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name2, i2) => [name2.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d2.w = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d2.u = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberSunday(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.U = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberISO(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.V = +n3[0], i2 + n3[0].length) : -1;
}
function parseWeekNumberMonday(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.W = +n3[0], i2 + n3[0].length) : -1;
}
function parseFullYear(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 4));
  return n3 ? (d2.y = +n3[0], i2 + n3[0].length) : -1;
}
function parseYear(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i2 + n3[0].length) : -1;
}
function parseZone(d2, string, i2) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i2, i2 + 6));
  return n3 ? (d2.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i2 + n3[0].length) : -1;
}
function parseQuarter(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 1));
  return n3 ? (d2.q = n3[0] * 3 - 3, i2 + n3[0].length) : -1;
}
function parseMonthNumber(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.m = n3[0] - 1, i2 + n3[0].length) : -1;
}
function parseDayOfMonth(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseDayOfYear(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 3));
  return n3 ? (d2.m = 0, d2.d = +n3[0], i2 + n3[0].length) : -1;
}
function parseHour24(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.H = +n3[0], i2 + n3[0].length) : -1;
}
function parseMinutes(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.M = +n3[0], i2 + n3[0].length) : -1;
}
function parseSeconds(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 2));
  return n3 ? (d2.S = +n3[0], i2 + n3[0].length) : -1;
}
function parseMilliseconds(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 3));
  return n3 ? (d2.L = +n3[0], i2 + n3[0].length) : -1;
}
function parseMicroseconds(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2, i2 + 6));
  return n3 ? (d2.L = Math.floor(n3[0] / 1e3), i2 + n3[0].length) : -1;
}
function parseLiteralPercent(d2, string, i2) {
  var n3 = percentRe.exec(string.slice(i2, i2 + 1));
  return n3 ? i2 + n3[0].length : -1;
}
function parseUnixTimestamp(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2));
  return n3 ? (d2.Q = +n3[0], i2 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds(d2, string, i2) {
  var n3 = numberRe.exec(string.slice(i2));
  return n3 ? (d2.s = +n3[0], i2 + n3[0].length) : -1;
}
function formatDayOfMonth(d2, p2) {
  return pad(d2.getDate(), p2, 2);
}
function formatHour24(d2, p2) {
  return pad(d2.getHours(), p2, 2);
}
function formatHour12(d2, p2) {
  return pad(d2.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d2, p2) {
  return pad(1 + timeDay.count(timeYear(d2), d2), p2, 3);
}
function formatMilliseconds(d2, p2) {
  return pad(d2.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d2, p2) {
  return formatMilliseconds(d2, p2) + "000";
}
function formatMonthNumber(d2, p2) {
  return pad(d2.getMonth() + 1, p2, 2);
}
function formatMinutes(d2, p2) {
  return pad(d2.getMinutes(), p2, 2);
}
function formatSeconds(d2, p2) {
  return pad(d2.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d2) {
  var day = d2.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d2, p2) {
  return pad(timeSunday.count(timeYear(d2) - 1, d2), p2, 2);
}
function dISO(d2) {
  var day = d2.getDay();
  return day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
}
function formatWeekNumberISO(d2, p2) {
  d2 = dISO(d2);
  return pad(timeThursday.count(timeYear(d2), d2) + (timeYear(d2).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d2) {
  return d2.getDay();
}
function formatWeekNumberMonday(d2, p2) {
  return pad(timeMonday.count(timeYear(d2) - 1, d2), p2, 2);
}
function formatYear(d2, p2) {
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatYearISO(d2, p2) {
  d2 = dISO(d2);
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatFullYear(d2, p2) {
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d2, p2) {
  var day = d2.getDay();
  d2 = day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatZone(d2) {
  var z2 = d2.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d2, p2) {
  return pad(d2.getUTCDate(), p2, 2);
}
function formatUTCHour24(d2, p2) {
  return pad(d2.getUTCHours(), p2, 2);
}
function formatUTCHour12(d2, p2) {
  return pad(d2.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d2, p2) {
  return pad(1 + utcDay.count(utcYear(d2), d2), p2, 3);
}
function formatUTCMilliseconds(d2, p2) {
  return pad(d2.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d2, p2) {
  return formatUTCMilliseconds(d2, p2) + "000";
}
function formatUTCMonthNumber(d2, p2) {
  return pad(d2.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d2, p2) {
  return pad(d2.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d2, p2) {
  return pad(d2.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d2) {
  var dow = d2.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d2, p2) {
  return pad(utcSunday.count(utcYear(d2) - 1, d2), p2, 2);
}
function UTCdISO(d2) {
  var day = d2.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
}
function formatUTCWeekNumberISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(utcThursday.count(utcYear(d2), d2) + (utcYear(d2).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d2) {
  return d2.getUTCDay();
}
function formatUTCWeekNumberMonday(d2, p2) {
  return pad(utcMonday.count(utcYear(d2) - 1, d2), p2, 2);
}
function formatUTCYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d2, p2) {
  var day = d2.getUTCDay();
  d2 = day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d2) {
  return +d2;
}
function formatUnixTimestampSeconds(d2) {
  return Math.floor(+d2 / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/createGradient.js
var createGradient = (...colors3) => {
  colors3.reverse();
  const scale = linear2().domain([0, colors3.length - 1]).range([0, 100]);
  return colors3.map((color2, index2) => ({
    offset: scale(index2),
    color: color2
  }));
};

// node_modules/@shopify/polaris-viz-core/build/esm/types.js
var DataType;
(function(DataType2) {
  DataType2["Point"] = "Point";
  DataType2["BarGroup"] = "BarGroup";
  DataType2["Bar"] = "Bar";
})(DataType || (DataType = {}));
var ChartState;
(function(ChartState2) {
  ChartState2["Loading"] = "Loading";
  ChartState2["Error"] = "Error";
  ChartState2["Success"] = "Success";
})(ChartState || (ChartState = {}));
var InternalChartType;
(function(InternalChartType2) {
  InternalChartType2["Bar"] = "Bar";
  InternalChartType2["Combo"] = "Combo";
  InternalChartType2["Line"] = "Line";
})(InternalChartType || (InternalChartType = {}));
var Hue;
(function(Hue2) {
  Hue2["Teal"] = "Teal";
  Hue2["Blue"] = "Blue";
  Hue2["Indigo"] = "Indigo";
  Hue2["Purple"] = "Purple";
  Hue2["Magenta"] = "Magenta";
  Hue2["Orange"] = "Orange";
  Hue2["Yellow"] = "Yellow";
})(Hue || (Hue = {}));

// node_modules/@shopify/polaris-viz-core/build/esm/constants.js
var LINE_HEIGHT = 14;
var FONT_SIZE = 11;
var FONT_FAMILY = 'Inter, -apple-system, "system-ui", "San Francisco", "Segoe UI", Roboto, "Helvetica Neue", sans-serif';
var XMLNS = "http://www.w3.org/2000/svg";
var BASE_ANIMATION_DURATION = 200;
var LOAD_ANIMATION_DURATION = 500;
var SHAPE_ANIMATION_HEIGHT_BUFFER = 30;
var DEFAULT_BORDER_RADIUS = 3;
var BORDER_RADIUS = {
  None: "0 0 0 0",
  Top: `${DEFAULT_BORDER_RADIUS} ${DEFAULT_BORDER_RADIUS} 0 0`,
  Right: `0 ${DEFAULT_BORDER_RADIUS} ${DEFAULT_BORDER_RADIUS} 0`,
  Bottom: `0 0 ${DEFAULT_BORDER_RADIUS} ${DEFAULT_BORDER_RADIUS}`,
  Left: `${DEFAULT_BORDER_RADIUS} 0 0 ${DEFAULT_BORDER_RADIUS}`,
  All: `${DEFAULT_BORDER_RADIUS}`
};
var HORIZONTAL_BAR_LABEL_HEIGHT = 12;
var HORIZONTAL_BAR_LABEL_OFFSET = 10;
var HORIZONTAL_GROUP_LABEL_HEIGHT = 20;
var HORIZONTAL_SPACE_BETWEEN_SETS = 16;
var HORIZONTAL_SPACE_BETWEEN_SINGLE = 2;
var HORIZONTAL_SPACE_BETWEEN_CHART_AND_AXIS = 5;
var BAR_SPACING = 0.5;
var LINE_ANIMATION_FAST_DURATION = 100;
var LINE_ANIMATION_SLOW_DURATION = 325;
var LINE_ANIMATION_FAST_COUNT = 10;
var LINE_ANIMATION_DURATION_STEP = 25;
var DEFAULT_MAX_Y = 10;
var MIN_BAR_HEIGHT = 2;
var EMPTY_STATE_CHART_MIN = 0;
var EMPTY_STATE_CHART_MAX = 10;
var ChartMargin;
(function(ChartMargin2) {
  ChartMargin2[ChartMargin2["Top"] = 5] = "Top";
  ChartMargin2[ChartMargin2["Left"] = 0] = "Left";
  ChartMargin2[ChartMargin2["Bottom"] = 24] = "Bottom";
  ChartMargin2[ChartMargin2["Right"] = 0] = "Right";
})(ChartMargin || (ChartMargin = {}));
var BARS_TRANSITION_CONFIG = {
  mass: 1,
  tension: 190,
  friction: 26
};
var BARS_SORT_TRANSITION_CONFIG = {
  mass: 1,
  tension: 150,
  friction: 20,
  restVelocity: 200
};
var BARS_LOAD_ANIMATION_CONFIG = {
  mass: 1,
  tension: 140,
  friction: 18
};
var AREAS_LOAD_ANIMATION_CONFIG = {
  mass: 1,
  tension: 120,
  friction: 20,
  clamp: true
};
var AREAS_TRANSITION_CONFIG = {
  mass: 1,
  tension: 190,
  friction: 26,
  clamp: true
};
var LINES_LOAD_ANIMATION_CONFIG = {
  mass: 1,
  tension: 140,
  friction: 18
};
var LINES_TRANSITION_CONFIG = {
  mass: 1,
  tension: 190,
  friction: 26
};
var ARC_LOAD_ANIMATION_CONFIG = {
  mass: 1,
  tension: 150,
  friction: 10
};
var ARC_DATA_CHANGE_ANIMATION_CONFIG = {
  mass: 1,
  tension: 150,
  friction: 20,
  restVelocity: 200
};
var MASK_HIGHLIGHT_COLOR = "#ffffff";
var DEFAULT_THEME_NAME = "Light";
var NEUTRAL_SINGLE_GRADIENT = [{
  offset: 0,
  color: variables.colorIndigo90
}, {
  offset: 85,
  color: variables.colorBlue90
}, {
  offset: 100,
  color: variables.colorBlue70
}];
var DEFAULT_CHART_BORDER_RADIUS = "0px";
var DEFAULT_CHART_PADDING = "0px";
var DEFAULT_SPARK_CHART_MIN_HEIGHT = 40;
var DEFAULT_CHART_MIN_HEIGHT = 200;
var DEFAULT_LINE_HAS_AREA = true;
var DEFAULT_LINE_HAS_SPLINE = true;
var DEFAULT_LINE_WIDTH = 2;
var DEFAULT_ARC_CORNER_RADIUS = 2;
var DEFAULT_ARC_CORNER_THICKNESS = 36;
var THIN_ARC_CORNER_THICKNESS = 12;
var DEFAULT_GRID_SHOW_HORIZONTAL_LINES = true;
var DEFAULT_GRID_HORIZONTAL_OVERFLOW = true;
var DEFAULT_GRID_VERTICAL_OVERFLOW = true;
var DEFAULT_GRID_HORIZONTAL_MARGIN = 16;
var DEFAULT_X_AXIS_HIDE = false;
var DEFAULT_GROUP_LABEL_HIDE = false;
var DEFAULT_CROSSHAIR_WIDTH = 1;
var TREND_POSITIVE = "#078d4e";
var TREND_NEGATIVE = "#616161";
var TREND_NEUTRAL = "#8a8a8a";
var DARK_THEME = {
  seriesColors: {
    empty: variables.colorGray140,
    comparison: variables.colorDarkComparison,
    single: NEUTRAL_SINGLE_GRADIENT,
    limited: [createGradient(variables.colorIndigo70, variables.colorIndigo90), createGradient(variables.colorBlue70, variables.colorBlue90), createGradient(variables.colorMagenta70, variables.colorMagenta90), createGradient(variables.colorTeal70, variables.colorTeal90), createGradient(variables.colorPurple50, variables.colorPurple70), createGradient(variables.colorOrange60, variables.colorOrange80), createGradient(variables.colorYellow20, variables.colorYellow40)],
    all: [variables.colorTeal90, variables.colorBlue50, variables.colorIndigo90, variables.colorPurple70, variables.colorMagenta90, variables.colorOrange50, variables.colorYellow70, variables.colorTeal40, variables.colorBlue80, variables.colorIndigo40, variables.colorPurple90, variables.colorMagenta70, variables.colorOrange80, variables.colorYellow20]
  },
  tooltip: {
    backgroundColor: variables.colorGray150,
    textColor: variables.colorWhite,
    titleColor: variables.colorGray50
  },
  chartContainer: {
    backgroundColor: variables.colorGray160,
    borderRadius: DEFAULT_CHART_BORDER_RADIUS,
    minHeight: DEFAULT_CHART_MIN_HEIGHT,
    padding: DEFAULT_CHART_PADDING,
    sparkChartMinHeight: DEFAULT_SPARK_CHART_MIN_HEIGHT
  },
  line: {
    hasArea: DEFAULT_LINE_HAS_AREA,
    hasSpline: DEFAULT_LINE_HAS_SPLINE,
    width: DEFAULT_LINE_WIDTH,
    pointStroke: variables.colorGray160
  },
  arc: {
    cornerRadius: DEFAULT_ARC_CORNER_RADIUS,
    thickness: DEFAULT_ARC_CORNER_THICKNESS
  },
  bar: {
    zeroValueColor: variables.colorGray80,
    borderRadius: DEFAULT_BORDER_RADIUS
  },
  grid: {
    showHorizontalLines: DEFAULT_GRID_SHOW_HORIZONTAL_LINES,
    color: variables.colorGray140,
    horizontalOverflow: DEFAULT_GRID_HORIZONTAL_OVERFLOW,
    horizontalMargin: DEFAULT_GRID_HORIZONTAL_MARGIN,
    verticalOverflow: DEFAULT_GRID_VERTICAL_OVERFLOW
  },
  xAxis: {
    labelColor: variables.colorGray30,
    hide: DEFAULT_X_AXIS_HIDE
  },
  yAxis: {
    backgroundColor: variables.colorGray160,
    labelColor: variables.colorGray30
  },
  groupLabel: {
    hide: DEFAULT_GROUP_LABEL_HIDE
  },
  crossHair: {
    color: variables.colorGray70,
    width: DEFAULT_CROSSHAIR_WIDTH
  },
  legend: {
    valueColor: variables.colorGray70,
    labelColor: variables.colorGray30,
    backgroundColor: variables.colorGray150,
    trendIndicator: {
      positive: TREND_POSITIVE,
      negative: TREND_NEGATIVE,
      neutral: TREND_NEUTRAL
    }
  },
  annotations: {
    backgroundColor: variables.colorGray140,
    textColor: variables.colorGray30,
    titleColor: variables.colorWhite,
    linkColor: variables.colorBlue40,
    axisLabelColor: variables.colorGray80,
    lineColor: variables.colorGray80,
    pillOpacity: 0.6
  },
  trendIndicator: {
    positive: TREND_POSITIVE,
    negative: TREND_NEGATIVE,
    neutral: TREND_NEUTRAL
  },
  missingData: {
    lineColor: variables.colorGray130
  }
};
var LIGHT_BLUE = [{
  offset: 0,
  color: "#079EE1"
}, {
  offset: 100,
  color: "#2EB9F5"
}];
var INDIGO = [{
  offset: 0,
  color: "#6A42E9"
}, {
  offset: 100,
  color: "#8F71EF"
}];
var BLUE = [{
  offset: 0,
  color: "#3E69EA"
}, {
  offset: 100,
  color: "#7594F0"
}];
var MAGENTA = [{
  offset: 0,
  color: "#D147AC"
}, {
  offset: 100,
  color: "#DD76C1"
}];
var TEAL = [{
  offset: 0,
  color: "#1D9595"
}, {
  offset: 100,
  color: "#2CD2D2"
}];
var PURPLE = [{
  offset: 0,
  color: "#A249DF"
}, {
  offset: 100,
  color: "#BD7DE8"
}];
var LIGHT_BLUE_09_SOLID = "rgba(19, 172, 240, 1)";
var INDIGO_10_SOLID = "rgba(106, 66, 233, 1)";
var BLUE_08_SOLID = "rgba(89, 126, 237, 1)";
var MAGENTA_10_SOLID = "rgba(209, 71, 172, 1)";
var TEAL_12_SOLID = "rgba(35, 186, 186, 1)";
var PURPLE_10_SOLID = "rgba(155, 60, 221, 1)";
var INDIGIO_07_SOLID = "rgba(158, 132, 242, 1)";
var LIGHT_BLUE_13_SOLID = "rgba(18, 138, 192, 1)";
var MAGENTA_09_SOLID = "rgba(215, 94, 183, 1)";
var BLUE_10_SOLID = "rgba(48, 94, 232, 1)";
var PURPLE_08_SOLID = "rgba(175, 99, 228, 1)";
var TEAL_10_SOLID = "rgba(51, 219, 219, 1)";
var LIGHT_THEME = {
  seriesColors: {
    empty: variables.colorGray20,
    comparison: "#0A97D5",
    single: [{
      offset: 0,
      color: "#0A97D5"
    }, {
      offset: 100,
      color: "#50C3F7"
    }],
    limited: [LIGHT_BLUE, INDIGO, BLUE, MAGENTA, TEAL, PURPLE],
    all: [LIGHT_BLUE_09_SOLID, INDIGO_10_SOLID, BLUE_08_SOLID, MAGENTA_10_SOLID, TEAL_12_SOLID, PURPLE_10_SOLID, INDIGIO_07_SOLID, LIGHT_BLUE_13_SOLID, MAGENTA_09_SOLID, BLUE_10_SOLID, PURPLE_08_SOLID, TEAL_10_SOLID]
  },
  tooltip: {
    backgroundColor: variables.colorGray00,
    textColor: variables.colorGray160,
    titleColor: variables.colorGray100
  },
  chartContainer: {
    backgroundColor: variables.colorGray00,
    borderRadius: DEFAULT_CHART_BORDER_RADIUS,
    minHeight: DEFAULT_CHART_MIN_HEIGHT,
    padding: DEFAULT_CHART_PADDING,
    sparkChartMinHeight: DEFAULT_SPARK_CHART_MIN_HEIGHT
  },
  line: {
    hasArea: DEFAULT_LINE_HAS_AREA,
    hasSpline: DEFAULT_LINE_HAS_SPLINE,
    width: DEFAULT_LINE_WIDTH,
    pointStroke: variables.colorGray00
  },
  arc: {
    cornerRadius: DEFAULT_ARC_CORNER_RADIUS,
    thickness: DEFAULT_ARC_CORNER_THICKNESS
  },
  bar: {
    zeroValueColor: variables.colorGray70,
    borderRadius: DEFAULT_BORDER_RADIUS
  },
  grid: {
    showHorizontalLines: DEFAULT_GRID_SHOW_HORIZONTAL_LINES,
    color: variables.colorGray20,
    horizontalOverflow: DEFAULT_GRID_HORIZONTAL_OVERFLOW,
    horizontalMargin: DEFAULT_GRID_HORIZONTAL_MARGIN,
    verticalOverflow: DEFAULT_GRID_VERTICAL_OVERFLOW
  },
  xAxis: {
    labelColor: variables.colorGray100,
    hide: DEFAULT_X_AXIS_HIDE
  },
  yAxis: {
    backgroundColor: variables.colorGray00,
    labelColor: variables.colorGray100
  },
  groupLabel: {
    hide: DEFAULT_GROUP_LABEL_HIDE
  },
  crossHair: {
    color: variables.colorGray40,
    width: DEFAULT_CROSSHAIR_WIDTH
  },
  legend: {
    valueColor: variables.colorGray160,
    labelColor: variables.colorGray100,
    backgroundColor: null,
    trendIndicator: {
      positive: TREND_POSITIVE,
      negative: TREND_NEGATIVE,
      neutral: TREND_NEUTRAL
    }
  },
  annotations: {
    backgroundColor: variables.colorGray100,
    textColor: variables.colorWhite,
    titleColor: variables.colorWhite,
    linkColor: variables.colorBlue40,
    axisLabelColor: variables.colorGray70,
    lineColor: variables.colorGray70,
    pillOpacity: 1
  },
  trendIndicator: {
    positive: TREND_POSITIVE,
    negative: TREND_NEGATIVE,
    neutral: TREND_NEUTRAL
  },
  missingData: {
    lineColor: variables.colorGray40
  }
};
var PRINT_THEME = {
  ...LIGHT_THEME,
  seriesColors: {
    empty: variables.colorGray20,
    comparison: variables.colorLightComparison,
    single: variables.colorIndigo90,
    limited: [variables.colorIndigo70, variables.colorBlue70, variables.colorMagenta70, variables.colorTeal70, variables.colorPurple70, variables.colorOrange70, variables.colorYellow70],
    all: [variables.colorTeal90, variables.colorBlue70, variables.colorIndigo90, variables.colorPurple70, variables.colorMagenta90, variables.colorOrange80, variables.colorYellow50, variables.colorTeal70, variables.colorBlue80, variables.colorIndigo70, variables.colorPurple90, variables.colorMagenta70, variables.colorOrange110, variables.colorYellow70]
  }
};
var STACKED_BAR_GAP = 2;
var COLOR_VISION_ACTIVE_OPACITY = 1;
var COLOR_VISION_FADED_OPACITY = 0.3;
var COLOR_VISION_SINGLE_ITEM = "singleItem";
var COLOR_VISION_GROUP_ITEM = "group";
var EXTERNAL_EVENTS_SET_HIDDEN_ITEMS = "setHiddenItems";
var LEGENDS_TOP_MARGIN = 16;
var LEGENDS_BOTTOM_MARGIN = 16;
var Y_AXIS_CHART_SPACING = 20;
var LABEL_AREA_TOP_SPACING = 16;
var ELLIPSIS = "…";
var HORIZONTAL_LABEL_MIN_WIDTH = 46;
var HORIZONTAL_LABEL_TARGET_HEIGHT = 80;
var DIAGONAL_LABEL_MIN_WIDTH = 30;
var MAX_DIAGONAL_LABEL_WIDTH = 100;
var MAX_DIAGONAL_VISIBLE_HEIGHT = 80;
var VERTICAL_LABEL_TARGET_WIDTH = 80;
var VERTICAL_LABEL_MIN_WIDTH = 14;
var DEFAULT_COMPONENTS = {
  Svg: ({
    children,
    ...props
  }) => (0, import_react.createElement)("svg", props, children),
  Circle: ({
    children,
    ...props
  }) => (0, import_react.createElement)("circle", props, children),
  Ellipse: ({
    children,
    ...props
  }) => (0, import_react.createElement)("ellipse", props, children),
  // eslint-disable-next-line id-length
  G: ({
    children,
    ...props
  }) => (0, import_react.createElement)("g", props, children),
  Text: ({
    children,
    ...props
  }) => (0, import_react.createElement)("text", props, children),
  TSpan: ({
    children,
    ...props
  }) => (0, import_react.createElement)("tSpan", props, children),
  TextPath: ({
    children,
    ...props
  }) => (0, import_react.createElement)("textPath", props, children),
  Path: ({
    children,
    ...props
  }) => (0, import_react.createElement)("path", props, children),
  Polygon: ({
    children,
    ...props
  }) => (0, import_react.createElement)("polygon", props, children),
  Polyline: ({
    children,
    ...props
  }) => (0, import_react.createElement)("polyline", props, children),
  Line: ({
    children,
    ...props
  }) => (0, import_react.createElement)("line", props, children),
  Rect: ({
    children,
    ...props
  }) => (0, import_react.createElement)("rect", props, children),
  Use: ({
    children,
    ...props
  }) => (0, import_react.createElement)("use", props, children),
  Image: ({
    children,
    ...props
  }) => (0, import_react.createElement)("image", props, children),
  Symbol: ({
    children,
    ...props
  }) => (0, import_react.createElement)("symbol", props, children),
  Defs: ({
    children,
    ...props
  }) => (0, import_react.createElement)("defs", props, children),
  LinearGradient: ({
    children,
    ...props
  }) => (0, import_react.createElement)("linearGradient", props, children),
  RadialGradient: ({
    children,
    ...props
  }) => (0, import_react.createElement)("radialGradient", props, children),
  Stop: ({
    children,
    ...props
  }) => (0, import_react.createElement)("stop", props, children),
  ClipPath: ({
    children,
    ...props
  }) => (0, import_react.createElement)("clipPath", props, children),
  Pattern: ({
    children,
    ...props
  }) => (0, import_react.createElement)("pattern", props, children),
  Mask: ({
    children,
    ...props
  }) => (0, import_react.createElement)("mask", props, children)
};
var STROKE_WIDTH = 1.5;
var STROKE_DOT_ARRAY_WIDTH = "0.1 4";
var ANIMATION_MARGIN = 17;
var LINEAR_LABELS_INNER_PADDING = 10;
var COLOR_VISION_EVENT = {
  name: "color-vision-event",
  dataAttribute: "data-color-vision-event",
  camelCaseName: "colorVisionEvent"
};
var DEFAULT_CHART_PROPS = {
  isAnimated: true,
  state: ChartState.Success,
  errorText: "Could not load the chart"
};
var TOO_MANY_DATA_POINTS_THRESHOLD = {
  [InternalChartType.Bar]: 60,
  [InternalChartType.Line]: 150,
  [InternalChartType.Combo]: 60
};
var TOO_MANY_DATA_SERIES_THRESHOLD = 14;
var HUES = {
  [Hue.Teal]: [variables.colorTeal00, variables.colorTeal10, variables.colorTeal20, variables.colorTeal30, variables.colorTeal40, variables.colorTeal50, variables.colorTeal60, variables.colorTeal70, variables.colorTeal80, variables.colorTeal90, variables.colorTeal100, variables.colorTeal110, variables.colorTeal120, variables.colorTeal130, variables.colorTeal140, variables.colorTeal150, variables.colorTeal160],
  [Hue.Blue]: [variables.colorBlue00, variables.colorBlue10, variables.colorBlue20, variables.colorBlue30, variables.colorBlue40, variables.colorBlue50, variables.colorBlue60, variables.colorBlue70, variables.colorBlue80, variables.colorBlue90, variables.colorBlue100, variables.colorBlue110, variables.colorBlue120, variables.colorBlue130, variables.colorBlue140, variables.colorBlue150, variables.colorBlue160],
  [Hue.Indigo]: [variables.colorIndigo00, variables.colorIndigo10, variables.colorIndigo20, variables.colorIndigo30, variables.colorIndigo40, variables.colorIndigo50, variables.colorIndigo60, variables.colorIndigo70, variables.colorIndigo80, variables.colorIndigo90, variables.colorIndigo100, variables.colorIndigo110, variables.colorIndigo120, variables.colorIndigo130, variables.colorIndigo140, variables.colorIndigo150, variables.colorIndigo160],
  [Hue.Purple]: [variables.colorPurple00, variables.colorPurple10, variables.colorPurple20, variables.colorPurple30, variables.colorPurple40, variables.colorPurple50, variables.colorPurple60, variables.colorPurple70, variables.colorPurple80, variables.colorPurple90, variables.colorPurple100, variables.colorPurple110, variables.colorPurple120, variables.colorPurple130, variables.colorPurple140, variables.colorPurple150, variables.colorPurple160],
  [Hue.Magenta]: [variables.colorMagenta00, variables.colorMagenta10, variables.colorMagenta20, variables.colorMagenta30, variables.colorMagenta40, variables.colorMagenta50, variables.colorMagenta60, variables.colorMagenta70, variables.colorMagenta80, variables.colorMagenta90, variables.colorMagenta100, variables.colorMagenta110, variables.colorMagenta120, variables.colorMagenta130, variables.colorMagenta140, variables.colorMagenta150, variables.colorMagenta160],
  [Hue.Orange]: [variables.colorOrange00, variables.colorOrange10, variables.colorOrange20, variables.colorOrange30, variables.colorOrange40, variables.colorOrange50, variables.colorOrange60, variables.colorOrange70, variables.colorOrange80, variables.colorOrange90, variables.colorOrange100, variables.colorOrange110, variables.colorOrange120, variables.colorOrange130, variables.colorOrange140, variables.colorOrange150, variables.colorOrange160],
  [Hue.Yellow]: [variables.colorYellow00, variables.colorYellow10, variables.colorYellow20, variables.colorYellow30, variables.colorYellow40, variables.colorYellow50, variables.colorYellow60, variables.colorYellow70, variables.colorYellow80, variables.colorYellow90, variables.colorYellow100, variables.colorYellow110, variables.colorYellow120, variables.colorYellow130, variables.colorYellow140, variables.colorYellow150, variables.colorYellow160]
};

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/clamp.js
function clamp({
  amount,
  min: min3,
  max: max3
}) {
  return Math.min(Math.max(amount, min3), max3);
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/createThemes.js
var BASE_THEMES = {
  Dark: DARK_THEME,
  Light: LIGHT_THEME,
  Print: PRINT_THEME
};
var createTheme = (theme, baseTheme = BASE_THEMES[DEFAULT_THEME_NAME]) => {
  const themeKeys = Object.keys(baseTheme);
  return themeKeys.reduce((accumulator, key) => {
    const defaultValue = baseTheme[key];
    const value = theme[key];
    if (typeof defaultValue === "string" || typeof value === "string" || Array.isArray(defaultValue)) {
      accumulator[key] = value == null ? defaultValue : value;
    } else {
      accumulator[key] = {
        ...baseTheme[key],
        ...theme[key]
      };
    }
    return accumulator;
  }, {});
};
var createThemes = (themeRecord) => {
  return Object.keys(themeRecord).reduce((accumulator, themeName) => {
    accumulator[themeName] = createTheme(themeRecord[themeName], BASE_THEMES[themeName]);
    return accumulator;
  }, {});
};

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/curveStepRounded.js
var DEFAULT_DISTANCE = 0.99;
var DEFAULT_ROUNDNESS = 0.59;
var CurveStepRounded = class {
  constructor(_context, config2) {
    this.config = void 0;
    this._context = void 0;
    this._shift = void 0;
    this._line = void 0;
    this._x = void 0;
    this._y = void 0;
    this._point = void 0;
    this._context = _context;
    this.config = config2;
    this._shift = 0.5;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._x = NaN;
    this._y = NaN;
    this._point = 0;
  }
  lineEnd() {
    if (this._shift > 0 && this._shift < 1 && this._point === 2) {
      this._context.lineTo(this._x, this._y);
    }
    if (this._line || this._line !== 0 && this._point === 1) {
      this._context.closePath();
    }
    if (this._line >= 0) {
      this._shift = 1 - this._shift;
      this._line = 1 - this._line;
    }
  }
  point(rawX, rawY) {
    const x3 = Number(rawX);
    const y3 = Number(rawY);
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      default: {
        if (this._point === 1) {
          this._point = 2;
        }
        if (this._shift <= 0) {
          this._context.lineTo(this._x, y3);
          this._context.lineTo(x3, y3);
        } else {
          const x1 = this._x * (1 - this._shift) + x3 * this._shift;
          const pointOffset = (x3 - this._x) * (this.config.distance / 2);
          const roundness = this.config.roundness;
          const points = [[x1 - pointOffset, this._y], [x1 + pointOffset, y3]];
          const xDistance = points[1][0] - points[0][0];
          const controlPoints2 = [[points[0][0] + xDistance * roundness, points[0][1]], [points[1][0] - xDistance * roundness, points[1][1]]];
          this._context.lineTo(points[0][0], points[0][1]);
          this._context.bezierCurveTo(controlPoints2[0][0], controlPoints2[0][1], controlPoints2[1][0], controlPoints2[1][1], points[1][0], points[1][1]);
        }
        break;
      }
    }
    this._x = x3;
    this._y = y3;
  }
};
function curveStepRounded(context) {
  return new CurveStepRounded(context, {
    distance: DEFAULT_DISTANCE,
    roundness: DEFAULT_ROUNDNESS
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getAnimationTrail.js
function getAnimationTrail(dataLength) {
  return 500 / dataLength;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getFilteredSeries.js
function getFilteredSeries(series) {
  var _series$filter$length;
  return (_series$filter$length = series.filter((item) => {
    if (item.isComparison !== true) {
      return true;
    }
  }).length) !== null && _series$filter$length !== void 0 ? _series$filter$length : 0;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getSeriesColors.js
function getSeriesColors(count2, selectedTheme) {
  if (count2 === 1) {
    return [selectedTheme.seriesColors.single];
  }
  if (count2 <= selectedTheme.seriesColors.limited.length) {
    return [...selectedTheme.seriesColors.limited];
  }
  const allColors = [...selectedTheme.seriesColors.all];
  if (count2 <= allColors.length) {
    return allColors;
  }
  let lastUsedColorIndex = -1;
  return [...Array.from({
    length: count2
  })].map(() => {
    lastUsedColorIndex += 1;
    if (lastUsedColorIndex === allColors.length) {
      lastUsedColorIndex = 0;
    }
    return allColors[lastUsedColorIndex];
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/isGradientType.js
function isGradientStopType(item) {
  return item.offset != null && typeof item.offset === "number" && item.color != null && typeof item.color === "string";
}
function isGradientType(color2) {
  return Array.isArray(color2) && color2.every((item) => isGradientStopType(item));
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/uniqueId.js
var uniqueId = /* @__PURE__ */ (() => {
  let num = 0;
  return (prefix2) => {
    num++;
    return `${prefix2}-${num}`;
  };
})();

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/paddingStringToObject.js
var isValidNumber = (value) => {
  if (value === 0)
    return true;
  return value != null;
};
var paddingStringToObject = (paddingString) => {
  var _paddingString$match;
  const numberPattern = /\d+/g;
  const [top, right, bottom, left] = ((_paddingString$match = paddingString.match(numberPattern)) === null || _paddingString$match === void 0 ? void 0 : _paddingString$match.map((paddingSide) => isValidNumber(paddingSide) ? paddingSide : null)) || [];
  const hasValidRight = isValidNumber(right);
  const alternateLeft = hasValidRight ? right : top;
  return {
    paddingTop: Number(top),
    paddingRight: Number(hasValidRight ? right : top),
    paddingBottom: Number(isValidNumber(bottom) ? bottom : top),
    paddingLeft: Number(isValidNumber(left) ? left : alternateLeft)
  };
};

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/removeFalsyValues.js
function removeFalsyValues(object) {
  return Object.entries(object).filter(([_2, value]) => value != null).reduce((acc, [key, value]) => ({
    ...acc,
    [key]: value
  }), {});
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/estimateStringWidth.js
var DEFAULT_WIDTH = 11.63;
function estimateStringWidth(string, characterWidths2) {
  let sum3 = 0;
  for (const char of string) {
    let charWidth = characterWidths2[char];
    if (charWidth == null || isNaN(charWidth)) {
      var _characterWidths$W;
      charWidth = (_characterWidths$W = characterWidths2.W) !== null && _characterWidths$W !== void 0 ? _characterWidths$W : DEFAULT_WIDTH;
    }
    sum3 += charWidth;
  }
  return sum3;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/shouldRoundScaleUp.js
function shouldRoundScaleUp({
  yScale,
  maxTicks,
  maxValue
}) {
  const roundedUpTicks = yScale.copy().nice(maxTicks).ticks(maxTicks);
  const lastTick = roundedUpTicks[roundedUpTicks.length - 1];
  const secondLastTick = roundedUpTicks[roundedUpTicks.length - 2];
  const tickThreshold = (lastTick - secondLastTick) / 2;
  const shouldRoundScaleUp2 = maxValue - secondLastTick > tickThreshold;
  return shouldRoundScaleUp2;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getColorVisionEventAttrs.js
function getColorVisionEventAttrs({
  type,
  index: index2,
  watch = true
}) {
  return {
    [`${COLOR_VISION_EVENT.dataAttribute}-watch`]: watch,
    [`${COLOR_VISION_EVENT.dataAttribute}-type`]: type,
    [`${COLOR_VISION_EVENT.dataAttribute}-index`]: index2
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getColorVisionStylesForActiveIndex.js
function getColorVisionStylesForActiveIndex({
  activeIndex,
  index: index2,
  fadedOpacity = COLOR_VISION_FADED_OPACITY
}) {
  const activeOpacity = activeIndex === index2 ? COLOR_VISION_ACTIVE_OPACITY : fadedOpacity;
  return {
    opacity: activeIndex === -1 ? COLOR_VISION_ACTIVE_OPACITY : activeOpacity,
    transition: "opacity 100ms ease"
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/borderRadiusStringToObject.js
var isValidNumber2 = (value) => {
  if (value === 0)
    return true;
  return value != null;
};
var borderRadiusStringToObject = (borderRadiusString) => {
  var _borderRadiusString$m;
  const numberPattern = /\d+/g;
  const [topLeft, topRight, bottomRight, bottomLeft] = ((_borderRadiusString$m = borderRadiusString.match(numberPattern)) === null || _borderRadiusString$m === void 0 ? void 0 : _borderRadiusString$m.map((corner) => isValidNumber2(corner) ? corner : null)) || [];
  const hasValidRight = isValidNumber2(topRight);
  const alternateLeft = hasValidRight ? topRight : topLeft;
  return {
    topLeft: Number(topLeft),
    topRight: Number(hasValidRight ? topRight : topLeft),
    bottomRight: Number(isValidNumber2(bottomRight) ? bottomRight : topLeft),
    bottomLeft: Number(isValidNumber2(bottomLeft) ? bottomLeft : alternateLeft)
  };
};

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getRoundedRectPath.js
function keepValuePositive(amount) {
  return clamp({
    amount,
    min: 0,
    max: Infinity
  });
}
function getRoundedRectPath({
  borderRadius,
  height,
  width
}) {
  if (height == null || width == null) {
    return "";
  }
  let {
    topLeft,
    topRight,
    bottomRight,
    bottomLeft
  } = borderRadiusStringToObject(borderRadius);
  const smallestSize = Math.min(height, width);
  topLeft = Math.min(topLeft, smallestSize / 2);
  topRight = Math.min(topRight, smallestSize / 2);
  bottomRight = Math.min(bottomRight, smallestSize / 2);
  bottomLeft = Math.min(bottomLeft, smallestSize / 2);
  const top = topLeft + topRight;
  const right = topRight + bottomRight;
  const bottom = bottomRight + bottomLeft;
  const left = bottomLeft + topLeft;
  return `
  M${topLeft},0
  h${keepValuePositive(width - top)}
  a${topRight},${topRight} 0 0 1 ${topRight},${topRight}
  v${keepValuePositive(height - right)}
  a${bottomRight},${bottomRight} 0 0 1 -${bottomRight},${bottomRight}
  h-${keepValuePositive(width - bottom)}
  a${bottomLeft},${bottomLeft} 0 0 1 -${bottomLeft},-${bottomLeft}
  v-${keepValuePositive(height - left)}
  a${topLeft},${topLeft} 0 0 1 ${topLeft},-${topLeft}
  Z
`;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/changeColorOpacity.js
function changeColorOpacity(colorString, opacity = 1) {
  const rgbColor = color(colorString);
  if (rgbColor == null) {
    throw new Error("Color value is not valid.");
  }
  rgbColor.opacity = opacity;
  return rgbColor.toString();
}
function changeGradientOpacity(gradient, opacity = 1) {
  return gradient.map(({
    offset,
    color: color2
  }) => ({
    offset,
    color: changeColorOpacity(color2, opacity)
  }));
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getAverageColor.js
var getAverageColor = (firstColor, lastColor) => {
  if (firstColor === lastColor) {
    return firstColor;
  }
  const first = color(firstColor);
  const last = color(lastColor);
  if (!first || !last) {
    var _ref, _first$toString;
    return (_ref = (_first$toString = first === null || first === void 0 ? void 0 : first.toString()) !== null && _first$toString !== void 0 ? _first$toString : last === null || last === void 0 ? void 0 : last.toString()) !== null && _ref !== void 0 ? _ref : "";
  }
  const {
    r: r1,
    g: g1,
    b: b1
  } = first.rgb();
  const {
    r: r22,
    g: g2,
    b: b2
  } = last.rgb();
  return `rgb(${Math.round((r1 + r22) / 2)},${Math.round((g1 + g2) / 2)},${Math.round((b1 + b2) / 2)})`;
};

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getValueFromXScale.js
function getValueFromXScale(index2, xScale) {
  var _ref2;
  if (xScale instanceof linear2) {
    var _ref;
    return (_ref = xScale(Number(index2))) !== null && _ref !== void 0 ? _ref : 0;
  }
  return (_ref2 = xScale(`${index2}`)) !== null && _ref2 !== void 0 ? _ref2 : 0;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/isValueWithinDomain.js
function isValueWithinDomain(value, domain) {
  return value >= Math.min(...domain) && value <= Math.max(...domain);
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getClosestDivisibleNumber.js
function getClosestDivisibleNumber(number3, divisibleBy) {
  const quotient = parseInt(`${number3 / divisibleBy}`, 10);
  const n1 = divisibleBy * quotient;
  const n22 = number3 * divisibleBy > 0 ? divisibleBy * (quotient + 1) : divisibleBy * (quotient - 1);
  if (Math.abs(number3 - n1) < Math.abs(number3 - n22)) {
    return n1;
  }
  return n22;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/roundToDecimals.js
function roundToDecimals(number3, decimals) {
  return parseFloat(number3.toFixed(decimals));
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/isDataGroup.js
function isDataGroup(object) {
  return Object.prototype.hasOwnProperty.call(object, "shape") && Object.prototype.hasOwnProperty.call(object, "series");
}
function isDataGroupArray(array2) {
  if (array2.length > 0) {
    const [group2] = array2;
    return isDataGroup(group2);
  }
  return false;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/isDataSeries.js
function isDataSeries(object) {
  if (object.data && object.data.length > 0) {
    const [dataPoint] = object.data;
    return Object.prototype.hasOwnProperty.call(dataPoint, "value") && Object.prototype.hasOwnProperty.call(dataPoint, "key");
  }
  return false;
}
function isDataSeriesArray(array2) {
  if (array2.length > 0) {
    const [series] = array2;
    return isDataSeries(series);
  }
  return false;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/isLargeDataSet.js
var hasTooManyDataPoints = (seriesArray, threshold2) => {
  return seriesArray.some((series) => {
    return series.data.length > threshold2;
  });
};
function isLargeDataSet(data, chartType) {
  let isLargeDataSet2 = false;
  if (chartType == null) {
    return false;
  }
  const thresholdForChart = TOO_MANY_DATA_POINTS_THRESHOLD[chartType];
  if (thresholdForChart == null) {
    return false;
  }
  if (isDataSeriesArray(data)) {
    isLargeDataSet2 = hasTooManyDataPoints(data, thresholdForChart);
  }
  if (isDataGroupArray(data)) {
    isLargeDataSet2 = data.some((dataGroup) => {
      return hasTooManyDataPoints(dataGroup.series, thresholdForChart);
    });
  }
  const hasManySeries = data.length > TOO_MANY_DATA_SERIES_THRESHOLD;
  return isLargeDataSet2 || hasManySeries;
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/ColorScale/ColorScale.js
var DARK_TEXT_MIN = 8;
var HUE_COUNT = 17;
function ColorScale({
  hue: hue2,
  min: min3 = 0,
  max: max3 = HUE_COUNT
}) {
  const scale = quantize().range(HUES[hue2]).domain([min3, max3]);
  return (value) => {
    const color2 = scale(value);
    const colorIndex = HUES[hue2].indexOf(color2);
    return {
      backgroundColor: scale(value),
      textColor: colorIndex < DARK_TEXT_MIN ? variables.colorGray150 : variables.colorWhite
    };
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/getGradientFromColor.js
function getGradientFromColor(color2) {
  return isGradientType(color2) ? color2 : [{
    color: color2,
    offset: 0
  }, {
    color: color2,
    offset: 1
  }];
}

// node_modules/@shopify/polaris-viz-core/build/esm/utilities/OpacityScale/constants.js
function buildOpacityScale(color2) {
  return [...new Array(10)].fill(null).map((_2, i2) => {
    const index2 = i2 + 1;
    return changeColorOpacity(color2, index2 / 10);
  });
}
var HUE_OPACITIES = {
  [Hue.Teal]: buildOpacityScale(variables.colorTeal70),
  [Hue.Blue]: buildOpacityScale(variables.colorBlue70),
  [Hue.Indigo]: buildOpacityScale(variables.colorIndigo70),
  [Hue.Purple]: buildOpacityScale(variables.colorPurple70),
  [Hue.Magenta]: buildOpacityScale(variables.colorMagenta70),
  [Hue.Orange]: buildOpacityScale(variables.colorOrange70),
  [Hue.Yellow]: buildOpacityScale(variables.colorYellow70)
};

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useSparkBar.js
var import_react2 = __toESM(require_react());
var STROKE_WIDTH2 = 1.5;
var BAR_PADDING = 0.3;
var MARGIN = 8;
var BAR_MIN_HEIGHT_RATIO = 0.5;
function calculateRange(data, height) {
  let hasNegatives;
  let hasPositives;
  for (const {
    value
  } of data) {
    if (value != null && value < 0)
      hasNegatives = true;
    else if (value != null && value > 0)
      hasPositives = true;
    if (hasNegatives && hasPositives)
      break;
  }
  let range2 = [height, MARGIN];
  if (hasNegatives && hasPositives) {
    range2 = [height - MARGIN, MARGIN];
  } else if (hasNegatives) {
    range2 = [height - MARGIN, 0];
  }
  return range2;
}
function removeNullValues(data) {
  if (data == null) {
    return [];
  }
  return data.data.filter(({
    value
  }) => typeof value === "number").map(({
    value
  }) => value);
}
function useSparkBar({
  data,
  height,
  width,
  seriesColor,
  targetLine = {
    offsetLeft: 0,
    offsetRight: 0,
    value: 0
  }
}) {
  var _defaultData$color;
  const {
    offsetLeft: rawOffsetLeft = 0,
    offsetRight: rawOffsetRight = 0,
    value: targetValue = 0
  } = targetLine;
  const offsetLeft = Math.abs(rawOffsetLeft);
  const offsetRight = Math.abs(rawOffsetRight);
  const filteredData = removeNullValues(data[0]);
  const [defaultData] = data;
  const yScale = linear2().range(calculateRange(defaultData.data, height)).domain([Math.min(...filteredData, targetValue, 0), Math.max(...filteredData, targetValue, 0)]);
  const targetLineYPosition = yScale(targetValue);
  const xScale = band().range([offsetLeft, width - offsetRight]).paddingInner(BAR_PADDING).domain(defaultData.data.map((_2, index2) => index2.toString()));
  const barWidth = (0, import_react2.useMemo)(() => xScale.bandwidth(), [xScale]);
  const strokeDashoffset = offsetLeft == null ? -(STROKE_WIDTH2 / 2) : -(STROKE_WIDTH2 / 2) - offsetLeft;
  const getBarHeight = (0, import_react2.useCallback)((value) => {
    const height2 = Math.abs(yScale(value) - yScale(0));
    return Math.max(height2, BAR_MIN_HEIGHT_RATIO * barWidth);
  }, [barWidth, yScale]);
  const dataWithIndex = defaultData ? defaultData.data.map((value, index2) => ({
    value,
    index: index2
  })) : [];
  const colorToUse = (_defaultData$color = defaultData === null || defaultData === void 0 ? void 0 : defaultData.color) !== null && _defaultData$color !== void 0 ? _defaultData$color : seriesColor;
  const color2 = getGradientFromColor(colorToUse);
  return {
    dataWithIndex,
    color: color2,
    strokeDashoffset,
    barWidth,
    getBarHeight,
    xScale,
    yScale,
    targetLineYPosition,
    targetLineX1: 0 - offsetLeft,
    targetLineX2: width + offsetRight
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useSparkLine.js
function useSparkLine({
  data,
  height,
  svgMargin = 2
}) {
  const dataLengths = data.map((series) => series.data.length - 1);
  const maxDataLength = Math.max(...dataLengths);
  const yValues = Array.prototype.concat.apply([], data.map(({
    data: data2
  }) => data2.map(({
    value
  }) => value)));
  const yScale = linear2().range([height - svgMargin, svgMargin]).domain([Math.min(...yValues), Math.max(...yValues)]);
  return {
    minXDomain: 0,
    maxXDomain: maxDataLength,
    yScale
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useTheme.js
var import_react15 = __toESM(require_react());

// node_modules/@shopify/polaris-viz-core/build/esm/contexts/PolarisVizContext.js
var import_react12 = __toESM(require_react());

// node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  const time3 = raf.now() + ms;
  const cancel = () => {
    const i2 = timeouts.findIndex((t5) => t5.cancel == cancel);
    if (~i2)
      timeouts.splice(i2, 1);
    pendingCount -= ~i2 ? 1 : 0;
  };
  const timeout = { time: time3, handler, cancel };
  timeouts.splice(findTimeout(time3), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time3) => ~(~timeouts.findIndex((t5) => t5.time > time3) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  () => {
  }
);
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn(
      "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
    );
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  const prevTs = ts;
  ts = raf.now();
  const count2 = findTimeout(ts);
  if (count2) {
    eachSafely(timeouts.splice(0, count2), (t5) => t5.handler());
    pendingCount -= count2;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e4) {
      raf.catch(e4);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var import_react9 = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var globals_exports = {};
__export(globals_exports, {
  assign: () => assign,
  colors: () => colors,
  createStringInterpolator: () => createStringInterpolator,
  skipAnimation: () => skipAnimation,
  to: () => to,
  willAdvance: () => willAdvance
});
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
var is = {
  arr: Array.isArray,
  obj: (a3) => !!a3 && a3.constructor.name === "Object",
  fun: (a3) => typeof a3 === "function",
  str: (a3) => typeof a3 === "string",
  num: (a3) => typeof a3 === "number",
  und: (a3) => a3 === void 0
};
function isEqual(a3, b2) {
  if (is.arr(a3)) {
    if (!is.arr(b2) || a3.length !== b2.length)
      return false;
    for (let i2 = 0; i2 < a3.length; i2++) {
      if (a3[i2] !== b2[i2])
        return false;
    }
    return true;
  }
  return a3 === b2;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i2 = 0; i2 < obj.length; i2++) {
      fn.call(ctx2, obj[i2], `${i2}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a3) => is.und(a3) ? [] : is.arr(a3) ? a3 : [a3];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator;
var to;
var colors = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals) => {
  if (globals.to)
    to = globals.to;
  if (globals.now)
    raf.now = globals.now;
  if (globals.colors !== void 0)
    colors = globals.colors;
  if (globals.skipAnimation != null)
    skipAnimation = globals.skipAnimation;
  if (globals.createStringInterpolator)
    createStringInterpolator = globals.createStringInterpolator;
  if (globals.requestAnimationFrame)
    raf.use(globals.requestAnimationFrame);
  if (globals.batchedUpdates)
    raf.batchedUpdates = globals.batchedUpdates;
  if (globals.willAdvance)
    willAdvance = globals.willAdvance;
  if (globals.frameLoop)
    raf.frameLoop = globals.frameLoop;
};
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  /** Advance the given animation on every frame until idle. */
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  /** Advance all animations by the given time. */
  advance,
  /** Call this when an animation's priority changes. */
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  /**
   * Clear all animations. For testing purposes.
   *
   * ☠️ Never call this from within the frameloop.
   */
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(
    findIndex(currentFrame, (other) => other.priority > animation.priority),
    0,
    animation
  );
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i2 = 0; i2 < currentFrame.length; i2++) {
    const animation = currentFrame[i2];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var clamp2 = (min3, max3, v2) => Math.min(Math.max(v2, min3), max3);
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb2 = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba2 = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl3 = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla2 = new RegExp(
  "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
);
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match = hex6.exec(color2))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors && colors[color2] !== void 0) {
    return colors[color2];
  }
  if (match = rgb2.exec(color2)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    255) >>> // a
    0;
  }
  if (match = rgba2.exec(color2)) {
    return (parse255(match[1]) << 24 | // r
    parse255(match[2]) << 16 | // g
    parse255(match[3]) << 8 | // b
    parse1(match[4])) >>> // a
    0;
  }
  if (match = hex3.exec(color2)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match = hex8.exec(color2))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color2)) {
    return parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      match[4] + match[4],
      // a
      16
    ) >>> 0;
  }
  if (match = hsl3.exec(color2)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match = hsla2.exec(color2)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | parse1(match[4])) >>> // a
    0;
  }
  return null;
}
function hue2rgb(p2, q2, t5) {
  if (t5 < 0)
    t5 += 1;
  if (t5 > 1)
    t5 -= 1;
  if (t5 < 1 / 6)
    return p2 + (q2 - p2) * 6 * t5;
  if (t5 < 1 / 2)
    return q2;
  if (t5 < 2 / 3)
    return p2 + (q2 - p2) * (2 / 3 - t5) * 6;
  return p2;
}
function hslToRgb(h2, s3, l2) {
  const q2 = l2 < 0.5 ? l2 * (1 + s3) : l2 + s3 - l2 * s3;
  const p2 = 2 * l2 - q2;
  const r3 = hue2rgb(p2, q2, h2 + 1 / 3);
  const g2 = hue2rgb(p2, q2, h2);
  const b2 = hue2rgb(p2, q2, h2 - 1 / 3);
  return Math.round(r3 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b2 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  const r3 = (int32Color & 4278190080) >>> 24;
  const g2 = (int32Color & 16711680) >>> 16;
  const b2 = (int32Color & 65280) >>> 8;
  const a3 = (int32Color & 255) / 255;
  return `rgba(${r3}, ${g2}, ${b2}, ${a3})`;
}
var createInterpolator = (range2, output, extrapolate) => {
  if (is.fun(range2)) {
    return range2;
  }
  if (is.arr(range2)) {
    return createInterpolator({
      range: range2,
      output,
      extrapolate
    });
  }
  if (is.str(range2.output[0])) {
    return createStringInterpolator(range2);
  }
  const config2 = range2;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t5) => t5);
  return (input) => {
    const range22 = findRange(input, inputRange);
    return interpolate(
      input,
      inputRange[range22],
      inputRange[range22 + 1],
      outputRange[range22],
      outputRange[range22 + 1],
      easing,
      extrapolateLeft,
      extrapolateRight,
      config2.map
    );
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map4) {
  let result = map4 ? map4(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i2 = 1; i2 < inputRange.length - 1; ++i2)
    if (inputRange[i2] >= input)
      break;
  return i2 - 1;
}
var steps = (steps2, direction = "end") => (progress2) => {
  progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
  const expanded = progress2 * steps2;
  const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
  return clamp2(0, 1, rounded / steps2);
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x3) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x3 < 1 / d1) {
    return n1 * x3 * x3;
  } else if (x3 < 2 / d1) {
    return n1 * (x3 -= 1.5 / d1) * x3 + 0.75;
  } else if (x3 < 2.5 / d1) {
    return n1 * (x3 -= 2.25 / d1) * x3 + 0.9375;
  } else {
    return n1 * (x3 -= 2.625 / d1) * x3 + 0.984375;
  }
};
var easings = {
  linear: (x3) => x3,
  easeInQuad: (x3) => x3 * x3,
  easeOutQuad: (x3) => 1 - (1 - x3) * (1 - x3),
  easeInOutQuad: (x3) => x3 < 0.5 ? 2 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 2) / 2,
  easeInCubic: (x3) => x3 * x3 * x3,
  easeOutCubic: (x3) => 1 - Math.pow(1 - x3, 3),
  easeInOutCubic: (x3) => x3 < 0.5 ? 4 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 3) / 2,
  easeInQuart: (x3) => x3 * x3 * x3 * x3,
  easeOutQuart: (x3) => 1 - Math.pow(1 - x3, 4),
  easeInOutQuart: (x3) => x3 < 0.5 ? 8 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 4) / 2,
  easeInQuint: (x3) => x3 * x3 * x3 * x3 * x3,
  easeOutQuint: (x3) => 1 - Math.pow(1 - x3, 5),
  easeInOutQuint: (x3) => x3 < 0.5 ? 16 * x3 * x3 * x3 * x3 * x3 : 1 - Math.pow(-2 * x3 + 2, 5) / 2,
  easeInSine: (x3) => 1 - Math.cos(x3 * Math.PI / 2),
  easeOutSine: (x3) => Math.sin(x3 * Math.PI / 2),
  easeInOutSine: (x3) => -(Math.cos(Math.PI * x3) - 1) / 2,
  easeInExpo: (x3) => x3 === 0 ? 0 : Math.pow(2, 10 * x3 - 10),
  easeOutExpo: (x3) => x3 === 1 ? 1 : 1 - Math.pow(2, -10 * x3),
  easeInOutExpo: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? Math.pow(2, 20 * x3 - 10) / 2 : (2 - Math.pow(2, -20 * x3 + 10)) / 2,
  easeInCirc: (x3) => 1 - Math.sqrt(1 - Math.pow(x3, 2)),
  easeOutCirc: (x3) => Math.sqrt(1 - Math.pow(x3 - 1, 2)),
  easeInOutCirc: (x3) => x3 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x3, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x3 + 2, 2)) + 1) / 2,
  easeInBack: (x3) => c3 * x3 * x3 * x3 - c1 * x3 * x3,
  easeOutBack: (x3) => 1 + c3 * Math.pow(x3 - 1, 3) + c1 * Math.pow(x3 - 1, 2),
  easeInOutBack: (x3) => x3 < 0.5 ? Math.pow(2 * x3, 2) * ((c2 + 1) * 2 * x3 - c2) / 2 : (Math.pow(2 * x3 - 2, 2) * ((c2 + 1) * (x3 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : -Math.pow(2, 10 * x3 - 10) * Math.sin((x3 * 10 - 10.75) * c4),
  easeOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : Math.pow(2, -10 * x3) * Math.sin((x3 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x3) => x3 === 0 ? 0 : x3 === 1 ? 1 : x3 < 0.5 ? -(Math.pow(2, 20 * x3 - 10) * Math.sin((20 * x3 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x3 + 10) * Math.sin((20 * x3 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x3) => 1 - bounceOut(1 - x3),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x3) => x3 < 0.5 ? (1 - bounceOut(1 - 2 * x3)) / 2 : (1 + bounceOut(2 * x3 - 1)) / 2,
  steps
};
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer2, event) {
  if (observer2.eventObserved) {
    observer2.eventObserved(event);
  } else {
    observer2(event);
  }
}
function callFluidObservers(target, event) {
  const observers = target[$observers];
  if (observers) {
    observers.forEach((observer2) => {
      callFluidObserver(observer2, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer2) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer2)) {
      observers.add(observer2);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer2);
      }
    }
  }
  return observer2;
}
function removeFluidObserver(target, observer2) {
  const observers = target[$observers];
  if (observers && observers.has(observer2)) {
    const count2 = observers.size - 1;
    if (count2) {
      observers.delete(observer2);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count2, observer2);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (value2) {
      return value2;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_2, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator2 = (config2) => {
  if (!namedColorRegex)
    namedColorRegex = colors ? (
      // match color names, ignore partial matches
      new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g")
    ) : (
      // never match
      /^\b$/
    );
  const output = config2.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map(
    (_2, i2) => keyframes.map((values) => {
      if (!(i2 in values)) {
        throw Error('The arity of each "output" value must be equal');
      }
      return values[i2];
    })
  );
  const interpolators = outputRanges.map(
    (output2) => createInterpolator({ ...config2, output: output2 })
  );
  return (input) => {
    var _a;
    const missingUnit = !unitRegex.test(output[0]) && ((_a = output.find((value) => unitRegex.test(value))) == null ? void 0 : _a.replace(numberRegex, ""));
    let i2 = 0;
    return output[0].replace(
      numberRegex,
      () => `${interpolators[i2++](input)}${missingUnit || ""}`
    ).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(
    `${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`
  );
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(
    `${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`
  );
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR
  !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));
}
var useIsomorphicLayoutEffect = isSSR() ? import_react6.useEffect : import_react6.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react5.useRef)(false);
  useIsomorphicLayoutEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update3 = (0, import_react4.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update3(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react7.useState)(
    () => ({
      inputs,
      result: getResult()
    })
  );
  const committed = (0, import_react7.useRef)();
  const prevCache = committed.current;
  let cache2 = prevCache;
  if (cache2) {
    const useCache = Boolean(
      inputs && cache2.inputs && areInputsEqual(inputs, cache2.inputs)
    );
    if (!useCache) {
      cache2 = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache2 = initial;
  }
  (0, import_react7.useEffect)(() => {
    committed.current = cache2;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache2]);
  return cache2.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i2 = 0; i2 < next.length; i2++) {
    if (next[i2] !== prev[i2]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react8.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react9.useRef)();
  (0, import_react9.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
var React = __toESM(require_react(), 1);
var import_react11 = __toESM(require_react(), 1);
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    setAnimated(this, this);
  }
  /** Get every `AnimatedValue` used by this node. */
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this._value = _value;
    this.done = true;
    this.durationProgress = 0;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  /** @internal */
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const { done } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  /** @internal */
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    const value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = { dependencies: null };
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  /** Replace the raw object data */
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  /** Create a payload set. */
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  /** Add to a payload set. */
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  /** @internal */
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i2) => node.setValue(source[i2])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
var withAnimated = (Component3, host3) => {
  const hasInstance = (
    // Function components must use "forwardRef" to avoid being
    // re-rendered on every animation frame.
    !is.fun(Component3) || Component3.prototype && Component3.prototype.isReactComponent
  );
  return (0, import_react11.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react11.useRef)(null);
    const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
    (0, import_react11.useCallback)(
      (value) => {
        instanceRef.current = updateRef(givenRef, value);
      },
      [givenRef]
    );
    const [props, deps] = getAnimatedState(givenProps, host3);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host3.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react11.useRef)();
    useIsomorphicLayoutEffect(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(
            observerRef.current.deps,
            (dep) => removeFluidObserver(dep, observerRef.current)
          );
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react11.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host3.getComponentProps(props.getValue());
    return React.createElement(Component3, { ...usedProps, ref });
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host3) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = {
      ...props,
      style: host3.createAnimatedStyle(props.style)
    };
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: applyAnimatedValues2 = () => false,
  createAnimatedStyle = (style6) => new AnimatedObject(style6),
  getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: applyAnimatedValues2,
    createAnimatedStyle,
    getComponentProps
  };
  const animated2 = (Component3) => {
    const displayName = getDisplayName(Component3) || "Anonymous";
    if (is.str(Component3)) {
      Component3 = animated2[Component3] || (animated2[Component3] = withAnimated(Component3, hostConfig));
    } else {
      Component3 = Component3[cacheKey] || (Component3[cacheKey] = withAnimated(Component3, hostConfig));
    }
    Component3.displayName = `Animated(${displayName})`;
    return Component3;
  };
  eachProp(components, (Component3, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component3);
    }
    animated2[key] = animated2(Component3);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@shopify/polaris-viz-core/build/esm/contexts/PolarisVizContext.js
var host = createHost({
  // eslint-disable-next-line id-length
  g: "G"
});
var PolarisVizContext = (0, import_react12.createContext)({
  themes: {
    Dark: DARK_THEME,
    Light: LIGHT_THEME
  },
  components: {
    ...DEFAULT_COMPONENTS
  },
  animated: host.animated,
  defaultTheme: DEFAULT_THEME_NAME
});

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useChartContext.js
var import_react14 = __toESM(require_react());

// node_modules/@shopify/polaris-viz-core/build/esm/contexts/ChartContext.js
var import_react13 = __toESM(require_react());
var ChartContext = (0, import_react13.createContext)({
  id: null,
  characterWidths: {},
  characterWidthOffsets: {
    fontSize: {},
    fontWeight: {}
  },
  shouldAnimate: true,
  theme: DEFAULT_THEME_NAME,
  isPerformanceImpacted: false
});

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useChartContext.js
function useChartContext() {
  const ChartContextValues = (0, import_react14.useContext)(ChartContext);
  if (!ChartContextValues) {
    throw new Error("ChartContext is not defined");
  }
  return ChartContextValues;
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useTheme.js
function useTheme(passedTheme) {
  var _ref, _ref2;
  const {
    themes,
    defaultTheme
  } = (0, import_react15.useContext)(PolarisVizContext);
  const {
    theme
  } = useChartContext();
  const themeName = (_ref = (_ref2 = passedTheme !== null && passedTheme !== void 0 ? passedTheme : theme) !== null && _ref2 !== void 0 ? _ref2 : defaultTheme) !== null && _ref !== void 0 ? _ref : DEFAULT_THEME_NAME;
  const hasValidTheme = Object.prototype.hasOwnProperty.call(themes, themeName);
  (0, import_react15.useEffect)(() => {
    if (!hasValidTheme) {
      console.warn(`${themeName} theme not found, falling back to ${DEFAULT_THEME_NAME}. Did you forget to define it in the PolarisVizProvider?`);
    }
  }, [hasValidTheme, themeName]);
  if (hasValidTheme) {
    return themes[themeName];
  } else {
    return themes[DEFAULT_THEME_NAME];
  }
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useThemeSeriesColors.js
var import_react16 = __toESM(require_react());
function useThemeSeriesColors(series, selectedTheme) {
  return (0, import_react16.useMemo)(() => {
    const seriesCount = getFilteredSeries(series);
    const seriesColors = getSeriesColors(seriesCount, selectedTheme);
    let lastUsedColorIndex = -1;
    return series.map(({
      color: color2,
      isComparison
    }) => {
      if (isComparison === true) {
        return selectedTheme.seriesColors.comparison;
      }
      if (!color2) {
        lastUsedColorIndex += 1;
        if (lastUsedColorIndex === seriesColors.length) {
          lastUsedColorIndex = 0;
        }
        return seriesColors[lastUsedColorIndex];
      }
      return color2;
    });
  }, [series, selectedTheme]);
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/usePolarisVizContext.js
var import_react17 = __toESM(require_react());
function usePolarisVizContext() {
  const context = (0, import_react17.useContext)(PolarisVizContext);
  return context;
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useYScale.js
var import_react18 = __toESM(require_react());
var MINIMAL_LABEL_SPACE = 80;
function useYScale({
  drawableHeight,
  formatYAxisLabel,
  integersOnly = false,
  max: max3,
  min: min3,
  shouldRoundUp = true,
  verticalOverflow = true,
  fixedWidth,
  maxYOverride
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  if (maxYOverride != null && maxYOverride < 0) {
    throw new Error("maxYOverride must be a non-negative number.");
  }
  const [minY, maxY] = (0, import_react18.useMemo)(() => {
    const isDataEmpty = min3 === 0 && max3 === 0;
    const minY2 = min3;
    let maxY2 = isDataEmpty ? DEFAULT_MAX_Y : max3;
    if (maxYOverride != null && isDataEmpty) {
      maxY2 = maxYOverride;
    }
    if (integersOnly) {
      return [Math.floor(minY2), Math.ceil(maxY2)];
    }
    return [minY2, maxY2];
  }, [min3, max3, integersOnly, maxYOverride]);
  const {
    yScale,
    ticks: ticks2,
    yAxisLabelWidth
  } = (0, import_react18.useMemo)(() => {
    const maxTicks = Math.max(1, Math.ceil(drawableHeight / MINIMAL_LABEL_SPACE));
    const yScale2 = linear2().range([drawableHeight, 0]).domain([Math.min(0, minY), Math.max(0, maxY)]);
    if (!verticalOverflow || shouldRoundUp && shouldRoundScaleUp({
      yScale: yScale2,
      maxValue: maxY,
      maxTicks
    })) {
      yScale2.nice(maxTicks);
    } else {
      const roundedDownMin = yScale2.copy().nice(maxTicks).ticks(maxTicks)[0];
      yScale2.domain([Math.min(roundedDownMin, minY), Math.max(0, maxY)]);
    }
    const filteredTicks = integersOnly ? yScale2.ticks(maxTicks).filter((tick) => Number.isInteger(tick)) : yScale2.ticks(maxTicks);
    const ticks3 = filteredTicks.map((value) => ({
      value,
      formattedValue: formatYAxisLabel(value),
      yOffset: yScale2(value)
    }));
    const longestYAxisLabel = maxIndex(ticks3, ({
      formattedValue
    }) => formattedValue == null ? 0 : formattedValue.length);
    const text = ticks3[longestYAxisLabel] ? ticks3[longestYAxisLabel].formattedValue : "";
    const yAxisLabelWidth2 = estimateStringWidth(text, characterWidths2);
    return {
      yScale: yScale2,
      ticks: ticks3,
      yAxisLabelWidth: yAxisLabelWidth2
    };
  }, [verticalOverflow, shouldRoundUp, characterWidths2, drawableHeight, formatYAxisLabel, integersOnly, maxY, minY]);
  return {
    yScale,
    ticks: ticks2,
    yAxisLabelWidth: getLabelWidth(yAxisLabelWidth, fixedWidth)
  };
}
function getLabelWidth(yAxisLabelWidth, fixedWidth) {
  if (fixedWidth === false || fixedWidth == null) {
    return yAxisLabelWidth;
  }
  return fixedWidth;
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useUniqueId.js
var import_react19 = __toESM(require_react());
function useUniqueId(slug) {
  const id = (0, import_react19.useRef)(uniqueId(slug));
  return id.current;
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useAriaLabel.js
var import_react20 = __toESM(require_react());
function useAriaLabel(data, options = {
  xAxisLabelFormatter: void 0,
  yAxisLabelFormatter: void 0
}) {
  return (0, import_react20.useCallback)(function getAriaLabel({
    seriesIndex,
    key
  }) {
    const {
      xAxisLabelFormatter,
      yAxisLabelFormatter
    } = options;
    const ariaSeries = data.map(({
      name: name2,
      data: data2
    }) => data2[seriesIndex] ? `${name2} ${xAxisLabelFormatter ? xAxisLabelFormatter(data2[seriesIndex].value) : data2[seriesIndex].value}` : "").join(", ");
    return key ? `${yAxisLabelFormatter ? yAxisLabelFormatter(key) : key}: ${ariaSeries}` : "";
  }, [data, options]);
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/usePrevious.js
var import_react21 = __toESM(require_react());
function usePrevious(value) {
  const ref = (0, import_react21.useRef)(value);
  (0, import_react21.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useChartPositions.js
function useChartPositions({
  annotationsHeight,
  height,
  width,
  xAxisHeight,
  yAxisWidth
}) {
  const {
    grid: {
      horizontalMargin
    }
  } = useTheme();
  const chartXPosition = horizontalMargin + yAxisWidth + Y_AXIS_CHART_SPACING;
  const chartYPosition = ChartMargin.Top + annotationsHeight;
  const drawableHeight = height - chartYPosition - xAxisHeight - LABEL_AREA_TOP_SPACING;
  const drawableWidth = width - chartXPosition - horizontalMargin;
  return {
    chartXPosition,
    chartYPosition,
    drawableHeight,
    drawableWidth,
    xAxisBounds: {
      x: chartXPosition,
      y: drawableHeight + LABEL_AREA_TOP_SPACING + chartYPosition
    },
    yAxisBounds: {
      x: horizontalMargin,
      y: chartYPosition
    }
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/hooks/useSpringConfig.js
var import_react22 = __toESM(require_react());
function useSpringConfig({
  animationDelay = 0,
  shouldAnimate = true,
  mountedSpringConfig,
  unmountedSpringConfig
}) {
  const isMounted = (0, import_react22.useRef)(false);
  const delay = shouldAnimate ? animationDelay : 0;
  return {
    config: isMounted.current ? mountedSpringConfig : unmountedSpringConfig,
    default: {
      immediate: !shouldAnimate
    },
    delay: isMounted.current ? 0 : delay,
    onRest: () => isMounted.current = true
  };
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/Bar/Bar.js
var import_react23 = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function Bar({
  borderRadius = 0,
  fill,
  height,
  value,
  width,
  x: x3,
  yScale
}) {
  const {
    components: {
      Path: Path2
    },
    animated: animated2
  } = usePolarisVizContext();
  const AnimatedPath = animated2(Path2);
  const zeroScale = yScale(0);
  const isNegative = value != null && value < 0;
  const rotation = isNegative ? 180 : 0;
  const xPosition = isNegative ? x3 + width : x3;
  const yPosition = (0, import_react23.useMemo)(() => {
    if (height == null)
      return;
    const getYPosition2 = (value2) => isNegative ? zeroScale + value2 : zeroScale - value2;
    if (typeof height === "number") {
      return getYPosition2(height);
    }
    return height.to(getYPosition2);
  }, [height, isNegative, zeroScale]);
  const style6 = (0, import_react23.useMemo)(() => {
    if (yPosition == null)
      return;
    const getStyle = (y3) => `translate(${xPosition} ${y3}), rotate(${rotation})`;
    if (typeof yPosition === "number")
      return getStyle(yPosition);
    return yPosition.to(getStyle);
  }, [yPosition, xPosition, rotation]);
  const path2 = (0, import_react23.useMemo)(() => {
    if (height == null)
      return;
    const calculatePath = (heightValue) => {
      if (heightValue === 0) {
        return "";
      }
      return getRoundedRectPath({
        height: heightValue,
        width,
        borderRadius: `${borderRadius} ${borderRadius} 0 0`
      });
    };
    if (typeof height === "number") {
      return calculatePath(height);
    }
    return height.to(calculatePath);
  }, [borderRadius, height, width]);
  if (value == null || width < 0) {
    return null;
  }
  return (0, import_jsx_runtime.jsx)(AnimatedPath, {
    d: path2,
    transform: style6,
    fill
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/LineSeries.js
var import_react33 = __toESM(require_react());

// node_modules/d3-shape/src/constant.js
function constant_default2(x3) {
  return function constant2() {
    return x3;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin = Math.sin;
var sqrt2 = Math.sqrt;
var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;
function acos(x3) {
  return x3 > 1 ? 0 : x3 < -1 ? pi : Math.acos(x3);
}
function asin(x3) {
  return x3 >= 1 ? halfPi : x3 <= -1 ? -halfPi : Math.asin(x3);
}

// node_modules/d3-path/src/path.js
var pi2 = Math.PI;
var tau2 = 2 * pi2;
var epsilon3 = 1e-6;
var tauEpsilon = tau2 - epsilon3;
function append(strings) {
  this._ += strings[0];
  for (let i2 = 1, n3 = strings.length; i2 < n3; ++i2) {
    this._ += arguments[i2] + strings[i2];
  }
}
function appendRound(digits) {
  let d2 = Math.floor(digits);
  if (!(d2 >= 0))
    throw new Error(`invalid digits: ${digits}`);
  if (d2 > 15)
    return append;
  const k3 = 10 ** d2;
  return function(strings) {
    this._ += strings[0];
    for (let i2 = 1, n3 = strings.length; i2 < n3; ++i2) {
      this._ += Math.round(arguments[i2] * k3) / k3 + strings[i2];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x3, y3) {
    this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x3, y3) {
    this._append`L${this._x1 = +x3},${this._y1 = +y3}`;
  }
  quadraticCurveTo(x1, y1, x3, y3) {
    this._append`Q${+x1},${+y1},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  bezierCurveTo(x1, y1, x22, y22, x3, y3) {
    this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x3},${this._y1 = +y3}`;
  }
  arcTo(x1, y1, x22, y22, r3) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r3 = +r3;
    if (r3 < 0)
      throw new Error(`negative radius: ${r3}`);
    let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    } else if (!(l01_2 > epsilon3))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon3) || !r3) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    } else {
      let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l2 = r3 * Math.tan((pi2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l2 / l01, t21 = l2 / l21;
      if (Math.abs(t01 - 1) > epsilon3) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r3},${r3},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x3, y3, r3, a0, a1, ccw) {
    x3 = +x3, y3 = +y3, r3 = +r3, ccw = !!ccw;
    if (r3 < 0)
      throw new Error(`negative radius: ${r3}`);
    let dx = r3 * Math.cos(a0), dy = r3 * Math.sin(a0), x0 = x3 + dx, y0 = y3 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    } else if (Math.abs(this._x1 - x0) > epsilon3 || Math.abs(this._y1 - y0) > epsilon3) {
      this._append`L${x0},${y0}`;
    }
    if (!r3)
      return;
    if (da < 0)
      da = da % tau2 + tau2;
    if (da > tauEpsilon) {
      this._append`A${r3},${r3},0,1,${cw},${x3 - dx},${y3 - dy}A${r3},${r3},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    } else if (da > epsilon3) {
      this._append`A${r3},${r3},0,${+(da >= pi2)},${cw},${this._x1 = x3 + r3 * Math.cos(a1)},${this._y1 = y3 + r3 * Math.sin(a1)}`;
    }
  }
  rect(x3, y3, w2, h2) {
    this._append`M${this._x0 = this._x1 = +x3},${this._y0 = this._y1 = +y3}h${w2 = +w2}v${+h2}h${-w2}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_2) {
    if (!arguments.length)
      return digits;
    if (_2 == null) {
      digits = null;
    } else {
      const d2 = Math.floor(_2);
      if (!(d2 >= 0))
        throw new RangeError(`invalid digits: ${_2}`);
      digits = d2;
    }
    return shape;
  };
  return () => new Path(digits);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d2) {
  return d2.innerRadius;
}
function arcOuterRadius(d2) {
  return d2.outerRadius;
}
function arcStartAngle(d2) {
  return d2.startAngle;
}
function arcEndAngle(d2) {
  return d2.endAngle;
}
function arcPadAngle(d2) {
  return d2 && d2.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x22, y32 = y3 - y22, t5 = y32 * x10 - x32 * y10;
  if (t5 * t5 < epsilon)
    return;
  t5 = (x32 * (y0 - y22) - y32 * (x0 - x22)) / t5;
  return [x0 + t5 * x10, y0 + t5 * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r3 = r1 - rc, D3 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt2(max2(0, r3 * r3 * d2 - D3 * D3)), cx0 = (D3 * dy - dx * d3) / d2, cy0 = (-D3 * dx - dy * d3) / d2, cx1 = (D3 * dy + dx * d3) / d2, cy1 = (-D3 * dx + dy * d3) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r3 - 1),
    y11: cy0 * (r1 / r3 - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default2(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null, path2 = withPath(arc);
  function arc() {
    var buffer, r3, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path2();
    if (r1 < r0)
      r3 = r1, r1 = r0, r0 = r3;
    if (!(r1 > epsilon))
      context.moveTo(0, 0);
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t03, t13;
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min2(rc, (r0 - lc) / (kc - 1));
            rc1 = min2(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }
      if (!(da1 > epsilon))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon) {
        t03 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc1 < rc)
          context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc1, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r1, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), !cw);
          context.arc(t13.cx, t13.cy, rc1, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon) || !(da0 > epsilon))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon) {
        t03 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t13 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc0 < rc)
          context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc0, atan2(t03.y01, t03.x01), atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r0, atan2(t03.cy + t03.y11, t03.cx + t03.x11), atan2(t13.cy + t13.y11, t13.cx + t13.x11), cw);
          context.arc(t13.cx, t13.cy, rc0, atan2(t13.y11, t13.x11), atan2(t13.y01, t13.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r3 = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a3 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a3) * r3, sin(a3) * r3];
  };
  arc.innerRadius = function(_2) {
    return arguments.length ? (innerRadius = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : innerRadius;
  };
  arc.outerRadius = function(_2) {
    return arguments.length ? (outerRadius = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : outerRadius;
  };
  arc.cornerRadius = function(_2) {
    return arguments.length ? (cornerRadius = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : cornerRadius;
  };
  arc.padRadius = function(_2) {
    return arguments.length ? (padRadius = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : padRadius;
  };
  arc.startAngle = function(_2) {
    return arguments.length ? (startAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : startAngle;
  };
  arc.endAngle = function(_2) {
    return arguments.length ? (endAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : endAngle;
  };
  arc.padAngle = function(_2) {
    return arguments.length ? (padAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), arc) : padAngle;
  };
  arc.context = function(_2) {
    return arguments.length ? (context = _2 == null ? null : _2, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;
function array_default2(x3) {
  return typeof x3 === "object" && "length" in x3 ? x3 : Array.from(x3);
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x3, y3);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x(p2) {
  return p2[0];
}
function y(p2) {
  return p2[1];
}

// node_modules/d3-shape/src/line.js
function line_default(x3, y3) {
  var defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
  x3 = typeof x3 === "function" ? x3 : x3 === void 0 ? x : constant_default2(x3);
  y3 = typeof y3 === "function" ? y3 : y3 === void 0 ? y : constant_default2(y3);
  function line(data) {
    var i2, n3 = (data = array_default2(data)).length, d2, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path2());
    for (i2 = 0; i2 <= n3; ++i2) {
      if (!(i2 < n3 && defined(d2 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x3(d2, i2, data), +y3(d2, i2, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_2) {
    return arguments.length ? (x3 = typeof _2 === "function" ? _2 : constant_default2(+_2), line) : x3;
  };
  line.y = function(_2) {
    return arguments.length ? (y3 = typeof _2 === "function" ? _2 : constant_default2(+_2), line) : y3;
  };
  line.defined = function(_2) {
    return arguments.length ? (defined = typeof _2 === "function" ? _2 : constant_default2(!!_2), line) : defined;
  };
  line.curve = function(_2) {
    return arguments.length ? (curve = _2, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_2) {
    return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(area);
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant_default2(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default2(0) : constant_default2(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default2(+y1);
  function area(data) {
    var i2, j2, k3, n3 = (data = array_default2(data)).length, d2, defined0 = false, buffer, x0z = new Array(n3), y0z = new Array(n3);
    if (context == null)
      output = curve(buffer = path2());
    for (i2 = 0; i2 <= n3; ++i2) {
      if (!(i2 < n3 && defined(d2 = data[i2], i2, data)) === defined0) {
        if (defined0 = !defined0) {
          j2 = i2;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k3 = i2 - 1; k3 >= j2; --k3) {
            output.point(x0z[k3], y0z[k3]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i2] = +x0(d2, i2, data), y0z[i2] = +y0(d2, i2, data);
        output.point(x1 ? +x1(d2, i2, data) : x0z[i2], y1 ? +y1(d2, i2, data) : y0z[i2]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_2) {
    return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant_default2(+_2), x1 = null, area) : x0;
  };
  area.x0 = function(_2) {
    return arguments.length ? (x0 = typeof _2 === "function" ? _2 : constant_default2(+_2), area) : x0;
  };
  area.x1 = function(_2) {
    return arguments.length ? (x1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default2(+_2), area) : x1;
  };
  area.y = function(_2) {
    return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant_default2(+_2), y1 = null, area) : y0;
  };
  area.y0 = function(_2) {
    return arguments.length ? (y0 = typeof _2 === "function" ? _2 : constant_default2(+_2), area) : y0;
  };
  area.y1 = function(_2) {
    return arguments.length ? (y1 = _2 == null ? null : typeof _2 === "function" ? _2 : constant_default2(+_2), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_2) {
    return arguments.length ? (defined = typeof _2 === "function" ? _2 : constant_default2(!!_2), area) : defined;
  };
  area.curve = function(_2) {
    return arguments.length ? (curve = _2, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_2) {
    return arguments.length ? (_2 == null ? context = output = null : output = curve(context = _2), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/descending.js
function descending_default(a3, b2) {
  return b2 < a3 ? -1 : b2 > a3 ? 1 : b2 >= a3 ? 0 : NaN;
}

// node_modules/d3-shape/src/identity.js
function identity_default2(d2) {
  return d2;
}

// node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default2, sortValues = descending_default, sort2 = null, startAngle = constant_default2(0), endAngle = constant_default2(tau), padAngle = constant_default2(0);
  function pie(data) {
    var i2, n3 = (data = array_default2(data)).length, j2, k3, sum3 = 0, index2 = new Array(n3), arcs = new Array(n3), a0 = +startAngle.apply(this, arguments), da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)), a1, p2 = Math.min(Math.abs(da) / n3, padAngle.apply(this, arguments)), pa = p2 * (da < 0 ? -1 : 1), v2;
    for (i2 = 0; i2 < n3; ++i2) {
      if ((v2 = arcs[index2[i2] = i2] = +value(data[i2], i2, data)) > 0) {
        sum3 += v2;
      }
    }
    if (sortValues != null)
      index2.sort(function(i3, j3) {
        return sortValues(arcs[i3], arcs[j3]);
      });
    else if (sort2 != null)
      index2.sort(function(i3, j3) {
        return sort2(data[i3], data[j3]);
      });
    for (i2 = 0, k3 = sum3 ? (da - n3 * pa) / sum3 : 0; i2 < n3; ++i2, a0 = a1) {
      j2 = index2[i2], v2 = arcs[j2], a1 = a0 + (v2 > 0 ? v2 * k3 : 0) + pa, arcs[j2] = {
        data: data[j2],
        index: i2,
        value: v2,
        startAngle: a0,
        endAngle: a1,
        padAngle: p2
      };
    }
    return arcs;
  }
  pie.value = function(_2) {
    return arguments.length ? (value = typeof _2 === "function" ? _2 : constant_default2(+_2), pie) : value;
  };
  pie.sortValues = function(_2) {
    return arguments.length ? (sortValues = _2, sort2 = null, pie) : sortValues;
  };
  pie.sort = function(_2) {
    return arguments.length ? (sort2 = _2, sortValues = null, pie) : sort2;
  };
  pie.startAngle = function(_2) {
    return arguments.length ? (startAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), pie) : startAngle;
  };
  pie.endAngle = function(_2) {
    return arguments.length ? (endAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), pie) : endAngle;
  };
  pie.padAngle = function(_2) {
    return arguments.length ? (padAngle = typeof _2 === "function" ? _2 : constant_default2(+_2), pie) : padAngle;
  };
  return pie;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a3, r3) {
    this._curve.point(r3 * Math.sin(a3), r3 * -Math.cos(a3));
  }
};
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3 = sqrt2(3);

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt2(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = sin(pi / 10) / sin(7 * pi / 10);
var kx = sin(tau / 10) * kr;
var ky = -cos(tau / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32 = sqrt2(3);

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33 = sqrt2(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = sqrt2(3) / 2;
var k = 1 / sqrt2(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point2(that, x3, y3) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x3) / 6,
    (that._y0 + 4 * that._y1 + y3) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x3, this._y2 = y3;
        break;
      case 1:
        this._point = 2;
        this._x3 = x3, this._y3 = y3;
        break;
      case 2:
        this._point = 3;
        this._x4 = x3, this._y4 = y3;
        this._context.moveTo((this._x0 + 4 * this._x1 + x3) / 6, (this._y0 + 4 * this._y1 + y3) / 6);
        break;
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x3) / 6, y0 = (this._y0 + 4 * this._y1 + y3) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x3 = this._x, y3 = this._y, j2 = x3.length - 1;
    if (j2 > 0) {
      var x0 = x3[0], y0 = y3[0], dx = x3[j2] - x0, dy = y3[j2] - y0, i2 = -1, t5;
      while (++i2 <= j2) {
        t5 = i2 / j2;
        this._basis.point(
          this._beta * x3[i2] + (1 - this._beta) * (x0 + t5 * dx),
          this._beta * y3[i2] + (1 - this._beta) * (y0 + t5 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x3, y3) {
    this._x.push(+x3);
    this._y.push(+y3);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x3, y3) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x3),
    that._y2 + that._k * (that._y1 - y3),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        this._x1 = x3, this._y1 = y3;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y3;
        break;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x3, y3);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x3, y3) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon) {
    var a3 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n3 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a3 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n3;
    y1 = (y1 * a3 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n3;
  }
  if (that._l23_a > epsilon) {
    var b2 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m2 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b2 + that._x1 * that._l23_2a - x3 * that._l12_2a) / m2;
    y22 = (y22 * b2 + that._y1 * that._l23_2a - y3 * that._l12_2a) / m2;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x3, this._y3 = y3;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x3, this._y4 = y3);
        break;
      case 2:
        this._point = 3;
        this._x5 = x3, this._y5 = y3;
        break;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point) {
      var x23 = this._x2 - x3, y23 = this._y2 - y3;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x3, y3);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x3;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y3;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    if (this._point)
      this._context.lineTo(x3, y3);
    else
      this._point = 1, this._context.moveTo(x3, y3);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x3) {
  return x3 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
}
function slope2(that, t5) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t5) / 2 : t5;
}
function point5(that, t03, t13) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t03, x1 - dx, y1 - dx * t13, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    var t13 = NaN;
    x3 = +x3, y3 = +y3;
    if (x3 === this._x1 && y3 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t13 = slope3(this, x3, y3)), t13);
        break;
      default:
        point5(this, this._t0, t13 = slope3(this, x3, y3));
        break;
    }
    this._x0 = this._x1, this._x1 = x3;
    this._y0 = this._y1, this._y1 = y3;
    this._t0 = t13;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x3, y3) {
  MonotoneX.prototype.point.call(this, y3, x3);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x3, y3) {
    this._context.moveTo(y3, x3);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x3, y3) {
    this._context.lineTo(y3, x3);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x3, y3) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y3, x3);
  }
};

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x3 = this._x, y3 = this._y, n3 = x3.length;
    if (n3) {
      this._line ? this._context.lineTo(x3[0], y3[0]) : this._context.moveTo(x3[0], y3[0]);
      if (n3 === 2) {
        this._context.lineTo(x3[1], y3[1]);
      } else {
        var px = controlPoints(x3), py = controlPoints(y3);
        for (var i0 = 0, i1 = 1; i1 < n3; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x3[i1], y3[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n3 === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x3, y3) {
    this._x.push(+x3);
    this._y.push(+y3);
  }
};
function controlPoints(x3) {
  var i2, n3 = x3.length - 1, m2, a3 = new Array(n3), b2 = new Array(n3), r3 = new Array(n3);
  a3[0] = 0, b2[0] = 2, r3[0] = x3[0] + 2 * x3[1];
  for (i2 = 1; i2 < n3 - 1; ++i2)
    a3[i2] = 1, b2[i2] = 4, r3[i2] = 4 * x3[i2] + 2 * x3[i2 + 1];
  a3[n3 - 1] = 2, b2[n3 - 1] = 7, r3[n3 - 1] = 8 * x3[n3 - 1] + x3[n3];
  for (i2 = 1; i2 < n3; ++i2)
    m2 = a3[i2] / b2[i2 - 1], b2[i2] -= m2, r3[i2] -= m2 * r3[i2 - 1];
  a3[n3 - 1] = r3[n3 - 1] / b2[n3 - 1];
  for (i2 = n3 - 2; i2 >= 0; --i2)
    a3[i2] = (r3[i2] - a3[i2 + 1]) / b2[i2];
  b2[n3 - 1] = (x3[n3] + a3[n3 - 1]) / 2;
  for (i2 = 0; i2 < n3 - 1; ++i2)
    b2[i2] = 2 * x3[i2 + 1] - a3[i2 + 1];
  return [a3, b2];
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t5) {
  this._context = context;
  this._t = t5;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x3, y3) {
    x3 = +x3, y3 = +y3;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x3, y3) : this._context.moveTo(x3, y3);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y3);
          this._context.lineTo(x3, y3);
        } else {
          var x1 = this._x * (1 - this._t) + x3 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y3);
        }
        break;
      }
    }
    this._x = x3, this._y = y3;
  }
};

// node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n3 = series.length) > 1))
    return;
  for (var i2 = 1, j2, s0, s1 = series[order[0]], n3, m2 = s1.length; i2 < n3; ++i2) {
    s0 = s1, s1 = series[order[i2]];
    for (j2 = 0; j2 < m2; ++j2) {
      s1[j2][1] += s1[j2][0] = isNaN(s0[j2][1]) ? s0[j2][0] : s0[j2][1];
    }
  }
}

// node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n3 = series.length, o2 = new Array(n3);
  while (--n3 >= 0)
    o2[n3] = n3;
  return o2;
}

// node_modules/d3-shape/src/stack.js
function stackValue(d2, key) {
  return d2[key];
}
function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}
function stack_default() {
  var keys = constant_default2([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries), i2, n3 = sz.length, j2 = -1, oz;
    for (const d2 of data) {
      for (i2 = 0, ++j2; i2 < n3; ++i2) {
        (sz[i2][j2] = [0, +value(d2, sz[i2].key, j2, data)]).data = d2;
      }
    }
    for (i2 = 0, oz = array_default2(order(sz)); i2 < n3; ++i2) {
      sz[oz[i2]].index = i2;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_2) {
    return arguments.length ? (keys = typeof _2 === "function" ? _2 : constant_default2(Array.from(_2)), stack) : keys;
  };
  stack.value = function(_2) {
    return arguments.length ? (value = typeof _2 === "function" ? _2 : constant_default2(+_2), stack) : value;
  };
  stack.order = function(_2) {
    return arguments.length ? (order = _2 == null ? none_default2 : typeof _2 === "function" ? _2 : constant_default2(Array.from(_2)), stack) : order;
  };
  stack.offset = function(_2) {
    return arguments.length ? (offset = _2 == null ? none_default : _2, stack) : offset;
  };
  return stack;
}

// node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i2, j2 = 0, d2, dy, yp, yn, n3, m2 = series[order[0]].length; j2 < m2; ++j2) {
    for (yp = yn = 0, i2 = 0; i2 < n3; ++i2) {
      if ((dy = (d2 = series[order[i2]][j2])[1] - d2[0]) > 0) {
        d2[0] = yp, d2[1] = yp += dy;
      } else if (dy < 0) {
        d2[1] = yn, d2[0] = yn += dy;
      } else {
        d2[0] = 0, d2[1] = dy;
      }
    }
  }
}

// node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/LineSeries.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz-core/build/esm/components/LinearGradientWithStops/LinearGradientWithStops.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function LinearGradientWithStops({
  gradient,
  id,
  x1 = "0%",
  x2: x22 = "0%",
  y1 = "100%",
  y2: y22 = "0%",
  gradientUnits = "objectBoundingBox"
}) {
  const {
    components: {
      LinearGradient,
      Stop
    }
  } = usePolarisVizContext();
  return (0, import_jsx_runtime2.jsx)(LinearGradient, {
    id,
    x1,
    x2: x22,
    y1,
    y2: y22,
    gradientUnits,
    children: gradient.map(({
      color: color2,
      offset,
      stopOpacity = 1
    }) => (0, import_jsx_runtime2.jsx)(Stop, {
      offset: `${offset}%`,
      stopColor: color2,
      stopOpacity
    }, `${id}-${color2}-${offset}`))
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/AnimatedLine/AnimatedLine.js
var import_react29 = __toESM(require_react());

// node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
var import_react24 = __toESM(require_react(), 1);
var React2 = __toESM(require_react(), 1);
var import_react25 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);
var React22 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);
var import_react28 = __toESM(require_react(), 1);
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = [
  "config",
  "onProps",
  "onStart",
  "onChange",
  "onPause",
  "onResume",
  "onRest"
];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  // Transition props
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  // Internal props
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count2 = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count2++;
    }
  });
  if (count2) {
    return forward;
  }
}
function inferTo(props) {
  const to22 = getForwardProps(props);
  if (to22) {
    const out = { to: to22 };
    eachProp(props, (val, key) => key in to22 || (out[key] = val));
    return out;
  }
  return { ...props };
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _2 in props)
    return true;
  return false;
}
function isAsyncTo(to22) {
  return is.fun(to22) || is.arr(to22) && is.obj(to22[0]);
}
function detachRefs(ctrl, ref) {
  var _a;
  (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  var _a;
  if (ref && ctrl.ref !== ref) {
    (_a = ctrl.ref) == null ? void 0 : _a.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: { tension: 170, friction: 26 },
  gentle: { tension: 120, friction: 14 },
  wobbly: { tension: 180, friction: 12 },
  stiff: { tension: 210, friction: 20 },
  slow: { tension: 280, friction: 60 },
  molasses: { tension: 280, friction: 120 }
};
var defaults = {
  ...config.default,
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
};
var AnimationConfig = class {
  constructor() {
    this.velocity = 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = { ...defaultConfig };
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = { ...defaultConfig, ...newConfig };
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let { frequency, damping } = config2;
  const { mass } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, { key, props, defaultProps, state, actions }) {
  return new Promise((resolve, reject) => {
    let delay;
    let timeout;
    let cancel = matchProp(props.cancel ?? (defaultProps == null ? void 0 : defaultProps.cancel), key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals_exports.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start({ ...props, callId, cancel }, resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
  target.get(),
  results.every((result) => result.finished)
);
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to22, props, state, target) {
  const { callId, parentId, onRest } = props;
  const { asyncTo: prevTo, promise: prevPromise } = state;
  if (!parentId && to22 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to22;
    const defaultProps = getDefaultProps(
      props,
      (value, key) => (
        // The `onRest` prop is only called when the `runAsync` promise is resolved.
        key === "onRest" ? void 0 : value
      )
    );
    let preventBail;
    let bail;
    const bailPromise = new Promise(
      (resolve, reject) => (preventBail = resolve, bail = reject)
    );
    const bailIfEnded = (bailSignal) => {
      const bailResult = (
        // The `cancel` prop or `stop` method was used.
        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
        callId !== state.asyncId && getFinishedResult(target, false)
      );
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAnimationSignal();
      return (async () => {
        if (globals_exports.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals_exports.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to22)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to22);
      } else {
        animating = Promise.resolve(to22(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAnimationSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t5) => t5.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super(
      "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
    );
  }
};
var SkipAnimationSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId = 1;
var FrameValue = class extends FluidValue {
  constructor() {
    super(...arguments);
    this.id = nextId++;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  /** Get the current value */
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  /** Create a spring that maps our value to another value */
  to(...args) {
    return globals_exports.to(this, args);
  }
  /** @deprecated Use the `to` method instead. */
  interpolate(...args) {
    deprecateInterpolate();
    return globals_exports.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count2) {
    if (count2 == 1)
      this._attach();
  }
  observerRemoved(count2) {
    if (count2 == 0)
      this._detach();
  }
  /** Called when the first child is added. */
  _attach() {
  }
  /** Called when the last child is removed. */
  _detach() {
  }
  /** Tell our children about our new value */
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  /** Tell our children about our new priority */
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.animation = new Animation();
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  /** Equals true when not advancing on each frame. */
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  /**
   * When true, this value has been animated at least once.
   */
  get hasAnimated() {
    return hasAnimated(this);
  }
  /**
   * When true, this value has an unfinished animation,
   * which is either active or paused.
   */
  get isAnimating() {
    return isAnimating(this);
  }
  /**
   * When true, all current and future animations are paused.
   */
  get isPaused() {
    return isPaused(this);
  }
  /**
   *
   *
   */
  get isDelayed() {
    return this._state.delayed;
  }
  /** Advance the current animation by a number of milliseconds */
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let { toValues } = anim;
    const { config: config2 } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i2) => {
      if (node2.done)
        return;
      const to22 = (
        // Animated strings always go from 0 to 1.
        node2.constructor == AnimatedString ? 1 : payload ? payload[i2].lastPosition : toValues[i2]
      );
      let finished = anim.immediate;
      let position = to22;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i2];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i2] : config2.velocity;
        let velocity;
        const precision = config2.precision || (from == to22 ? 5e-3 : Math.min(1, Math.abs(to22 - from) * 1e-3));
        if (!is.und(config2.duration)) {
          let p2 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node2.durationProgress = p2;
          }
          position = from + config2.easing(p2) * (to22 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p2 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e4 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e4);
          finished = Math.abs(node2.lastPosition - position) <= precision;
          velocity = v0 * e4;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to22 ? node2.v0 > 0 : from < to22;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n3 = 0; n3 < numSteps; ++n3) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to22 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to22 || position > to22 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to22;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to22);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i2].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  /** Set the current value, while stopping the current animation */
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  /**
   * Freeze the active animation in time, as well as any updates merged
   * before `resume` is called.
   */
  pause() {
    this._update({ pause: true });
  }
  /** Resume the animation if paused. */
  resume() {
    this._update({ pause: false });
  }
  /** Skip to the end of the current animation. */
  finish() {
    if (isAnimating(this)) {
      const { to: to22, config: config2 } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to22, false);
        }
        this._stop();
      });
    }
    return this;
  }
  /** Push props into the pending queue. */
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to22, arg2) {
    let queue;
    if (!is.und(to22)) {
      queue = [is.obj(to22) ? to22 : { ...arg2, to: to22 }];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(
      queue.map((props) => {
        const up = this._update(props);
        return up;
      })
    ).then((results) => getCombinedResult(this, results));
  }
  /**
   * Stop the current animation, and cancel any delayed updates.
   *
   * Pass `true` to call `onRest` with `cancelled: true`.
   */
  stop(cancel) {
    const { to: to22 } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to22, cancel));
    return this;
  }
  /** Restart the animation. */
  reset() {
    this._update({ reset: true });
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  /**
   * Parse the `to` and `from` range from the given `props` object.
   *
   * This also ensures the initial value is available to animated components
   * during the render phase.
   */
  _prepareNode(props) {
    const key = this.key || "";
    let { to: to22, from } = props;
    to22 = is.obj(to22) ? to22[key] : to22;
    if (to22 == null || isAsyncTo(to22)) {
      to22 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range2 = { to: to22, from };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to22, from] = [from, to22];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to22);
      }
    }
    return range2;
  }
  /** Every update is processed by this method before merging. */
  _update({ ...props }, isLoop) {
    const { key, defaultProps } = this;
    if (props.default)
      Object.assign(
        defaultProps,
        getDefaultProps(
          props,
          (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value
        )
      );
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range2 = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error(
        "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
      );
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(
              this,
              "onPause",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(
              this,
              "onResume",
              getFinishedResult(this, checkFinished(this, this.animation.to)),
              this
            );
          }
        },
        start: this._merge.bind(this, range2)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  /** Merge props into the current animation */
  _merge(range2, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range2.to);
    const hasFromProp = !is.und(range2.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const { key, defaultProps, animation: anim } = this;
    const { to: prevTo, from: prevFrom } = anim;
    let { to: to22 = prevTo, from = prevFrom } = range2;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to22))) {
      to22 = from;
    }
    if (props.reverse)
      [to22, from] = [from, to22];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to22, prevTo);
    if (hasToChanged) {
      this._focus(to22);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const { config: config2 } = anim;
    const { decay, velocity } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(
        config2,
        callProp(props.config, key),
        // Avoid calling the same "config" prop twice.
        props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0
      );
    }
    let node = getAnimated(this);
    if (!node || is.und(to22)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = (
      // When `reset` is undefined, the `from` prop implies `reset: true`,
      // except for declarative updates. When `reset` is defined, there
      // must exist a value to animate from.
      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key)
    );
    const value = reset ? from : this.get();
    const goal = computeGoal(to22);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to22);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(
            `Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
          );
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to22);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to22) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const { onRest } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            var _a;
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              (_a = anim.onStart) == null ? void 0 : _a.call(anim, result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  /** Update the `animation.to` value, which might be a `FluidValue` */
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      addFluidObserver(to22, this);
      if (isFrameValue(to22)) {
        priority2 = to22.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const { to: to22 } = this.animation;
    if (hasFluidValue(to22)) {
      removeFluidObserver(to22, this);
    }
  }
  /**
   * Update the current value from outside the frameloop,
   * and return the `Animated` node.
   */
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(
        this,
        "onStart",
        getFinishedResult(this, checkFinished(this, anim.to)),
        this
      );
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  // This method resets the animation state (even if already animating) to
  // ensure the latest from/to range is used, and it also ensures this spring
  // is added to the frameloop.
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals_exports.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  /**
   * Exit the frameloop and notify `onRest` listeners.
   *
   * Always wrap `_stop` calls with `batchedUpdates`.
   */
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to22) {
  const goal = computeGoal(to22);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to22 = props.to) {
  const loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse2 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate({
      ...props,
      loop: loop2,
      // Avoid updating default props when looping.
      default: false,
      // Never loop the `pause` prop.
      pause: void 0,
      // For the "reverse" prop to loop as expected, the "to" prop
      // must be undefined. The "reverse" prop is ignored when the
      // "to" prop is an array or function.
      to: !reverse2 || isAsyncTo(to22) ? to22 : void 0,
      // Ignore the "from" prop except on reset.
      from: reset ? props.from : void 0,
      reset,
      // The "loop" prop can return a "useSpring" props object to
      // override any of the original props.
      ...overrides
    });
  }
}
function createUpdate(props) {
  const { to: to22, from } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to22))
    findDefined(to22, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update22 = createUpdate(props);
  if (is.und(update22.default)) {
    update22.default = getDefaultProps(update22);
  }
  return update22;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = [
  "onStart",
  "onRest",
  "onChange",
  "onPause",
  "onResume"
];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _a, _b, _c, _d;
  (_b = (_a = target.animation)[type]) == null ? void 0 : _b.call(_a, ...args);
  (_d = (_c = target.defaultProps)[type]) == null ? void 0 : _d.call(_c, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start({ default: true, ...props });
    }
  }
  /**
   * Equals `true` when no spring values are in the frameloop, and
   * no async animation is currently active.
   */
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  /** Get the current values of our springs */
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  /** Set the current values without animating. */
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  /** Push an update onto the queue of each value. */
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  /**
   * Start the queued animations for every spring, and resolve the returned
   * promise once all queued animations have finished or been cancelled.
   *
   * When you pass a queue (instead of nothing), that queue is used instead of
   * the queued animations added with the `update` method, which are left alone.
   */
  start(props) {
    let { queue } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  /** @internal */
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  /** Freeze the active animation in time */
  pause(keys) {
    if (is.und(keys)) {
      this.start({ pause: true });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  /** Resume the animation if paused. */
  resume(keys) {
    if (is.und(keys)) {
      this.start({ pause: false });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  /** Call a function once per spring value */
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  /** @internal Called at the end of every animation frame */
  _onFrame() {
    const { onStart, onChange, onRest } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
    (results) => getCombinedResult(ctrl, results)
  );
}
async function flushUpdate(ctrl, props, isLoop) {
  const { keys, to: to22, from, loop: loop2, onRest, onResolve } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to22 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to22) || is.fun(to22) ? to22 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({ finished, cancelled }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map(
    (key) => ctrl.springs[key].start(props)
  );
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(
      scheduleProps(++ctrl["_lastAsyncId"], {
        props,
        state,
        actions: {
          pause: noop,
          resume: noop,
          start(props2, resolve) {
            if (cancel) {
              stopAsync(state, ctrl["_lastAsyncId"]);
              resolve(getCancelledResult(ctrl));
            } else {
              props2.onRest = onRest;
              resolve(
                runAsync(
                  asyncTo,
                  props2,
                  state,
                  ctrl
                )
              );
            }
          }
        }
      })
    );
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to22);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = { ...ctrl.springs };
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = { ...props2, to: void 0 };
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
var SpringContext = ({
  children,
  ...props
}) => {
  const inherited = (0, import_react25.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({ pause, immediate }), [pause, immediate]);
  const { Provider } = ctx;
  return React2.createElement(Provider, { value: props }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React2.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i2) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = _getProps(props, ctrl, i2);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i2 = current.indexOf(ctrl);
    if (~i2)
      current.splice(i2, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl, i2) => {
      const update22 = is.fun(values) ? values(i2, ctrl) : values;
      if (update22) {
        ctrl.set(update22);
      }
    });
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i2) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update22 = this._getProps(props, ctrl, i2);
        if (update22) {
          results.push(ctrl.start(update22));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i2) => ctrl.update(this._getProps(props, ctrl, i2)));
    return this;
  };
  const _getProps = function(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react24.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const layoutId = (0, import_react24.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react24.useMemo)(
    () => ({
      ctrls: [],
      queue: [],
      flush(ctrl, updates2) {
        const springs2 = getSprings(ctrl, updates2);
        const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
        return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
          setSprings(ctrl, springs2);
          state.queue.push(() => {
            resolve(flushUpdateQueue(ctrl, updates2));
          });
          forceUpdate();
        });
      }
    }),
    []
  );
  const ctrls = (0, import_react24.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react24.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react24.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i2 = startIndex; i2 < endIndex; i2++) {
      const ctrl = ctrls.current[i2] || (ctrls.current[i2] = new Controller(null, state.flush));
      const update22 = propsFn ? propsFn(i2, ctrl) : props[i2];
      if (update22) {
        updates[i2] = declareUpdate(update22);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i2) => getSprings(ctrl, updates[i2]));
  const context = (0, import_react24.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const { queue } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i2) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({ default: context });
      }
      const update22 = updates[i2];
      if (update22) {
        replaceRef(ctrl, update22.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update22);
        } else {
          ctrl.start(update22);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x3) => ({ ...x3 }));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(
    1,
    isFn ? props : [props],
    isFn ? deps || [] : deps
  );
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort: sort2,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react27.useMemo)(
    () => propsFn || arguments.length == 3 ? SpringRef() : void 0,
    []
  );
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react27.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useIsomorphicLayoutEffect(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(transitions, (t5) => {
      ref == null ? void 0 : ref.add(t5.ctrl);
      t5.ctrl.ref = ref;
    });
    return () => {
      each(usedTransitions.current, (t5) => {
        if (t5.expired) {
          clearTimeout(t5.expirationId);
        }
        detachRefs(t5.ctrl, ref);
        t5.ctrl.stop(true);
      });
    };
  });
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useIsomorphicLayoutEffect(
    () => each(expired, ({ ctrl, item, key }) => {
      detachRefs(ctrl, ref);
      callProp(onDestroyed, item, key);
    })
  );
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t5, i2) => {
      if (t5.expired) {
        clearTimeout(t5.expirationId);
        expired.push(t5);
      } else {
        i2 = reused[i2] = keys.indexOf(t5.key);
        if (~i2)
          transitions[i2] = t5;
      }
    });
  each(items, (item, i2) => {
    if (!transitions[i2]) {
      transitions[i2] = {
        key: keys[i2],
        item,
        phase: "mount",
        ctrl: new Controller()
      };
      transitions[i2].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i2 = -1;
    const { leave } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t5 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i2 = transitions.indexOf(t5);
        transitions[i2] = { ...t5, item: items[keyIndex] };
      } else if (leave) {
        transitions.splice(++i2, 0, t5);
      }
    });
  }
  if (is.fun(sort2)) {
    transitions.sort((a3, b2) => sort2(a3.item, b2.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = (0, import_react27.useRef)(/* @__PURE__ */ new Map());
  const forceChange = (0, import_react27.useRef)(false);
  each(transitions, (t5, i2) => {
    const key = t5.key;
    const prevPhase = t5.phase;
    const p2 = propsFn ? propsFn() : props;
    let to22;
    let phase;
    const propsDelay = callProp(p2.delay || 0, key);
    if (prevPhase == "mount") {
      to22 = p2.enter;
      phase = "enter";
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != "leave") {
        if (isLeave) {
          to22 = p2.leave;
          phase = "leave";
        } else if (to22 = p2.update) {
          phase = "update";
        } else
          return;
      } else if (!isLeave) {
        to22 = p2.enter;
        phase = "enter";
      } else
        return;
    }
    to22 = callProp(to22, t5.item, i2);
    to22 = is.obj(to22) ? inferTo(to22) : { to: to22 };
    if (!to22.config) {
      const config2 = propsConfig || defaultProps.config;
      to22.config = callProp(config2, t5.item, i2, phase);
    }
    delay += trail;
    const payload = {
      ...defaultProps,
      // we need to add our props.delay value you here.
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p2.immediate,
      // This prevents implied resets.
      reset: false,
      // Merge any phase-specific props.
      ...to22
    };
    if (phase == "enter" && is.und(payload.from)) {
      const p22 = propsFn ? propsFn() : props;
      const from = is.und(p22.initial) || prevTransitions ? p22.from : p22.initial;
      payload.from = callProp(from, t5.item, i2);
    }
    const { onResolve } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t22 = transitions2.find((t32) => t32.key === key);
      if (!t22)
        return;
      if (result.cancelled && t22.phase != "update") {
        return;
      }
      if (t22.ctrl.idle) {
        const idle = transitions2.every((t32) => t32.ctrl.idle);
        if (t22.phase == "leave") {
          const expiry = callProp(expires, t22.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t22.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t22.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t32) => t32.expired)) {
          exitingTransitions.current.delete(t22);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t5.ctrl, payload);
    if (phase === "leave" && exitBeforeEnter) {
      exitingTransitions.current.set(t5, { phase, springs, payload });
    } else {
      changes.set(t5, { phase, springs, payload });
    }
  });
  const context = (0, import_react27.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect(() => {
    if (hasContext) {
      each(transitions, (t5) => {
        t5.ctrl.start({ default: context });
      });
    }
  }, [context]);
  each(changes, (_2, t5) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t5.key);
      transitions.splice(ind, 1);
    }
  });
  useIsomorphicLayoutEffect(
    () => {
      each(
        exitingTransitions.current.size ? exitingTransitions.current : changes,
        ({ phase, payload }, t5) => {
          const { ctrl } = t5;
          t5.phase = phase;
          ref == null ? void 0 : ref.add(ctrl);
          if (hasContext && phase == "enter") {
            ctrl.start({ default: context });
          }
          if (payload) {
            replaceRef(ctrl, payload.ref);
            if ((ctrl.ref || ref) && !forceChange.current) {
              ctrl.update(payload);
            } else {
              ctrl.start(payload);
              if (forceChange.current) {
                forceChange.current = false;
              }
            }
          }
        }
      );
    },
    reset ? void 0 : deps
  );
  const renderTransitions = (render) => React22.createElement(React22.Fragment, null, transitions.map((t5, i2) => {
    const { springs } = changes.get(t5) || t5.ctrl;
    const elem = render({ ...springs }, t5.item, t5, i2);
    return elem && elem.type ? React22.createElement(
      elem.type,
      {
        ...elem.props,
        key: is.str(t5.key) || is.num(t5.key) ? t5.key : t5.ctrl.id,
        ref: elem.ref
      }
    ) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, { key, keys = key }, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t5 = prevTransitions && prevTransitions.find(
        (t22) => t22.item === item && t22.phase !== "leave" && !reused.has(t22)
      );
      if (t5) {
        reused.add(t5);
        return t5.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.source = source;
    this.idle = true;
    this._active = /* @__PURE__ */ new Set();
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals_exports.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  // Observe our sources only when we're observed.
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  // Stop observing our sources once we have no observers.
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  /** @internal */
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce(
        (highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),
        0
      );
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self) {
  if (!self.idle) {
    self.idle = true;
    each(getPayload(self), (node) => {
      node.done = true;
    });
    callFluidObservers(self, {
      type: "idle",
      parent: self
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals_exports.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/AnimatedLine/AnimatedLine.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function AnimatedLine({
  immediate,
  fromData,
  toData,
  zeroLineData,
  delay,
  lineGenerator,
  activeLineIndex,
  index: index2,
  strokeWidth,
  strokeDasharray,
  lastY,
  zeroLineY
}) {
  const {
    components: {
      Path: Path2
    },
    animated: animated2
  } = usePolarisVizContext();
  const AnimatedPath = animated2(Path2);
  const springConfig = useSpringConfig({
    shouldAnimate: !immediate,
    animationDelay: immediate ? 0 : delay,
    mountedSpringConfig: LINES_TRANSITION_CONFIG,
    unmountedSpringConfig: LINES_LOAD_ANIMATION_CONFIG
  });
  const mounted = (0, import_react29.useRef)(false);
  const {
    animatedLineShape
  } = useSpring({
    from: {
      cy: mounted.current ? lastY : zeroLineY,
      animatedLineShape: lineGenerator(mounted.current ? fromData.data : zeroLineData)
    },
    to: {
      cy: lastY,
      animatedLineShape: lineGenerator(toData.data)
    },
    ...springConfig
  });
  return (0, import_jsx_runtime3.jsx)(import_react29.Fragment, {
    children: (0, import_jsx_runtime3.jsx)(AnimatedPath, {
      d: animatedLineShape,
      stroke: "white",
      strokeLinejoin: "round",
      strokeLinecap: "round",
      strokeWidth,
      style: {
        ...getColorVisionStylesForActiveIndex({
          activeIndex: activeLineIndex,
          index: index2
        }),
        strokeDasharray
      }
    })
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/AnimatedArea/AnimatedArea.js
var import_react32 = __toESM(require_react());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/Area/Area.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/DefaultArea/DefaultArea.js
var import_react30 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var GRADIENT_ALPHA = 0.25;
function DefaultArea({
  series: {
    areaColor
  },
  areaPath
}) {
  const gradientId = (0, import_react30.useMemo)(() => uniqueId("default-area-gradient"), []);
  const maskId = (0, import_react30.useMemo)(() => uniqueId("default-area-mask"), []);
  const {
    components: {
      Path: Path2,
      Defs,
      Mask
    },
    animated: animated2
  } = usePolarisVizContext();
  const AnimatedPath = animated2(Path2);
  if (areaPath == null || areaColor == null) {
    return null;
  }
  return (0, import_jsx_runtime4.jsxs)(import_react30.Fragment, {
    children: [(0, import_jsx_runtime4.jsxs)(Defs, {
      children: [(0, import_jsx_runtime4.jsx)(Mask, {
        id: maskId,
        children: (0, import_jsx_runtime4.jsx)(AnimatedPath, {
          d: areaPath,
          fill: `url(#${maskId}-gradient)`
        })
      }), (0, import_jsx_runtime4.jsx)(LinearGradientWithStops, {
        id: `${maskId}-gradient`,
        x1: "0%",
        x2: "100%",
        y1: "0%",
        y2: "0%",
        gradient: [{
          offset: 0,
          color: "black"
        }, {
          offset: 10,
          color: "white"
        }, {
          offset: 90,
          color: "white"
        }, {
          offset: 100,
          color: "black"
        }]
      }), (0, import_jsx_runtime4.jsx)(LinearGradientWithStops, {
        id: gradientId,
        x1: "0%",
        x2: "0%",
        y1: "0%",
        y2: "100%",
        gradient: [{
          offset: 0,
          stopOpacity: GRADIENT_ALPHA,
          color: areaColor
        }, {
          offset: 100,
          stopOpacity: 0,
          color: areaColor
        }]
      })]
    }), (0, import_jsx_runtime4.jsx)(AnimatedPath, {
      d: areaPath,
      fill: `url(#${gradientId})`,
      mask: `url(#${maskId})`,
      strokeWidth: "0",
      stroke: areaColor,
      style: {
        pointerEvents: "none"
      }
    })]
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/SparkArea/SparkArea.js
var import_react31 = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
function getGradientFill(color2) {
  if (color2 == null) {
    return null;
  }
  return getGradientFromColor(color2);
}
var MASK_GRADIENT = [{
  offset: 20,
  color: "white"
}, {
  offset: 100,
  color: "black"
}];
function SparkArea({
  areaPath,
  color: color2
}) {
  const gradientId = (0, import_react31.useMemo)(() => uniqueId("spark-area-gradient"), []);
  const maskId = (0, import_react31.useMemo)(() => uniqueId("spark-area-mask"), []);
  const areaGradientColor = getGradientFill(color2);
  const {
    components: {
      Defs,
      Mask,
      Path: Path2
    },
    animated: animated2
  } = usePolarisVizContext();
  const AnimatedPath = animated2(Path2);
  return areaGradientColor == null ? null : (0, import_jsx_runtime5.jsxs)(import_react31.Fragment, {
    children: [(0, import_jsx_runtime5.jsxs)(Defs, {
      children: [(0, import_jsx_runtime5.jsx)(Mask, {
        id: maskId,
        children: (0, import_jsx_runtime5.jsx)(AnimatedPath, {
          fill: `url(#${maskId}-gradient)`,
          d: areaPath
        })
      }), (0, import_jsx_runtime5.jsx)(LinearGradientWithStops, {
        id: `${maskId}-gradient`,
        y1: "0%",
        y2: "100%",
        gradient: MASK_GRADIENT
      }), (0, import_jsx_runtime5.jsx)(LinearGradientWithStops, {
        id: gradientId,
        y1: "100%",
        y2: "0%",
        gradient: areaGradientColor
      })]
    }), (0, import_jsx_runtime5.jsx)(AnimatedPath, {
      d: areaPath,
      fill: `url(#${gradientId})`,
      mask: `url(#${maskId})`,
      opacity: "0.2"
    })]
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/Area/Area.js
function Area({
  areaPath,
  series,
  type
}) {
  if (series.isComparison === true) {
    return null;
  }
  switch (type) {
    case "spark":
      return (0, import_jsx_runtime6.jsx)(SparkArea, {
        color: series.color,
        areaPath
      });
    default:
    case "default":
      return (0, import_jsx_runtime6.jsx)(DefaultArea, {
        series,
        areaPath
      });
  }
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/components/AnimatedArea/AnimatedArea.js
function AnimatedArea({
  immediate,
  fromData,
  toData,
  zeroLineData,
  delay,
  areaGenerator,
  type
}) {
  const mounted = (0, import_react32.useRef)(false);
  const springConfig = useSpringConfig({
    shouldAnimate: !immediate,
    animationDelay: immediate ? 0 : delay,
    mountedSpringConfig: LINES_TRANSITION_CONFIG,
    unmountedSpringConfig: LINES_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedLineShape
  } = useSpring({
    from: {
      animatedLineShape: areaGenerator(mounted.current ? fromData.data : zeroLineData)
    },
    to: {
      animatedLineShape: areaGenerator(toData.data)
    },
    ...springConfig
  });
  return (0, import_jsx_runtime7.jsx)(Area, {
    areaPath: animatedLineShape,
    series: toData,
    type
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/LineSeries/LineSeries.js
var ANIMATION_DELAY = 200;
var SPARK_STROKE_WIDTH = 1.5;
function LineSeries({
  activeLineIndex = -1,
  data,
  hiddenIndexes = [],
  index: lineSeriesIndex = 0,
  svgDimensions,
  theme,
  type = "default",
  xScale,
  yScale
}) {
  var _data$metadata$relate, _data$metadata, _data$width, _data$strokeDasharray, _data$styleOverride, _data$styleOverride$l;
  const index2 = (_data$metadata$relate = data === null || data === void 0 ? void 0 : (_data$metadata = data.metadata) === null || _data$metadata === void 0 ? void 0 : _data$metadata.relatedIndex) !== null && _data$metadata$relate !== void 0 ? _data$metadata$relate : lineSeriesIndex;
  const {
    // eslint-disable-next-line id-length
    components: {
      Defs,
      Mask,
      G: G2,
      Rect,
      Path: Path2
    },
    animated: animated2
  } = usePolarisVizContext();
  const previousData = usePrevious(data);
  const {
    shouldAnimate
  } = useChartContext();
  const AnimatedGroup = animated2(G2);
  const color2 = data === null || data === void 0 ? void 0 : data.color;
  const selectedTheme = useTheme(theme);
  const isSparkChart = type === "spark";
  const lineGenerator = line_default().x((_2, index3) => xScale == null ? 0 : xScale(index3)).y(({
    value
  }) => yScale(value !== null && value !== void 0 ? value : 0)).defined(({
    value
  }) => value != null);
  const areaGenerator = area_default().x((_2, index3) => xScale(index3)).y0(svgDimensions.height).y1(({
    value
  }) => yScale(value !== null && value !== void 0 ? value : 0)).defined(({
    value
  }) => value != null);
  if (selectedTheme.line.hasSpline) {
    lineGenerator.curve(curveStepRounded);
    areaGenerator.curve(curveStepRounded);
  }
  const lineShape = lineGenerator(data.data);
  const [lastLinePoint] = data.data.filter(({
    value
  }) => value != null).slice(-1);
  const lastLinePointCoordinates = (lastLinePoint === null || lastLinePoint === void 0 ? void 0 : lastLinePoint.value) != null ? {
    x: xScale(data.data.indexOf(lastLinePoint)),
    y: yScale(lastLinePoint.value)
  } : null;
  const areaPath = areaGenerator(data.data);
  const id = (0, import_react33.useMemo)(() => uniqueId("line-series"), []);
  const immediate = !shouldAnimate;
  const lineGradientColor = getGradientFromColor(color2);
  const isSolidLine = data.isComparison !== true;
  const solidLineDelay = isSolidLine ? index2 * ANIMATION_DELAY : 0;
  const delay = immediate ? 0 : solidLineDelay;
  const hasNulls = (data2) => data2 === null || data2 === void 0 ? void 0 : data2.data.some(({
    value
  }) => value == null);
  const dataIsValidForAnimation = !hasNulls(data) && !hasNulls(previousData) && data.data.length === (previousData === null || previousData === void 0 ? void 0 : previousData.data.length);
  const {
    y: lastY = 0
  } = lastLinePointCoordinates !== null && lastLinePointCoordinates !== void 0 ? lastLinePointCoordinates : {};
  const zeroLineData = data.data.map((dataPoint) => ({
    ...dataPoint,
    value: dataPoint.value === null ? null : 0
  }));
  if (lineShape == null || areaPath == null) {
    return null;
  }
  const strokeWidth = isSparkChart ? SPARK_STROKE_WIDTH : (_data$width = data.width) !== null && _data$width !== void 0 ? _data$width : selectedTheme.line.width;
  const strokeDasharray = (_data$strokeDasharray = data.strokeDasharray) !== null && _data$strokeDasharray !== void 0 ? _data$strokeDasharray : "none";
  const PathHoverTargetSize = 15;
  const showArea = selectedTheme.line.hasArea && (data === null || data === void 0 ? void 0 : (_data$styleOverride = data.styleOverride) === null || _data$styleOverride === void 0 ? void 0 : (_data$styleOverride$l = _data$styleOverride.line) === null || _data$styleOverride$l === void 0 ? void 0 : _data$styleOverride$l.hasArea) !== false;
  const zeroLineY = yScale(0);
  return (0, import_jsx_runtime8.jsx)(import_react33.Fragment, {
    children: (0, import_jsx_runtime8.jsxs)(AnimatedGroup, {
      opacity: 1,
      style: {
        display: hiddenIndexes.includes(index2) ? "none" : void 0
      },
      children: [(0, import_jsx_runtime8.jsxs)(Defs, {
        children: [(0, import_jsx_runtime8.jsx)(LinearGradientWithStops, {
          id: `line-${id}`,
          gradient: lineGradientColor,
          gradientUnits: "userSpaceOnUse",
          y1: "100%",
          y2: "0%"
        }), (0, import_jsx_runtime8.jsx)(Mask, {
          id: `mask-${id}`,
          children: dataIsValidForAnimation ? (0, import_jsx_runtime8.jsx)(AnimatedLine, {
            lastY,
            delay,
            lineGenerator,
            strokeWidth,
            immediate,
            index: index2,
            activeLineIndex,
            strokeDasharray,
            fromData: previousData,
            toData: data,
            zeroLineY,
            zeroLineData
          }) : (0, import_jsx_runtime8.jsx)(import_react33.Fragment, {
            children: (0, import_jsx_runtime8.jsx)(Path2, {
              d: lineShape,
              stroke: "white",
              strokeLinejoin: "round",
              strokeLinecap: "round",
              strokeWidth,
              style: {
                ...getColorVisionStylesForActiveIndex({
                  activeIndex: activeLineIndex,
                  index: index2
                }),
                strokeDasharray,
                strokeLinecap: "round"
              }
            })
          })
        })]
      }), showArea && (dataIsValidForAnimation ? (0, import_jsx_runtime8.jsx)(AnimatedArea, {
        areaGenerator,
        fromData: previousData,
        toData: data,
        zeroLineData,
        type,
        delay,
        immediate
      }) : (0, import_jsx_runtime8.jsx)(Area, {
        series: data,
        areaPath,
        type
      })), (0, import_jsx_runtime8.jsx)(Rect, {
        x: "0",
        y: (strokeWidth + SHAPE_ANIMATION_HEIGHT_BUFFER) * -1,
        width: svgDimensions.width,
        height: svgDimensions.height + strokeWidth * 2 + SHAPE_ANIMATION_HEIGHT_BUFFER,
        fill: data.isComparison ? selectedTheme.seriesColors.comparison : `url(#line-${id})`,
        mask: `url(#mask-${`${id}`})`,
        style: {
          pointerEvents: "none"
        }
      }), (0, import_jsx_runtime8.jsx)(Path2, {
        d: lineShape,
        strokeWidth: PathHoverTargetSize,
        stroke: "transparent",
        fill: "none",
        ...getColorVisionEventAttrs({
          type: COLOR_VISION_SINGLE_ITEM,
          index: index2
        })
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/PolarisVizProvider/PolarisVizProvider.js
var import_react34 = __toESM(require_react());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
function PolarisVizProvider({
  children,
  defaultTheme = DEFAULT_THEME_NAME,
  themes,
  components,
  animated: animated2,
  onError
}) {
  const value = (0, import_react34.useMemo)(() => {
    return {
      components: {
        ...DEFAULT_COMPONENTS,
        ...components
      },
      themes: createThemes({
        Dark: DARK_THEME,
        Light: LIGHT_THEME,
        Print: PRINT_THEME,
        ...themes
      }),
      animated: animated2,
      defaultTheme,
      onError
    };
  }, [themes, components, animated2, defaultTheme, onError]);
  return (0, import_jsx_runtime9.jsx)(PolarisVizContext.Provider, {
    value,
    children
  });
}

// node_modules/@shopify/polaris-viz-core/build/esm/components/SparkBarSeries/SparkBarSeries.js
var import_react35 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
function SparkBarSeries({
  data,
  targetLine,
  height,
  shouldAnimate,
  useTransition: useTransition2,
  width,
  theme
}) {
  const selectedTheme = useTheme(theme);
  const [seriesColor] = getSeriesColors(1, selectedTheme);
  const {
    // eslint-disable-next-line id-length
    components: {
      Defs,
      Mask,
      G: G2,
      Rect,
      Line
    },
    animated: animated2
  } = usePolarisVizContext();
  const AnimatedG = animated2(G2);
  const id = (0, import_react35.useMemo)(() => uniqueId("sparkbar-series"), []);
  const clipId = (0, import_react35.useMemo)(() => uniqueId("sparkbar-series-clip"), []);
  const {
    dataWithIndex,
    color: color2,
    getBarHeight,
    strokeDashoffset,
    xScale,
    yScale,
    barWidth,
    targetLineYPosition,
    targetLineX1,
    targetLineX2
  } = useSparkBar({
    data,
    height,
    width,
    seriesColor,
    targetLine
  });
  const transitions = useTransition2(dataWithIndex, {
    key: ({
      index: index2
    }) => index2,
    from: {
      height: 0
    },
    leave: {
      height: 0
    },
    enter: ({
      value: {
        value
      }
    }) => ({
      height: getBarHeight(value == null ? 0 : value)
    }),
    update: ({
      value: {
        value
      }
    }) => ({
      height: getBarHeight(value == null ? 0 : value)
    }),
    default: {
      immediate: !shouldAnimate
    },
    trail: shouldAnimate ? getAnimationTrail(dataWithIndex.length) : 0,
    config: BARS_TRANSITION_CONFIG
  });
  const hasTargetLine = targetLine != null && targetLine.value != null;
  return (0, import_jsx_runtime10.jsxs)(import_react35.Fragment, {
    children: [(0, import_jsx_runtime10.jsx)(Defs, {
      children: (0, import_jsx_runtime10.jsx)(LinearGradientWithStops, {
        id,
        gradient: color2,
        gradientUnits: "userSpaceOnUse",
        y1: "100%",
        y2: "0%"
      })
    }), (0, import_jsx_runtime10.jsx)(Mask, {
      id: clipId,
      children: (0, import_jsx_runtime10.jsx)(AnimatedG, {
        opacity: hasTargetLine ? "0.9" : "1",
        children: transitions(({
          height: barHeight
        }, item, _transition, index2) => {
          var _item$value$value;
          const xPosition = xScale(index2.toString());
          const height2 = shouldAnimate ? barHeight : getBarHeight((_item$value$value = item.value.value) !== null && _item$value$value !== void 0 ? _item$value$value : 0);
          return (0, import_jsx_runtime10.jsx)(Bar, {
            borderRadius: selectedTheme.bar.borderRadius,
            x: xPosition == null ? 0 : xPosition,
            yScale,
            value: item.value.value,
            width: barWidth,
            height: height2,
            fill: "white"
          }, index2);
        })
      })
    }), (0, import_jsx_runtime10.jsx)(Rect, {
      fill: `url(#${id})`,
      width,
      height,
      mask: `url(#${clipId})`
    }), hasTargetLine ? (0, import_jsx_runtime10.jsx)(Line, {
      stroke: selectedTheme.seriesColors.comparison,
      strokeWidth: STROKE_WIDTH,
      x1: targetLineX1,
      x2: targetLineX2,
      y1: targetLineYPosition,
      y2: targetLineYPosition,
      strokeLinecap: "round",
      opacity: "0.9",
      strokeDashoffset,
      strokeDasharray: STROKE_DOT_ARRAY_WIDTH
    }) : null]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getTooltipContentRenderer.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/formatDataForTooltip.js
function formatDataForTooltip({
  data,
  tooltipOptions
}) {
  const {
    keyFormatter,
    valueFormatter,
    titleFormatter
  } = {
    keyFormatter: (key) => `${key}`,
    valueFormatter: (value) => `${value}`,
    titleFormatter: (title) => `${title}`,
    ...tooltipOptions
  };
  const formattedData = data.data.map((data2) => {
    const shape = data2.shape;
    const noNullData = data2.data.filter((data3) => {
      return data3.value !== null;
    });
    return {
      shape,
      data: noNullData.map((values) => {
        return {
          ...values,
          key: keyFormatter(values.key),
          value: valueFormatter(values.value)
        };
      })
    };
  });
  return {
    formattedData,
    title: data.title ? titleFormatter(data.title) : void 0
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/TooltipContent.js
var import_react41 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/hooks/useGetLongestLabelFromData.js
function useGetLongestLabelFromData(tooltipData = []) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const sizes = [];
  if (tooltipData.length === 0) {
    return {
      keyWidth: 0,
      valueWidth: 0
    };
  }
  tooltipData.forEach(({
    data
  }) => {
    if (!data.length) {
      sizes.push({
        width: 0,
        keyWidth: 0,
        valueWidth: 0
      });
    } else {
      data.forEach(({
        key,
        value
      }) => {
        const keyWidth2 = estimateStringWidth(key, characterWidths2);
        const valueWidth2 = estimateStringWidth(value, characterWidths2);
        sizes.push({
          width: keyWidth2 + valueWidth2,
          keyWidth: keyWidth2,
          valueWidth: valueWidth2
        });
      });
    }
  });
  const {
    keyWidth,
    valueWidth
  } = sizes.reduce((prev, cur) => {
    if (prev.width < cur.width) {
      return cur;
    }
    return prev;
  }, sizes[0]);
  return {
    keyWidth,
    valueWidth
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/constants.js
var SPACE_BETWEEN_LABEL_AND_VALUE = 48;
var TITLE_MARGIN = 10;

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/TooltipContent.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipContentContainer/TooltipContentContainer.js
var import_react39 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/constants.js
var DEFAULT_LEGEND_HEIGHT = 24;
var DEFAULT_LEGEND_WIDTH = 29;
var BAR_CONTAINER_TEXT_HEIGHT = 48;
var ANNOTATIONS_LABELS_OFFSET = 10;
var Y_AXIS_LABEL_OFFSET = 2;
var TOOLTIP_BG_OPACITY = 0.8;
var COLLAPSED_ANNOTATIONS_COUNT = 3;
var PREVIEW_ICON_SIZE = 12;
var ARC_PAD_ANGLE = 0.02;
var ZERO_VALUE_LINE_HEIGHT = 6;
var NEGATIVE_ZERO_LINE_OFFSET = 10;
var IS_DEVELOPMENT = true;
var IS_TEST = false;
var WARN_FOR_DEVELOPMENT = IS_DEVELOPMENT && !IS_TEST;
var HOVER_TARGET_ZONE = 48;
var CROSSHAIR_ID = "Crosshair";
var DEFAULT_ANIMATION_DELAY = 100;

// node_modules/@shopify/polaris-viz/build/esm/hooks/useBrowserCheck.js
var import_react36 = __toESM(require_react());
function useBrowserCheck() {
  var _navigator;
  const userAgent = (_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent;
  return (0, import_react36.useMemo)(() => {
    const isFirefox = userAgent.includes("Firefox");
    const isChromium = userAgent.includes("Chrome");
    const isSafari = userAgent.includes("Safari") && !isChromium;
    return {
      isFirefox,
      isChromium,
      isSafari
    };
  }, [userAgent]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipContentContainer/TooltipContentContainer.scss.js
var styles = {
  "Container": "_Container_no9uw_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipContentContainer/TooltipContentContainer.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/ColorVisionA11y/useWatchColorVisionEvents.js
var import_react38 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/ColorVisionA11y/utilities.js
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function getDataSetItem(dataset, name2) {
  return dataset[`${COLOR_VISION_EVENT.camelCaseName}${capitalize(name2)}`];
}
function getEventName(id, type) {
  return `${id}:${COLOR_VISION_EVENT.name}:${type}`;
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useCallbackRef.js
var import_react37 = __toESM(require_react());
function useCallbackRef(callback) {
  const callbackRef = (0, import_react37.useRef)(null);
  if (!callbackRef.current) {
    callbackRef.current = Proxy.create();
  }
  Proxy.update(callbackRef.current, callback);
  return callbackRef.current;
}
var Proxy = {
  create() {
    const proxy = (...args) => {
      return proxy.callback(...args);
    };
    return proxy;
  },
  update(proxy, callback) {
    proxy.callback = callback;
  }
};

// node_modules/@shopify/polaris-viz/build/esm/hooks/ColorVisionA11y/useWatchColorVisionEvents.js
function useWatchColorVisionEvents({
  type,
  onIndexChange
}) {
  const onIndexChangeCallback = useCallbackRef(onIndexChange);
  const {
    id
  } = useChartContext();
  (0, import_react38.useEffect)(() => {
    if (!id) {
      return;
    }
    const eventName = getEventName(id, type);
    window.addEventListener(eventName, onIndexChangeCallback);
    return () => {
      window.removeEventListener(eventName, onIndexChangeCallback);
    };
  }, [id, type, onIndexChangeCallback]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipContentContainer/TooltipContentContainer.js
function TooltipContentContainer({
  children,
  maxWidth,
  theme
}) {
  const {
    isFirefox
  } = useBrowserCheck();
  const selectedTheme = useTheme(theme);
  const [activeColorVisionIndex, setActiveIndex] = (0, import_react39.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveIndex(detail.index)
  });
  return (0, import_jsx_runtime11.jsx)("div", {
    className: styles.Container,
    style: {
      background: changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : TOOLTIP_BG_OPACITY),
      maxWidth,
      fontFamily: FONT_FAMILY
    },
    children: children({
      activeColorVisionIndex
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipTitle/TooltipTitle.scss.js
var styles2 = {
  "Title": "_Title_7es5w_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipTitle/TooltipTitle.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
function TooltipTitle({
  children,
  theme
}) {
  const selectedTheme = useTheme(theme);
  return (0, import_jsx_runtime12.jsx)("p", {
    className: styles2.Title,
    style: {
      color: selectedTheme.tooltip.titleColor
    },
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipSeries/TooltipSeries.scss.js
var styles3 = {
  "Series": "_Series_1mcj1_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipSeries/TooltipSeries.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
function TooltipSeries({
  children,
  isEmpty = false
}) {
  if (isEmpty) {
    return null;
  }
  return (0, import_jsx_runtime13.jsx)("div", {
    className: styles3.Series,
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipSeriesName/TooltipSeriesName.scss.js
var styles4 = {
  "AxisTitle": "_AxisTitle_ahut2_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipSeriesName/TooltipSeriesName.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
function TooltipSeriesName({
  children,
  theme
}) {
  const selectedTheme = useTheme(theme);
  return (0, import_jsx_runtime14.jsx)("p", {
    className: styles4.AxisTitle,
    style: {
      color: selectedTheme.tooltip.titleColor,
      fontSize: FONT_SIZE
    },
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipRow/TooltipRow.scss.js
var styles5 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Row": "_Row_vhmy9_144",
  "Value": "_Value_vhmy9_152",
  "Truncate": "_Truncate_vhmy9_158"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipRow/TooltipRow.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/SeriesIcon/SeriesIcon.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/createCssGradient.js
var createCSSGradient = (gradient, angle) => {
  const gradientStops = gradient.map(({
    color: color2,
    offset
  }) => `${color2} ${offset}%`);
  return `linear-gradient(${angle}deg, ${gradientStops.join(",")})`;
};

// node_modules/@shopify/polaris-viz/build/esm/utilities/getCSSBackgroundFromColor.js
function getCSSBackgroundFromColor(color2, angle = 90) {
  return isGradientType(color2) ? createCSSGradient(color2, angle) : color2;
}

// node_modules/@shopify/polaris-viz/build/esm/components/SquareColorPreview/SquareColorPreview.scss.js
var styles6 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "ColorPreview": "_ColorPreview_t4h1x_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SquareColorPreview/SquareColorPreview.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var ANGLE = 305;
function SquareColorPreview({
  color: color2
}) {
  const background = getCSSBackgroundFromColor(color2, ANGLE);
  return (0, import_jsx_runtime15.jsx)("span", {
    className: styles6.ColorPreview,
    style: {
      background,
      height: PREVIEW_ICON_SIZE,
      width: PREVIEW_ICON_SIZE
    }
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LinePreview/LinePreview.js
var import_react40 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/LinePreview/constants.js
var DOTTED_LINE_PREVIEW_CY = 1;
var DOTTED_LINE_PREVIEW_RADIUS = 1;
var DOT_SPACING = 5;

// node_modules/@shopify/polaris-viz/build/esm/components/LinePreview/LinePreview.scss.js
var styles7 = {
  "Container": "_Container_8b5v1_1",
  "SVG": "_SVG_8b5v1_5"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LinePreview/LinePreview.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var HEIGHT = 2;
var WIDTH = 2;
function LinePreview({
  color: color2,
  lineStyle,
  width = WIDTH,
  strokeDasharray = "none"
}) {
  const gradientId = (0, import_react40.useRef)(uniqueId("linePreviewGradient"));
  const linePreviewColor = isGradientType(color2) ? `url(#${gradientId.current})` : color2;
  return (0, import_jsx_runtime16.jsx)("span", {
    className: styles7.Container,
    style: {
      height: HEIGHT,
      width: PREVIEW_ICON_SIZE
    },
    children: (0, import_jsx_runtime16.jsxs)("svg", {
      className: styles7.SVG,
      height: `${HEIGHT}px`,
      viewBox: `0 0 ${PREVIEW_ICON_SIZE} ${HEIGHT}`,
      width: `${PREVIEW_ICON_SIZE}px`,
      xmlns: XMLNS,
      children: [isGradientType(color2) ? (0, import_jsx_runtime16.jsx)("defs", {
        children: (0, import_jsx_runtime16.jsx)(LinearGradientWithStops, {
          id: gradientId.current,
          gradient: color2,
          x1: "0%",
          x2: "100%",
          y1: "0%",
          y2: "0%",
          gradientUnits: "userSpaceOnUse"
        })
      }) : null, getLinePreview({
        color: linePreviewColor,
        lineStyle,
        width,
        strokeDasharray
      })]
    })
  });
}
function getLinePreview({
  color: color2,
  lineStyle,
  width,
  strokeDasharray
}) {
  switch (lineStyle) {
    case "dotted":
      return (0, import_jsx_runtime16.jsx)("g", {
        fill: color2,
        children: [...Array(3)].map((_2, index2) => {
          return (0, import_jsx_runtime16.jsx)("circle", {
            cx: DOTTED_LINE_PREVIEW_CY + index2 * DOT_SPACING,
            cy: DOTTED_LINE_PREVIEW_CY,
            r: DOTTED_LINE_PREVIEW_RADIUS
          }, index2);
        })
      });
    default:
      return (0, import_jsx_runtime16.jsx)("path", {
        d: `M1 1 H${PREVIEW_ICON_SIZE}`,
        stroke: color2,
        strokeLinejoin: "round",
        strokeLinecap: "round",
        strokeWidth: width,
        strokeDasharray
      });
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/SeriesIcon/SeriesIcon.js
function SeriesIcon({
  color: color2,
  isComparison = false,
  shape = "Bar"
}) {
  const selectedTheme = useTheme();
  switch (shape) {
    case "Line": {
      const style6 = isComparison ? "dotted" : "solid";
      const lineColor = isComparison ? selectedTheme.seriesColors.comparison : color2;
      return (0, import_jsx_runtime17.jsx)(LinePreview, {
        color: lineColor,
        lineStyle: style6
      });
    }
    case "Bar":
    default:
      return (0, import_jsx_runtime17.jsx)(SquareColorPreview, {
        color: color2
      });
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/components/TooltipRow/TooltipRow.js
function TooltipRow({
  activeIndex,
  color: color2,
  index: index2,
  isComparison = false,
  isHidden: isHidden2 = false,
  label,
  renderSeriesIcon,
  shape,
  value
}) {
  var _renderSeriesIcon;
  const selectedTheme = useTheme();
  if (isHidden2) {
    return null;
  }
  return (0, import_jsx_runtime18.jsxs)("div", {
    className: styles5.Row,
    style: getColorVisionStylesForActiveIndex({
      activeIndex,
      index: index2
    }),
    children: [color2 != null && (0, import_jsx_runtime18.jsx)("div", {
      style: {
        width: PREVIEW_ICON_SIZE
      },
      children: (_renderSeriesIcon = renderSeriesIcon === null || renderSeriesIcon === void 0 ? void 0 : renderSeriesIcon()) !== null && _renderSeriesIcon !== void 0 ? _renderSeriesIcon : (0, import_jsx_runtime18.jsx)(SeriesIcon, {
        color: color2,
        isComparison,
        shape
      })
    }), (0, import_jsx_runtime18.jsx)("span", {
      className: styles5.Truncate,
      style: {
        color: selectedTheme.tooltip.textColor,
        marginRight: TITLE_MARGIN
      },
      children: label
    }), (0, import_jsx_runtime18.jsx)("span", {
      className: styles5.Value,
      style: {
        color: selectedTheme.tooltip.textColor
      },
      children: value
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipContent/TooltipContent.js
var FONT_SIZE_OFFSET = 1.061;
var PREVIEW_WIDTH = 14;
function TooltipContent({
  data,
  theme = DEFAULT_THEME_NAME,
  title
}) {
  const {
    keyWidth,
    valueWidth
  } = useGetLongestLabelFromData(data);
  const leftWidth = keyWidth * FONT_SIZE_OFFSET;
  const rightWidth = valueWidth * FONT_SIZE_OFFSET;
  return (0, import_jsx_runtime19.jsx)(TooltipContentContainer, {
    maxWidth: PREVIEW_WIDTH + leftWidth + SPACE_BETWEEN_LABEL_AND_VALUE + rightWidth,
    theme,
    children: ({
      activeColorVisionIndex
    }) => (0, import_jsx_runtime19.jsxs)(import_react41.Fragment, {
      children: [title != null && (0, import_jsx_runtime19.jsx)(TooltipTitle, {
        theme,
        children: title
      }), data.map(({
        data: series,
        name: name2,
        shape
      }, dataIndex) => {
        const hasName = name2 != null;
        const isEmpty = !hasName && series.length === 0;
        return (0, import_jsx_runtime19.jsxs)(TooltipSeries, {
          isEmpty,
          children: [hasName && (0, import_jsx_runtime19.jsx)(TooltipSeriesName, {
            theme,
            children: name2
          }), series.map(({
            key,
            value,
            color: color2,
            isComparison,
            isHidden: isHidden2
          }, seriesIndex) => {
            const indexOffset = data[dataIndex - 1] ? data[dataIndex - 1].data.length : 0;
            return (0, import_jsx_runtime19.jsx)(TooltipRow, {
              activeIndex: activeColorVisionIndex,
              color: color2,
              index: seriesIndex + indexOffset,
              isComparison,
              isHidden: isHidden2,
              label: key,
              shape,
              value
            }, `row-${seriesIndex}`);
          })]
        }, dataIndex);
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getTooltipContentRenderer.js
function getTooltipContentRenderer({
  tooltipOptions = {},
  theme,
  data
}) {
  return function renderTooltipContent(tooltipData) {
    if ((tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.renderTooltipContent) != null) {
      const {
        renderTooltipContent: renderTooltipContent2,
        ...formatters
      } = tooltipOptions;
      return renderTooltipContent2({
        ...tooltipData,
        dataSeries: data,
        formatters,
        theme
      });
    }
    const {
      title,
      formattedData
    } = formatDataForTooltip({
      data: tooltipData,
      tooltipOptions
    });
    if (formattedData[0].data.length === 0) {
      return null;
    } else {
      return (0, import_jsx_runtime20.jsx)(TooltipContent, {
        data: formattedData,
        theme,
        title
      });
    }
  };
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/fillMissingDataPoints.js
function fillMissingDataPoints(dataSeries, isLinearData) {
  if (isLinearData) {
    const areAnyComparison = dataSeries.some(({
      isComparison
    }) => isComparison === true);
    if (areAnyComparison) {
      return dataSeries;
    }
  }
  const allKeys = /* @__PURE__ */ new Set();
  const dataValueMap = {};
  for (const [index2, {
    data
  }] of dataSeries.entries()) {
    for (const {
      key,
      value
    } of data) {
      allKeys.add(`${key}`);
      if (dataValueMap[index2] == null) {
        dataValueMap[index2] = {};
      }
      dataValueMap[index2][key] = value;
    }
  }
  return dataSeries.map((series, index2) => {
    const newData = [...allKeys].map((key) => {
      var _dataValue$key;
      const dataValue = dataValueMap[index2];
      const fillValue = series.fillValue !== void 0 ? series.fillValue : null;
      return {
        key,
        value: dataValue == null ? null : (_dataValue$key = dataValue[key]) !== null && _dataValue$key !== void 0 ? _dataValue$key : fillValue
      };
    });
    return {
      ...series,
      data: newData
    };
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SparkLineChart/Chart.js
var import_react43 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useThemeSeriesColors.js
var import_react42 = __toESM(require_react());
function getFilteredSeriesCount(series) {
  var _series$filter$length;
  return (_series$filter$length = series.filter((item) => {
    return item.isComparison !== true;
  }).length) !== null && _series$filter$length !== void 0 ? _series$filter$length : 0;
}
function useThemeSeriesColors2(series, selectedTheme) {
  return (0, import_react42.useMemo)(() => {
    const seriesCount = getFilteredSeriesCount(series);
    const seriesColors = getSeriesColors(seriesCount, selectedTheme);
    let lastUsedColorIndex = -1;
    return series.map(({
      color: color2,
      isComparison
    }) => {
      if (isComparison === true) {
        return selectedTheme.seriesColors.comparison;
      }
      if (!color2) {
        lastUsedColorIndex += 1;
        if (lastUsedColorIndex === seriesColors.length) {
          lastUsedColorIndex = 0;
        }
        return seriesColors[lastUsedColorIndex];
      }
      return color2;
    });
  }, [series, selectedTheme]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/SparkLineChart/SparkLineChart.scss.js
var styles8 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "VisuallyHidden": "_VisuallyHidden_1laex_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SparkLineChart/Chart.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var SVG_MARGIN = 2;
function Chart({
  data,
  dimensions,
  accessibilityLabel,
  offsetLeft = 0,
  offsetRight = 0
}) {
  const {
    theme
  } = useChartContext();
  const selectedTheme = useTheme();
  const seriesColors = useThemeSeriesColors2(data, selectedTheme);
  const {
    width,
    height
  } = dimensions !== null && dimensions !== void 0 ? dimensions : {
    height: 0,
    width: 0
  };
  const {
    minXDomain,
    maxXDomain,
    yScale
  } = useSparkLine({
    data,
    height
  });
  return (0, import_jsx_runtime21.jsxs)(import_react43.Fragment, {
    children: [accessibilityLabel ? (0, import_jsx_runtime21.jsx)("span", {
      className: styles8.VisuallyHidden,
      children: accessibilityLabel
    }) : null, (0, import_jsx_runtime21.jsx)("svg", {
      xmlns: XMLNS,
      "aria-hidden": true,
      width,
      height,
      children: data.map((series, index2) => {
        const singleOffsetLeft = series.isComparison ? 0 : offsetLeft;
        const singleOffsetRight = series.isComparison ? 0 : offsetRight;
        const xScale = linear2().range([singleOffsetLeft + SVG_MARGIN, width - singleOffsetRight - SVG_MARGIN]).domain([minXDomain, maxXDomain]);
        const seriesWithColor = {
          color: seriesColors[index2],
          strokeDasharray: series.isComparison ? STROKE_DOT_ARRAY_WIDTH : "none",
          ...series
        };
        return (0, import_jsx_runtime21.jsx)("g", {
          children: (0, import_jsx_runtime21.jsx)(LineSeries, {
            index: index2,
            xScale,
            yScale,
            data: seriesWithColor,
            svgDimensions: {
              height,
              width
            },
            theme,
            type: "spark"
          }, index2)
        }, index2);
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SparkLineChart/SparkLineChart.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/ChartContainer.js
var import_react60 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getChartId.js
function getChartId(id) {
  return `chart_${id !== null && id !== void 0 ? id : ""}`;
}

// node_modules/@shopify/polaris-viz/build/esm/data/character-widths.json.js
var $ = 7.56;
var A2 = 8.09;
var B2 = 7.89;
var C2 = 8.59;
var D2 = 8.72;
var E2 = 7.16;
var F = 6.88;
var G = 8.97;
var H = 8.91;
var I = 3.22;
var J = 6.47;
var K2 = 7.91;
var L = 6.83;
var M = 10.5;
var N = 8.91;
var O = 9.27;
var P = 7.63;
var Q = 9.27;
var R = 7.84;
var S = 7.66;
var T = 7.61;
var U = 8.86;
var V = 8.09;
var W = 11.63;
var X = 8.16;
var Y = 7.88;
var Z = 7.95;
var _ = 7.02;
var a2 = 6.63;
var b = 7.38;
var c = 6.72;
var d = 7.38;
var e = 6.86;
var f = 4.34;
var g = 7.31;
var h = 7.06;
var i = 2.97;
var j = 2.97;
var k2 = 6.52;
var l = 3.05;
var m = 10.45;
var n = 7.02;
var o = 7.09;
var p = 7.33;
var q = 7.31;
var r = 4.58;
var s2 = 6.28;
var t = 4.36;
var u = 7.02;
var v = 6.52;
var w = 9.3;
var x2 = 6.3;
var y2 = 6.52;
var z = 6.47;
var characterWidths = {
  "0": 7.56,
  "1": 5.58,
  "2": 7.25,
  "3": 7.53,
  "4": 7.73,
  "5": 7.42,
  "6": 7.64,
  "7": 6.84,
  "8": 7.67,
  "9": 7.64,
  " ": 3.38,
  "...": 10.69,
  "…": 9.66,
  "": 0,
  "!": 3.73,
  '"': 5.73,
  "#": 7.56,
  $,
  "%": 11.11,
  "&": 8.55,
  "(": 4.59,
  ")": 4.59,
  "*": 5.67,
  ",": 3.56,
  "-": 5.67,
  ".": 3.56,
  "/": 3.66,
  ":": 3.56,
  ";": 3.56,
  "<": 7.56,
  ">": 7.56,
  "?": 6.16,
  "@": 11.02,
  A: A2,
  B: B2,
  C: C2,
  D: D2,
  E: E2,
  F,
  G,
  H,
  I,
  J,
  K: K2,
  L,
  M,
  N,
  O,
  P,
  Q,
  R,
  S,
  T,
  U,
  V,
  W,
  X,
  Y,
  Z,
  "[": 4.59,
  "\\": 3.66,
  "]": 4.59,
  "^": 7.56,
  _,
  "`": 6,
  a: a2,
  b,
  c,
  d,
  e,
  f,
  g,
  h,
  i,
  j,
  k: k2,
  l,
  m,
  n,
  o,
  p,
  q,
  r,
  s: s2,
  t,
  u,
  v,
  w,
  x: x2,
  y: y2,
  z,
  "{": 4.59,
  "|": 3.11,
  "}": 4.59,
  "~": 7.56,
  "": 0,
  "€": 7.56,
  "�": 12.41,
  "‚": 3.56,
  "ƒ": 4.34,
  "„": 5.52,
  "†": 6.23,
  "‡": 6.23,
  "ˆ": 6,
  "‰": 15.63,
  "Š": 7.66,
  "‹": 5.34,
  "Œ": 13.63,
  "Ž": 7.95,
  "‘": 3.56,
  "’": 3.56,
  "“": 5.52,
  "”": 5.52,
  "•": 5.67,
  "–": 7.02,
  "—": 10.5,
  "˜": 6,
  "™": 10.02,
  "š": 6.28,
  "›": 5.34,
  "œ": 11.66,
  "ž": 6.47,
  "Ÿ": 7.88,
  "Ā": 8.09,
  "ā": 6.63,
  "Ă": 8.09,
  "ă": 6.63,
  "Ą": 8.09,
  "ą": 6.63,
  "Ć": 8.59,
  "ć": 6.72,
  "Ĉ": 8.59,
  "ĉ": 6.72,
  "Ċ": 8.59,
  "ċ": 6.72,
  "Č": 8.59,
  "č": 6.72,
  "Ď": 8.72,
  "ď": 8.44,
  "Đ": 9.08,
  "đ": 7.72,
  "Ē": 7.16,
  "ē": 6.86,
  "Ĕ": 7.16,
  "ĕ": 6.86,
  "Ė": 7.16,
  "ė": 6.86,
  "Ę": 7.16,
  "ę": 6.86,
  "Ě": 7.16,
  "ě": 6.86,
  "Ĝ": 8.97,
  "ĝ": 7.31,
  "Ğ": 8.97,
  "ğ": 7.31,
  "Ġ": 8.97,
  "ġ": 7.31,
  "Ģ": 8.97,
  "ģ": 7.31,
  "Ĥ": 8.91,
  "ĥ": 7.06,
  "Ħ": 9.63,
  "ħ": 7.41,
  "Ĩ": 3.22,
  "ĩ": 2.97,
  "Ī": 3.22,
  "ī": 2.97,
  "Ĭ": 3.22,
  "ĭ": 2.97,
  "Į": 3.22,
  "į": 2.97,
  "İ": 3.22,
  "ı": 2.97,
  "Ĳ": 9.67,
  "ĳ": 5.94,
  "Ĵ": 6.47,
  "ĵ": 2.97,
  "Ķ": 7.91,
  "ķ": 6.52,
  "ĸ": 6.53,
  "Ĺ": 6.83,
  "ĺ": 3.05,
  "Ļ": 6.83,
  "ļ": 3.05,
  "Ľ": 6.83,
  "ľ": 4.09,
  "Ŀ": 6.83,
  "ŀ": 4.41,
  "Ł": 6.78,
  "ł": 3.83,
  "Ń": 8.91,
  "ń": 7.02,
  "Ņ": 8.91,
  "ņ": 7.02,
  "Ň": 8.91,
  "ň": 7.02,
  "ŉ": 7.97,
  "Ŋ": 8.91,
  "ŋ": 7.02,
  "Ō": 9.27,
  "ō": 7.09,
  "Ŏ": 9.27,
  "ŏ": 7.09,
  "Ő": 9.27,
  "ő": 7.09,
  "Ŕ": 7.84,
  "ŕ": 4.58,
  "Ŗ": 7.84,
  "ŗ": 4.58,
  "Ř": 7.84,
  "ř": 4.58,
  "Ś": 7.66,
  "ś": 6.28,
  "Ŝ": 7.66,
  "ŝ": 6.28,
  "Ş": 7.66,
  "ş": 6.28,
  "Ţ": 7.61,
  "ţ": 4.36,
  "Ť": 7.61,
  "ť": 4.36,
  "Ŧ": 7.61,
  "ŧ": 4.67,
  "Ũ": 8.86,
  "ũ": 7.02,
  "Ū": 8.86,
  "ū": 7.02,
  "Ŭ": 8.86,
  "ŭ": 7.02,
  "Ů": 8.86,
  "ů": 7.02,
  "Ű": 8.86,
  "ű": 7.02,
  "Ų": 8.86,
  "ų": 7.02,
  "Ŵ": 11.63,
  "ŵ": 9.3,
  "Ŷ": 7.88,
  "ŷ": 6.52,
  "Ź": 7.95,
  "ź": 6.47,
  "Ż": 7.95,
  "ż": 6.47,
  "ſ": 4.34,
  "ƀ": 6.69,
  "Ɓ": 9.25,
  "Ƃ": 8.02,
  "ƃ": 6.69,
  "Ƅ": 8.17,
  "ƅ": 6.73,
  "Ɔ": 8.67,
  "Ƈ": 8.31,
  "ƈ": 6.45,
  "Ɖ": 8.67,
  "Ɗ": 10.08,
  "Ƌ": 8.02,
  "ƌ": 6.69,
  "ƍ": 6.81,
  "Ǝ": 7.16,
  "Ə": 8.83,
  "Ɛ": 7.36,
  "Ƒ": 6.88,
  "Ɠ": 8.44,
  "Ɣ": 7.11,
  "ƕ": 10.92,
  "Ɩ": 2.67,
  "Ɨ": 4.3,
  "Ƙ": 7.91,
  "ƙ": 6.52,
  "ƚ": 4.09,
  "ƛ": 6.66,
  "Ɯ": 12.8,
  "Ɲ": 8.67,
  "ƞ": 6.69,
  "Ɵ": 9.27,
  "Ơ": 9.27,
  "ơ": 7.09,
  "Ƣ": 9.64,
  "ƣ": 7.72,
  "Ƥ": 8.13,
  "ƥ": 7.56,
  "Ʀ": 7.66,
  "Ƨ": 8.02,
  "ƨ": 6,
  "Ʃ": 7.83,
  "ƪ": 6.33,
  "ƫ": 4.5,
  "Ƭ": 7.53,
  "ƭ": 4.5,
  "Ʈ": 7.34,
  "Ư": 8.86,
  "ư": 7.34,
  "Ʊ": 9.06,
  "Ʋ": 8.56,
  "Ƴ": 8.2,
  "ƴ": 7.02,
  "Ƶ": 7.34,
  "ƶ": 5.77,
  "Ʒ": 7.19,
  "Ƹ": 6.59,
  "ƹ": 6,
  "ƺ": 6.22,
  "ƻ": 6.8,
  "Ƽ": 7.59,
  "ƽ": 5.7,
  "ƾ": 5.5,
  "ƿ": 7.27,
  "ǀ": 2.97,
  "ǁ": 5.19,
  "ǂ": 5.58,
  "ǃ": 3.11,
  "Ǆ": 16.67,
  "ǅ": 15.19,
  "ǆ": 13.84,
  "Ǉ": 13.28,
  "ǈ": 9.78,
  "ǉ": 6,
  "Ǌ": 15.38,
  "ǋ": 11.88,
  "ǌ": 9.97,
  "Ǎ": 8.09,
  "ǎ": 6.63,
  "Ǐ": 3.22,
  "ǐ": 2.97,
  "Ǒ": 9.27,
  "ǒ": 7.09,
  "Ǔ": 8.86,
  "ǔ": 7.02,
  "Ǖ": 8.86,
  "ǖ": 7.02,
  "Ǘ": 8.86,
  "ǘ": 7.02,
  "Ǚ": 8.86,
  "ǚ": 7.02,
  "Ǜ": 8.86,
  "ǜ": 7.02,
  "ǝ": 6.98,
  "Ǟ": 8.09,
  "ǟ": 6.63,
  "Ǡ": 8.09,
  "ǡ": 6.63,
  "Ǣ": 11.53,
  "ǣ": 10.84,
  "Ǥ": 9.13,
  "ǥ": 7.63,
  "Ǧ": 8.97,
  "ǧ": 7.31,
  "Ǩ": 7.91,
  "ǩ": 6.52,
  "Ǫ": 9.27,
  "ǫ": 7.09,
  "Ǭ": 9.27,
  "ǭ": 7.09,
  "Ǯ": 7.19,
  "ǯ": 6.92,
  "ǰ": 2.97,
  "Ǳ": 16.67,
  "ǲ": 15.19,
  "ǳ": 13.84,
  "Ǵ": 8.97,
  "ǵ": 7.31,
  "Ƕ": 12.33,
  "Ƿ": 8.02,
  "Ǹ": 8.91,
  "ǹ": 7.02,
  "Ǻ": 8.09,
  "ǻ": 6.63,
  "Ǽ": 11.53,
  "ǽ": 10.84,
  "Ǿ": 9.23,
  "ǿ": 7.09,
  "Ȁ": 8.09,
  "ȁ": 6.63,
  "Ȃ": 8.09,
  "ȃ": 6.63,
  "Ȅ": 7.16,
  "ȅ": 6.86,
  "Ȇ": 7.16,
  "ȇ": 6.86,
  "Ȉ": 3.22,
  "ȉ": 2.97,
  "Ȋ": 3.22,
  "ȋ": 2.97,
  "Ȍ": 9.27,
  "ȍ": 7.09,
  "Ȏ": 9.27,
  "ȏ": 7.09,
  "Ȑ": 7.84,
  "ȑ": 4.58,
  "Ȓ": 7.84,
  "ȓ": 4.58,
  "Ȕ": 8.86,
  "ȕ": 7.02,
  "Ȗ": 8.86,
  "ȗ": 7.02,
  "Ș": 7.66,
  "ș": 6.28,
  "Ț": 7.61,
  "ț": 4.36,
  "Ȝ": 7.97,
  "ȝ": 7.97,
  "Ȟ": 8.91,
  "ȟ": 7.06,
  "Ȣ": 9.27,
  "ȣ": 7.38,
  "Ȥ": 7.27,
  "ȥ": 6.89,
  "Ȧ": 8.09,
  "ȧ": 6.63,
  "Ȩ": 7.16,
  "ȩ": 6.86,
  "Ȫ": 9.27,
  "ȫ": 7.09,
  "Ȭ": 9.27,
  "ȭ": 7.09,
  "Ȯ": 9.27,
  "ȯ": 7.09,
  "Ȱ": 9.27,
  "ȱ": 7.09,
  "Ȳ": 7.88,
  "ȳ": 6.52,
  "ɐ": 6.63,
  "ɑ": 7.38,
  "ɒ": 7.38,
  "ɓ": 7.38,
  "ɔ": 6.72,
  "ɕ": 6.72,
  "ɖ": 7.38,
  "ɗ": 7.38,
  "ɘ": 6.86,
  "ə": 6.98,
  "ɚ": 9.17,
  "ɛ": 6.2,
  "ɜ": 6.2,
  "ɝ": 8.34,
  "ɞ": 7.39,
  "ɟ": 4,
  "ɠ": 7.31,
  "ɡ": 7.31,
  "ɢ": 6.98,
  "ɣ": 6.52,
  "ɤ": 5.97,
  "ɥ": 7.06,
  "ɦ": 7.06,
  "ɧ": 7.06,
  "ɨ": 3.81,
  "ɩ": 3.61,
  "ɪ": 4.63,
  "ɫ": 4.48,
  "ɬ": 4.78,
  "ɭ": 3.05,
  "ɮ": 9.5,
  "ɯ": 10.45,
  "ɰ": 10.45,
  "ɱ": 10.45,
  "ɲ": 7.02,
  "ɳ": 7.02,
  "ɴ": 7.31,
  "ɵ": 7.09,
  "ɶ": 10.72,
  "ɷ": 9.31,
  "ɸ": 8.67,
  "ɹ": 4.58,
  "ɺ": 4.58,
  "ɻ": 4.58,
  "ɼ": 4.58,
  "ɽ": 4.58,
  "ɾ": 3.42,
  "ɿ": 3.42,
  "ʀ": 6.44,
  "ʁ": 6.44,
  "ʂ": 6.28,
  "ʃ": 4.92,
  "ʄ": 5.23,
  "ʅ": 4.92,
  "ʆ": 4.64,
  "ʇ": 4.36,
  "ʈ": 4.36,
  "ʉ": 7.83,
  "ʊ": 7.47,
  "ʋ": 6.78,
  "ʌ": 6.52,
  "ʍ": 9.3,
  "ʎ": 6.52,
  "ʏ": 6.5,
  "ʐ": 6.47,
  "ʑ": 6.64,
  "ʒ": 6.92,
  "ʓ": 6.8,
  "ʔ": 6.14,
  "ʕ": 6.14,
  "ʖ": 6.14,
  "ʗ": 6.72,
  "ʘ": 7.97,
  "ʙ": 6.94,
  "ʚ": 7.39,
  "ʛ": 7.5,
  "ʜ": 7.36,
  "ʝ": 4.61,
  "ʞ": 6.52,
  "ʟ": 5.63,
  "ʠ": 7.31,
  "ʡ": 5.42,
  "ʢ": 5.42,
  "ʣ": 13.34,
  "ʤ": 13.83,
  "ʥ": 13.5,
  "ʦ": 10.64,
  "ʧ": 9.28,
  "ʨ": 11.08,
  "ʩ": 11.34,
  "ʪ": 9.33,
  "ʫ": 9.05,
  "ʬ": 5.81,
  "ʭ": 6.64,
  "ʰ": 5,
  "ʱ": 5,
  "ʲ": 2.09,
  "ʳ": 2.02,
  "ʴ": 3.23,
  "ʵ": 2.66,
  "ʶ": 4.5,
  "ʷ": 6.58,
  "ʸ": 4.61,
  "ʹ": 2.47,
  "ʺ": 4.11,
  "ʻ": 3.13,
  "ʼ": 3.56,
  "ʽ": 2.67,
  "ʾ": 3.09,
  "ʿ": 3.09,
  "ˀ": 4.34,
  "ˁ": 3.34,
  "˂": 3.52,
  "˃": 3.52,
  "˄": 3.52,
  "˅": 3.52,
  "ˇ": 6,
  "ˈ": 2.16,
  "ˉ": 2.67,
  "ˊ": 4,
  "ˋ": 4,
  "ˌ": 2.16,
  "ˍ": 4,
  "ˎ": 4,
  "ˏ": 4,
  "ː": 3.05,
  "ˑ": 3.05,
  "˒": 2.5,
  "˓": 2.5,
  "˔": 3.52,
  "˕": 3.52,
  "˖": 3.52,
  "˗": 4,
  "˘": 6,
  "˙": 6,
  "˚": 6,
  "˛": 6,
  "˝": 0,
  "˞": 2.84,
  "˟": 3.52,
  "ˠ": 4.61,
  "ˡ": 1.34,
  "ˢ": 3,
  "ˣ": 3,
  "ˤ": 4.34,
  "˥": 4.95,
  "˦": 4.95,
  "˧": 4.95,
  "˨": 4.95,
  "˩": 4.95,
  "˪": 3.7,
  "˫": 3.7,
  "ˬ": 4,
  "˭": 4,
  "ˮ": 4,
  "̀": 0,
  "́": 0,
  "̂": 0,
  "̃": 0,
  "̄": 0,
  "̅": 0,
  "̆": 0,
  "̇": 0,
  "̈": 0,
  "̉": 0,
  "̊": 0,
  "̋": 0,
  "̌": 0,
  "̍": 0,
  "̎": 0,
  "̏": 0,
  "̐": 0,
  "̑": 0,
  "̒": 0,
  "̓": 0,
  "̔": 0,
  "̕": 0,
  "̖": 0,
  "̗": 0,
  "̘": 0,
  "̙": 0,
  "̚": 0,
  "̛": 0,
  "̜": 0,
  "̝": 0,
  "̞": 0,
  "̟": 0,
  "̠": 0,
  "̡": 0,
  "̢": 0,
  "̣": 0,
  "̤": 0,
  "̥": 0,
  "̦": 0,
  "̧": 0,
  "̨": 0,
  "̩": 0,
  "̪": 0,
  "̫": 0,
  "̬": 0,
  "̭": 0,
  "̮": 0,
  "̯": 0,
  "̰": 0,
  "̱": 0,
  "̲": 0,
  "̳": 0,
  "̴": 0,
  "̵": 0,
  "̶": 0,
  "̷": 0,
  "̸": 0,
  "̹": 0,
  "̺": 0,
  "̻": 0,
  "̼": 0,
  "̽": 0,
  "̾": 0,
  "̿": 0,
  "̀": 0,
  "́": 0,
  "͂": 0,
  "̓": 0,
  "̈́": 0,
  "ͅ": 0,
  "͆": 0,
  "͇": 0,
  "͈": 0,
  "͉": 0,
  "͊": 0,
  "͋": 0,
  "͌": 0,
  "͍": 0,
  "͎": 0,
  "͠": 0,
  "͡": 0,
  "͢": 0,
  "ʹ": 2.47,
  "͵": 2.67,
  "ͺ": 1.81,
  ";": 3.56,
  "΄": 6,
  "΅": 6,
  "Ά": 8.09,
  "·": 3.56,
  "Έ": 8.72,
  "Ή": 10.48,
  "Ί": 4.78,
  "Ό": 10.03,
  "Ύ": 9.75,
  "Ώ": 10.52,
  "ΐ": 3.61,
  "Α": 8.09,
  "Β": 7.89,
  "Γ": 6.75,
  "Δ": 8.17,
  "Ε": 7.16,
  "Ζ": 7.95,
  "Η": 8.91,
  "Θ": 9.34,
  "Ι": 3.22,
  "Κ": 7.91,
  "Λ": 8.02,
  "Μ": 10.5,
  "Ν": 8.91,
  "Ξ": 7.88,
  "Ο": 9.27,
  "Π": 8.8,
  "Ρ": 7.63,
  "Σ": 7.83,
  "Τ": 7.61,
  "Υ": 7.88,
  "Φ": 10.06,
  "Χ": 8.16,
  "Ψ": 9.83,
  "Ω": 9.33,
  "Ϊ": 3.22,
  "Ϋ": 7.88,
  "ά": 7.45,
  "έ": 6.2,
  "ή": 7.38,
  "ί": 3.61,
  "ΰ": 6.66,
  "α": 7.45,
  "β": 7.27,
  "γ": 6.55,
  "δ": 6.89,
  "ε": 6.2,
  "ζ": 5.39,
  "η": 7.38,
  "θ": 7.08,
  "ι": 3.61,
  "κ": 6.89,
  "λ": 6.66,
  "μ": 7.38,
  "ν": 6.55,
  "ξ": 5.56,
  "ο": 7.09,
  "π": 8.05,
  "ρ": 7.14,
  "ς": 6.48,
  "σ": 7.61,
  "τ": 6.13,
  "υ": 6.66,
  "φ": 8.67,
  "χ": 6.42,
  "ψ": 8.14,
  "ω": 9.16,
  "ϊ": 3.61,
  "ϋ": 6.66,
  "ό": 7.09,
  "ύ": 6.66,
  "ώ": 9.16,
  "ϐ": 11.09,
  "ϑ": 11.09,
  "ϒ": 7.64,
  "ϓ": 10.48,
  "ϔ": 7.64,
  "ϕ": 11.09,
  "ϖ": 10.63,
  "ϗ": 6.69,
  "Ϛ": 7.92,
  "ϛ": 11.09,
  "Ϝ": 6.8,
  "ϝ": 5.58,
  "Ϟ": 6.55,
  "ϟ": 6.14,
  "Ϡ": 8,
  "ϡ": 9.58,
  "Ϣ": 10.69,
  "ϣ": 10,
  "Ϥ": 8.09,
  "ϥ": 6.69,
  "Ϧ": 8.09,
  "ϧ": 6,
  "Ϩ": 8.02,
  "ϩ": 8.02,
  "Ϫ": 7.31,
  "ϫ": 7.16,
  "Ϭ": 8.84,
  "ϭ": 6.66,
  "Ϯ": 5.58,
  "ϯ": 4.92,
  "ϰ": 6.69,
  "ϱ": 7.31,
  "ϲ": 6,
  "ϳ": 2.5,
  "Ѐ": 7.27,
  "Ё": 7.27,
  "Ђ": 10.08,
  "Ѓ": 6.8,
  "Є": 8.83,
  "Ѕ": 7.77,
  "І": 3.33,
  "Ї": 3.33,
  "Ј": 6.58,
  "Љ": 12.83,
  "Њ": 13.39,
  "Ћ": 10.72,
  "Ќ": 8.03,
  "Ѝ": 9.03,
  "Ў": 7.73,
  "Џ": 8.91,
  "А": 8.2,
  "Б": 7.63,
  "В": 8.02,
  "Г": 6.8,
  "Д": 8.91,
  "Е": 7.27,
  "Ж": 12.25,
  "З": 7.36,
  "И": 9.03,
  "Й": 9.03,
  "К": 8.03,
  "Л": 8.47,
  "М": 10.61,
  "Н": 9.03,
  "О": 9.38,
  "П": 8.91,
  "Р": 7.75,
  "С": 8.72,
  "Т": 7.73,
  "У": 7.73,
  "Ф": 9.97,
  "Х": 8.27,
  "Ц": 9.27,
  "Ч": 8.33,
  "Ш": 11.56,
  "Щ": 11.89,
  "Ъ": 9.22,
  "Ы": 10.73,
  "Ь": 7.69,
  "Э": 8.83,
  "Ю": 12.19,
  "Я": 8.06,
  "а": 6.75,
  "б": 7.27,
  "в": 6.58,
  "г": 5.58,
  "д": 7.36,
  "е": 6.98,
  "ж": 9.42,
  "з": 6.33,
  "и": 7.27,
  "й": 7.27,
  "к": 6.53,
  "л": 6.94,
  "м": 9.03,
  "н": 7.17,
  "о": 7.22,
  "п": 7.13,
  "р": 7.45,
  "с": 6.84,
  "т": 6.05,
  "у": 6.64,
  "ф": 8.89,
  "х": 6.42,
  "ц": 7.45,
  "ч": 6.83,
  "ш": 9.81,
  "щ": 10.16,
  "ъ": 7.34,
  "ы": 8.77,
  "ь": 6.2,
  "э": 6.84,
  "ю": 9.56,
  "я": 6.38,
  "ѐ": 6.98,
  "ё": 6.98,
  "ђ": 7.52,
  "ѓ": 5.58,
  "є": 6.84,
  "ѕ": 6.41,
  "і": 3.09,
  "ї": 3.09,
  "ј": 3.08,
  "љ": 10.11,
  "њ": 10.36,
  "ћ": 7.52,
  "ќ": 6.53,
  "ѝ": 7.27,
  "ў": 6.64,
  "џ": 7.13,
  "Ѡ": 10.52,
  "ѡ": 8.25,
  "Ѣ": 9.61,
  "ѣ": 7.11,
  "Ѥ": 12.22,
  "ѥ": 8.83,
  "Ѧ": 8.02,
  "ѧ": 6,
  "Ѩ": 11.41,
  "ѩ": 8.72,
  "Ѫ": 11.23,
  "ѫ": 8.75,
  "Ѭ": 12.52,
  "ѭ": 8.81,
  "Ѯ": 7.23,
  "ѯ": 6.52,
  "Ѱ": 9.98,
  "ѱ": 8.67,
  "Ѳ": 9.38,
  "ѳ": 7.22,
  "Ѵ": 9.17,
  "ѵ": 7,
  "Ѷ": 9.17,
  "ѷ": 7,
  "Ѹ": 15.34,
  "ѹ": 12.69,
  "Ѻ": 9.33,
  "ѻ": 7.38,
  "Ѽ": 10.52,
  "ѽ": 8.25,
  "Ѿ": 10.52,
  "ѿ": 8.25,
  "Ҁ": 8.05,
  "ҁ": 5.86,
  "҂": 7.55,
  "҃": 0,
  "҄": 0,
  "҅": 0,
  "҆": 0,
  "҈": 0,
  "҉": 0,
  "Ҍ": 8.06,
  "ҍ": 6.53,
  "Ҏ": 7.63,
  "ҏ": 7.45,
  "Ґ": 6.8,
  "ґ": 5.58,
  "Ғ": 7.17,
  "ғ": 5.91,
  "Ҕ": 7.88,
  "ҕ": 6.77,
  "Җ": 12.67,
  "җ": 9.83,
  "Ҙ": 7.36,
  "ҙ": 6.33,
  "Қ": 8.45,
  "қ": 6.81,
  "Ҝ": 8.73,
  "ҝ": 7.47,
  "Ҟ": 8.41,
  "ҟ": 6.86,
  "Ҡ": 9.56,
  "ҡ": 7.47,
  "Ң": 9.36,
  "ң": 7.5,
  "Ҥ": 12.44,
  "ҥ": 9.73,
  "Ҧ": 13.11,
  "ҧ": 10.88,
  "Ҩ": 11.69,
  "ҩ": 9.83,
  "Ҫ": 8.72,
  "ҫ": 6.84,
  "Ҭ": 7.73,
  "ҭ": 6.05,
  "Ү": 7.98,
  "ү": 6.52,
  "Ұ": 7.98,
  "ұ": 6.52,
  "Ҳ": 8.53,
  "ҳ": 6.73,
  "Ҵ": 11.03,
  "ҵ": 8.63,
  "Ҷ": 8.66,
  "ҷ": 7.16,
  "Ҹ": 8.67,
  "ҹ": 7.03,
  "Һ": 8.53,
  "һ": 7.19,
  "Ҽ": 10.34,
  "ҽ": 8.61,
  "Ҿ": 10.34,
  "ҿ": 8.61,
  "Ӏ": 3.33,
  "Ӂ": 12.25,
  "ӂ": 9.42,
  "Ӄ": 7.72,
  "ӄ": 6.47,
  "Ӈ": 9.03,
  "ӈ": 7.17,
  "Ӌ": 8.33,
  "ӌ": 6.83,
  "Ӑ": 8.2,
  "ӑ": 6.75,
  "Ӓ": 8.2,
  "ӓ": 6.75,
  "Ӕ": 11.53,
  "ӕ": 10.95,
  "Ӗ": 7.27,
  "ӗ": 6.98,
  "Ә": 8.95,
  "ә": 6.98,
  "Ӛ": 8.95,
  "ӛ": 6.98,
  "Ӝ": 12.25,
  "ӝ": 9.42,
  "Ӟ": 7.36,
  "ӟ": 6.33,
  "Ӡ": 7.19,
  "ӡ": 6.92,
  "Ӣ": 9.03,
  "ӣ": 7.27,
  "Ӥ": 9.03,
  "ӥ": 7.27,
  "Ӧ": 9.38,
  "ӧ": 7.22,
  "Ө": 9.38,
  "ө": 7.22,
  "Ӫ": 9.38,
  "ӫ": 7.22,
  "Ӭ": 8.83,
  "ӭ": 6.84,
  "Ӯ": 7.73,
  "ӯ": 6.64,
  "Ӱ": 7.73,
  "ӱ": 6.64,
  "Ӳ": 7.73,
  "ӳ": 6.64,
  "Ӵ": 8.33,
  "ӵ": 6.83,
  "Ӹ": 10.73,
  "ӹ": 8.77,
  "Ա": 8.86,
  "Բ": 8.5,
  "Գ": 9.11,
  "Դ": 9.47,
  "Ե": 8.5,
  "Զ": 8.83,
  "Է": 7.78,
  "Ը": 8.56,
  "Թ": 10.83,
  "Ժ": 9.31,
  "Ի": 8.69,
  "Լ": 6.83,
  "Խ": 11.64,
  "Ծ": 9.3,
  "Կ": 8.69,
  "Հ": 8.44,
  "Ձ": 9,
  "Ղ": 9.53,
  "Ճ": 8.88,
  "Մ": 10.02,
  "Յ": 8.14,
  "Ն": 9.53,
  "Շ": 8.64,
  "Ո": 8.86,
  "Չ": 8.44,
  "Պ": 10.13,
  "Ջ": 8.83,
  "Ռ": 9.83,
  "Ս": 8.86,
  "Վ": 9.66,
  "Տ": 8.05,
  "Ր": 8.56,
  "Ց": 8.14,
  "Ւ": 4.19,
  "Փ": 10.17,
  "Ք": 8.52,
  "Օ": 9.27,
  "Ֆ": 9.31,
  "ՙ": 3.89,
  "՚": 2.03,
  "՛": 4.3,
  "՜": 4.19,
  "՝": 3.56,
  "՞": 4.13,
  "՟": 3.52,
  "ա": 10.5,
  "բ": 6.95,
  "գ": 7.27,
  "դ": 7.22,
  "ե": 6.95,
  "զ": 7.27,
  "է": 5.8,
  "ը": 6.95,
  "թ": 9.3,
  "ժ": 7.3,
  "ի": 6.95,
  "լ": 3.05,
  "խ": 10.3,
  "ծ": 7,
  "կ": 6.95,
  "հ": 6.95,
  "ձ": 7.27,
  "ղ": 6.95,
  "ճ": 7.16,
  "մ": 7.08,
  "յ": 3.13,
  "ն": 6.88,
  "շ": 6.25,
  "ո": 6.95,
  "չ": 5.05,
  "պ": 10.5,
  "ջ": 6.75,
  "ռ": 6.95,
  "ս": 6.95,
  "վ": 6.95,
  "տ": 10.88,
  "ր": 6.95,
  "ց": 7.2,
  "ւ": 5.09,
  "փ": 10.88,
  "ք": 7.27,
  "օ": 7,
  "ֆ": 9.31,
  "և": 9.08,
  "։": 3.56,
  "֊": 5.67,
  "֑": 0,
  "֒": 0,
  "֓": 0,
  "֔": 0,
  "֕": 0,
  "֖": 0,
  "֗": 0,
  "֘": 0,
  "֙": 0,
  "֚": 0,
  "֛": 0,
  "֜": 0,
  "֝": 0,
  "֞": 0,
  "֟": 0,
  "֠": 0,
  "֡": 0,
  "֣": 0,
  "֤": 0,
  "֥": 0,
  "֦": 0,
  "֧": 0,
  "֨": 0,
  "֩": 0,
  "֪": 0,
  "֫": 0,
  "֬": 0,
  "֭": 0,
  "֮": 0,
  "֯": 0,
  "ְ": 0,
  "ֱ": 0,
  "ֲ": 0,
  "ֳ": 0,
  "ִ": 0,
  "ֵ": 0,
  "ֶ": 0,
  "ַ": 0,
  "ָ": 0,
  "ֹ": 0,
  "ֻ": 0,
  "ּ": 0,
  "ֽ": 0,
  "־": 5.33,
  "ֿ": 0,
  "׀": 5.63,
  "ׁ": 0,
  "ׂ": 0,
  "׃": 6,
  "ׄ": 0,
  "א": 7.78,
  "ב": 7.22,
  "ג": 5.02,
  "ד": 7.36,
  "ה": 7.78,
  "ו": 3.08,
  "ז": 5,
  "ח": 7.95,
  "ט": 8.25,
  "י": 2.95,
  "ך": 6.59,
  "כ": 6.63,
  "ל": 6.52,
  "ם": 8.2,
  "מ": 8.13,
  "ן": 3.08,
  "נ": 4.83,
  "ס": 8.22,
  "ע": 7.3,
  "ף": 7.97,
  "פ": 7.77,
  "ץ": 7.19,
  "צ": 7.03,
  "ק": 7.58,
  "ר": 6.69,
  "ש": 9.39,
  "ת": 8.91,
  "װ": 6.14,
  "ױ": 6.03,
  "ײ": 6,
  "׳": 2.77,
  "״": 4.56,
  "،": 2.92,
  "؛": 3.05,
  "؟": 6.03,
  "ء": 5.06,
  "آ": 2.86,
  "أ": 2.86,
  "ؤ": 5.42,
  "إ": 2.86,
  "ئ": 8.77,
  "ا": 2.86,
  "ب": 10.81,
  "ة": 5.25,
  "ت": 10.81,
  "ث": 10.81,
  "ج": 7.75,
  "ح": 7.75,
  "خ": 7.75,
  "د": 5.89,
  "ذ": 5.89,
  "ر": 4.22,
  "ز": 4.22,
  "س": 12.94,
  "ش": 12.94,
  "ص": 13.67,
  "ض": 13.67,
  "ط": 9.05,
  "ظ": 9.05,
  "ع": 7.14,
  "غ": 7.14,
  "ـ": 3.55,
  "ف": 10.89,
  "ق": 8.19,
  "ك": 9.77,
  "ل": 7.53,
  "م": 6.19,
  "ن": 7.39,
  "ه": 5.25,
  "و": 5.42,
  "ى": 8.77,
  "ي": 8.77,
  "ً": 0,
  "ٌ": 0,
  "ٍ": 0,
  "َ": 0,
  "ُ": 0,
  "ِ": 0,
  "ّ": 0,
  "ْ": 0,
  "ٓ": 0,
  "ٔ": 0,
  "ٕ": 0,
  "٠": 3.66,
  "١": 3.44,
  "٢": 6.19,
  "٣": 7.45,
  "٤": 5.41,
  "٥": 6.31,
  "٦": 5.98,
  "٧": 6.83,
  "٨": 6.83,
  "٩": 6.09,
  "٪": 7.59,
  "٫": 3.89,
  "٬": 3.89,
  "٭": 6.31,
  "ٰ": 0,
  "ٱ": 2.86,
  "ٲ": 2.86,
  "ٳ": 2.86,
  "ٴ": 0,
  "ٵ": 2.91,
  "ٶ": 5.42,
  "ٷ": 5.42,
  "ٸ": 8.77,
  "ٹ": 10.81,
  "ٺ": 10.81,
  "ٻ": 10.81,
  "ټ": 10.81,
  "ٽ": 10.81,
  "پ": 10.81,
  "ٿ": 10.81,
  "ڀ": 10.81,
  "ځ": 7.75,
  "ڂ": 7.75,
  "ڃ": 7.75,
  "ڄ": 7.75,
  "څ": 7.75,
  "چ": 7.75,
  "ڇ": 7.75,
  "ڈ": 5.89,
  "ډ": 5.89,
  "ڊ": 5.89,
  "ڋ": 5.89,
  "ڌ": 5.89,
  "ڍ": 5.89,
  "ڎ": 5.89,
  "ڏ": 5.89,
  "ڐ": 5.89,
  "ڑ": 4.22,
  "ڒ": 4.22,
  "ړ": 4.22,
  "ڔ": 4.14,
  "ڕ": 4.22,
  "ږ": 4.22,
  "ڗ": 4.22,
  "ژ": 4.22,
  "ڙ": 4.22,
  "ښ": 12.94,
  "ڛ": 12.94,
  "ڜ": 12.94,
  "ڝ": 13.67,
  "ڞ": 13.67,
  "ڟ": 9.05,
  "ڠ": 7.14,
  "ڡ": 10.89,
  "ڢ": 10.89,
  "ڣ": 10.89,
  "ڤ": 10.89,
  "ڥ": 10.89,
  "ڦ": 10.89,
  "ڧ": 8.19,
  "ڨ": 8.19,
  "ک": 10.05,
  "ڪ": 12.17,
  "ګ": 10.05,
  "ڬ": 9.77,
  "ڭ": 9.77,
  "ڮ": 9.77,
  "گ": 10.05,
  "ڰ": 10.05,
  "ڱ": 10.05,
  "ڲ": 10.05,
  "ڳ": 10.05,
  "ڴ": 10.05,
  "ڵ": 7.53,
  "ڶ": 7.53,
  "ڷ": 7.53,
  "ڸ": 7.53,
  "ڹ": 7.39,
  "ں": 7.39,
  "ڻ": 7.39,
  "ڼ": 7.39,
  "ڽ": 7.39,
  "ھ": 8.2,
  "ڿ": 7.75,
  "ۀ": 5.25,
  "ہ": 5.25,
  "ۂ": 5.25,
  "ۃ": 5.25,
  "ۄ": 5.42,
  "ۅ": 5.42,
  "ۆ": 5.42,
  "ۇ": 5.42,
  "ۈ": 5.42,
  "ۉ": 5.42,
  "ۊ": 5.42,
  "ۋ": 5.42,
  "ی": 8.77,
  "ۍ": 8.77,
  "ێ": 8.77,
  "ۏ": 5.42,
  "ې": 8.77,
  "ۑ": 8.77,
  "ے": 10.73,
  "ۓ": 10.73,
  "۔": 4.3,
  "ە": 5.25,
  "ۖ": 0,
  "ۗ": 0,
  "ۘ": 0,
  "ۙ": 0,
  "ۚ": 0,
  "ۛ": 0,
  "ۜ": 0,
  "۝": 14.11,
  "۞": 12.27,
  "۟": 0,
  "۠": 0,
  "ۡ": 0,
  "ۢ": 0,
  "ۣ": 0,
  "ۤ": 0,
  "ۥ": 0,
  "ۦ": 0,
  "ۧ": 0,
  "ۨ": 0,
  "۩": 9.59,
  "۪": 0,
  "۫": 0,
  "۬": 0,
  "ۭ": 0,
  "۰": 3.66,
  "۱": 3.44,
  "۲": 6.19,
  "۳": 7.45,
  "۴": 6.73,
  "۵": 6.92,
  "۶": 6.75,
  "۷": 6.83,
  "۸": 6.8,
  "۹": 6.09,
  "ۺ": 12.94,
  "ۻ": 13.67,
  "ۼ": 7.14,
  "۽": 5.06,
  "۾": 6.19,
  "܀": 7.09,
  "܁": 3.58,
  "܂": 3.09,
  "܃": 3.09,
  "܄": 3.09,
  "܅": 6.42,
  "܆": 4.64,
  "܇": 4.64,
  "܈": 4.52,
  "܉": 4.52,
  "܊": 6.95,
  "܋": 11.08,
  "܌": 8.33,
  "܍": 9.11,
  "܏": 0,
  "ܐ": 11.17,
  "ܑ": 0,
  "ܒ": 11.5,
  "ܓ": 13.09,
  "ܔ": 13.09,
  "ܕ": 6.47,
  "ܖ": 6.47,
  "ܗ": 11.17,
  "ܘ": 7.33,
  "ܙ": 3.31,
  "ܚ": 8.42,
  "ܛ": 12,
  "ܜ": 12,
  "ܝ": 2.92,
  "ܞ": 14.64,
  "ܟ": 10.67,
  "ܠ": 7.88,
  "ܡ": 10.63,
  "ܢ": 8.14,
  "ܣ": 10.64,
  "ܤ": 10.64,
  "ܥ": 11.44,
  "ܦ": 10.13,
  "ܧ": 9.58,
  "ܨ": 7.52,
  "ܩ": 10.02,
  "ܪ": 6.47,
  "ܫ": 11.34,
  "ܬ": 8.92,
  "ܰ": 0,
  "ܱ": 0,
  "ܲ": 0,
  "ܳ": 0,
  "ܴ": 0,
  "ܵ": 0,
  "ܶ": 0,
  "ܷ": 0,
  "ܸ": 0,
  "ܹ": 0,
  "ܺ": 0,
  "ܻ": 0,
  "ܼ": 0,
  "ܽ": 0,
  "ܾ": 0,
  "ܿ": 0,
  "݀": 0,
  "݁": 0,
  "݂": 0,
  "݃": 0,
  "݄": 0,
  "݅": 0,
  "݆": 0,
  "݇": 0,
  "݈": 0,
  "݉": 0,
  "݊": 0,
  "ހ": 6.36,
  "ށ": 8.14,
  "ނ": 9.72,
  "ރ": 7.8,
  "ބ": 8.55,
  "ޅ": 6.55,
  "ކ": 6.61,
  "އ": 6.41,
  "ވ": 6.47,
  "މ": 6.22,
  "ފ": 5.39,
  "ދ": 7.61,
  "ތ": 7.8,
  "ލ": 6.92,
  "ގ": 6,
  "ޏ": 8.67,
  "ސ": 12.23,
  "ޑ": 4.69,
  "ޒ": 6.84,
  "ޓ": 8.06,
  "ޔ": 8.75,
  "ޕ": 5.39,
  "ޖ": 7,
  "ޗ": 7.77,
  "ޘ": 7.42,
  "ޙ": 6.36,
  "ޚ": 6.36,
  "ޛ": 7.61,
  "ޜ": 7.8,
  "ޝ": 12.23,
  "ޞ": 12.23,
  "ޟ": 12.23,
  "ޠ": 7.8,
  "ޡ": 7.8,
  "ޢ": 6.47,
  "ޣ": 6.47,
  "ޤ": 6,
  "ޥ": 6.08,
  "ަ": 0,
  "ާ": 0,
  "ި": 0,
  "ީ": 0,
  "ު": 0,
  "ޫ": 0,
  "ެ": 0,
  "ޭ": 0,
  "ޮ": 0,
  "ޯ": 0,
  "ް": 0,
  "ँ": 7.92,
  "ं": 7.92,
  "ः": 11.14,
  "अ": 8.7,
  "आ": 11.97,
  "इ": 6.38,
  "ई": 6.38,
  "उ": 5.7,
  "ऊ": 8.11,
  "ऋ": 9.89,
  "ऌ": 8.59,
  "ऍ": 6.58,
  "ऎ": 6.58,
  "ए": 6.58,
  "ऐ": 6.58,
  "ऑ": 11.97,
  "ऒ": 11.97,
  "ओ": 11.97,
  "औ": 11.97,
  "क": 9.25,
  "ख": 9.52,
  "ग": 6.69,
  "घ": 7.63,
  "ङ": 7.47,
  "च": 7.73,
  "छ": 8.14,
  "ज": 8.91,
  "झ": 9.28,
  "ञ": 8.42,
  "ट": 6.05,
  "ठ": 6.89,
  "ड": 6.53,
  "ढ": 6.31,
  "ण": 9.08,
  "त": 6.69,
  "थ": 7.75,
  "द": 6.28,
  "ध": 7.59,
  "न": 6.16,
  "ऩ": 6.16,
  "प": 6.75,
  "फ": 9.53,
  "ब": 6.81,
  "भ": 7,
  "म": 6.95,
  "य": 7.31,
  "र": 4.83,
  "ऱ": 4.91,
  "ल": 8.56,
  "ळ": 8.8,
  "ऴ": 8.8,
  "व": 6.58,
  "श": 8.63,
  "ष": 6.88,
  "स": 8.17,
  "ह": 6.09,
  "़": 7.92,
  "ऽ": 5.89,
  "ा": 11.2,
  "ि": 11.2,
  "ी": 11.2,
  "ु": 7.92,
  "ू": 7.92,
  "ृ": 7.92,
  "ॄ": 7.92,
  "ॅ": 7.92,
  "ॆ": 7.92,
  "े": 7.92,
  "ै": 7.92,
  "ॉ": 11.2,
  "ॊ": 11.2,
  "ो": 11.2,
  "ौ": 11.2,
  "्": 7.92,
  "ॐ": 14.69,
  "॑": 0,
  "॒": 0,
  "॓": 0,
  "॔": 0,
  "क़": 9.25,
  "ख़": 9.52,
  "ग़": 6.69,
  "ज़": 8.91,
  "ड़": 6.53,
  "ढ़": 6.31,
  "फ़": 9.53,
  "य़": 7.31,
  "ॠ": 9.89,
  "ॡ": 8.59,
  "ॢ": 7.92,
  "ॣ": 7.92,
  "।": 5.73,
  "॥": 8.92,
  "०": 5.59,
  "१": 5.8,
  "२": 5.92,
  "३": 5.86,
  "४": 6.08,
  "५": 6.48,
  "६": 6.34,
  "७": 7.81,
  "८": 5.77,
  "९": 5.73,
  "॰": 6,
  "ঁ": 7.92,
  "ং": 13.17,
  "ঃ": 13.06,
  "অ": 10.72,
  "আ": 14.02,
  "ই": 5.94,
  "ঈ": 7.91,
  "উ": 8.03,
  "ঊ": 8.2,
  "ঋ": 9.03,
  "ঌ": 7.38,
  "এ": 8.48,
  "ঐ": 9.11,
  "ও": 7.22,
  "ঔ": 8.55,
  "ক": 8.3,
  "খ": 7.89,
  "গ": 7.59,
  "ঘ": 7.5,
  "ঙ": 8.25,
  "চ": 6.31,
  "ছ": 7.14,
  "জ": 9.56,
  "ঝ": 9.23,
  "ঞ": 11.39,
  "ট": 6.56,
  "ঠ": 6.53,
  "ড": 8.03,
  "ঢ": 6.58,
  "ণ": 7.3,
  "ত": 8.19,
  "থ": 8.13,
  "দ": 6.58,
  "ধ": 7.3,
  "ন": 7.56,
  "প": 7.86,
  "ফ": 9.02,
  "ব": 6.59,
  "ভ": 8.64,
  "ম": 7.03,
  "য": 6.77,
  "র": 6.59,
  "ল": 8.86,
  "শ": 8.38,
  "ষ": 6.78,
  "স": 7.92,
  "হ": 5.94,
  "়": 7.92,
  "া": 11.2,
  "ি": 11.2,
  "ী": 11.2,
  "ু": 7.92,
  "ূ": 7.92,
  "ৃ": 7.92,
  "ৄ": 7.92,
  "ে": 11.19,
  "ৈ": 11.19,
  "ো": 14.45,
  "ৌ": 14.45,
  "্": 7.92,
  "ৗ": 11.2,
  "ড়": 8.03,
  "ঢ়": 6.58,
  "য়": 6.77,
  "ৠ": 9.03,
  "ৡ": 7.38,
  "ৢ": 7.92,
  "ৣ": 7.92,
  "০": 7.14,
  "১": 6.31,
  "২": 5.75,
  "৩": 8.7,
  "৪": 6.02,
  "৫": 7.31,
  "৬": 7.64,
  "৭": 6.78,
  "৮": 8.33,
  "৯": 7.58,
  "ৰ": 6.64,
  "ৱ": 6.59,
  "৲": 4.97,
  "৳": 7.16,
  "৴": 4.78,
  "৵": 8.19,
  "৶": 7.59,
  "৷": 3.28,
  "৸": 6.8,
  "৹": 6.38,
  "৺": 7.61,
  "ਂ": 8.13,
  "ਅ": 8.48,
  "ਆ": 11.31,
  "ਇ": 9.63,
  "ਈ": 9.63,
  "ਉ": 7.08,
  "ਊ": 7.08,
  "ਏ": 6.69,
  "ਐ": 8.48,
  "ਓ": 7.05,
  "ਔ": 8.48,
  "ਕ": 6.81,
  "ਖ": 6.86,
  "ਗ": 8.72,
  "ਘ": 8.52,
  "ਙ": 6.39,
  "ਚ": 7.14,
  "ਛ": 6.92,
  "ਜ": 7.03,
  "ਝ": 6.42,
  "ਞ": 6.8,
  "ਟ": 6.36,
  "ਠ": 6.89,
  "ਡ": 6.44,
  "ਢ": 7.09,
  "ਣ": 6.73,
  "ਤ": 6.11,
  "ਥ": 6.94,
  "ਦ": 6.83,
  "ਧ": 6.69,
  "ਨ": 6.89,
  "ਪ": 6.67,
  "ਫ": 6.64,
  "ਬ": 6.89,
  "ਭ": 6.44,
  "ਮ": 6.72,
  "ਯ": 8.22,
  "ਰ": 6.42,
  "ਲ": 7.83,
  "ਲ਼": 7.86,
  "ਵ": 6.59,
  "ਸ਼": 6.72,
  "ਸ": 6.72,
  "ਹ": 6.42,
  "਼": 8.13,
  "ਾ": 10.97,
  "ਿ": 11.08,
  "ੀ": 11.08,
  "ੁ": 8.13,
  "ੂ": 8.13,
  "ੇ": 8.13,
  "ੈ": 8.13,
  "ੋ": 8.13,
  "ੌ": 8.13,
  "੍": 8.13,
  "ਖ਼": 6.86,
  "ਗ਼": 8.72,
  "ਜ਼": 7.03,
  "ੜ": 6.22,
  "ਫ਼": 6.64,
  "੦": 6.11,
  "੧": 5.58,
  "੨": 5.95,
  "੩": 5.91,
  "੪": 6.63,
  "੫": 6.78,
  "੬": 6.03,
  "੭": 6.27,
  "੮": 6.78,
  "੯": 6.78,
  "ੰ": 8.13,
  "ੱ": 8.13,
  "ੲ": 6.69,
  "ੳ": 7.08,
  "ੴ": 12.59,
  "ઁ": 7.81,
  "ં": 7.81,
  "ઃ": 10.69,
  "અ": 10.83,
  "આ": 14.08,
  "ઇ": 7.53,
  "ઈ": 7.55,
  "ઉ": 7.75,
  "ઊ": 10.77,
  "ઋ": 10.27,
  "ઍ": 10.83,
  "એ": 10.83,
  "ઐ": 10.83,
  "ઑ": 14.08,
  "ઓ": 14.08,
  "ઔ": 14.08,
  "ક": 6.75,
  "ખ": 9.23,
  "ગ": 8.59,
  "ઘ": 8,
  "ઙ": 6.66,
  "ચ": 8.44,
  "છ": 8.78,
  "જ": 7.61,
  "ઝ": 9.11,
  "ઞ": 8.59,
  "ટ": 5.94,
  "ઠ": 7.25,
  "ડ": 6.06,
  "ઢ": 6.88,
  "ણ": 9.98,
  "ત": 7.03,
  "થ": 8.05,
  "દ": 5.86,
  "ધ": 7.88,
  "ન": 6.47,
  "પ": 6.88,
  "ફ": 6.89,
  "બ": 9.3,
  "ભ": 9.69,
  "મ": 6.92,
  "ય": 7.78,
  "ર": 5.7,
  "લ": 8.03,
  "ળ": 9.34,
  "વ": 7.27,
  "શ": 8.86,
  "ષ": 6.98,
  "સ": 8.8,
  "હ": 7.08,
  "઼": 7.81,
  "ઽ": 6.23,
  "ા": 11.08,
  "િ": 11.08,
  "ી": 11.08,
  "ુ": 7.81,
  "ૂ": 7.81,
  "ૃ": 7.81,
  "ૄ": 7.81,
  "ૅ": 7.81,
  "ે": 7.81,
  "ૈ": 7.81,
  "ૉ": 11.08,
  "ો": 11.08,
  "ૌ": 11.08,
  "્": 7.81,
  "ૐ": 13.36,
  "ૠ": 10.64,
  "૦": 5.86,
  "૧": 6.08,
  "૨": 5.75,
  "૩": 5.77,
  "૪": 6.36,
  "૫": 6.55,
  "૬": 5.81,
  "૭": 7.61,
  "૮": 5.67,
  "૯": 6.16,
  "ଁ": 6.13,
  "ଂ": 9.75,
  "ଃ": 11.02,
  "ଅ": 7.53,
  "ଆ": 9.86,
  "ଇ": 8,
  "ଈ": 8.08,
  "ଉ": 7.97,
  "ଊ": 8.23,
  "ଋ": 8.19,
  "ଌ": 6.09,
  "ଏ": 7.72,
  "ଐ": 9.86,
  "ଓ": 7.67,
  "ଔ": 9.84,
  "କ": 7.94,
  "ଖ": 7.91,
  "ଗ": 7.86,
  "ଘ": 7.78,
  "ଙ": 8.53,
  "ଚ": 7.63,
  "ଛ": 7.72,
  "ଜ": 7.94,
  "ଝ": 7.7,
  "ଞ": 7.81,
  "ଟ": 7.67,
  "ଠ": 8.59,
  "ଡ": 7.72,
  "ଢ": 7.72,
  "ଣ": 7.75,
  "ତ": 7.72,
  "ଥ": 7.53,
  "ଦ": 7.61,
  "ଧ": 6.98,
  "ନ": 7.61,
  "ପ": 7.78,
  "ଫ": 9.47,
  "ବ": 7.63,
  "ଭ": 8.11,
  "ମ": 7.78,
  "ଯ": 8.2,
  "ର": 7.86,
  "ଲ": 8.42,
  "ଳ": 7.94,
  "ଶ": 7.91,
  "ଷ": 7.92,
  "ସ": 7.72,
  "ହ": 7.45,
  "଼": 6.13,
  "ଽ": 4.16,
  "ା": 8.39,
  "ି": 6.13,
  "ୀ": 9.67,
  "ୁ": 6.13,
  "ୂ": 6.13,
  "ୃ": 6.13,
  "େ": 11.53,
  "ୈ": 11.53,
  "ୋ": 13.81,
  "ୌ": 13.81,
  "୍": 6.13,
  "ୖ": 6.13,
  "ୗ": 8.39,
  "ଡ଼": 7.72,
  "ଢ଼": 7.72,
  "ୟ": 8.8,
  "ୠ": 8.23,
  "ୡ": 6.09,
  "୦": 6.88,
  "୧": 6.88,
  "୨": 6.88,
  "୩": 6.88,
  "୪": 6.88,
  "୫": 6.88,
  "୬": 6.88,
  "୭": 6.88,
  "୮": 6.88,
  "୯": 6.88,
  "୰": 6.7,
  "ஂ": 7.53,
  "ஃ": 8.16,
  "அ": 10.83,
  "ஆ": 12.94,
  "இ": 11.31,
  "ஈ": 7.58,
  "உ": 11.47,
  "ஊ": 13.3,
  "எ": 8.17,
  "ஏ": 8.47,
  "ஐ": 9.41,
  "ஒ": 9,
  "ஓ": 9,
  "ஔ": 18.59,
  "க": 8.56,
  "ங": 9.94,
  "ச": 7.55,
  "ஜ": 9.05,
  "ஞ": 11.61,
  "ட": 8.73,
  "ண": 14.89,
  "த": 8.14,
  "ந": 8.02,
  "ன": 11.11,
  "ப": 7.64,
  "ம": 8.03,
  "ய": 8.16,
  "ர": 6.09,
  "ற": 7.75,
  "ல": 9.41,
  "ள": 10.2,
  "ழ": 8.05,
  "வ": 8.8,
  "ஷ": 10.84,
  "ஸ": 12.02,
  "ஹ": 14.22,
  "ா": 13.41,
  "ி": 10.02,
  "ீ": 7.53,
  "ு": 12.42,
  "ூ": 14.06,
  "ெ": 16.25,
  "ே": 14.48,
  "ை": 18.19,
  "ொ": 22.27,
  "ோ": 20.52,
  "ௌ": 26.44,
  "்": 7.53,
  "ௗ": 17.22,
  "௧": 8.56,
  "௨": 7.59,
  "௩": 8.91,
  "௪": 8.09,
  "௫": 8.94,
  "௬": 10.38,
  "௭": 8.17,
  "௮": 10.77,
  "௯": 11.09,
  "௰": 8.66,
  "௱": 8.78,
  "௲": 10.16,
  "ఁ": 12.09,
  "ం": 15.38,
  "ః": 12.45,
  "అ": 10.56,
  "ఆ": 10.28,
  "ఇ": 9.31,
  "ఈ": 12.13,
  "ఉ": 10.77,
  "ఊ": 14.7,
  "ఋ": 17.97,
  "ఌ": 11.98,
  "ఎ": 9.19,
  "ఏ": 9.19,
  "ఐ": 9.69,
  "ఒ": 9.02,
  "ఓ": 9.02,
  "ఔ": 9.28,
  "క": 6.2,
  "ఖ": 10.81,
  "గ": 7.2,
  "ఘ": 13.27,
  "ఙ": 9.23,
  "చ": 9.66,
  "ఛ": 9.66,
  "జ": 9.19,
  "ఝ": 15.77,
  "ఞ": 12.31,
  "ట": 10.2,
  "ఠ": 7.45,
  "డ": 9.84,
  "ఢ": 9.84,
  "ణ": 10,
  "త": 9.83,
  "థ": 9.8,
  "ద": 9.8,
  "ధ": 9.8,
  "న": 9.13,
  "ప": 9.17,
  "ఫ": 9.17,
  "బ": 9.78,
  "భ": 9.78,
  "మ": 13.3,
  "య": 15.77,
  "ర": 7.45,
  "ఱ": 10.61,
  "ల": 9.28,
  "ళ": 7.78,
  "వ": 9.14,
  "శ": 6.69,
  "ష": 9.14,
  "స": 9.16,
  "హ": 12.98,
  "ా": 11.84,
  "ి": 7.92,
  "ీ": 7.92,
  "ు": 12.11,
  "ూ": 15.13,
  "ృ": 13.03,
  "ౄ": 16.66,
  "ె": 7.92,
  "ే": 7.92,
  "ై": 7.92,
  "ొ": 7.92,
  "ో": 7.92,
  "ౌ": 11.92,
  "్": 7.92,
  "ౕ": 7.92,
  "ౖ": 7.92,
  "ౠ": 21.98,
  "ౡ": 16.16,
  "౦": 6.97,
  "౧": 6.83,
  "౨": 8.41,
  "౩": 6,
  "౪": 7.05,
  "౫": 7.77,
  "౬": 5.48,
  "౭": 6.2,
  "౮": 7.09,
  "౯": 5.48,
  "ಂ": 13.34,
  "ಃ": 10.41,
  "ಅ": 10.36,
  "ಆ": 10.09,
  "ಇ": 8.55,
  "ಈ": 12.13,
  "ಉ": 14.67,
  "ಊ": 19.17,
  "ಋ": 14.3,
  "ಌ": 10.16,
  "ಎ": 9.45,
  "ಏ": 9.45,
  "ಐ": 9.69,
  "ಒ": 9.31,
  "ಓ": 9.31,
  "ಔ": 9.34,
  "ಕ": 6.89,
  "ಖ": 10.2,
  "ಗ": 7.78,
  "ಘ": 11.95,
  "ಙ": 9.31,
  "ಚ": 9.58,
  "ಛ": 10.13,
  "ಜ": 9.31,
  "ಝ": 16.56,
  "ಞ": 11.59,
  "ಟ": 9.78,
  "ಠ": 7.81,
  "ಡ": 9.22,
  "ಢ": 9.22,
  "ಣ": 10.38,
  "ತ": 7.47,
  "ಥ": 9.19,
  "ದ": 9.19,
  "ಧ": 9.19,
  "ನ": 8.55,
  "ಪ": 9.52,
  "ಫ": 9.52,
  "ಬ": 9.61,
  "ಭ": 9.67,
  "ಮ": 13.88,
  "ಯ": 16.05,
  "ರ": 7.81,
  "ಱ": 10.72,
  "ಲ": 9.11,
  "ಳ": 8.53,
  "ವ": 9.53,
  "ಶ": 7.56,
  "ಷ": 9.63,
  "ಸ": 8.52,
  "ಹ": 9.63,
  "ಾ": 12.13,
  "ಿ": 10.66,
  "ೀ": 15.56,
  "ು": 11.11,
  "ೂ": 15.69,
  "ೃ": 8.22,
  "ೄ": 12.67,
  "ೆ": 6.73,
  "ೇ": 11.64,
  "ೈ": 8.94,
  "ೊ": 15.69,
  "ೋ": 20.59,
  "ೌ": 11.91,
  "್": 10.5,
  "ೕ": 11.64,
  "ೖ": 8.94,
  "ೞ": 10.44,
  "ೠ": 18.84,
  "ೡ": 15.44,
  "೦": 8.27,
  "೧": 8.27,
  "೨": 8.27,
  "೩": 8.27,
  "೪": 8.27,
  "೫": 8.27,
  "೬": 8.27,
  "೭": 8.27,
  "೮": 8.27,
  "೯": 8.27,
  "ം": 4.63,
  "ഃ": 3.41,
  "അ": 14.88,
  "ആ": 16.47,
  "ഇ": 10.8,
  "ഈ": 19.56,
  "ഉ": 7.64,
  "ഊ": 16.34,
  "ഋ": 9.64,
  "ഌ": 11.98,
  "എ": 13.36,
  "ഏ": 13.36,
  "ഐ": 19.59,
  "ഒ": 7.64,
  "ഓ": 12.59,
  "ഔ": 16.23,
  "ക": 10.63,
  "ഖ": 9.59,
  "ഗ": 9.03,
  "ഘ": 14.47,
  "ങ": 11.64,
  "ച": 9.97,
  "ഛ": 13.91,
  "ജ": 9.58,
  "ഝ": 17.34,
  "ഞ": 15.09,
  "ട": 6.22,
  "ഠ": 6.97,
  "ഡ": 13.13,
  "ഢ": 13.52,
  "ണ": 14.91,
  "ത": 10.47,
  "ഥ": 8.84,
  "ദ": 6.67,
  "ധ": 10.08,
  "ന": 10.08,
  "പ": 8.56,
  "ഫ": 12.33,
  "ബ": 13.73,
  "ഭ": 6.95,
  "മ": 6.97,
  "യ": 10.59,
  "ര": 7.34,
  "റ": 6.86,
  "ല": 9.22,
  "ള": 7.81,
  "ഴ": 6.91,
  "വ": 9.59,
  "ശ": 10.31,
  "ഷ": 12.14,
  "സ": 13.13,
  "ഹ": 13.22,
  "ാ": 11.78,
  "ി": 9.73,
  "ീ": 9.64,
  "ു": 10.44,
  "ൂ": 10.5,
  "ൃ": 11.11,
  "െ": 13.72,
  "േ": 12.69,
  "ൈ": 20,
  "ൊ": 18.66,
  "ോ": 17.94,
  "ൌ": 15.97,
  "്": 7.19,
  "ൗ": 15.97,
  "ൠ": 9.59,
  "ൡ": 13.22,
  "൦": 6.97,
  "൧": 9.39,
  "൨": 9.59,
  "൩": 11.84,
  "൪": 7.42,
  "൫": 10.59,
  "൬": 14.47,
  "൭": 5.28,
  "൮": 9.59,
  "൯": 11.06,
  "ං": 5,
  "ඃ": 3.34,
  "අ": 6.84,
  "ආ": 10.02,
  "ඇ": 9.88,
  "ඈ": 9.89,
  "ඉ": 6.89,
  "ඊ": 6.73,
  "උ": 7.14,
  "ඌ": 11.83,
  "ඍ": 11.64,
  "ඎ": 15.73,
  "ඏ": 8.66,
  "ඐ": 13.47,
  "එ": 7.73,
  "ඒ": 7.78,
  "ඓ": 12.64,
  "ඔ": 7.88,
  "ඕ": 7.84,
  "ඖ": 12.89,
  "ක": 8.92,
  "ඛ": 8.44,
  "ග": 7.89,
  "ඝ": 7.06,
  "ඞ": 8,
  "ඟ": 9.5,
  "ච": 7.53,
  "ඡ": 6.73,
  "ජ": 6.59,
  "ඣ": 14.22,
  "ඤ": 12.89,
  "ඥ": 11.81,
  "ඦ": 7.81,
  "ට": 7.14,
  "ඨ": 7.52,
  "ඩ": 8.13,
  "ඪ": 7.75,
  "ණ": 10.69,
  "ඬ": 9.73,
  "ත": 8.33,
  "ථ": 7.19,
  "ද": 6.16,
  "ධ": 7.89,
  "න": 8.17,
  "ඳ": 7.84,
  "ප": 6.59,
  "ඵ": 7.72,
  "බ": 8.11,
  "භ": 9.3,
  "ම": 8.08,
  "ඹ": 7.89,
  "ය": 7.42,
  "ර": 6.56,
  "ල": 7.42,
  "ව": 7.36,
  "ශ": 8.27,
  "ෂ": 6.55,
  "ස": 7.73,
  "හ": 8.91,
  "ළ": 8.06,
  "ෆ": 7.52,
  "්": 7.27,
  "ා": 10.28,
  "ැ": 9.84,
  "ෑ": 9.95,
  "ි": 6.97,
  "ී": 6.97,
  "ු": 6.97,
  "ූ": 6.97,
  "ෘ": 11.28,
  "ෙ": 12.64,
  "ේ": 13.16,
  "ෛ": 18.8,
  "ො": 16.02,
  "ෝ": 15.66,
  "ෞ": 17.42,
  "ෟ": 12.05,
  "ෲ": 15.5,
  "ෳ": 4.97,
  "෴": 13.17,
  "ก": 7.28,
  "ข": 6.94,
  "ฃ": 6.91,
  "ค": 7.84,
  "ฅ": 7.83,
  "ฆ": 7.63,
  "ง": 5.67,
  "จ": 6.25,
  "ฉ": 7.22,
  "ช": 7.14,
  "ซ": 7.19,
  "ฌ": 9.89,
  "ญ": 9.86,
  "ฎ": 7.91,
  "ฏ": 7.91,
  "ฐ": 6.39,
  "ฑ": 8.27,
  "ฒ": 10.45,
  "ณ": 9.98,
  "ด": 7.73,
  "ต": 7.73,
  "ถ": 7.28,
  "ท": 7.73,
  "ธ": 6.69,
  "น": 7.45,
  "บ": 7.8,
  "ป": 7.8,
  "ผ": 7.56,
  "ฝ": 7.56,
  "พ": 8.17,
  "ฟ": 8.17,
  "ภ": 7.91,
  "ม": 7.55,
  "ย": 7.22,
  "ร": 6.02,
  "ฤ": 7.28,
  "ล": 7.06,
  "ฦ": 7.91,
  "ว": 6.16,
  "ศ": 7.94,
  "ษ": 8.08,
  "ส": 7.16,
  "ห": 7.73,
  "ฬ": 8.36,
  "อ": 6.94,
  "ฮ": 7.06,
  "ฯ": 6.61,
  "ะ": 5.25,
  "ั": 6.09,
  "า": 6.06,
  "ำ": 12.16,
  "ิ": 6.09,
  "ี": 6.09,
  "ึ": 6.09,
  "ื": 6.09,
  "ุ": 6.09,
  "ู": 6.09,
  "ฺ": 6.09,
  "฿": 7.56,
  "เ": 3.8,
  "แ": 6.97,
  "โ": 5.34,
  "ใ": 5.8,
  "ไ": 5.58,
  "ๅ": 6.06,
  "ๆ": 6.8,
  "็": 6.09,
  "่": 6.09,
  "้": 6.09,
  "๊": 6.09,
  "๋": 6.09,
  "์": 6.09,
  "ํ": 6.09,
  "๎": 6.09,
  "๏": 8.78,
  "๐": 7.03,
  "๑": 7.38,
  "๒": 7.88,
  "๓": 8.14,
  "๔": 7.39,
  "๕": 7.39,
  "๖": 6.95,
  "๗": 9.16,
  "๘": 7.45,
  "๙": 8.02,
  "๚": 8.63,
  "๛": 14.72,
  "ກ": 7.42,
  "ຂ": 6.5,
  "ຄ": 6.81,
  "ງ": 6.14,
  "ຈ": 6.69,
  "ຊ": 6.59,
  "ຍ": 6.81,
  "ດ": 7,
  "ຕ": 7.23,
  "ຖ": 7.48,
  "ທ": 7.7,
  "ນ": 7.38,
  "ບ": 6.33,
  "ປ": 6.38,
  "ຜ": 8.11,
  "ຝ": 8.02,
  "ພ": 7.98,
  "ຟ": 8.03,
  "ມ": 7.42,
  "ຢ": 6.72,
  "ຣ": 6.5,
  "ລ": 6.67,
  "ວ": 6.42,
  "ສ": 6.67,
  "ຫ": 9.22,
  "ອ": 6.67,
  "ຮ": 6.61,
  "ຯ": 6.34,
  "ະ": 6.17,
  "ັ": 0,
  "າ": 5.17,
  "ຳ": 0,
  "ິ": 0,
  "ີ": 0,
  "ຶ": 0,
  "ື": 0,
  "ຸ": 0,
  "ູ": 0,
  "ົ": 0,
  "ຼ": 0,
  "ຽ": 5.45,
  "ເ": 4.09,
  "ແ": 7.09,
  "ໂ": 4.05,
  "ໃ": 4.08,
  "ໄ": 4,
  "ໆ": 7.05,
  "່": 0,
  "້": 0,
  "໊": 0,
  "໋": 0,
  "໌": 3.91,
  "ໍ": 0,
  "໐": 6.7,
  "໑": 6.09,
  "໒": 5.98,
  "໓": 6.91,
  "໔": 6.14,
  "໕": 6.33,
  "໖": 7.48,
  "໗": 7.55,
  "໘": 7.98,
  "໙": 7.53,
  "ໜ": 12.02,
  "ໝ": 12.02,
  "ༀ": 8.52,
  "༁": 8.3,
  "༂": 11.06,
  "༃": 11.47,
  "༄": 10.59,
  "༅": 7.7,
  "༆": 10.61,
  "༇": 17.73,
  "༈": 6.75,
  "༉": 7.47,
  "༊": 13.03,
  "་": 1.83,
  "༌": 1.61,
  "།": 3.45,
  "༎": 6.56,
  "༏": 2.84,
  "༐": 4.73,
  "༑": 4.73,
  "༒": 22.84,
  "༓": 7.22,
  "༔": 4.86,
  "༕": 9.53,
  "༖": 9.03,
  "༗": 13.02,
  "༘": 0,
  "༙": 0,
  "༚": 3.53,
  "༛": 6.27,
  "༜": 6.23,
  "༝": 3.8,
  "༞": 6.23,
  "༟": 6.38,
  "༠": 3.86,
  "༡": 3.89,
  "༢": 4.88,
  "༣": 4,
  "༤": 4.88,
  "༥": 4.48,
  "༦": 6.5,
  "༧": 6.58,
  "༨": 5.55,
  "༩": 5.03,
  "༪": 6.06,
  "༫": 4.64,
  "༬": 3.56,
  "༭": 4.91,
  "༮": 8.67,
  "༯": 7.91,
  "༰": 7.91,
  "༱": 6.63,
  "༲": 6.97,
  "༳": 4.86,
  "༴": 7.09,
  "༵": 0,
  "༶": 6.61,
  "༷": 0,
  "༸": 7.91,
  "༹": 0,
  "༺": 16.58,
  "༻": 16.58,
  "༼": 7.31,
  "༽": 7.61,
  "༾": 6.05,
  "༿": 5.17,
  "ཀ": 7.91,
  "ཁ": 6.83,
  "ག": 7.89,
  "གྷ": 7.09,
  "ང": 6.16,
  "ཅ": 6.5,
  "ཆ": 7.31,
  "ཇ": 6.28,
  "ཉ": 6.22,
  "ཊ": 6.16,
  "ཋ": 5.92,
  "ཌ": 6.81,
  "ཌྷ": 6.98,
  "ཎ": 7.56,
  "ཏ": 6.5,
  "ཐ": 6.28,
  "ད": 6.42,
  "དྷ": 6.81,
  "ན": 6.42,
  "པ": 6.48,
  "ཕ": 6.48,
  "བ": 6.48,
  "བྷ": 6.66,
  "མ": 7.28,
  "ཙ": 5.83,
  "ཚ": 7.23,
  "ཛ": 6.06,
  "ཛྷ": 6.16,
  "ཝ": 7.56,
  "ཞ": 6.94,
  "ཟ": 6.17,
  "འ": 6.27,
  "ཡ": 7.09,
  "ར": 6.72,
  "ལ": 6.8,
  "ཤ": 8.34,
  "ཥ": 9.5,
  "ས": 7.05,
  "ཧ": 7.7,
  "ཨ": 8.14,
  "ཀྵ": 7.09,
  "ཪ": 6.72,
  "ཱ": 5.78,
  "ི": 0,
  "ཱི": 5.78,
  "ུ": 8.36,
  "ཱུ": 14.14,
  "ྲྀ": 7.23,
  "ཷ": 13,
  "ླྀ": 7.77,
  "ཹ": 13.53,
  "ེ": 0,
  "ཻ": 0,
  "ོ": 0,
  "ཽ": 0,
  "ཾ": 0,
  "ཿ": 3.75,
  "ྀ": 0,
  "ཱྀ": 5.78,
  "ྂ": 0,
  "ྃ": 0,
  "྄": 0,
  "྅": 5.7,
  "྆": 0,
  "྇": 0,
  "ྈ": 7.09,
  "ྉ": 7.09,
  "ྊ": 9.05,
  "ྋ": 9.06,
  "ྐ": 7.11,
  "ྑ": 6.8,
  "ྒ": 7.27,
  "ྒྷ": 7.05,
  "ྔ": 7.11,
  "ྕ": 6.8,
  "ྖ": 7.23,
  "ྗ": 7.3,
  "ྙ": 6.64,
  "ྚ": 6.19,
  "ྛ": 6.19,
  "ྜ": 7.58,
  "ྜྷ": 6.66,
  "ྞ": 6.7,
  "ྟ": 6.19,
  "ྠ": 6,
  "ྡ": 7.11,
  "ྡྷ": 7.27,
  "ྣ": 6.5,
  "ྤ": 5.97,
  "ྥ": 5.97,
  "ྦ": 5.97,
  "ྦྷ": 5.98,
  "ྨ": 6.77,
  "ྩ": 8.75,
  "ྪ": 8.64,
  "ྫ": 8.03,
  "ྫྷ": 7.42,
  "ྭ": 6.61,
  "ྮ": 6.92,
  "ྯ": 6.59,
  "ྰ": 7.03,
  "ྱ": 9.19,
  "ྲ": 7.23,
  "ླ": 7.77,
  "ྴ": 8.69,
  "ྵ": 8.69,
  "ྶ": 7.67,
  "ྷ": 7.08,
  "ྸ": 7.64,
  "ྐྵ": 9.48,
  "ྺ": 7.63,
  "ྻ": 7.42,
  "ྼ": 8.56,
  "྾": 7.38,
  "྿": 7.38,
  "࿀": 7.78,
  "࿁": 7.78,
  "࿂": 11.63,
  "࿃": 12.41,
  "࿄": 9.23,
  "࿅": 9.2,
  "࿆": 0,
  "࿇": 9.3,
  "࿈": 9.61,
  "࿉": 10.47,
  "࿊": 12.53,
  "࿋": 12.72,
  "࿌": 12.47,
  "࿏": 5.73,
  "က": 13.5,
  "ခ": 8.13,
  "ဂ": 8.03,
  "ဃ": 13.5,
  "င": 7.81,
  "စ": 8.09,
  "ဆ": 13.53,
  "ဇ": 8.22,
  "ဈ": 10.44,
  "ဉ": 7.94,
  "ည": 13.31,
  "ဋ": 8,
  "ဌ": 7.92,
  "ဍ": 8,
  "ဎ": 8.13,
  "ဏ": 15.06,
  "တ": 13.5,
  "ထ": 13.5,
  "ဒ": 7.69,
  "ဓ": 8.09,
  "န": 6.84,
  "ပ": 8.13,
  "ဖ": 8.11,
  "ဗ": 8.13,
  "ဘ": 13.5,
  "မ": 8.13,
  "ယ": 13.52,
  "ရ": 8.28,
  "လ": 13.52,
  "ဝ": 8.09,
  "သ": 13.53,
  "ဟ": 13.5,
  "ဠ": 8,
  "အ": 12.83,
  "ဣ": 13.2,
  "ဤ": 16.13,
  "ဥ": 7.94,
  "ဦ": 7.94,
  "ဧ": 7.58,
  "ဩ": 16.44,
  "ဪ": 29.44,
  "ာ": 12.59,
  "ိ": 7.14,
  "ီ": 7.14,
  "ု": 7.14,
  "ူ": 7.14,
  "ေ": 14.55,
  "ဲ": 7.14,
  "ံ": 7.14,
  "့": 7.14,
  "း": 11.28,
  "္": 7.14,
  "၀": 7.83,
  "၁": 7.48,
  "၂": 8.11,
  "၃": 7.42,
  "၄": 7.42,
  "၅": 8.11,
  "၆": 8.64,
  "၇": 7.77,
  "၈": 7.83,
  "၉": 8.64,
  "၊": 3.25,
  "။": 5.55,
  "၌": 8,
  "၍": 10.72,
  "၎": 7.92,
  "၏": 13.66,
  "ၐ": 8.03,
  "ၑ": 8.13,
  "ၒ": 7.94,
  "ၓ": 7.94,
  "ၔ": 7.92,
  "ၕ": 7.81,
  "ၖ": 11.56,
  "ၗ": 11.61,
  "ၘ": 7.14,
  "ၙ": 7.14,
  "Ⴀ": 7.95,
  "Ⴁ": 8.13,
  "Ⴂ": 8.5,
  "Ⴃ": 8.36,
  "Ⴄ": 7.31,
  "Ⴅ": 9.48,
  "Ⴆ": 7.97,
  "Ⴇ": 9.42,
  "Ⴈ": 6.73,
  "Ⴉ": 7.61,
  "Ⴊ": 9.39,
  "Ⴋ": 8.42,
  "Ⴌ": 7.55,
  "Ⴍ": 8.19,
  "Ⴎ": 8.47,
  "Ⴏ": 8.31,
  "Ⴐ": 8.81,
  "Ⴑ": 7.39,
  "Ⴒ": 7.11,
  "Ⴓ": 8.17,
  "Ⴔ": 8.16,
  "Ⴕ": 8.47,
  "Ⴖ": 7.72,
  "Ⴗ": 7.48,
  "Ⴘ": 7.48,
  "Ⴙ": 7.55,
  "Ⴚ": 7.59,
  "Ⴛ": 9.25,
  "Ⴜ": 7.11,
  "Ⴝ": 7.95,
  "Ⴞ": 7.55,
  "Ⴟ": 8.06,
  "Ⴠ": 8.83,
  "Ⴡ": 6.92,
  "Ⴢ": 7.28,
  "Ⴣ": 7.27,
  "Ⴤ": 8.11,
  "Ⴥ": 9.52,
  "ა": 6.22,
  "ბ": 6.83,
  "გ": 6.33,
  "დ": 9.98,
  "ე": 6.47,
  "ვ": 6.42,
  "ზ": 7.45,
  "თ": 10.17,
  "ი": 6.47,
  "კ": 6.27,
  "ლ": 11.67,
  "მ": 6.92,
  "ნ": 6.94,
  "ო": 8.84,
  "პ": 6.42,
  "ჟ": 6.69,
  "რ": 8.88,
  "ს": 6.63,
  "ტ": 7.97,
  "უ": 6.69,
  "ფ": 9.61,
  "ქ": 6.42,
  "ღ": 8.84,
  "ყ": 6.63,
  "შ": 6.97,
  "ჩ": 6.8,
  "ც": 7.06,
  "ძ": 6.91,
  "წ": 6.97,
  "ჭ": 7.23,
  "ხ": 6.91,
  "ჯ": 6.22,
  "ჰ": 6.38,
  "ჱ": 7.13,
  "ჲ": 6.38,
  "ჳ": 6.53,
  "ჴ": 6.53,
  "ჵ": 7.09,
  "ჶ": 8.81,
  "჻": 6.45,
  "ᄀ": 10.39,
  "ᄁ": 10.39,
  "ᄂ": 10.39,
  "ᄃ": 10.39,
  "ᄄ": 10.39,
  "ᄅ": 10.39,
  "ᄆ": 10.39,
  "ᄇ": 10.39,
  "ᄈ": 10.39,
  "ᄉ": 10.39,
  "ᄊ": 10.39,
  "ᄋ": 10.39,
  "ᄌ": 10.39,
  "ᄍ": 10.39,
  "ᄎ": 10.39,
  "ᄏ": 10.39,
  "ᄐ": 10.39,
  "ᄑ": 10.39,
  "ᄒ": 10.39,
  "ᄓ": 12,
  "ᄔ": 12,
  "ᄕ": 12,
  "ᄖ": 12,
  "ᄗ": 12,
  "ᄘ": 12,
  "ᄙ": 12,
  "ᄚ": 12,
  "ᄛ": 12,
  "ᄜ": 12,
  "ᄝ": 12,
  "ᄞ": 12,
  "ᄟ": 12,
  "ᄠ": 12,
  "ᄡ": 12,
  "ᄢ": 12,
  "ᄣ": 12,
  "ᄤ": 12,
  "ᄥ": 12,
  "ᄦ": 12,
  "ᄧ": 12,
  "ᄨ": 12,
  "ᄩ": 12,
  "ᄪ": 12,
  "ᄫ": 12,
  "ᄬ": 12,
  "ᄭ": 12,
  "ᄮ": 12,
  "ᄯ": 12,
  "ᄰ": 12,
  "ᄱ": 12,
  "ᄲ": 12,
  "ᄳ": 12,
  "ᄴ": 12,
  "ᄵ": 12,
  "ᄶ": 12,
  "ᄷ": 12,
  "ᄸ": 12,
  "ᄹ": 12,
  "ᄺ": 12,
  "ᄻ": 12,
  "ᄼ": 12,
  "ᄽ": 12,
  "ᄾ": 12,
  "ᄿ": 12,
  "ᅀ": 12,
  "ᅁ": 12,
  "ᅂ": 12,
  "ᅃ": 12,
  "ᅄ": 12,
  "ᅅ": 12,
  "ᅆ": 12,
  "ᅇ": 12,
  "ᅈ": 12,
  "ᅉ": 12,
  "ᅊ": 12,
  "ᅋ": 12,
  "ᅌ": 12,
  "ᅍ": 12,
  "ᅎ": 12,
  "ᅏ": 12,
  "ᅐ": 12,
  "ᅑ": 12,
  "ᅒ": 12,
  "ᅓ": 12,
  "ᅔ": 12,
  "ᅕ": 12,
  "ᅖ": 12,
  "ᅗ": 12,
  "ᅘ": 12,
  "ᅙ": 12,
  "ᅟ": 0,
  "ᅠ": 0,
  "ᅡ": 10.39,
  "ᅢ": 10.39,
  "ᅣ": 10.39,
  "ᅤ": 10.39,
  "ᅥ": 10.39,
  "ᅦ": 10.39,
  "ᅧ": 10.39,
  "ᅨ": 10.39,
  "ᅩ": 10.39,
  "ᅪ": 10.39,
  "ᅫ": 10.39,
  "ᅬ": 10.39,
  "ᅭ": 10.39,
  "ᅮ": 10.39,
  "ᅯ": 10.39,
  "ᅰ": 10.39,
  "ᅱ": 10.39,
  "ᅲ": 10.39,
  "ᅳ": 10.39,
  "ᅴ": 10.39,
  "ᅵ": 10.39,
  "ᅶ": 12,
  "ᅷ": 12,
  "ᅸ": 12,
  "ᅹ": 12,
  "ᅺ": 12,
  "ᅻ": 12,
  "ᅼ": 12,
  "ᅽ": 12,
  "ᅾ": 12,
  "ᅿ": 12,
  "ᆀ": 12,
  "ᆁ": 12,
  "ᆂ": 12,
  "ᆃ": 12,
  "ᆄ": 12,
  "ᆅ": 12,
  "ᆆ": 12,
  "ᆇ": 12,
  "ᆈ": 12,
  "ᆉ": 12,
  "ᆊ": 12,
  "ᆋ": 12,
  "ᆌ": 12,
  "ᆍ": 12,
  "ᆎ": 12,
  "ᆏ": 12,
  "ᆐ": 12,
  "ᆑ": 12,
  "ᆒ": 12,
  "ᆓ": 12,
  "ᆔ": 12,
  "ᆕ": 12,
  "ᆖ": 12,
  "ᆗ": 12,
  "ᆘ": 12,
  "ᆙ": 12,
  "ᆚ": 12,
  "ᆛ": 12,
  "ᆜ": 12,
  "ᆝ": 12,
  "ᆞ": 10.39,
  "ᆟ": 12,
  "ᆠ": 12,
  "ᆡ": 12,
  "ᆢ": 10.39,
  "ᆨ": 10.39,
  "ᆩ": 10.39,
  "ᆪ": 10.39,
  "ᆫ": 10.39,
  "ᆬ": 10.39,
  "ᆭ": 10.39,
  "ᆮ": 10.39,
  "ᆯ": 10.39,
  "ᆰ": 10.39,
  "ᆱ": 10.39,
  "ᆲ": 10.39,
  "ᆳ": 10.39,
  "ᆴ": 10.39,
  "ᆵ": 10.39,
  "ᆶ": 10.39,
  "ᆷ": 10.39,
  "ᆸ": 10.39,
  "ᆹ": 10.39,
  "ᆺ": 10.39,
  "ᆻ": 10.39,
  "ᆼ": 10.39,
  "ᆽ": 10.39,
  "ᆾ": 10.39,
  "ᆿ": 10.39,
  "ᇀ": 10.39,
  "ᇁ": 10.39,
  "ᇂ": 10.39,
  "ᇃ": 12,
  "ᇄ": 12,
  "ᇅ": 12,
  "ᇆ": 12,
  "ᇇ": 12,
  "ᇈ": 12,
  "ᇉ": 12,
  "ᇊ": 12,
  "ᇋ": 12,
  "ᇌ": 12,
  "ᇍ": 12,
  "ᇎ": 12,
  "ᇏ": 12,
  "ᇐ": 12,
  "ᇑ": 12,
  "ᇒ": 12,
  "ᇓ": 12,
  "ᇔ": 12,
  "ᇕ": 12,
  "ᇖ": 12,
  "ᇗ": 12,
  "ᇘ": 12,
  "ᇙ": 12,
  "ᇚ": 12,
  "ᇛ": 12,
  "ᇜ": 12,
  "ᇝ": 12,
  "ᇞ": 12,
  "ᇟ": 12,
  "ᇠ": 12,
  "ᇡ": 12,
  "ᇢ": 12,
  "ᇣ": 12,
  "ᇤ": 12,
  "ᇥ": 12,
  "ᇦ": 12,
  "ᇧ": 12,
  "ᇨ": 12,
  "ᇩ": 12,
  "ᇪ": 12,
  "ᇫ": 12,
  "ᇬ": 12,
  "ᇭ": 12,
  "ᇮ": 12,
  "ᇯ": 12,
  "ᇰ": 12,
  "ᇱ": 12,
  "ᇲ": 12,
  "ᇳ": 12,
  "ᇴ": 12,
  "ᇵ": 12,
  "ᇶ": 12,
  "ᇷ": 12,
  "ᇸ": 12,
  "ᇹ": 12,
  "ሀ": 8.34,
  "ሁ": 10.81,
  "ሂ": 7.73,
  "ሃ": 7.98,
  "ሄ": 7.86,
  "ህ": 8.75,
  "ሆ": 10.78,
  "ለ": 7.78,
  "ሉ": 9.98,
  "ሊ": 9.97,
  "ላ": 7.78,
  "ሌ": 10.28,
  "ል": 8.8,
  "ሎ": 12.64,
  "ሏ": 10.34,
  "ሐ": 12.27,
  "ሑ": 14.63,
  "ሒ": 14.61,
  "ሓ": 12.27,
  "ሔ": 14.55,
  "ሕ": 12.27,
  "ሖ": 12.31,
  "ሗ": 14.7,
  "መ": 13.06,
  "ሙ": 16.17,
  "ሚ": 13.78,
  "ማ": 13.06,
  "ሜ": 13.75,
  "ም": 13.06,
  "ሞ": 13.06,
  "ሟ": 13.77,
  "ሠ": 11.86,
  "ሡ": 14.69,
  "ሢ": 12.11,
  "ሣ": 11.86,
  "ሤ": 12.14,
  "ሥ": 13.3,
  "ሦ": 11.69,
  "ሧ": 12.11,
  "ረ": 7.36,
  "ሩ": 8.53,
  "ሪ": 8.3,
  "ራ": 10.83,
  "ሬ": 10,
  "ር": 7.48,
  "ሮ": 9.83,
  "ሯ": 10.83,
  "ሰ": 8.11,
  "ሱ": 10.58,
  "ሲ": 10.53,
  "ሳ": 8.11,
  "ሴ": 10.47,
  "ስ": 8.11,
  "ሶ": 8.11,
  "ሷ": 10.63,
  "ሸ": 9.14,
  "ሹ": 11.03,
  "ሺ": 11,
  "ሻ": 9.14,
  "ሼ": 10.92,
  "ሽ": 9.61,
  "ሾ": 9.14,
  "ሿ": 11.09,
  "ቀ": 10.22,
  "ቁ": 10.22,
  "ቂ": 10.22,
  "ቃ": 10.22,
  "ቄ": 10.22,
  "ቅ": 10.22,
  "ቆ": 10.22,
  "ቈ": 11.64,
  "ቊ": 14.7,
  "ቋ": 10.22,
  "ቌ": 10.22,
  "ቍ": 14.72,
  "ቐ": 10.56,
  "ቑ": 10.56,
  "ቒ": 10.56,
  "ቓ": 10.56,
  "ቔ": 10.56,
  "ቕ": 11.64,
  "ቖ": 10.56,
  "ቘ": 11.84,
  "ቚ": 14.91,
  "ቛ": 10.56,
  "ቜ": 10.56,
  "ቝ": 12.8,
  "በ": 8.56,
  "ቡ": 10.81,
  "ቢ": 10.77,
  "ባ": 8.56,
  "ቤ": 10.7,
  "ብ": 11.13,
  "ቦ": 8.56,
  "ቧ": 10.86,
  "ቨ": 9.14,
  "ቩ": 11.03,
  "ቪ": 11,
  "ቫ": 9.14,
  "ቬ": 10.92,
  "ቭ": 11.36,
  "ቮ": 9.14,
  "ቯ": 11.09,
  "ተ": 9.31,
  "ቱ": 9.31,
  "ቲ": 9.31,
  "ታ": 9.39,
  "ቴ": 9.44,
  "ት": 9.31,
  "ቶ": 9.31,
  "ቷ": 9.31,
  "ቸ": 9.31,
  "ቹ": 9.33,
  "ቺ": 9.31,
  "ቻ": 9.39,
  "ቼ": 9.31,
  "ች": 10.97,
  "ቾ": 9.5,
  "ቿ": 9.31,
  "ኀ": 8.33,
  "ኁ": 10.39,
  "ኂ": 9.81,
  "ኃ": 8.33,
  "ኄ": 9.69,
  "ኅ": 8.03,
  "ኆ": 12.28,
  "ኈ": 12.42,
  "ኊ": 11.78,
  "ኋ": 9.09,
  "ኌ": 9.69,
  "ኍ": 11.78,
  "ነ": 6.38,
  "ኑ": 8.44,
  "ኒ": 7.86,
  "ና": 7.59,
  "ኔ": 7.73,
  "ን": 8.2,
  "ኖ": 9.5,
  "ኗ": 8.84,
  "ኘ": 9.08,
  "ኙ": 10.48,
  "ኚ": 9.89,
  "ኛ": 9.08,
  "ኜ": 9.77,
  "ኝ": 9.08,
  "ኞ": 11.09,
  "ኟ": 9.39,
  "አ": 7.67,
  "ኡ": 10.36,
  "ኢ": 10.36,
  "ኣ": 7.67,
  "ኤ": 10.3,
  "እ": 7.88,
  "ኦ": 7.7,
  "ኧ": 9.55,
  "ከ": 8.66,
  "ኩ": 11.11,
  "ኪ": 11.06,
  "ካ": 8.66,
  "ኬ": 11,
  "ክ": 8.66,
  "ኮ": 8.66,
  "ኰ": 13.42,
  "ኲ": 12.48,
  "ኳ": 10.42,
  "ኴ": 11,
  "ኵ": 12.48,
  "ኸ": 10.73,
  "ኹ": 13.2,
  "ኺ": 13.16,
  "ኻ": 10.73,
  "ኼ": 13.09,
  "ኽ": 10.73,
  "ኾ": 10.73,
  "ዀ": 15.52,
  "ዂ": 14.58,
  "ዃ": 13.25,
  "ዄ": 13.09,
  "ዅ": 14.58,
  "ወ": 11.2,
  "ዉ": 13.27,
  "ዊ": 11.2,
  "ዋ": 11.2,
  "ዌ": 11.2,
  "ው": 14.09,
  "ዎ": 11.2,
  "ዐ": 8.09,
  "ዑ": 10.75,
  "ዒ": 10.41,
  "ዓ": 7.81,
  "ዔ": 10.39,
  "ዕ": 7.86,
  "ዖ": 8.48,
  "ዘ": 8.91,
  "ዙ": 10.97,
  "ዚ": 10.98,
  "ዛ": 8.91,
  "ዜ": 10.95,
  "ዝ": 10.8,
  "ዞ": 8.91,
  "ዟ": 11.11,
  "ዠ": 13.42,
  "ዡ": 13.42,
  "ዢ": 13.42,
  "ዣ": 13.42,
  "ዤ": 13.42,
  "ዥ": 14.91,
  "ዦ": 13.42,
  "ዧ": 13.42,
  "የ": 6.98,
  "ዩ": 8.72,
  "ዪ": 9.98,
  "ያ": 7.14,
  "ዬ": 11.33,
  "ይ": 8.41,
  "ዮ": 9.81,
  "ደ": 9.2,
  "ዱ": 12.3,
  "ዲ": 11.59,
  "ዳ": 9,
  "ዴ": 10.97,
  "ድ": 10.11,
  "ዶ": 9.97,
  "ዷ": 11.61,
  "ዸ": 9.14,
  "ዹ": 11.86,
  "ዺ": 11.16,
  "ዻ": 8.56,
  "ዼ": 10.91,
  "ዽ": 10.81,
  "ዾ": 9.97,
  "ዿ": 11.17,
  "ጀ": 9.33,
  "ጁ": 12.42,
  "ጂ": 11.72,
  "ጃ": 9.13,
  "ጄ": 11.47,
  "ጅ": 11,
  "ጆ": 10.02,
  "ጇ": 11.73,
  "ገ": 7.02,
  "ጉ": 10.02,
  "ጊ": 7.28,
  "ጋ": 7.66,
  "ጌ": 7.22,
  "ግ": 9.64,
  "ጎ": 7.02,
  "ጐ": 12.33,
  "ጒ": 11.41,
  "ጓ": 7.5,
  "ጔ": 8.83,
  "ጕ": 11.41,
  "ጘ": 8.84,
  "ጙ": 10.88,
  "ጚ": 8.84,
  "ጛ": 8.84,
  "ጜ": 8.84,
  "ጝ": 10.56,
  "ጞ": 9.5,
  "ጠ": 13.25,
  "ጡ": 15.56,
  "ጢ": 15.55,
  "ጣ": 13.2,
  "ጤ": 15.5,
  "ጥ": 12.84,
  "ጦ": 13.25,
  "ጧ": 15.58,
  "ጨ": 16.34,
  "ጩ": 16.59,
  "ጪ": 16.53,
  "ጫ": 16.34,
  "ጬ": 19.92,
  "ጭ": 15.84,
  "ጮ": 16.08,
  "ጯ": 16.61,
  "ጰ": 8,
  "ጱ": 10.55,
  "ጲ": 10.42,
  "ጳ": 7.84,
  "ጴ": 10.36,
  "ጵ": 10.2,
  "ጶ": 8.06,
  "ጷ": 10.34,
  "ጸ": 8.3,
  "ጹ": 10.72,
  "ጺ": 10.59,
  "ጻ": 8.02,
  "ጼ": 10.53,
  "ጽ": 10.39,
  "ጾ": 8.36,
  "ጿ": 10.41,
  "ፀ": 8.09,
  "ፁ": 10.75,
  "ፂ": 8.3,
  "ፃ": 7.36,
  "ፄ": 8.33,
  "ፅ": 7.86,
  "ፆ": 8.42,
  "ፈ": 10.27,
  "ፉ": 10.39,
  "ፊ": 11.14,
  "ፋ": 10.39,
  "ፌ": 12.23,
  "ፍ": 10.09,
  "ፎ": 10.3,
  "ፏ": 10.09,
  "ፐ": 9.31,
  "ፑ": 9.33,
  "ፒ": 9.31,
  "ፓ": 9.39,
  "ፔ": 9.31,
  "ፕ": 9.31,
  "ፖ": 9.31,
  "ፗ": 9.31,
  "ፘ": 9.67,
  "ፙ": 13.75,
  "ፚ": 11.3,
  "፡": 3.61,
  "።": 7.41,
  "፣": 4.31,
  "፤": 4.31,
  "፥": 4.31,
  "፦": 5.98,
  "፧": 3.61,
  "፨": 11.22,
  "፩": 6.67,
  "፪": 6.08,
  "፫": 6.44,
  "፬": 6.61,
  "፭": 7.86,
  "፮": 7.23,
  "፯": 7.34,
  "፰": 7.8,
  "፱": 6.75,
  "፲": 5.02,
  "፳": 8.97,
  "፴": 8.91,
  "፵": 10.48,
  "፶": 6.61,
  "፷": 7.8,
  "፸": 9.45,
  "፹": 9.84,
  "፺": 6.31,
  "፻": 6.78,
  "፼": 12.45,
  "Ꭰ": 8.72,
  "Ꭱ": 8.25,
  "Ꭲ": 7.05,
  "Ꭳ": 9.06,
  "Ꭴ": 10.78,
  "Ꭵ": 3.78,
  "Ꭶ": 8.41,
  "Ꭷ": 10,
  "Ꭸ": 6.16,
  "Ꭹ": 7.64,
  "Ꭺ": 8.06,
  "Ꭻ": 6.36,
  "Ꭼ": 7.11,
  "Ꭽ": 9.33,
  "Ꭾ": 6.41,
  "Ꭿ": 9.03,
  "Ꮀ": 6.41,
  "Ꮁ": 6.45,
  "Ꮂ": 9.94,
  "Ꮃ": 10.95,
  "Ꮄ": 8.45,
  "Ꮅ": 6.56,
  "Ꮆ": 8.59,
  "Ꮇ": 10.34,
  "Ꮈ": 6.38,
  "Ꮉ": 10.23,
  "Ꮊ": 11.5,
  "Ꮋ": 9,
  "Ꮌ": 6.16,
  "Ꮍ": 8.42,
  "Ꮎ": 8.77,
  "Ꮏ": 7.63,
  "Ꮐ": 8.48,
  "Ꮑ": 9.11,
  "Ꮒ": 7.56,
  "Ꮓ": 7.27,
  "Ꮔ": 6.66,
  "Ꮕ": 11.55,
  "Ꮖ": 7.11,
  "Ꮗ": 9.83,
  "Ꮘ": 8.58,
  "Ꮙ": 13.06,
  "Ꮚ": 9.83,
  "Ꮛ": 7.55,
  "Ꮜ": 8.8,
  "Ꮝ": 10.91,
  "Ꮞ": 7.88,
  "Ꮟ": 7.88,
  "Ꮠ": 6.17,
  "Ꮡ": 8.28,
  "Ꮢ": 8.25,
  "Ꮣ": 6.7,
  "Ꮤ": 11.33,
  "Ꮥ": 8.53,
  "Ꮦ": 8.38,
  "Ꮧ": 7.13,
  "Ꮨ": 7.06,
  "Ꮩ": 8.28,
  "Ꮪ": 7.88,
  "Ꮫ": 10.55,
  "Ꮬ": 9.73,
  "Ꮭ": 6.84,
  "Ꮮ": 6.45,
  "Ꮯ": 8.19,
  "Ꮰ": 8.44,
  "Ꮱ": 10.22,
  "Ꮲ": 7.73,
  "Ꮳ": 8.34,
  "Ꮴ": 8.28,
  "Ꮵ": 9.52,
  "Ꮶ": 8.39,
  "Ꮷ": 6.09,
  "Ꮸ": 10.59,
  "Ꮹ": 9.3,
  "Ꮺ": 11,
  "Ꮻ": 8.77,
  "Ꮼ": 10.22,
  "Ꮽ": 7.97,
  "Ꮾ": 7.75,
  "Ꮿ": 9.83,
  "Ᏸ": 7.83,
  "Ᏹ": 9.05,
  "Ᏺ": 7.77,
  "Ᏻ": 10.39,
  "Ᏼ": 8.44,
  "ᐁ": 9.52,
  "ᐂ": 9.52,
  "ᐃ": 9.52,
  "ᐄ": 9.52,
  "ᐅ": 8.95,
  "ᐆ": 8.95,
  "ᐇ": 8.95,
  "ᐈ": 8.95,
  "ᐉ": 8.95,
  "ᐊ": 8.98,
  "ᐋ": 8.98,
  "ᐌ": 9.64,
  "ᐍ": 9.64,
  "ᐎ": 9.64,
  "ᐏ": 9.64,
  "ᐐ": 9.64,
  "ᐑ": 9.64,
  "ᐒ": 10.61,
  "ᐓ": 11.22,
  "ᐔ": 10.61,
  "ᐕ": 11.22,
  "ᐖ": 8.95,
  "ᐗ": 11.22,
  "ᐘ": 10.61,
  "ᐙ": 11.22,
  "ᐚ": 10.61,
  "ᐛ": 8.95,
  "ᐜ": 7.98,
  "ᐝ": 7.11,
  "ᐞ": 5.95,
  "ᐟ": 3.84,
  "ᐠ": 3.84,
  "ᐡ": 5.52,
  "ᐢ": 5.52,
  "ᐣ": 4.8,
  "ᐤ": 6.17,
  "ᐥ": 6,
  "ᐦ": 3.83,
  "ᐧ": 2.5,
  "ᐨ": 4.81,
  "ᐩ": 4.95,
  "ᐪ": 4.8,
  "ᐫ": 13.33,
  "ᐬ": 10.69,
  "ᐭ": 11.5,
  "ᐮ": 12.58,
  "ᐯ": 9.98,
  "ᐰ": 9.95,
  "ᐱ": 9.95,
  "ᐲ": 9.95,
  "ᐳ": 9.13,
  "ᐴ": 9.13,
  "ᐵ": 9.13,
  "ᐶ": 9.13,
  "ᐷ": 9.13,
  "ᐸ": 9.13,
  "ᐹ": 9.13,
  "ᐺ": 10.08,
  "ᐻ": 10.08,
  "ᐼ": 10.08,
  "ᐽ": 10.23,
  "ᐾ": 10.08,
  "ᐿ": 9.97,
  "ᑀ": 10.34,
  "ᑁ": 11.09,
  "ᑂ": 10.34,
  "ᑃ": 11.09,
  "ᑄ": 11.16,
  "ᑅ": 10.34,
  "ᑆ": 11.23,
  "ᑇ": 10.34,
  "ᑈ": 9.13,
  "ᑉ": 5.05,
  "ᑊ": 1.67,
  "ᑋ": 4.59,
  "ᑌ": 9.8,
  "ᑍ": 9.8,
  "ᑎ": 9.8,
  "ᑏ": 9.8,
  "ᑐ": 8.42,
  "ᑑ": 8.42,
  "ᑒ": 8.42,
  "ᑓ": 8.42,
  "ᑔ": 8.42,
  "ᑕ": 8.42,
  "ᑖ": 8.42,
  "ᑗ": 11.63,
  "ᑘ": 11.28,
  "ᑙ": 11.27,
  "ᑚ": 11.64,
  "ᑛ": 11.27,
  "ᑜ": 11.64,
  "ᑝ": 9.89,
  "ᑞ": 10.09,
  "ᑟ": 9.89,
  "ᑠ": 10.09,
  "ᑡ": 10.09,
  "ᑢ": 9.89,
  "ᑣ": 10.09,
  "ᑤ": 9.89,
  "ᑥ": 10.11,
  "ᑦ": 4.11,
  "ᑧ": 11.5,
  "ᑨ": 11.5,
  "ᑩ": 10.48,
  "ᑪ": 10.48,
  "ᑫ": 7.52,
  "ᑬ": 7.52,
  "ᑭ": 7.52,
  "ᑮ": 7.52,
  "ᑯ": 7.52,
  "ᑰ": 7.52,
  "ᑱ": 7.52,
  "ᑲ": 7.52,
  "ᑳ": 7.52,
  "ᑴ": 9.19,
  "ᑵ": 9.19,
  "ᑶ": 8.84,
  "ᑷ": 9.52,
  "ᑸ": 8.84,
  "ᑹ": 9.52,
  "ᑺ": 9.19,
  "ᑻ": 9.19,
  "ᑼ": 9.19,
  "ᑽ": 9.19,
  "ᑾ": 9.19,
  "ᑿ": 9.19,
  "ᒀ": 9.19,
  "ᒁ": 9.19,
  "ᒂ": 9.19,
  "ᒃ": 4.64,
  "ᒄ": 4.64,
  "ᒅ": 9.31,
  "ᒆ": 9.64,
  "ᒇ": 9.45,
  "ᒈ": 9.45,
  "ᒉ": 7.81,
  "ᒊ": 7.81,
  "ᒋ": 7.81,
  "ᒌ": 7.81,
  "ᒍ": 7.81,
  "ᒎ": 7.81,
  "ᒏ": 7.81,
  "ᒐ": 7.81,
  "ᒑ": 7.81,
  "ᒒ": 9.48,
  "ᒓ": 9.48,
  "ᒔ": 9.48,
  "ᒕ": 9.48,
  "ᒖ": 9.48,
  "ᒗ": 9.48,
  "ᒘ": 9.48,
  "ᒙ": 9.48,
  "ᒚ": 9.48,
  "ᒛ": 9.48,
  "ᒜ": 9.48,
  "ᒝ": 9.48,
  "ᒞ": 9.48,
  "ᒟ": 9.48,
  "ᒠ": 9.48,
  "ᒡ": 4.48,
  "ᒢ": 4.48,
  "ᒣ": 7.72,
  "ᒤ": 7.47,
  "ᒥ": 7.47,
  "ᒦ": 7.47,
  "ᒧ": 7.47,
  "ᒨ": 7.47,
  "ᒩ": 7.47,
  "ᒪ": 7.47,
  "ᒫ": 7.47,
  "ᒬ": 8.69,
  "ᒭ": 9.39,
  "ᒮ": 9.14,
  "ᒯ": 8.44,
  "ᒰ": 9.14,
  "ᒱ": 8.44,
  "ᒲ": 8.44,
  "ᒳ": 9.14,
  "ᒴ": 8.44,
  "ᒵ": 9.14,
  "ᒶ": 9.14,
  "ᒷ": 8.44,
  "ᒸ": 9.14,
  "ᒹ": 8.44,
  "ᒺ": 9,
  "ᒻ": 4.19,
  "ᒼ": 4.8,
  "ᒽ": 4.19,
  "ᒾ": 5.17,
  "ᒿ": 7.27,
  "ᓀ": 11.02,
  "ᓁ": 11.02,
  "ᓂ": 11.02,
  "ᓃ": 11.02,
  "ᓄ": 11.02,
  "ᓅ": 11.02,
  "ᓆ": 11.02,
  "ᓇ": 11.02,
  "ᓈ": 11.02,
  "ᓉ": 12.69,
  "ᓊ": 12.69,
  "ᓋ": 12.69,
  "ᓌ": 11.02,
  "ᓍ": 12.69,
  "ᓎ": 11.02,
  "ᓏ": 11.02,
  "ᓐ": 6.5,
  "ᓑ": 5.63,
  "ᓒ": 6.5,
  "ᓓ": 10.48,
  "ᓔ": 10.48,
  "ᓕ": 10.48,
  "ᓖ": 10.48,
  "ᓗ": 10.48,
  "ᓘ": 10.48,
  "ᓙ": 10.48,
  "ᓚ": 10.48,
  "ᓛ": 10.48,
  "ᓜ": 12.16,
  "ᓝ": 12.16,
  "ᓞ": 11.89,
  "ᓟ": 12.42,
  "ᓠ": 11.89,
  "ᓡ": 12.42,
  "ᓢ": 10.48,
  "ᓣ": 12.16,
  "ᓤ": 10.48,
  "ᓥ": 12.16,
  "ᓦ": 12.16,
  "ᓧ": 10.61,
  "ᓨ": 11.89,
  "ᓩ": 10.61,
  "ᓪ": 5.98,
  "ᓫ": 5.36,
  "ᓬ": 8.03,
  "ᓭ": 7.06,
  "ᓮ": 7.06,
  "ᓯ": 7.06,
  "ᓰ": 7.06,
  "ᓱ": 7.06,
  "ᓲ": 7.06,
  "ᓳ": 7.06,
  "ᓴ": 7.06,
  "ᓵ": 7.06,
  "ᓶ": 8.44,
  "ᓷ": 8.72,
  "ᓸ": 8.7,
  "ᓹ": 8.42,
  "ᓺ": 8.89,
  "ᓻ": 8.42,
  "ᓼ": 7.61,
  "ᓽ": 9.28,
  "ᓾ": 7.61,
  "ᓿ": 9.28,
  "ᔀ": 8.88,
  "ᔁ": 9.05,
  "ᔂ": 9.42,
  "ᔃ": 8.53,
  "ᔄ": 8.72,
  "ᔅ": 4.3,
  "ᔆ": 5.14,
  "ᔇ": 4.3,
  "ᔈ": 5.98,
  "ᔉ": 4.28,
  "ᔊ": 4.28,
  "ᔋ": 4.3,
  "ᔌ": 13.41,
  "ᔍ": 12.88,
  "ᔎ": 11.8,
  "ᔏ": 12.09,
  "ᔐ": 10.34,
  "ᔑ": 10.34,
  "ᔒ": 10.34,
  "ᔓ": 11.44,
  "ᔔ": 11.44,
  "ᔕ": 11.44,
  "ᔖ": 11.44,
  "ᔗ": 12,
  "ᔘ": 12,
  "ᔙ": 12,
  "ᔚ": 12,
  "ᔛ": 12,
  "ᔜ": 12,
  "ᔝ": 13.11,
  "ᔞ": 13.11,
  "ᔟ": 13.11,
  "ᔠ": 13.11,
  "ᔡ": 13.11,
  "ᔢ": 13.11,
  "ᔣ": 13.11,
  "ᔤ": 13.11,
  "ᔥ": 6.23,
  "ᔦ": 6.94,
  "ᔧ": 6.94,
  "ᔨ": 6.94,
  "ᔩ": 6.94,
  "ᔪ": 6.94,
  "ᔫ": 6.94,
  "ᔬ": 6.94,
  "ᔭ": 6.94,
  "ᔮ": 6.94,
  "ᔯ": 8.61,
  "ᔰ": 8.61,
  "ᔱ": 8.61,
  "ᔲ": 8.61,
  "ᔳ": 8.61,
  "ᔴ": 8.61,
  "ᔵ": 8.97,
  "ᔶ": 8.61,
  "ᔷ": 8.97,
  "ᔸ": 8.61,
  "ᔹ": 8.61,
  "ᔺ": 8.61,
  "ᔻ": 8.61,
  "ᔼ": 8.61,
  "ᔽ": 8.61,
  "ᔾ": 4.17,
  "ᔿ": 5.56,
  "ᕀ": 4.06,
  "ᕁ": 4.06,
  "ᕂ": 11.3,
  "ᕃ": 11.3,
  "ᕄ": 11.3,
  "ᕅ": 11.3,
  "ᕆ": 11.3,
  "ᕇ": 11.3,
  "ᕈ": 7.39,
  "ᕉ": 7.39,
  "ᕊ": 7.39,
  "ᕋ": 7.39,
  "ᕌ": 7.39,
  "ᕍ": 7.39,
  "ᕎ": 9.06,
  "ᕏ": 9.06,
  "ᕐ": 4.36,
  "ᕑ": 5.36,
  "ᕒ": 8.03,
  "ᕓ": 9.7,
  "ᕔ": 9.7,
  "ᕕ": 9.7,
  "ᕖ": 9.7,
  "ᕗ": 10.31,
  "ᕘ": 10.31,
  "ᕙ": 10.31,
  "ᕚ": 10.31,
  "ᕛ": 11.98,
  "ᕜ": 11.86,
  "ᕝ": 5.86,
  "ᕞ": 10.05,
  "ᕟ": 10.05,
  "ᕠ": 10.05,
  "ᕡ": 10.05,
  "ᕢ": 10.05,
  "ᕣ": 10.05,
  "ᕤ": 9,
  "ᕥ": 9,
  "ᕦ": 9,
  "ᕧ": 9,
  "ᕨ": 10.67,
  "ᕩ": 10.67,
  "ᕪ": 5.5,
  "ᕫ": 9.8,
  "ᕬ": 9.8,
  "ᕭ": 8.42,
  "ᕮ": 8.42,
  "ᕯ": 13.89,
  "ᕰ": 9.8,
  "ᕱ": 9.8,
  "ᕲ": 8.42,
  "ᕳ": 8.42,
  "ᕴ": 9.38,
  "ᕵ": 9.38,
  "ᕶ": 9.38,
  "ᕷ": 9.22,
  "ᕸ": 9.22,
  "ᕹ": 9.22,
  "ᕺ": 9.22,
  "ᕻ": 5.92,
  "ᕼ": 8.48,
  "ᕽ": 4,
  "ᕾ": 11.86,
  "ᕿ": 11.86,
  "ᖀ": 11.86,
  "ᖁ": 11.86,
  "ᖂ": 11.86,
  "ᖃ": 11.86,
  "ᖄ": 11.86,
  "ᖅ": 9,
  "ᖆ": 7.52,
  "ᖇ": 7.52,
  "ᖈ": 7.52,
  "ᖉ": 7.52,
  "ᖊ": 9.69,
  "ᖋ": 9.69,
  "ᖌ": 9.69,
  "ᖍ": 9.69,
  "ᖎ": 14.38,
  "ᖏ": 14.38,
  "ᖐ": 14.38,
  "ᖑ": 11.5,
  "ᖒ": 11.5,
  "ᖓ": 14.38,
  "ᖔ": 14.38,
  "ᖕ": 6.56,
  "ᖖ": 10.13,
  "ᖗ": 7.52,
  "ᖘ": 7.52,
  "ᖙ": 7.52,
  "ᖚ": 7.52,
  "ᖛ": 11.02,
  "ᖜ": 11.02,
  "ᖝ": 11.02,
  "ᖞ": 11.02,
  "ᖟ": 6.5,
  "ᖠ": 10.48,
  "ᖡ": 10.48,
  "ᖢ": 10.48,
  "ᖣ": 10.48,
  "ᖤ": 10.48,
  "ᖥ": 10.48,
  "ᖦ": 5.98,
  "ᖧ": 7.13,
  "ᖨ": 7.13,
  "ᖩ": 7.13,
  "ᖪ": 7.13,
  "ᖫ": 7.13,
  "ᖬ": 7.13,
  "ᖭ": 7.13,
  "ᖮ": 4.17,
  "ᖯ": 6.84,
  "ᖰ": 6.09,
  "ᖱ": 6.09,
  "ᖲ": 6.09,
  "ᖳ": 6.09,
  "ᖴ": 6.92,
  "ᖵ": 6.92,
  "ᖶ": 6.92,
  "ᖷ": 6.92,
  "ᖸ": 8.69,
  "ᖹ": 8.69,
  "ᖺ": 8.69,
  "ᖻ": 8.69,
  "ᖼ": 8.69,
  "ᖽ": 8.69,
  "ᖾ": 8.69,
  "ᖿ": 8.69,
  "ᗀ": 9.39,
  "ᗁ": 9.39,
  "ᗂ": 9.39,
  "ᗃ": 9.39,
  "ᗄ": 9.98,
  "ᗅ": 9.98,
  "ᗆ": 9.11,
  "ᗇ": 9.11,
  "ᗈ": 9.11,
  "ᗉ": 9.11,
  "ᗊ": 9.98,
  "ᗋ": 9.98,
  "ᗌ": 9.11,
  "ᗍ": 9.11,
  "ᗎ": 9.11,
  "ᗏ": 9.11,
  "ᗐ": 9.98,
  "ᗑ": 9.98,
  "ᗒ": 9.13,
  "ᗓ": 9.13,
  "ᗔ": 9.13,
  "ᗕ": 9.13,
  "ᗖ": 9.98,
  "ᗗ": 9.98,
  "ᗘ": 9.11,
  "ᗙ": 9.13,
  "ᗚ": 9.13,
  "ᗛ": 9.13,
  "ᗜ": 9.63,
  "ᗝ": 9.63,
  "ᗞ": 9.28,
  "ᗟ": 9.28,
  "ᗠ": 9.28,
  "ᗡ": 9.28,
  "ᗢ": 9.63,
  "ᗣ": 9.63,
  "ᗤ": 9.05,
  "ᗥ": 9.05,
  "ᗦ": 9.05,
  "ᗧ": 9.05,
  "ᗨ": 9.63,
  "ᗩ": 9.63,
  "ᗪ": 9.16,
  "ᗫ": 9.16,
  "ᗬ": 9.16,
  "ᗭ": 9.16,
  "ᗮ": 5.02,
  "ᗯ": 11.53,
  "ᗰ": 11.53,
  "ᗱ": 8.33,
  "ᗲ": 8.33,
  "ᗳ": 8.33,
  "ᗴ": 8.33,
  "ᗵ": 11.53,
  "ᗶ": 11.53,
  "ᗷ": 8.66,
  "ᗸ": 8.66,
  "ᗹ": 8.66,
  "ᗺ": 8.66,
  "ᗻ": 11.53,
  "ᗼ": 11.53,
  "ᗽ": 8.75,
  "ᗾ": 8.75,
  "ᗿ": 8.75,
  "ᘀ": 8.75,
  "ᘁ": 5.61,
  "ᘂ": 9.03,
  "ᘃ": 9.03,
  "ᘄ": 9.63,
  "ᘅ": 9.63,
  "ᘆ": 9.63,
  "ᘇ": 9.63,
  "ᘈ": 11.55,
  "ᘉ": 11.55,
  "ᘊ": 8.03,
  "ᘋ": 8.03,
  "ᘌ": 8.03,
  "ᘍ": 8.03,
  "ᘎ": 9.88,
  "ᘏ": 9.88,
  "ᘐ": 9.2,
  "ᘑ": 9.2,
  "ᘒ": 9.2,
  "ᘓ": 9.2,
  "ᘔ": 9.3,
  "ᘕ": 9.3,
  "ᘖ": 9.3,
  "ᘗ": 11.2,
  "ᘘ": 11.2,
  "ᘙ": 11.2,
  "ᘚ": 11.2,
  "ᘛ": 11.2,
  "ᘜ": 8.91,
  "ᘝ": 8.91,
  "ᘞ": 10.64,
  "ᘟ": 10.64,
  "ᘠ": 10.64,
  "ᘡ": 10.64,
  "ᘢ": 9.84,
  "ᘣ": 9.84,
  "ᘤ": 10.3,
  "ᘥ": 10.3,
  "ᘦ": 10.3,
  "ᘧ": 10.3,
  "ᘨ": 10.55,
  "ᘩ": 10.55,
  "ᘪ": 10.41,
  "ᘫ": 10.41,
  "ᘬ": 10.41,
  "ᘭ": 10.41,
  "ᘮ": 10.31,
  "ᘯ": 10.31,
  "ᘰ": 10.55,
  "ᘱ": 10.55,
  "ᘲ": 10.55,
  "ᘳ": 10.55,
  "ᘴ": 10.91,
  "ᘵ": 10.91,
  "ᘶ": 10.55,
  "ᘷ": 10.55,
  "ᘸ": 10.55,
  "ᘹ": 10.55,
  "ᘺ": 11.98,
  "ᘻ": 11.98,
  "ᘼ": 10.39,
  "ᘽ": 10.39,
  "ᘾ": 10.39,
  "ᘿ": 10.39,
  "ᙀ": 9.84,
  "ᙁ": 9.84,
  "ᙂ": 9.89,
  "ᙃ": 9.89,
  "ᙄ": 9.89,
  "ᙅ": 9.89,
  "ᙆ": 4.89,
  "ᙇ": 4.89,
  "ᙈ": 9.84,
  "ᙉ": 9.84,
  "ᙊ": 9.89,
  "ᙋ": 9.89,
  "ᙌ": 9.89,
  "ᙍ": 9.89,
  "ᙎ": 11.66,
  "ᙏ": 11.66,
  "ᙐ": 8.52,
  "ᙑ": 8.52,
  "ᙒ": 8.52,
  "ᙓ": 8.52,
  "ᙔ": 11.66,
  "ᙕ": 11.66,
  "ᙖ": 8.98,
  "ᙗ": 8.98,
  "ᙘ": 8.98,
  "ᙙ": 8.98,
  "ᙚ": 5.14,
  "ᙛ": 11.66,
  "ᙜ": 11.66,
  "ᙝ": 9.31,
  "ᙞ": 9.31,
  "ᙟ": 9.31,
  "ᙠ": 9.31,
  "ᙡ": 11.66,
  "ᙢ": 11.66,
  "ᙣ": 8.59,
  "ᙤ": 8.59,
  "ᙥ": 8.59,
  "ᙦ": 8.59,
  "ᙧ": 11.66,
  "ᙨ": 11.66,
  "ᙩ": 9.05,
  "ᙪ": 9.05,
  "ᙫ": 9.05,
  "ᙬ": 9.05,
  "᙭": 7.5,
  "᙮": 4.06,
  "ᙯ": 11.86,
  "ᙰ": 14.38,
  "ᙱ": 17.94,
  "ᙲ": 18.34,
  "ᙳ": 15.14,
  "ᙴ": 15.14,
  "ᙵ": 17.94,
  "ᙶ": 17.94,
  "ᚁ": 4.5,
  "ᚂ": 6.31,
  "ᚃ": 8.11,
  "ᚄ": 9.91,
  "ᚅ": 11.7,
  "ᚆ": 4.5,
  "ᚇ": 6.31,
  "ᚈ": 8.11,
  "ᚉ": 9.91,
  "ᚊ": 11.7,
  "ᚋ": 5.41,
  "ᚌ": 7.2,
  "ᚍ": 9,
  "ᚎ": 10.81,
  "ᚏ": 12.61,
  "ᚐ": 4.5,
  "ᚑ": 6.31,
  "ᚒ": 8.11,
  "ᚓ": 9.91,
  "ᚔ": 11.7,
  "ᚕ": 7.2,
  "ᚖ": 7.66,
  "ᚗ": 7,
  "ᚘ": 7.63,
  "ᚙ": 9.7,
  "ᚚ": 7.2,
  "᚛": 6.88,
  "᚜": 6.88,
  "ᚠ": 8.06,
  "ᚡ": 8.06,
  "ᚢ": 7.39,
  "ᚣ": 7.39,
  "ᚤ": 7.39,
  "ᚥ": 7.39,
  "ᚦ": 7.13,
  "ᚧ": 7.13,
  "ᚨ": 6.28,
  "ᚩ": 9.17,
  "ᚪ": 8.94,
  "ᚫ": 4.77,
  "ᚬ": 9.33,
  "ᚭ": 6.16,
  "ᚮ": 6.69,
  "ᚯ": 9.41,
  "ᚰ": 9.14,
  "ᚱ": 7.45,
  "ᚲ": 6,
  "ᚳ": 7.3,
  "ᚴ": 7.53,
  "ᚵ": 7.53,
  "ᚶ": 8.5,
  "ᚷ": 12.22,
  "ᚸ": 12.41,
  "ᚹ": 6.97,
  "ᚺ": 7.69,
  "ᚻ": 7.69,
  "ᚼ": 9.25,
  "ᚽ": 5.41,
  "ᚾ": 9.22,
  "ᚿ": 6.02,
  "ᛀ": 9.25,
  "ᛁ": 3.48,
  "ᛂ": 4.5,
  "ᛃ": 8.91,
  "ᛄ": 6.94,
  "ᛅ": 9.11,
  "ᛆ": 6.69,
  "ᛇ": 11.77,
  "ᛈ": 9.09,
  "ᛉ": 12.16,
  "ᛊ": 7.77,
  "ᛋ": 7.22,
  "ᛌ": 3.55,
  "ᛍ": 5.42,
  "ᛎ": 9.31,
  "ᛏ": 11.7,
  "ᛐ": 7.92,
  "ᛑ": 8.94,
  "ᛒ": 7.19,
  "ᛓ": 6.22,
  "ᛔ": 7.19,
  "ᛕ": 7.86,
  "ᛖ": 11.53,
  "ᛗ": 11.53,
  "ᛘ": 9.94,
  "ᛙ": 5.25,
  "ᛚ": 7.36,
  "ᛛ": 8.38,
  "ᛜ": 10.83,
  "ᛝ": 8.39,
  "ᛞ": 11.91,
  "ᛟ": 8.48,
  "ᛠ": 15.33,
  "ᛡ": 7.97,
  "ᛢ": 15.45,
  "ᛣ": 11.83,
  "ᛤ": 12.41,
  "ᛥ": 11.39,
  "ᛦ": 9.69,
  "ᛧ": 3.67,
  "ᛨ": 11.91,
  "ᛩ": 7.53,
  "ᛪ": 10.78,
  "᛫": 4.8,
  "᛬": 4.3,
  "᛭": 8.05,
  "ᛮ": 10.56,
  "ᛯ": 10.09,
  "ᛰ": 8.47,
  "ក": 7.2,
  "ខ": 7.2,
  "គ": 7.2,
  "ឃ": 11.41,
  "ង": 7.2,
  "ច": 7.2,
  "ឆ": 7.2,
  "ជ": 7.2,
  "ឈ": 15.61,
  "ញ": 11.41,
  "ដ": 7.2,
  "ឋ": 7.2,
  "ឌ": 7.2,
  "ឍ": 11.41,
  "ណ": 15.61,
  "ត": 7.2,
  "ថ": 7.2,
  "ទ": 7.47,
  "ធ": 7.2,
  "ន": 7.2,
  "ប": 7.2,
  "ផ": 7.2,
  "ព": 7.2,
  "ភ": 7.2,
  "ម": 7.2,
  "យ": 11.41,
  "រ": 4.2,
  "ល": 11.41,
  "វ": 4.2,
  "ឝ": 7.2,
  "ឞ": 7.2,
  "ស": 11.41,
  "ហ": 11.41,
  "ឡ": 11.67,
  "អ": 6.97,
  "ឣ": 7.2,
  "ឤ": 11.41,
  "ឥ": 7.2,
  "ឦ": 11.41,
  "ឧ": 7.2,
  "ឨ": 7.2,
  "ឩ": 8.53,
  "ឪ": 7.45,
  "ឫ": 7.2,
  "ឬ": 7.2,
  "ឭ": 7.2,
  "ឮ": 7.2,
  "ឯ": 7.2,
  "ឰ": 7.2,
  "ឱ": 7.2,
  "ឲ": 7.2,
  "ឳ": 7.2,
  "឴": 0,
  "឵": 0,
  "ា": 10.3,
  "ិ": 6.69,
  "ី": 6.69,
  "ឹ": 6.69,
  "ឺ": 6.69,
  "ុ": 5.73,
  "ូ": 5.73,
  "ួ": 5.73,
  "ើ": 10.81,
  "ឿ": 12.27,
  "ៀ": 12.27,
  "េ": 9.98,
  "ែ": 9.98,
  "ៃ": 10.22,
  "ោ": 14.52,
  "ៅ": 14.94,
  "ំ": 5.73,
  "ះ": 9.55,
  "ៈ": 8.58,
  "៉": 5.73,
  "៊": 7.17,
  "់": 5.73,
  "៌": 5.73,
  "៍": 5.78,
  "៎": 5.73,
  "៏": 5.73,
  "័": 5.73,
  "៑": 5.73,
  "្": 5.73,
  "៓": 5.73,
  "។": 5.58,
  "៕": 7.45,
  "៖": 4.13,
  "ៗ": 6.36,
  "៘": 21.91,
  "៙": 7.77,
  "៚": 14.11,
  "៛": 4.56,
  "ៜ": 6.36,
  "០": 6.36,
  "១": 6.36,
  "២": 7.94,
  "៣": 10.56,
  "៤": 7.14,
  "៥": 7.14,
  "៦": 7.14,
  "៧": 8.38,
  "៨": 7.14,
  "៩": 6.78,
  "᠀": 6.42,
  "᠁": 12.36,
  "᠂": 4.61,
  "᠃": 7.67,
  "᠄": 4.61,
  "᠅": 6.98,
  "᠆": 4.81,
  "᠇": 6.42,
  "᠈": 5.06,
  "᠉": 7.72,
  "᠊": 2.02,
  "᠋": 0,
  "᠌": 0,
  "᠍": 0,
  "᠐": 6.88,
  "᠑": 6.88,
  "᠒": 7.27,
  "᠓": 10.5,
  "᠔": 6.42,
  "᠕": 8.55,
  "᠖": 7.56,
  "᠗": 7.56,
  "᠘": 6.78,
  "᠙": 6.42,
  "ᠠ": 11.16,
  "ᠡ": 9.89,
  "ᠢ": 11.92,
  "ᠣ": 11.19,
  "ᠤ": 11.19,
  "ᠥ": 14.83,
  "ᠦ": 14.83,
  "ᠧ": 14.41,
  "ᠨ": 6.81,
  "ᠩ": 8.86,
  "ᠪ": 8.17,
  "ᠫ": 8.11,
  "ᠬ": 10.36,
  "ᠭ": 10.36,
  "ᠮ": 6.81,
  "ᠯ": 6.81,
  "ᠰ": 9.08,
  "ᠱ": 9.08,
  "ᠲ": 8.95,
  "ᠳ": 8.98,
  "ᠴ": 9.22,
  "ᠵ": 5.95,
  "ᠶ": 5.95,
  "ᠷ": 8.33,
  "ᠸ": 7.16,
  "ᠹ": 8.17,
  "ᠺ": 6.61,
  "ᠻ": 6.61,
  "ᠼ": 10.72,
  "ᠽ": 9.78,
  "ᠾ": 13.06,
  "ᠿ": 10.91,
  "ᡀ": 13.06,
  "ᡁ": 7.7,
  "ᡂ": 14.13,
  "ᡃ": 2.42,
  "ᡄ": 10.8,
  "ᡅ": 10.88,
  "ᡆ": 10.98,
  "ᡇ": 13.52,
  "ᡈ": 10.98,
  "ᡉ": 13.52,
  "ᡊ": 12.83,
  "ᡋ": 11.11,
  "ᡌ": 8.59,
  "ᡍ": 10.34,
  "ᡎ": 10.34,
  "ᡏ": 6.31,
  "ᡐ": 8.69,
  "ᡑ": 6.61,
  "ᡒ": 9.42,
  "ᡓ": 9.22,
  "ᡔ": 7.81,
  "ᡕ": 5.42,
  "ᡖ": 9,
  "ᡗ": 6.83,
  "ᡘ": 6.58,
  "ᡙ": 13.2,
  "ᡚ": 8.88,
  "ᡛ": 6.22,
  "ᡜ": 8.73,
  "ᡝ": 9.89,
  "ᡞ": 11.92,
  "ᡟ": 3.42,
  "ᡠ": 11.19,
  "ᡡ": 14.83,
  "ᡢ": 11.05,
  "ᡣ": 5.14,
  "ᡤ": 8.33,
  "ᡥ": 9.52,
  "ᡦ": 8.63,
  "ᡧ": 8.19,
  "ᡨ": 9.98,
  "ᡩ": 8.95,
  "ᡪ": 6.16,
  "ᡫ": 7.16,
  "ᡬ": 6.61,
  "ᡭ": 6.61,
  "ᡮ": 9.08,
  "ᡯ": 9.08,
  "ᡰ": 4.48,
  "ᡱ": 9.22,
  "ᡲ": 6.16,
  "ᡳ": 11.92,
  "ᡴ": 6.56,
  "ᡵ": 10.42,
  "ᡶ": 6.73,
  "ᡷ": 5.95,
  "ᢀ": 7,
  "ᢁ": 9.48,
  "ᢂ": 8.08,
  "ᢃ": 5.8,
  "ᢄ": 5.8,
  "ᢅ": 19.83,
  "ᢆ": 18.98,
  "ᢇ": 12.27,
  "ᢈ": 11.92,
  "ᢉ": 8.48,
  "ᢊ": 10.92,
  "ᢋ": 7.53,
  "ᢌ": 6.13,
  "ᢍ": 9.52,
  "ᢎ": 7.39,
  "ᢏ": 6.31,
  "ᢐ": 6.53,
  "ᢑ": 6.61,
  "ᢒ": 8.17,
  "ᢓ": 8.11,
  "ᢔ": 7.86,
  "ᢕ": 10,
  "ᢖ": 8.73,
  "ᢗ": 6.61,
  "ᢘ": 7.5,
  "ᢙ": 10.33,
  "ᢚ": 14.02,
  "ᢛ": 10.2,
  "ᢜ": 9.08,
  "ᢝ": 11.08,
  "ᢞ": 6.25,
  "ᢟ": 8.38,
  "ᢠ": 6.61,
  "ᢡ": 12.58,
  "ᢢ": 9.08,
  "ᢣ": 6.25,
  "ᢤ": 9.08,
  "ᢥ": 9.08,
  "ᢦ": 6.06,
  "ᢧ": 6.69,
  "ᢨ": 11.98,
  "ᢩ": 7.14,
  "Ḁ": 8.09,
  "ḁ": 6.63,
  "Ḃ": 7.89,
  "ḃ": 7.38,
  "Ḅ": 7.89,
  "ḅ": 7.38,
  "Ḇ": 7.89,
  "ḇ": 7.38,
  "Ḉ": 8.59,
  "ḉ": 6.72,
  "Ḋ": 8.72,
  "ḋ": 7.38,
  "Ḍ": 8.72,
  "ḍ": 7.38,
  "Ḏ": 8.72,
  "ḏ": 7.38,
  "Ḑ": 8.72,
  "ḑ": 7.38,
  "Ḓ": 8.72,
  "ḓ": 7.38,
  "Ḕ": 7.16,
  "ḕ": 6.86,
  "Ḗ": 7.16,
  "ḗ": 6.86,
  "Ḙ": 7.16,
  "ḙ": 6.86,
  "Ḛ": 7.16,
  "ḛ": 6.86,
  "Ḝ": 7.16,
  "ḝ": 6.86,
  "Ḟ": 6.88,
  "ḟ": 4.34,
  "Ḡ": 8.97,
  "ḡ": 7.31,
  "Ḣ": 8.91,
  "ḣ": 7.06,
  "Ḥ": 8.91,
  "ḥ": 7.06,
  "Ḧ": 8.91,
  "ḧ": 7.06,
  "Ḩ": 8.91,
  "ḩ": 7.06,
  "Ḫ": 8.91,
  "ḫ": 7.06,
  "Ḭ": 3.22,
  "ḭ": 2.97,
  "Ḯ": 3.22,
  "ḯ": 2.97,
  "Ḱ": 7.91,
  "ḱ": 6.52,
  "Ḳ": 7.91,
  "ḳ": 6.52,
  "Ḵ": 7.91,
  "ḵ": 6.52,
  "Ḷ": 6.83,
  "ḷ": 3.05,
  "Ḹ": 6.83,
  "ḹ": 3.05,
  "Ḻ": 6.83,
  "ḻ": 3.05,
  "Ḽ": 6.83,
  "ḽ": 3.05,
  "Ḿ": 10.5,
  "ḿ": 10.45,
  "Ṁ": 10.5,
  "ṁ": 10.45,
  "Ṃ": 10.5,
  "ṃ": 10.45,
  "Ṅ": 8.91,
  "ṅ": 7.02,
  "Ṇ": 8.91,
  "ṇ": 7.02,
  "Ṉ": 8.91,
  "ṉ": 7.02,
  "Ṋ": 8.91,
  "ṋ": 7.02,
  "Ṍ": 9.27,
  "ṍ": 7.09,
  "Ṏ": 9.27,
  "ṏ": 7.09,
  "Ṑ": 9.27,
  "ṑ": 7.09,
  "Ṓ": 9.27,
  "ṓ": 7.09,
  "Ṕ": 7.63,
  "ṕ": 7.33,
  "Ṗ": 7.63,
  "ṗ": 7.33,
  "Ṙ": 7.84,
  "ṙ": 4.58,
  "Ṛ": 7.84,
  "ṛ": 4.58,
  "Ṝ": 7.84,
  "ṝ": 4.58,
  "Ṟ": 7.84,
  "ṟ": 4.58,
  "Ṡ": 7.66,
  "ṡ": 6.28,
  "Ṣ": 7.66,
  "ṣ": 6.28,
  "Ṥ": 7.66,
  "ṥ": 6.28,
  "Ṧ": 7.66,
  "ṧ": 6.28,
  "Ṩ": 7.66,
  "ṩ": 6.28,
  "Ṫ": 7.61,
  "ṫ": 4.36,
  "Ṭ": 7.61,
  "ṭ": 4.36,
  "Ṯ": 7.61,
  "ṯ": 4.36,
  "Ṱ": 7.61,
  "ṱ": 4.36,
  "Ṳ": 8.86,
  "ṳ": 7.02,
  "Ṵ": 8.86,
  "ṵ": 7.02,
  "Ṷ": 8.86,
  "ṷ": 7.02,
  "Ṹ": 8.86,
  "ṹ": 7.02,
  "Ṻ": 8.86,
  "ṻ": 7.02,
  "Ṽ": 8.09,
  "ṽ": 6.52,
  "Ṿ": 8.09,
  "ṿ": 6.52,
  "Ẁ": 11.63,
  "ẁ": 9.3,
  "Ẃ": 11.63,
  "ẃ": 9.3,
  "Ẅ": 11.63,
  "ẅ": 9.3,
  "Ẇ": 11.63,
  "ẇ": 9.3,
  "Ẉ": 11.63,
  "ẉ": 9.3,
  "Ẋ": 8.16,
  "ẋ": 6.3,
  "Ẍ": 8.16,
  "ẍ": 6.3,
  "Ẏ": 7.88,
  "ẏ": 6.52,
  "Ẑ": 7.95,
  "ẑ": 6.47,
  "Ẓ": 7.95,
  "ẓ": 6.47,
  "Ẕ": 7.95,
  "ẕ": 6.47,
  "ẖ": 7.06,
  "ẗ": 4.36,
  "ẘ": 9.3,
  "ẙ": 6.52,
  "ẚ": 6.69,
  "ẛ": 4.34,
  "Ạ": 8.09,
  "ạ": 6.63,
  "Ả": 8.09,
  "ả": 6.63,
  "Ấ": 8.09,
  "ấ": 6.63,
  "Ầ": 8.09,
  "ầ": 6.63,
  "Ẩ": 8.09,
  "ẩ": 6.63,
  "Ẫ": 8.09,
  "ẫ": 6.63,
  "Ậ": 8.09,
  "ậ": 6.63,
  "Ắ": 8.09,
  "ắ": 6.63,
  "Ằ": 8.09,
  "ằ": 6.63,
  "Ẳ": 8.09,
  "ẳ": 6.63,
  "Ẵ": 8.09,
  "ẵ": 6.63,
  "Ặ": 8.09,
  "ặ": 6.63,
  "Ẹ": 7.16,
  "ẹ": 6.86,
  "Ẻ": 7.16,
  "ẻ": 6.86,
  "Ẽ": 7.16,
  "ẽ": 6.86,
  "Ế": 7.16,
  "ế": 6.86,
  "Ề": 7.16,
  "ề": 6.86,
  "Ể": 7.16,
  "ể": 6.86,
  "Ễ": 7.16,
  "ễ": 6.86,
  "Ệ": 7.16,
  "ệ": 6.86,
  "Ỉ": 3.22,
  "ỉ": 2.97,
  "Ị": 3.22,
  "ị": 2.97,
  "Ọ": 9.27,
  "ọ": 7.09,
  "Ỏ": 9.27,
  "ỏ": 7.09,
  "Ố": 9.27,
  "ố": 7.09,
  "Ồ": 9.27,
  "ồ": 7.09,
  "Ổ": 9.27,
  "ổ": 7.09,
  "Ỗ": 9.27,
  "ỗ": 7.09,
  "Ộ": 9.27,
  "ộ": 7.09,
  "Ớ": 9.27,
  "ớ": 7.09,
  "Ờ": 9.27,
  "ờ": 7.09,
  "Ở": 9.27,
  "ở": 7.09,
  "Ỡ": 9.27,
  "ỡ": 7.23,
  "Ợ": 9.27,
  "ợ": 7.09,
  "Ụ": 8.86,
  "ụ": 7.02,
  "Ủ": 8.86,
  "ủ": 7.02,
  "Ứ": 8.86,
  "ứ": 7.34,
  "Ừ": 8.86,
  "ừ": 7.34,
  "Ử": 8.86,
  "ử": 7.34,
  "Ữ": 8.86,
  "ữ": 7.34,
  "Ự": 8.86,
  "ự": 7.34,
  "Ỳ": 7.88,
  "ỳ": 6.52,
  "Ỵ": 7.88,
  "ỵ": 6.52,
  "Ỷ": 7.88,
  "ỷ": 6.52,
  "Ỹ": 7.88,
  "ỹ": 6.52,
  "ἀ": 7.45,
  "ἁ": 7.34,
  "ἂ": 7.45,
  "ἃ": 7.34,
  "ἄ": 7.45,
  "ἅ": 7.34,
  "ἆ": 7.34,
  "ἇ": 7.34,
  "Ἀ": 8.09,
  "Ἁ": 8.55,
  "Ἂ": 8.09,
  "Ἃ": 11.2,
  "Ἄ": 8.09,
  "Ἅ": 11.33,
  "Ἆ": 11.7,
  "Ἇ": 11.44,
  "ἐ": 6.2,
  "ἑ": 6.69,
  "ἒ": 6.2,
  "ἓ": 6.69,
  "ἔ": 6.2,
  "ἕ": 6.69,
  "Ἐ": 7.16,
  "Ἑ": 10.14,
  "Ἒ": 7.16,
  "Ἓ": 12.81,
  "Ἔ": 7.16,
  "Ἕ": 12.63,
  "ἠ": 7.38,
  "ἡ": 7.34,
  "ἢ": 7.38,
  "ἣ": 7.34,
  "ἤ": 7.38,
  "ἥ": 7.34,
  "ἦ": 7.34,
  "ἧ": 7.34,
  "Ἠ": 8.91,
  "Ἡ": 10.81,
  "Ἢ": 8.91,
  "Ἣ": 13.47,
  "Ἤ": 8.91,
  "Ἥ": 13.28,
  "Ἦ": 13.75,
  "Ἧ": 13.75,
  "ἰ": 3.61,
  "ἱ": 3.34,
  "ἲ": 3.61,
  "ἳ": 3.34,
  "ἴ": 3.61,
  "ἵ": 3.34,
  "ἶ": 3.34,
  "ἷ": 3.34,
  "Ἰ": 3.22,
  "Ἱ": 5.48,
  "Ἲ": 3.22,
  "Ἳ": 8.14,
  "Ἴ": 3.22,
  "Ἵ": 7.95,
  "Ἶ": 8.42,
  "Ἷ": 8.42,
  "ὀ": 7.09,
  "ὁ": 7.34,
  "ὂ": 7.09,
  "ὃ": 7.34,
  "ὄ": 7.09,
  "ὅ": 7.34,
  "Ὀ": 9.27,
  "Ὁ": 11.48,
  "Ὂ": 9.27,
  "Ὃ": 14.14,
  "Ὄ": 9.27,
  "Ὅ": 13.95,
  "ὐ": 6.66,
  "ὑ": 7.34,
  "ὒ": 6.66,
  "ὓ": 7.34,
  "ὔ": 6.66,
  "ὕ": 7.34,
  "ὖ": 7.34,
  "ὗ": 7.34,
  "Ὑ": 10.14,
  "Ὓ": 12.81,
  "Ὕ": 12.63,
  "Ὗ": 13.09,
  "ὠ": 9.16,
  "ὡ": 9.11,
  "ὢ": 9.16,
  "ὣ": 9.11,
  "ὤ": 9.16,
  "ὥ": 9.11,
  "ὦ": 9.11,
  "ὧ": 9.11,
  "Ὠ": 9.33,
  "Ὡ": 11.36,
  "Ὢ": 9.33,
  "Ὣ": 14.03,
  "Ὤ": 9.33,
  "Ὥ": 13.83,
  "Ὦ": 14.3,
  "Ὧ": 14.3,
  "ὰ": 7.45,
  "ά": 7.45,
  "ὲ": 6.2,
  "έ": 6.2,
  "ὴ": 7.38,
  "ή": 7.38,
  "ὶ": 3.61,
  "ί": 3.61,
  "ὸ": 7.09,
  "ό": 7.09,
  "ὺ": 6.66,
  "ύ": 6.66,
  "ὼ": 9.16,
  "ώ": 9.16,
  "ᾀ": 7.34,
  "ᾁ": 7.34,
  "ᾂ": 7.34,
  "ᾃ": 7.34,
  "ᾄ": 7.34,
  "ᾅ": 7.34,
  "ᾆ": 7.34,
  "ᾇ": 7.34,
  "ᾈ": 12.11,
  "ᾉ": 12.08,
  "ᾊ": 14.36,
  "ᾋ": 14.77,
  "ᾌ": 14.25,
  "ᾍ": 14.42,
  "ᾎ": 14.75,
  "ᾏ": 14.72,
  "ᾐ": 7.34,
  "ᾑ": 7.34,
  "ᾒ": 7.34,
  "ᾓ": 7.34,
  "ᾔ": 7.34,
  "ᾕ": 7.34,
  "ᾖ": 7.34,
  "ᾗ": 7.34,
  "ᾘ": 14.14,
  "ᾙ": 14.14,
  "ᾚ": 16.69,
  "ᾛ": 16.81,
  "ᾜ": 16.53,
  "ᾝ": 16.61,
  "ᾞ": 17.08,
  "ᾟ": 17.08,
  "ᾠ": 9.11,
  "ᾡ": 9.11,
  "ᾢ": 9.11,
  "ᾣ": 9.11,
  "ᾤ": 9.11,
  "ᾥ": 9.11,
  "ᾦ": 9.11,
  "ᾧ": 9.11,
  "ᾨ": 14.7,
  "ᾩ": 14.7,
  "ᾪ": 17.23,
  "ᾫ": 17.36,
  "ᾬ": 17.08,
  "ᾭ": 17.17,
  "ᾮ": 17.64,
  "ᾯ": 17.64,
  "ᾰ": 7.45,
  "ᾱ": 7.45,
  "ᾲ": 7.34,
  "ᾳ": 7.34,
  "ᾴ": 7.34,
  "ᾶ": 7.34,
  "ᾷ": 7.34,
  "Ᾰ": 8.09,
  "Ᾱ": 8.09,
  "Ὰ": 8.09,
  "Ά": 8.09,
  "ᾼ": 11.5,
  "᾽": 2.14,
  "ι": 3.61,
  "᾿": 2.66,
  "῀": 3.22,
  "῁": 3.22,
  "ῂ": 7.34,
  "ῃ": 7.34,
  "ῄ": 7.34,
  "ῆ": 7.34,
  "ῇ": 7.34,
  "Ὲ": 7.16,
  "Έ": 8.72,
  "Ὴ": 8.91,
  "Ή": 10.48,
  "ῌ": 12.3,
  "῍": 2.66,
  "῎": 2.66,
  "῏": 5.08,
  "ῐ": 3.61,
  "ῑ": 3.61,
  "ῒ": 3.61,
  "ΐ": 3.61,
  "ῖ": 3.34,
  "ῗ": 3.34,
  "Ῐ": 3.22,
  "Ῑ": 3.22,
  "Ὶ": 3.22,
  "Ί": 4.78,
  "῝": 2.66,
  "῞": 2.66,
  "῟": 5.08,
  "ῠ": 6.66,
  "ῡ": 6.66,
  "ῢ": 6.66,
  "ΰ": 6.66,
  "ῤ": 7.14,
  "ῥ": 7.34,
  "ῦ": 7.34,
  "ῧ": 7.34,
  "Ῠ": 7.88,
  "Ῡ": 7.88,
  "Ὺ": 7.88,
  "Ύ": 9.75,
  "Ῥ": 10.14,
  "῭": 6,
  "΅": 6,
  "`": 6,
  "ῲ": 9.11,
  "ῳ": 9.11,
  "ῴ": 9.11,
  "ῶ": 9.11,
  "ῷ": 9.11,
  "Ὸ": 9.27,
  "Ό": 10.03,
  "Ὼ": 9.33,
  "Ώ": 10.52,
  "ῼ": 12.72,
  "´": 6,
  "῾": 2.66,
  "​": 0,
  "‌": 0,
  "‍": 0,
  "‎": 0,
  "‏": 0,
  "‐": 5.67,
  "‑": 5.67,
  "‒": 7.56,
  "―": 12,
  "‖": 5.33,
  "‗": 4,
  "‛": 2.67,
  "‟": 4,
  "‣": 5.67,
  "․": 3.89,
  "‥": 8.02,
  "‧": 3.89,
  "‪": 0,
  "‫": 0,
  "‬": 0,
  "‭": 0,
  "‮": 0,
  "‱": 16.55,
  "′": 3.56,
  "″": 5.52,
  "‴": 7.45,
  "‵": 4,
  "‶": 6.28,
  "‷": 8.09,
  "‸": 6.84,
  "※": 7.02,
  "‼": 6.69,
  "‽": 6.16,
  "‾": 4,
  "‿": 7.22,
  "⁀": 11.67,
  "⁁": 6.84,
  "⁂": 10.94,
  "⁃": 5.67,
  "⁄": 2.72,
  "⁅": 3.34,
  "⁆": 3.34,
  "⁈": 10.02,
  "⁉": 10.02,
  "⁊": 7.45,
  "⁋": 6.45,
  "⁌": 6.45,
  "⁍": 6.45,
  "⁪": 0,
  "⁫": 0,
  "⁬": 0,
  "⁭": 0,
  "⁮": 0,
  "⁯": 0,
  "⁰": 4.28,
  "⁴": 4.38,
  "⁵": 4.2,
  "⁶": 4.33,
  "⁷": 3.88,
  "⁸": 4.34,
  "⁹": 4.33,
  "⁺": 4.03,
  "⁻": 4.03,
  "⁼": 4.03,
  "⁽": 3.2,
  "⁾": 3.2,
  "ⁿ": 4.95,
  "₀": 4.28,
  "₁": 3.16,
  "₂": 4.11,
  "₃": 4.27,
  "₄": 4.38,
  "₅": 4.2,
  "₆": 4.33,
  "₇": 3.88,
  "₈": 4.34,
  "₉": 4.33,
  "₊": 4.03,
  "₋": 4.03,
  "₌": 4.03,
  "₍": 3.2,
  "₎": 3.2,
  "₠": 6.67,
  "₡": 7.56,
  "₢": 7.56,
  "₣": 7.56,
  "₤": 7.56,
  "₥": 7.56,
  "₦": 7.56,
  "₧": 7.56,
  "₨": 12.23,
  "₩": 10.73,
  "₪": 8.67,
  "₫": 7.56,
  "₭": 7.56,
  "₮": 7.56,
  "₯": 12.52,
  "⃐": 0,
  "⃑": 0,
  "⃒": 0,
  "⃓": 0,
  "⃔": 0,
  "⃕": 0,
  "⃖": 0,
  "⃗": 0,
  "⃘": 0,
  "⃙": 0,
  "⃚": 0,
  "⃛": 0,
  "⃜": 0,
  "⃝": 11.11,
  "⃞": 10.89,
  "⃟": 10.39,
  "⃠": 10.81,
  "⃡": 0,
  "⃢": 12,
  "⃣": 0,
  "℀": 10.39,
  "℁": 10.17,
  "ℂ": 8.67,
  "℃": 14.25,
  "℄": 7.56,
  "℅": 10.61,
  "℆": 10.83,
  "ℇ": 7.59,
  "℈": 7.23,
  "℉": 12.53,
  "ℊ": 11.09,
  "ℋ": 10.56,
  "ℌ": 7.72,
  "ℍ": 8.67,
  "ℎ": 6.03,
  "ℏ": 6.7,
  "ℐ": 6.7,
  "ℑ": 7.22,
  "ℒ": 8.3,
  "ℓ": 6,
  "℔": 9.81,
  "ℕ": 7.23,
  "№": 13.92,
  "℗": 8.33,
  "℘": 7.38,
  "ℙ": 8.02,
  "ℚ": 9.34,
  "ℛ": 8.91,
  "ℜ": 8.75,
  "ℝ": 7.23,
  "℞": 7.59,
  "℟": 8.53,
  "℠": 10.11,
  "℡": 11.02,
  "℣": 8.36,
  "ℤ": 7.23,
  "℥": 6.16,
  "Ω": 9.33,
  "℧": 9.22,
  "ℨ": 6.13,
  "℩": 2.67,
  "K": 7.91,
  "Å": 8.09,
  "ℬ": 8.42,
  "ℭ": 8,
  "℮": 9.13,
  "ℯ": 5.94,
  "ℰ": 7.34,
  "ℱ": 7.95,
  "Ⅎ": 7.34,
  "ℳ": 10.75,
  "ℴ": 6.55,
  "ℵ": 7.73,
  "ℶ": 6.77,
  "ℷ": 5.14,
  "ℸ": 6.02,
  "ℹ": 7.92,
  "℺": 9.34,
  "⅓": 9.92,
  "⅔": 10.86,
  "⅕": 9.86,
  "⅖": 10.86,
  "⅗": 11.02,
  "⅘": 11.13,
  "⅙": 10.02,
  "⅚": 11.06,
  "⅛": 10.03,
  "⅜": 11.14,
  "⅝": 11.08,
  "⅞": 9.73,
  "⅟": 10.02,
  "Ⅰ": 3.22,
  "Ⅱ": 5.89,
  "Ⅲ": 8.56,
  "Ⅳ": 10.06,
  "Ⅴ": 8.09,
  "Ⅵ": 10.06,
  "Ⅶ": 12.73,
  "Ⅷ": 15.41,
  "Ⅸ": 9.92,
  "Ⅹ": 8.16,
  "Ⅺ": 9.92,
  "Ⅻ": 12.59,
  "Ⅼ": 6.83,
  "Ⅽ": 8.59,
  "Ⅾ": 8.72,
  "Ⅿ": 10.5,
  "ⅰ": 2.97,
  "ⅱ": 5.55,
  "ⅲ": 8.11,
  "ⅳ": 8.05,
  "ⅴ": 6.69,
  "ⅵ": 8.05,
  "ⅶ": 10.52,
  "ⅷ": 13.09,
  "ⅸ": 7.88,
  "ⅹ": 6.42,
  "ⅺ": 7.88,
  "ⅻ": 10.36,
  "ⅼ": 3.05,
  "ⅽ": 6.72,
  "ⅾ": 7.38,
  "ⅿ": 10.45,
  "ↀ": 12.5,
  "ↁ": 9,
  "ↂ": 12.5,
  "Ↄ": 8.59,
  "←": 10.88,
  "↑": 9.38,
  "→": 10.88,
  "↓": 9.38,
  "↔": 11.52,
  "↕": 6.63,
  "↖": 9.17,
  "↗": 9.17,
  "↘": 9.17,
  "↙": 9.17,
  "↚": 10.88,
  "↛": 10.88,
  "↜": 7.23,
  "↝": 7.23,
  "↞": 7.23,
  "↟": 7.23,
  "↠": 7.23,
  "↡": 7.23,
  "↢": 7.23,
  "↣": 7.23,
  "↤": 7.23,
  "↥": 7.23,
  "↦": 7.23,
  "↧": 7.23,
  "↨": 7.23,
  "↩": 12,
  "↪": 11.86,
  "↫": 7.23,
  "↬": 7.23,
  "↭": 7.23,
  "↮": 11.52,
  "↯": 7.23,
  "↰": 10.39,
  "↱": 10.39,
  "↲": 10.39,
  "↳": 10.39,
  "↴": 10.39,
  "↵": 12,
  "↶": 10.39,
  "↷": 10.39,
  "↸": 12,
  "↹": 12,
  "↺": 9.83,
  "↻": 9.83,
  "↼": 10.39,
  "↽": 7.23,
  "↾": 7.23,
  "↿": 7.23,
  "⇀": 10.39,
  "⇁": 7.23,
  "⇂": 7.23,
  "⇃": 7.23,
  "⇄": 11.09,
  "⇅": 13.31,
  "⇆": 11.09,
  "⇇": 7.23,
  "⇈": 7.23,
  "⇉": 7.23,
  "⇊": 7.23,
  "⇋": 11.09,
  "⇌": 11.09,
  "⇍": 10.56,
  "⇎": 7.23,
  "⇏": 10.44,
  "⇐": 11.09,
  "⇑": 10.39,
  "⇒": 10.16,
  "⇓": 10.39,
  "⇔": 10.16,
  "⇕": 7.23,
  "⇖": 7.23,
  "⇗": 7.23,
  "⇘": 7.23,
  "⇙": 7.23,
  "⇚": 7.23,
  "⇛": 7.23,
  "⇜": 7.23,
  "⇝": 7.23,
  "⇞": 7.75,
  "⇟": 7.75,
  "⇠": 10.39,
  "⇡": 10.39,
  "⇢": 10.39,
  "⇣": 10.39,
  "⇤": 12,
  "⇥": 12,
  "⇦": 12,
  "⇧": 11.78,
  "⇨": 12,
  "⇩": 12,
  "⇪": 11.59,
  "⇫": 7.23,
  "⇬": 7.23,
  "⇭": 7.23,
  "⇮": 7.23,
  "⇯": 7.23,
  "⇰": 10.39,
  "⇱": 7.23,
  "⇲": 7.23,
  "⇳": 7.23,
  "∀": 7.58,
  "∁": 5.64,
  "∂": 7.05,
  "∃": 6.31,
  "∄": 6.42,
  "∅": 8.61,
  "∆": 8.17,
  "∇": 8.17,
  "∈": 6.92,
  "∉": 7.34,
  "∊": 6.13,
  "∋": 6.92,
  "∌": 7.08,
  "∍": 6.13,
  "∎": 6.27,
  "∏": 8.86,
  "∐": 9.89,
  "∑": 7.59,
  "−": 7.56,
  "∓": 6.77,
  "∔": 7.19,
  "∕": 2.02,
  "∖": 8.45,
  "∗": 7.56,
  "∘": 7.56,
  "∙": 7.56,
  "√": 8.25,
  "∛": 8.25,
  "∜": 8.7,
  "∝": 6.23,
  "∞": 10.86,
  "∟": 6.98,
  "∠": 7.17,
  "∡": 7.22,
  "∢": 7.27,
  "∣": 3,
  "∤": 5.67,
  "∥": 4.16,
  "∦": 6.31,
  "∧": 7.13,
  "∨": 7.13,
  "∩": 6.38,
  "∪": 6.38,
  "∫": 6.47,
  "∬": 10.98,
  "∭": 13.5,
  "∮": 8.14,
  "∯": 11.09,
  "∰": 14,
  "∱": 7.19,
  "∲": 7.55,
  "∳": 7.17,
  "∴": 7.25,
  "∵": 7.17,
  "∶": 4.05,
  "∷": 6.92,
  "∸": 6.75,
  "∹": 6.92,
  "∺": 6.97,
  "∻": 6.72,
  "∼": 7.56,
  "∽": 6.61,
  "∾": 6.52,
  "∿": 7.02,
  "≀": 4.69,
  "≁": 7.56,
  "≂": 6.97,
  "≃": 7.02,
  "≄": 8.06,
  "≅": 8.36,
  "≆": 7.56,
  "≇": 7.34,
  "≈": 7.56,
  "≉": 7.56,
  "≊": 7.25,
  "≋": 8.06,
  "≌": 6.52,
  "≍": 7.25,
  "≎": 7.17,
  "≏": 7.13,
  "≐": 6.73,
  "≑": 7.67,
  "≒": 7.59,
  "≓": 7.59,
  "≔": 9.17,
  "≕": 9.17,
  "≖": 6.95,
  "≗": 7.16,
  "≘": 7.08,
  "≙": 7.3,
  "≚": 7.44,
  "≛": 7.77,
  "≜": 7.64,
  "≝": 6.77,
  "≞": 6.91,
  "≟": 7.08,
  "≠": 7.56,
  "≡": 7.56,
  "≢": 7.56,
  "≣": 7.13,
  "≤": 7.56,
  "≥": 7.56,
  "≦": 6.91,
  "≧": 6.78,
  "≨": 7.47,
  "≩": 7.08,
  "≪": 8.81,
  "≫": 8.42,
  "≬": 4.3,
  "≭": 6.64,
  "≮": 7.56,
  "≯": 7.56,
  "≰": 7.56,
  "≱": 7.56,
  "≲": 6.78,
  "≳": 6.81,
  "≴": 7,
  "≵": 6.97,
  "≶": 7.27,
  "≷": 7.27,
  "≸": 6.73,
  "≹": 6.92,
  "≺": 6.81,
  "≻": 6.94,
  "≼": 7.16,
  "≽": 6.94,
  "≾": 7.03,
  "≿": 6.98,
  "⊀": 7.3,
  "⊁": 6.95,
  "⊂": 7.59,
  "⊃": 7.59,
  "⊄": 7.73,
  "⊅": 7.58,
  "⊆": 7.97,
  "⊇": 7.97,
  "⊈": 8.02,
  "⊉": 7.8,
  "⊊": 6.75,
  "⊋": 6.75,
  "⊌": 6.98,
  "⊍": 6.98,
  "⊎": 7.31,
  "⊏": 7.86,
  "⊐": 7.86,
  "⊑": 7.83,
  "⊒": 7.83,
  "⊓": 7.34,
  "⊔": 7.34,
  "⊕": 11.11,
  "⊖": 11.11,
  "⊗": 11.11,
  "⊘": 8.67,
  "⊙": 9.08,
  "⊚": 8.83,
  "⊛": 8.63,
  "⊜": 11.11,
  "⊝": 11.11,
  "⊞": 9.41,
  "⊟": 9.13,
  "⊠": 8.8,
  "⊡": 8.59,
  "⊢": 9.02,
  "⊣": 9.02,
  "⊤": 9.02,
  "⊥": 9.02,
  "⊦": 3.97,
  "⊧": 4.02,
  "⊨": 7.48,
  "⊩": 8.75,
  "⊪": 7.48,
  "⊫": 9.08,
  "⊬": 9.31,
  "⊭": 9.34,
  "⊮": 10.5,
  "⊯": 10.03,
  "⊰": 7.59,
  "⊱": 7.59,
  "⊲": 8.91,
  "⊳": 8.91,
  "⊴": 8.44,
  "⊵": 8.44,
  "⊶": 8.83,
  "⊷": 8.83,
  "⊸": 7.16,
  "⊹": 8.2,
  "⊺": 5.77,
  "⊻": 8.36,
  "⊼": 8.36,
  "⊽": 8.09,
  "⊾": 8.91,
  "⊿": 7.58,
  "⋀": 8.06,
  "⋁": 8.06,
  "⋂": 7.69,
  "⋃": 7.69,
  "⋄": 4.58,
  "⋅": 7.56,
  "⋆": 5.39,
  "⋇": 7.58,
  "⋈": 9.28,
  "⋉": 8.89,
  "⋊": 8.89,
  "⋋": 8.69,
  "⋌": 8.69,
  "⋍": 7.02,
  "⋎": 7.63,
  "⋏": 7.63,
  "⋐": 7.78,
  "⋑": 7.78,
  "⋒": 6.84,
  "⋓": 6.84,
  "⋔": 6.59,
  "⋕": 7.38,
  "⋖": 7.25,
  "⋗": 7.25,
  "⋘": 11.63,
  "⋙": 11.63,
  "⋚": 7.81,
  "⋛": 7.81,
  "⋜": 7.77,
  "⋝": 7.77,
  "⋞": 8.03,
  "⋟": 8.03,
  "⋠": 8,
  "⋡": 7.88,
  "⋢": 8.23,
  "⋣": 7.97,
  "⋤": 8.06,
  "⋥": 8.09,
  "⋦": 8.13,
  "⋧": 8.23,
  "⋨": 8.63,
  "⋩": 8.27,
  "⋪": 8.98,
  "⋫": 9.19,
  "⋬": 9.27,
  "⋭": 9.33,
  "⋮": 4.94,
  "⋯": 12,
  "⋰": 11.05,
  "⋱": 11.28,
  "⌀": 7.56,
  "⌁": 7.23,
  "⌂": 7.23,
  "⌃": 10.53,
  "⌄": 7.23,
  "⌅": 10.53,
  "⌆": 7.28,
  "⌇": 11.09,
  "⌈": 7.23,
  "⌉": 7.23,
  "⌊": 7.23,
  "⌋": 7.23,
  "⌌": 7.23,
  "⌍": 7.23,
  "⌎": 7.23,
  "⌏": 7.23,
  "⌐": 7.23,
  "⌑": 7.23,
  "⌒": 12,
  "⌓": 7.23,
  "⌔": 10.39,
  "⌕": 7.23,
  "⌖": 11.2,
  "⌗": 8,
  "⌘": 11.03,
  "⌙": 7.23,
  "⌚": 15,
  "⌛": 15,
  "⌜": 7.23,
  "⌝": 7.23,
  "⌞": 7.23,
  "⌟": 7.23,
  "⌠": 7.23,
  "⌡": 7.23,
  "⌢": 10.39,
  "⌣": 10.39,
  "⌤": 9.55,
  "⌥": 11.7,
  "⌦": 12.2,
  "⌧": 10.89,
  "⌨": 7.23,
  "〈": 11.09,
  "〉": 11.09,
  "⌫": 12.2,
  "⌬": 8,
  "⌭": 13.2,
  "⌮": 8.83,
  "⌯": 6.17,
  "⌰": 10.45,
  "⌱": 11.59,
  "⌲": 7.77,
  "⌳": 7.77,
  "⌴": 8.78,
  "⌵": 7.23,
  "⌶": 8.28,
  "⌷": 7.23,
  "⌸": 7.23,
  "⌹": 7.23,
  "⌺": 7.23,
  "⌻": 7.23,
  "⌼": 7.23,
  "⌽": 12,
  "⌾": 7.23,
  "⌿": 6.52,
  "⍀": 6.52,
  "⍁": 7.23,
  "⍂": 7.23,
  "⍃": 7.23,
  "⍄": 7.23,
  "⍅": 8.06,
  "⍆": 8.06,
  "⍇": 7.23,
  "⍈": 7.23,
  "⍉": 7.23,
  "⍊": 8.28,
  "⍋": 7.23,
  "⍌": 7.23,
  "⍍": 7.23,
  "⍎": 8.28,
  "⍏": 8.2,
  "⍐": 7.23,
  "⍑": 8.28,
  "⍒": 7.23,
  "⍓": 7.23,
  "⍔": 7.23,
  "⍕": 8.28,
  "⍖": 8.2,
  "⍗": 7.23,
  "⍘": 7.23,
  "⍙": 7.23,
  "⍚": 7.23,
  "⍛": 7.23,
  "⍜": 7.23,
  "⍝": 6.45,
  "⍞": 7.23,
  "⍟": 7.23,
  "⍠": 7.23,
  "⍡": 8.28,
  "⍢": 7.31,
  "⍣": 7.23,
  "⍤": 7.23,
  "⍥": 7.23,
  "⍦": 6.45,
  "⍧": 6.77,
  "⍨": 7.23,
  "⍩": 7.23,
  "⍪": 3.59,
  "⍫": 7.23,
  "⍬": 7.23,
  "⍭": 7.23,
  "⍮": 7.23,
  "⍯": 7.23,
  "⍰": 7.23,
  "⍱": 8.06,
  "⍲": 8.06,
  "⍳": 7.23,
  "⍴": 7.23,
  "⍵": 7.23,
  "⍶": 7.23,
  "⍷": 7.23,
  "⍸": 7.23,
  "⍹": 7.23,
  "⍺": 7.23,
  "⍻": 8.52,
  "⍽": 3.8,
  "⍾": 10.16,
  "⍿": 3.7,
  "⎀": 7.23,
  "⎁": 7.23,
  "⎂": 7.23,
  "⎃": 7.23,
  "⎄": 11.25,
  "⎅": 7.98,
  "⎆": 10.64,
  "⎇": 11.7,
  "⎈": 12,
  "⎉": 7.23,
  "⎊": 7.23,
  "⎋": 11.11,
  "⎌": 8.67,
  "⎍": 12.33,
  "⎎": 7.64,
  "⎏": 8.95,
  "⎐": 8.95,
  "⎑": 8.95,
  "⎒": 8.95,
  "⎓": 8.88,
  "⎔": 9.02,
  "⎕": 7.23,
  "⎖": 5.17,
  "⎗": 7.08,
  "⎘": 7.08,
  "⎙": 9.02,
  "⎚": 9.02,
  "␀": 12,
  "␁": 12,
  "␂": 12,
  "␃": 12,
  "␄": 12,
  "␅": 12,
  "␆": 12,
  "␇": 12,
  "␈": 12,
  "␉": 12,
  "␊": 12,
  "␋": 12,
  "␌": 12,
  "␍": 12,
  "␎": 12,
  "␏": 12,
  "␐": 12,
  "␑": 12,
  "␒": 12,
  "␓": 12,
  "␔": 12,
  "␕": 12,
  "␖": 12,
  "␗": 12,
  "␘": 12,
  "␙": 12,
  "␚": 12,
  "␛": 12,
  "␜": 12,
  "␝": 12,
  "␞": 12,
  "␟": 12,
  "␠": 6.03,
  "␡": 12,
  "␢": 6.84,
  "␣": 7.19,
  "␤": 6.55,
  "␥": 7.55,
  "␦": 4.84,
  "⑀": 6.59,
  "⑁": 7.48,
  "⑂": 7.06,
  "⑃": 7.06,
  "⑄": 6.53,
  "⑅": 6.64,
  "⑆": 7.13,
  "⑇": 7.02,
  "⑈": 7.16,
  "⑉": 6.8,
  "⑊": 6.7,
  "①": 11.11,
  "②": 11.11,
  "③": 11.11,
  "④": 11.11,
  "⑤": 11.11,
  "⑥": 11.11,
  "⑦": 11.11,
  "⑧": 11.11,
  "⑨": 11.11,
  "⑩": 12,
  "⑪": 12,
  "⑫": 12,
  "⑬": 12,
  "⑭": 12,
  "⑮": 12,
  "⑯": 12,
  "⑰": 12,
  "⑱": 12,
  "⑲": 11.11,
  "⑳": 12,
  "⑴": 12,
  "⑵": 12,
  "⑶": 12,
  "⑷": 12,
  "⑸": 12,
  "⑹": 12,
  "⑺": 12,
  "⑻": 12,
  "⑼": 12,
  "⑽": 12,
  "⑾": 12,
  "⑿": 12,
  "⒀": 12,
  "⒁": 12,
  "⒂": 12,
  "⒃": 12,
  "⒄": 12,
  "⒅": 12,
  "⒆": 12,
  "⒇": 12,
  "⒈": 12,
  "⒉": 12,
  "⒊": 12,
  "⒋": 12,
  "⒌": 12,
  "⒍": 12,
  "⒎": 12,
  "⒏": 12,
  "⒐": 12,
  "⒑": 12,
  "⒒": 12,
  "⒓": 12,
  "⒔": 12,
  "⒕": 12,
  "⒖": 12,
  "⒗": 12,
  "⒘": 12,
  "⒙": 12,
  "⒚": 12,
  "⒛": 12,
  "⒜": 12,
  "⒝": 12,
  "⒞": 12,
  "⒟": 12,
  "⒠": 12,
  "⒡": 12,
  "⒢": 12,
  "⒣": 12,
  "⒤": 12,
  "⒥": 12,
  "⒦": 12,
  "⒧": 12,
  "⒨": 12,
  "⒩": 12,
  "⒪": 12,
  "⒫": 12,
  "⒬": 12,
  "⒭": 12,
  "⒮": 12,
  "⒯": 12,
  "⒰": 12,
  "⒱": 12,
  "⒲": 12,
  "⒳": 12,
  "⒴": 12,
  "⒵": 12,
  "Ⓐ": 11.11,
  "Ⓑ": 11.11,
  "Ⓒ": 11.11,
  "Ⓓ": 11.11,
  "Ⓔ": 11.11,
  "Ⓕ": 11.11,
  "Ⓖ": 11.11,
  "Ⓗ": 11.11,
  "Ⓘ": 11.11,
  "Ⓙ": 11.11,
  "Ⓚ": 11.11,
  "Ⓛ": 11.11,
  "Ⓜ": 11.11,
  "Ⓝ": 11.11,
  "Ⓞ": 11.11,
  "Ⓟ": 11.11,
  "Ⓠ": 11.11,
  "Ⓡ": 11.11,
  "Ⓢ": 11.11,
  "Ⓣ": 11.11,
  "Ⓤ": 11.11,
  "Ⓥ": 11.11,
  "Ⓦ": 11.11,
  "Ⓧ": 11.11,
  "Ⓨ": 11.11,
  "Ⓩ": 11.11,
  "ⓐ": 12,
  "ⓑ": 12,
  "ⓒ": 12,
  "ⓓ": 12,
  "ⓔ": 12,
  "ⓕ": 12,
  "ⓖ": 12,
  "ⓗ": 12,
  "ⓘ": 12,
  "ⓙ": 12,
  "ⓚ": 12,
  "ⓛ": 12,
  "ⓜ": 12,
  "ⓝ": 12,
  "ⓞ": 12,
  "ⓟ": 12,
  "ⓠ": 12,
  "ⓡ": 12,
  "ⓢ": 12,
  "ⓣ": 12,
  "ⓤ": 12,
  "ⓥ": 12,
  "ⓦ": 12,
  "ⓧ": 12,
  "ⓨ": 12,
  "ⓩ": 12,
  "⓪": 11.11,
  "─": 12,
  "━": 12,
  "│": 3.11,
  "┃": 12,
  "┄": 12,
  "┅": 12,
  "┆": 12,
  "┇": 12,
  "┈": 12,
  "┉": 12,
  "┊": 12,
  "┋": 12,
  "┌": 12,
  "┍": 12,
  "┎": 12,
  "┏": 12,
  "┐": 12,
  "┑": 12,
  "┒": 12,
  "┓": 12,
  "└": 12,
  "┕": 12,
  "┖": 12,
  "┗": 12,
  "┘": 12,
  "┙": 12,
  "┚": 12,
  "┛": 12,
  "├": 12,
  "┝": 12,
  "┞": 12,
  "┟": 12,
  "┠": 12,
  "┡": 12,
  "┢": 12,
  "┣": 12,
  "┤": 12,
  "┥": 12,
  "┦": 12,
  "┧": 12,
  "┨": 12,
  "┩": 12,
  "┪": 12,
  "┫": 12,
  "┬": 12,
  "┭": 12,
  "┮": 12,
  "┯": 12,
  "┰": 12,
  "┱": 12,
  "┲": 12,
  "┳": 12,
  "┴": 12,
  "┵": 12,
  "┶": 12,
  "┷": 12,
  "┸": 12,
  "┹": 12,
  "┺": 12,
  "┻": 12,
  "┼": 12,
  "┽": 12,
  "┾": 12,
  "┿": 12,
  "╀": 12,
  "╁": 12,
  "╂": 12,
  "╃": 12,
  "╄": 12,
  "╅": 12,
  "╆": 12,
  "╇": 12,
  "╈": 12,
  "╉": 12,
  "╊": 12,
  "╋": 12,
  "╌": 7.23,
  "╍": 7.23,
  "╎": 7.23,
  "╏": 7.23,
  "═": 12,
  "║": 12,
  "╒": 12,
  "╓": 12,
  "╔": 12,
  "╕": 12,
  "╖": 12,
  "╗": 12,
  "╘": 12,
  "╙": 12,
  "╚": 12,
  "╛": 12,
  "╜": 12,
  "╝": 12,
  "╞": 12,
  "╟": 12,
  "╠": 12,
  "╡": 12,
  "╢": 12,
  "╣": 12,
  "╤": 12,
  "╥": 12,
  "╦": 12,
  "╧": 12,
  "╨": 12,
  "╩": 12,
  "╪": 12,
  "╫": 12,
  "╬": 12,
  "╭": 12,
  "╮": 12,
  "╯": 12,
  "╰": 12,
  "╱": 12,
  "╲": 12,
  "╳": 12,
  "╴": 12,
  "╵": 7.23,
  "╶": 7.23,
  "╷": 7.23,
  "╸": 7.23,
  "╹": 7.23,
  "╺": 7.23,
  "╻": 7.23,
  "╼": 7.23,
  "╽": 7.23,
  "╾": 7.23,
  "╿": 7.23,
  "▀": 7.23,
  "▁": 12,
  "▂": 12,
  "▃": 12,
  "▄": 12,
  "▅": 12,
  "▆": 12,
  "▇": 12,
  "█": 12,
  "▉": 12,
  "▊": 12,
  "▋": 12,
  "▌": 12,
  "▍": 12,
  "▎": 12,
  "▏": 12,
  "▐": 7.23,
  "░": 10.39,
  "▒": 10.39,
  "▓": 12,
  "▔": 12,
  "▕": 12,
  "■": 10.89,
  "□": 10.92,
  "▢": 11.09,
  "▣": 10.39,
  "▤": 10.39,
  "▥": 10.39,
  "▦": 10.39,
  "▧": 10.39,
  "▨": 10.39,
  "▩": 10.39,
  "▪": 11.09,
  "▫": 11.09,
  "▬": 7.23,
  "▭": 10.39,
  "▮": 7.23,
  "▯": 7.23,
  "▰": 7.23,
  "▱": 11.09,
  "▲": 9.22,
  "△": 9.22,
  "▴": 5.67,
  "▵": 10.39,
  "▶": 9.63,
  "▷": 9.63,
  "▸": 5.67,
  "▹": 10.39,
  "►": 10.56,
  "▻": 7.23,
  "▼": 9.22,
  "▽": 9.22,
  "▾": 5.67,
  "▿": 10.39,
  "◀": 9.61,
  "◁": 9.61,
  "◂": 5.67,
  "◃": 10.39,
  "◄": 7.23,
  "◅": 7.23,
  "◆": 12,
  "◇": 12,
  "◈": 10.39,
  "◉": 11.09,
  "◊": 6.91,
  "○": 11.14,
  "◌": 11.09,
  "◍": 7.23,
  "◎": 12,
  "●": 11.11,
  "◐": 11.09,
  "◑": 11.09,
  "◒": 11.09,
  "◓": 11.09,
  "◔": 7.23,
  "◕": 7.23,
  "◖": 7.23,
  "◗": 7.23,
  "◘": 7.23,
  "◙": 7.23,
  "◚": 7.23,
  "◛": 7.23,
  "◜": 7.23,
  "◝": 7.23,
  "◞": 7.23,
  "◟": 7.23,
  "◠": 7.23,
  "◡": 7.23,
  "◢": 12,
  "◣": 12,
  "◤": 12,
  "◥": 12,
  "◦": 5.67,
  "◧": 7.23,
  "◨": 7.23,
  "◩": 7.23,
  "◪": 7.23,
  "◫": 7.23,
  "◬": 7.23,
  "◭": 7.23,
  "◮": 7.23,
  "◯": 11.09,
  "◰": 7.23,
  "◱": 7.23,
  "◲": 7.23,
  "◳": 7.23,
  "◴": 7.23,
  "◵": 7.23,
  "◶": 7.23,
  "◷": 7.23,
  "☀": 11.09,
  "☁": 11.09,
  "☂": 11.09,
  "☃": 11.09,
  "☄": 7.23,
  "★": 12.19,
  "☆": 12.19,
  "☇": 7.23,
  "☈": 7.23,
  "☉": 12,
  "☊": 7.23,
  "☋": 7.23,
  "☌": 7.23,
  "☍": 7.23,
  "☎": 11.09,
  "☏": 10.39,
  "☐": 9.97,
  "☑": 10.89,
  "☒": 10.89,
  "☓": 7.23,
  "☙": 7.23,
  "☚": 7.23,
  "☛": 7.23,
  "☜": 11.09,
  "☝": 15,
  "☞": 11.09,
  "☟": 11.09,
  "☠": 7.23,
  "☡": 7.23,
  "☢": 7.23,
  "☣": 7.23,
  "☤": 7.23,
  "☥": 7.23,
  "☦": 7.23,
  "☧": 7.23,
  "☨": 7.23,
  "☩": 7.23,
  "☪": 7.23,
  "☫": 7.23,
  "☬": 7.23,
  "☭": 7.23,
  "☮": 7.23,
  "☯": 10.39,
  "☰": 10.56,
  "☱": 10.36,
  "☲": 10.31,
  "☳": 10.77,
  "☴": 10.81,
  "☵": 10.92,
  "☶": 10.92,
  "☷": 11.02,
  "☸": 7.23,
  "☹": 8.86,
  "☺": 8.84,
  "☻": 8.86,
  "☼": 7.23,
  "☽": 7.23,
  "☾": 10.83,
  "☿": 7.23,
  "♀": 11.09,
  "♁": 7.23,
  "♂": 11.09,
  "♃": 7.23,
  "♄": 7.23,
  "♅": 7.23,
  "♆": 7.23,
  "♇": 7.23,
  "♈": 15,
  "♉": 15,
  "♊": 15,
  "♋": 15,
  "♌": 15,
  "♍": 15,
  "♎": 15,
  "♏": 15,
  "♐": 15,
  "♑": 15,
  "♒": 15,
  "♓": 15,
  "♔": 7.23,
  "♕": 7.23,
  "♖": 7.23,
  "♗": 7.23,
  "♘": 7.23,
  "♙": 7.23,
  "♚": 7.23,
  "♛": 7.23,
  "♜": 7.23,
  "♝": 7.23,
  "♞": 7.23,
  "♟": 7.23,
  "♠": 10.34,
  "♡": 11.58,
  "♢": 9.17,
  "♣": 10.39,
  "♤": 10.34,
  "♥": 11.58,
  "♦": 9.17,
  "♧": 10.52,
  "♨": 11.09,
  "♩": 11.09,
  "♪": 6.03,
  "♫": 11.09,
  "♬": 11.09,
  "♭": 5.16,
  "♮": 5.63,
  "♯": 6.09,
  "♰": 7.23,
  "♱": 7.23,
  "✁": 11.7,
  "✂": 11.53,
  "✃": 11.7,
  "✄": 11.77,
  "✆": 7.23,
  "✇": 7.23,
  "✈": 11.81,
  "✉": 7.23,
  "✌": 15,
  "✍": 15,
  "✎": 10.94,
  "✏": 11.2,
  "✐": 10.94,
  "✑": 11.34,
  "✒": 11.7,
  "✓": 10.41,
  "✔": 10.16,
  "✕": 9.16,
  "✖": 9.14,
  "✗": 9.7,
  "✘": 8.13,
  "✙": 9.17,
  "✚": 9.13,
  "✛": 9.11,
  "✜": 9.05,
  "✝": 5.94,
  "✞": 6.63,
  "✟": 6.45,
  "✠": 6.94,
  "✡": 8.31,
  "✢": 9.44,
  "✣": 9.47,
  "✤": 9.47,
  "✥": 9.48,
  "✦": 9.52,
  "✧": 9.53,
  "✩": 9.89,
  "✪": 9.47,
  "✫": 10.09,
  "✬": 9.89,
  "✭": 10,
  "✮": 9.8,
  "✯": 9.98,
  "✰": 11.08,
  "✱": 8.94,
  "✲": 8.69,
  "✳": 9,
  "✴": 9.48,
  "✵": 9.52,
  "✶": 8.34,
  "✷": 9.31,
  "✸": 9.22,
  "✹": 9.52,
  "✺": 9.11,
  "✻": 8.48,
  "✼": 8.5,
  "✽": 8.19,
  "✾": 8.42,
  "✿": 9.92,
  "❀": 9.78,
  "❁": 9.47,
  "❂": 9.47,
  "❃": 8.48,
  "❄": 8.25,
  "❅": 8.36,
  "❆": 8.28,
  "❇": 9.44,
  "❈": 9.45,
  "❉": 8.56,
  "❊": 9.5,
  "❋": 9.42,
  "❍": 10.48,
  "❏": 9.16,
  "❐": 9.16,
  "❑": 9.11,
  "❒": 9.11,
  "❖": 9.42,
  "❘": 1.67,
  "❙": 3.33,
  "❚": 4.98,
  "❛": 7.13,
  "❜": 7.13,
  "❝": 12.03,
  "❞": 12.03,
  "❡": 8.8,
  "❢": 6.53,
  "❣": 6.53,
  "❤": 10.92,
  "❥": 8.02,
  "❦": 9.13,
  "❧": 9.13,
  "❶": 11.11,
  "❷": 11.11,
  "❸": 11.11,
  "❹": 11.11,
  "❺": 11.11,
  "❻": 11.11,
  "❼": 11.11,
  "❽": 11.11,
  "❾": 11.11,
  "❿": 9.47,
  "➀": 11.11,
  "➁": 11.11,
  "➂": 11.11,
  "➃": 11.11,
  "➄": 11.11,
  "➅": 11.11,
  "➆": 11.11,
  "➇": 11.11,
  "➈": 11.11,
  "➉": 9.47,
  "➊": 11.11,
  "➋": 11.11,
  "➌": 11.11,
  "➍": 11.11,
  "➎": 11.11,
  "➏": 11.11,
  "➐": 11.11,
  "➑": 11.11,
  "➒": 11.11,
  "➓": 9.47,
  "➔": 10.73,
  "➘": 8.98,
  "➙": 11.09,
  "➚": 8.98,
  "➛": 11.02,
  "➜": 11.13,
  "➝": 11.14,
  "➞": 11.14,
  "➟": 10.02,
  "➠": 10.48,
  "➡": 9.94,
  "➢": 11.09,
  "➣": 11.09,
  "➤": 9.91,
  "➥": 11.17,
  "➦": 11.19,
  "➧": 5.56,
  "➨": 10.59,
  "➩": 10.03,
  "➪": 10.03,
  "➫": 10.41,
  "➬": 10.41,
  "➭": 8.36,
  "➮": 8.36,
  "➯": 10.5,
  "➱": 10.5,
  "➲": 9.13,
  "➳": 11.36,
  "➴": 9.27,
  "➵": 10.39,
  "➶": 9.27,
  "➷": 10.67,
  "➸": 11.61,
  "➹": 10.67,
  "➺": 9.98,
  "➻": 10.48,
  "➼": 11.13,
  "➽": 11.66,
  "➾": 11.02,
  "⠀": 8.2,
  "⠁": 8.2,
  "⠂": 8.2,
  "⠃": 8.2,
  "⠄": 8.2,
  "⠅": 8.2,
  "⠆": 8.2,
  "⠇": 8.2,
  "⠈": 8.2,
  "⠉": 8.2,
  "⠊": 8.2,
  "⠋": 8.2,
  "⠌": 8.2,
  "⠍": 8.2,
  "⠎": 8.2,
  "⠏": 8.2,
  "⠐": 8.2,
  "⠑": 8.2,
  "⠒": 8.2,
  "⠓": 8.2,
  "⠔": 8.2,
  "⠕": 8.2,
  "⠖": 8.2,
  "⠗": 8.2,
  "⠘": 8.2,
  "⠙": 8.2,
  "⠚": 8.2,
  "⠛": 8.2,
  "⠜": 8.2,
  "⠝": 8.2,
  "⠞": 8.2,
  "⠟": 8.2,
  "⠠": 8.2,
  "⠡": 8.2,
  "⠢": 8.2,
  "⠣": 8.2,
  "⠤": 8.2,
  "⠥": 8.2,
  "⠦": 8.2,
  "⠧": 8.2,
  "⠨": 8.2,
  "⠩": 8.2,
  "⠪": 8.2,
  "⠫": 8.2,
  "⠬": 8.2,
  "⠭": 8.2,
  "⠮": 8.2,
  "⠯": 8.2,
  "⠰": 8.2,
  "⠱": 8.2,
  "⠲": 8.2,
  "⠳": 8.2,
  "⠴": 8.2,
  "⠵": 8.2,
  "⠶": 8.2,
  "⠷": 8.2,
  "⠸": 8.2,
  "⠹": 8.2,
  "⠺": 8.2,
  "⠻": 8.2,
  "⠼": 8.2,
  "⠽": 8.2,
  "⠾": 8.2,
  "⠿": 8.2,
  "⡀": 8.2,
  "⡁": 8.2,
  "⡂": 8.2,
  "⡃": 8.2,
  "⡄": 8.2,
  "⡅": 8.2,
  "⡆": 8.2,
  "⡇": 8.2,
  "⡈": 8.2,
  "⡉": 8.2,
  "⡊": 8.2,
  "⡋": 8.2,
  "⡌": 8.2,
  "⡍": 8.2,
  "⡎": 8.2,
  "⡏": 8.2,
  "⡐": 8.2,
  "⡑": 8.2,
  "⡒": 8.2,
  "⡓": 8.2,
  "⡔": 8.2,
  "⡕": 8.2,
  "⡖": 8.2,
  "⡗": 8.2,
  "⡘": 8.2,
  "⡙": 8.2,
  "⡚": 8.2,
  "⡛": 8.2,
  "⡜": 8.2,
  "⡝": 8.2,
  "⡞": 8.2,
  "⡟": 8.2,
  "⡠": 8.2,
  "⡡": 8.2,
  "⡢": 8.2,
  "⡣": 8.2,
  "⡤": 8.2,
  "⡥": 8.2,
  "⡦": 8.2,
  "⡧": 8.2,
  "⡨": 8.2,
  "⡩": 8.2,
  "⡪": 8.2,
  "⡫": 8.2,
  "⡬": 8.2,
  "⡭": 8.2,
  "⡮": 8.2,
  "⡯": 8.2,
  "⡰": 8.2,
  "⡱": 8.2,
  "⡲": 8.2,
  "⡳": 8.2,
  "⡴": 8.2,
  "⡵": 8.2,
  "⡶": 8.2,
  "⡷": 8.2,
  "⡸": 8.2,
  "⡹": 8.2,
  "⡺": 8.2,
  "⡻": 8.2,
  "⡼": 8.2,
  "⡽": 8.2,
  "⡾": 8.2,
  "⡿": 8.2,
  "⢀": 8.2,
  "⢁": 8.2,
  "⢂": 8.2,
  "⢃": 8.2,
  "⢄": 8.2,
  "⢅": 8.2,
  "⢆": 8.2,
  "⢇": 8.2,
  "⢈": 8.2,
  "⢉": 8.2,
  "⢊": 8.2,
  "⢋": 8.2,
  "⢌": 8.2,
  "⢍": 8.2,
  "⢎": 8.2,
  "⢏": 8.2,
  "⢐": 8.2,
  "⢑": 8.2,
  "⢒": 8.2,
  "⢓": 8.2,
  "⢔": 8.2,
  "⢕": 8.2,
  "⢖": 8.2,
  "⢗": 8.2,
  "⢘": 8.2,
  "⢙": 8.2,
  "⢚": 8.2,
  "⢛": 8.2,
  "⢜": 8.2,
  "⢝": 8.2,
  "⢞": 8.2,
  "⢟": 8.2,
  "⢠": 8.2,
  "⢡": 8.2,
  "⢢": 8.2,
  "⢣": 8.2,
  "⢤": 8.2,
  "⢥": 8.2,
  "⢦": 8.2,
  "⢧": 8.2,
  "⢨": 8.2,
  "⢩": 8.2,
  "⢪": 8.2,
  "⢫": 8.2,
  "⢬": 8.2,
  "⢭": 8.2,
  "⢮": 8.2,
  "⢯": 8.2,
  "⢰": 8.2,
  "⢱": 8.2,
  "⢲": 8.2,
  "⢳": 8.2,
  "⢴": 8.2,
  "⢵": 8.2,
  "⢶": 8.2,
  "⢷": 8.2,
  "⢸": 8.2,
  "⢹": 8.2,
  "⢺": 8.2,
  "⢻": 8.2,
  "⢼": 8.2,
  "⢽": 8.2,
  "⢾": 8.2,
  "⢿": 8.2,
  "⣀": 8.2,
  "⣁": 8.2,
  "⣂": 8.2,
  "⣃": 8.2,
  "⣄": 8.2,
  "⣅": 8.2,
  "⣆": 8.2,
  "⣇": 8.2,
  "⣈": 8.2,
  "⣉": 8.2,
  "⣊": 8.2,
  "⣋": 8.2,
  "⣌": 8.2,
  "⣍": 8.2,
  "⣎": 8.2,
  "⣏": 8.2,
  "⣐": 8.2,
  "⣑": 8.2,
  "⣒": 8.2,
  "⣓": 8.2,
  "⣔": 8.2,
  "⣕": 8.2,
  "⣖": 8.2,
  "⣗": 8.2,
  "⣘": 8.2,
  "⣙": 8.2,
  "⣚": 8.2,
  "⣛": 8.2,
  "⣜": 8.2,
  "⣝": 8.2,
  "⣞": 8.2,
  "⣟": 8.2,
  "⣠": 8.2,
  "⣡": 8.2,
  "⣢": 8.2,
  "⣣": 8.2,
  "⣤": 8.2,
  "⣥": 8.2,
  "⣦": 8.2,
  "⣧": 8.2,
  "⣨": 8.2,
  "⣩": 8.2,
  "⣪": 8.2,
  "⣫": 8.2,
  "⣬": 8.2,
  "⣭": 8.2,
  "⣮": 8.2,
  "⣯": 8.2,
  "⣰": 8.2,
  "⣱": 8.2,
  "⣲": 8.2,
  "⣳": 8.2,
  "⣴": 8.2,
  "⣵": 8.2,
  "⣶": 8.2,
  "⣷": 8.2,
  "⣸": 8.2,
  "⣹": 8.2,
  "⣺": 8.2,
  "⣻": 8.2,
  "⣼": 8.2,
  "⣽": 8.2,
  "⣾": 8.2,
  "⣿": 8.2,
  "⺀": 12,
  "⺁": 12,
  "⺂": 12,
  "⺃": 12,
  "⺄": 12,
  "⺅": 12,
  "⺆": 12,
  "⺇": 12,
  "⺈": 12,
  "⺉": 12,
  "⺊": 12,
  "⺋": 12,
  "⺌": 12,
  "⺍": 12,
  "⺎": 12,
  "⺏": 12,
  "⺐": 12,
  "⺑": 12,
  "⺒": 12,
  "⺓": 12,
  "⺔": 12,
  "⺕": 12,
  "⺖": 12,
  "⺗": 12,
  "⺘": 12,
  "⺙": 12,
  "⺛": 12,
  "⺜": 12,
  "⺝": 12,
  "⺞": 12,
  "⺟": 12,
  "⺠": 12,
  "⺡": 12,
  "⺢": 12,
  "⺣": 12,
  "⺤": 12,
  "⺥": 12,
  "⺦": 12,
  "⺧": 12,
  "⺨": 12,
  "⺩": 12,
  "⺪": 12,
  "⺫": 12,
  "⺬": 12,
  "⺭": 12,
  "⺮": 12,
  "⺯": 12,
  "⺰": 12,
  "⺱": 12,
  "⺲": 12,
  "⺳": 12,
  "⺴": 12,
  "⺵": 12,
  "⺶": 12,
  "⺷": 12,
  "⺸": 12,
  "⺹": 12,
  "⺺": 12,
  "⺻": 12,
  "⺼": 12,
  "⺽": 12,
  "⺾": 12,
  "⺿": 12,
  "⻀": 12,
  "⻁": 12,
  "⻂": 12,
  "⻃": 12,
  "⻄": 12,
  "⻅": 12,
  "⻆": 12,
  "⻇": 12,
  "⻈": 12,
  "⻉": 12,
  "⻊": 12,
  "⻋": 12,
  "⻌": 12,
  "⻍": 12,
  "⻎": 12,
  "⻏": 12,
  "⻐": 12,
  "⻑": 12,
  "⻒": 12,
  "⻓": 12,
  "⻔": 12,
  "⻕": 12,
  "⻖": 12,
  "⻗": 12,
  "⻘": 12,
  "⻙": 12,
  "⻚": 12,
  "⻛": 12,
  "⻜": 12,
  "⻝": 12,
  "⻞": 12,
  "⻟": 12,
  "⻠": 12,
  "⻡": 12,
  "⻢": 12,
  "⻣": 12,
  "⻤": 12,
  "⻥": 12,
  "⻦": 12,
  "⻧": 12,
  "⻨": 12,
  "⻩": 12,
  "⻪": 12,
  "⻫": 12,
  "⻬": 12,
  "⻭": 12,
  "⻮": 12,
  "⻯": 12,
  "⻰": 12,
  "⻱": 12,
  "⻲": 12,
  "⻳": 12,
  "⼀": 12,
  "⼁": 12,
  "⼂": 12,
  "⼃": 12,
  "⼄": 12,
  "⼅": 12,
  "⼆": 12,
  "⼇": 12,
  "⼈": 12,
  "⼉": 12,
  "⼊": 12,
  "⼋": 12,
  "⼌": 12,
  "⼍": 12,
  "⼎": 12,
  "⼏": 12,
  "⼐": 12,
  "⼑": 12,
  "⼒": 12,
  "⼓": 12,
  "⼔": 12,
  "⼕": 12,
  "⼖": 12,
  "⼗": 12,
  "⼘": 12,
  "⼙": 12,
  "⼚": 12,
  "⼛": 12,
  "⼜": 12,
  "⼝": 12,
  "⼞": 12,
  "⼟": 12,
  "⼠": 12,
  "⼡": 12,
  "⼢": 12,
  "⼣": 12,
  "⼤": 12,
  "⼥": 12,
  "⼦": 12,
  "⼧": 12,
  "⼨": 12,
  "⼩": 12,
  "⼪": 12,
  "⼫": 12,
  "⼬": 12,
  "⼭": 12,
  "⼮": 12,
  "⼯": 12,
  "⼰": 12,
  "⼱": 12,
  "⼲": 12,
  "⼳": 12,
  "⼴": 12,
  "⼵": 12,
  "⼶": 12,
  "⼷": 12,
  "⼸": 12,
  "⼹": 12,
  "⼺": 12,
  "⼻": 12,
  "⼼": 12,
  "⼽": 12,
  "⼾": 12,
  "⼿": 12,
  "⽀": 12,
  "⽁": 12,
  "⽂": 12,
  "⽃": 12,
  "⽄": 12,
  "⽅": 12,
  "⽆": 12,
  "⽇": 12,
  "⽈": 12,
  "⽉": 12,
  "⽊": 12,
  "⽋": 12,
  "⽌": 12,
  "⽍": 12,
  "⽎": 12,
  "⽏": 12,
  "⽐": 12,
  "⽑": 12,
  "⽒": 12,
  "⽓": 12,
  "⽔": 12,
  "⽕": 12,
  "⽖": 12,
  "⽗": 12,
  "⽘": 12,
  "⽙": 12,
  "⽚": 12,
  "⽛": 12,
  "⽜": 12,
  "⽝": 12,
  "⽞": 12,
  "⽟": 12,
  "⽠": 12,
  "⽡": 12,
  "⽢": 12,
  "⽣": 12,
  "⽤": 12,
  "⽥": 12,
  "⽦": 12,
  "⽧": 12,
  "⽨": 12,
  "⽩": 12,
  "⽪": 12,
  "⽫": 12,
  "⽬": 12,
  "⽭": 12,
  "⽮": 12,
  "⽯": 12,
  "⽰": 12,
  "⽱": 12,
  "⽲": 12,
  "⽳": 12,
  "⽴": 12,
  "⽵": 12,
  "⽶": 12,
  "⽷": 12,
  "⽸": 12,
  "⽹": 12,
  "⽺": 12,
  "⽻": 12,
  "⽼": 12,
  "⽽": 12,
  "⽾": 12,
  "⽿": 12,
  "⾀": 12,
  "⾁": 12,
  "⾂": 12,
  "⾃": 12,
  "⾄": 12,
  "⾅": 12,
  "⾆": 12,
  "⾇": 12,
  "⾈": 12,
  "⾉": 12,
  "⾊": 12,
  "⾋": 12,
  "⾌": 12,
  "⾍": 12,
  "⾎": 12,
  "⾏": 12,
  "⾐": 12,
  "⾑": 12,
  "⾒": 12,
  "⾓": 12,
  "⾔": 12,
  "⾕": 12,
  "⾖": 12,
  "⾗": 12,
  "⾘": 12,
  "⾙": 12,
  "⾚": 12,
  "⾛": 12,
  "⾜": 12,
  "⾝": 12,
  "⾞": 12,
  "⾟": 12,
  "⾠": 12,
  "⾡": 12,
  "⾢": 12,
  "⾣": 12,
  "⾤": 12,
  "⾥": 12,
  "⾦": 12,
  "⾧": 12,
  "⾨": 12,
  "⾩": 12,
  "⾪": 12,
  "⾫": 12,
  "⾬": 12,
  "⾭": 12,
  "⾮": 12,
  "⾯": 12,
  "⾰": 12,
  "⾱": 12,
  "⾲": 12,
  "⾳": 12,
  "⾴": 12,
  "⾵": 12,
  "⾶": 12,
  "⾷": 12,
  "⾸": 12,
  "⾹": 12,
  "⾺": 12,
  "⾻": 12,
  "⾼": 12,
  "⾽": 12,
  "⾾": 12,
  "⾿": 12,
  "⿀": 12,
  "⿁": 12,
  "⿂": 12,
  "⿃": 12,
  "⿄": 12,
  "⿅": 12,
  "⿆": 12,
  "⿇": 12,
  "⿈": 12,
  "⿉": 12,
  "⿊": 12,
  "⿋": 12,
  "⿌": 12,
  "⿍": 12,
  "⿎": 12,
  "⿏": 12,
  "⿐": 12,
  "⿑": 12,
  "⿒": 12,
  "⿓": 12,
  "⿔": 12,
  "⿕": 12,
  "⿰": 12,
  "⿱": 12,
  "⿲": 12,
  "⿳": 12,
  "⿴": 12,
  "⿵": 12,
  "⿶": 12,
  "⿷": 12,
  "⿸": 12,
  "⿹": 12,
  "⿺": 12,
  "⿻": 12,
  "、": 12,
  "。": 12,
  "〃": 6.33,
  "〄": 11.09,
  "々": 12,
  "〆": 12,
  "〇": 12,
  "〈": 12,
  "〉": 12,
  "《": 12,
  "》": 12,
  "「": 12,
  "」": 12,
  "『": 12,
  "』": 12,
  "【": 12,
  "】": 12,
  "〒": 12,
  "〓": 12,
  "〔": 12,
  "〕": 12,
  "〖": 12,
  "〗": 12,
  "〘": 11.09,
  "〙": 11.09,
  "〚": 12,
  "〛": 12,
  "〜": 12,
  "〝": 12,
  "〞": 12,
  "〟": 11.09,
  "〠": 11.09,
  "〡": 12,
  "〢": 12,
  "〣": 12,
  "〤": 12,
  "〥": 12,
  "〦": 12,
  "〧": 12,
  "〨": 12,
  "〩": 12,
  "〪": 12,
  "〫": 12,
  "〬": 12,
  "〭": 12,
  "〮": 19.2,
  "〯": 19.2,
  "〰": 11.09,
  "〱": 12,
  "〲": 12,
  "〳": 11.09,
  "〴": 11.09,
  "〵": 11.09,
  "〶": 11.09,
  "〷": 12,
  "〸": 12,
  "〹": 12,
  "〺": 12,
  "〾": 12,
  "〿": 5.55,
  "ぁ": 12,
  "あ": 12,
  "ぃ": 12,
  "い": 12,
  "ぅ": 12,
  "う": 12,
  "ぇ": 12,
  "え": 12,
  "ぉ": 12,
  "お": 12,
  "か": 12,
  "が": 12,
  "き": 12,
  "ぎ": 12,
  "く": 12,
  "ぐ": 12,
  "け": 12,
  "げ": 12,
  "こ": 12,
  "ご": 12,
  "さ": 12,
  "ざ": 12,
  "し": 12,
  "じ": 12,
  "す": 12,
  "ず": 12,
  "せ": 12,
  "ぜ": 12,
  "そ": 12,
  "ぞ": 12,
  "た": 12,
  "だ": 12,
  "ち": 12,
  "ぢ": 12,
  "っ": 12,
  "つ": 12,
  "づ": 12,
  "て": 12,
  "で": 12,
  "と": 12,
  "ど": 12,
  "な": 12,
  "に": 12,
  "ぬ": 12,
  "ね": 12,
  "の": 12,
  "は": 12,
  "ば": 12,
  "ぱ": 12,
  "ひ": 12,
  "び": 12,
  "ぴ": 12,
  "ふ": 12,
  "ぶ": 12,
  "ぷ": 12,
  "へ": 12,
  "べ": 12,
  "ぺ": 12,
  "ほ": 12,
  "ぼ": 12,
  "ぽ": 12,
  "ま": 12,
  "み": 12,
  "む": 12,
  "め": 12,
  "も": 12,
  "ゃ": 12,
  "や": 12,
  "ゅ": 12,
  "ゆ": 12,
  "ょ": 12,
  "よ": 12,
  "ら": 12,
  "り": 12,
  "る": 12,
  "れ": 12,
  "ろ": 12,
  "ゎ": 12,
  "わ": 12,
  "ゐ": 12,
  "ゑ": 12,
  "を": 12,
  "ん": 12,
  "ゔ": 11.09,
  "゙": 0,
  "゚": 0,
  "゛": 12,
  "゜": 12,
  "ゝ": 12,
  "ゞ": 12,
  "ァ": 12,
  "ア": 12,
  "ィ": 12,
  "イ": 12,
  "ゥ": 12,
  "ウ": 12,
  "ェ": 12,
  "エ": 12,
  "ォ": 12,
  "オ": 12,
  "カ": 12,
  "ガ": 12,
  "キ": 12,
  "ギ": 12,
  "ク": 12,
  "グ": 12,
  "ケ": 12,
  "ゲ": 12,
  "コ": 12,
  "ゴ": 12,
  "サ": 12,
  "ザ": 12,
  "シ": 12,
  "ジ": 12,
  "ス": 12,
  "ズ": 12,
  "セ": 12,
  "ゼ": 12,
  "ソ": 12,
  "ゾ": 12,
  "タ": 12,
  "ダ": 12,
  "チ": 12,
  "ヂ": 12,
  "ッ": 12,
  "ツ": 12,
  "ヅ": 12,
  "テ": 12,
  "デ": 12,
  "ト": 12,
  "ド": 12,
  "ナ": 12,
  "ニ": 12,
  "ヌ": 12,
  "ネ": 12,
  "ノ": 12,
  "ハ": 12,
  "バ": 12,
  "パ": 12,
  "ヒ": 12,
  "ビ": 12,
  "ピ": 12,
  "フ": 12,
  "ブ": 12,
  "プ": 12,
  "ヘ": 12,
  "ベ": 12,
  "ペ": 12,
  "ホ": 12,
  "ボ": 12,
  "ポ": 12,
  "マ": 12,
  "ミ": 12,
  "ム": 12,
  "メ": 12,
  "モ": 12,
  "ャ": 12,
  "ヤ": 12,
  "ュ": 12,
  "ユ": 12,
  "ョ": 12,
  "ヨ": 12,
  "ラ": 12,
  "リ": 12,
  "ル": 12,
  "レ": 12,
  "ロ": 12,
  "ヮ": 12,
  "ワ": 12,
  "ヰ": 12,
  "ヱ": 12,
  "ヲ": 12,
  "ン": 12,
  "ヴ": 12,
  "ヵ": 12,
  "ヶ": 12,
  "ヷ": 11.09,
  "ヸ": 11.09,
  "ヹ": 11.09,
  "ヺ": 11.09,
  "・": 12,
  "ー": 12,
  "ヽ": 12,
  "ヾ": 12,
  "ㄅ": 12,
  "ㄆ": 12,
  "ㄇ": 12,
  "ㄈ": 12,
  "ㄉ": 12,
  "ㄊ": 12,
  "ㄋ": 12,
  "ㄌ": 12,
  "ㄍ": 12,
  "ㄎ": 12,
  "ㄏ": 12,
  "ㄐ": 12,
  "ㄑ": 12,
  "ㄒ": 12,
  "ㄓ": 12,
  "ㄔ": 12,
  "ㄕ": 12,
  "ㄖ": 12,
  "ㄗ": 12,
  "ㄘ": 12,
  "ㄙ": 12,
  "ㄚ": 12,
  "ㄛ": 12,
  "ㄜ": 12,
  "ㄝ": 12,
  "ㄞ": 12,
  "ㄟ": 12,
  "ㄠ": 12,
  "ㄡ": 12,
  "ㄢ": 12,
  "ㄣ": 12,
  "ㄤ": 12,
  "ㄥ": 12,
  "ㄦ": 12,
  "ㄧ": 12,
  "ㄨ": 12,
  "ㄩ": 12,
  "ㄪ": 12,
  "ㄫ": 12,
  "ㄬ": 12,
  "ㄱ": 10.39,
  "ㄲ": 10.39,
  "ㄳ": 10.39,
  "ㄴ": 10.39,
  "ㄵ": 10.39,
  "ㄶ": 10.39,
  "ㄷ": 10.39,
  "ㄸ": 10.39,
  "ㄹ": 10.39,
  "ㄺ": 10.39,
  "ㄻ": 10.39,
  "ㄼ": 10.39,
  "ㄽ": 10.39,
  "ㄾ": 10.39,
  "ㄿ": 10.39,
  "ㅀ": 10.39,
  "ㅁ": 10.39,
  "ㅂ": 10.39,
  "ㅃ": 10.39,
  "ㅄ": 10.39,
  "ㅅ": 10.39,
  "ㅆ": 10.39,
  "ㅇ": 10.39,
  "ㅈ": 10.39,
  "ㅉ": 10.39,
  "ㅊ": 10.39,
  "ㅋ": 10.39,
  "ㅌ": 10.39,
  "ㅍ": 10.39,
  "ㅎ": 10.39,
  "ㅏ": 10.39,
  "ㅐ": 10.39,
  "ㅑ": 10.39,
  "ㅒ": 10.39,
  "ㅓ": 10.39,
  "ㅔ": 10.39,
  "ㅕ": 10.39,
  "ㅖ": 10.39,
  "ㅗ": 10.39,
  "ㅘ": 10.39,
  "ㅙ": 10.39,
  "ㅚ": 10.39,
  "ㅛ": 10.39,
  "ㅜ": 10.39,
  "ㅝ": 10.39,
  "ㅞ": 10.39,
  "ㅟ": 10.39,
  "ㅠ": 10.39,
  "ㅡ": 10.39,
  "ㅢ": 10.39,
  "ㅣ": 10.39,
  "ㅤ": 10.16,
  "ㅥ": 10.39,
  "ㅦ": 10.39,
  "ㅧ": 10.39,
  "ㅨ": 10.39,
  "ㅩ": 10.39,
  "ㅪ": 10.39,
  "ㅫ": 10.39,
  "ㅬ": 10.39,
  "ㅭ": 10.39,
  "ㅮ": 10.39,
  "ㅯ": 10.39,
  "ㅰ": 10.39,
  "ㅱ": 10.39,
  "ㅲ": 10.39,
  "ㅳ": 10.39,
  "ㅴ": 10.39,
  "ㅵ": 10.39,
  "ㅶ": 10.39,
  "ㅷ": 10.39,
  "ㅸ": 10.39,
  "ㅹ": 10.39,
  "ㅺ": 10.39,
  "ㅻ": 10.39,
  "ㅼ": 10.39,
  "ㅽ": 10.39,
  "ㅾ": 10.39,
  "ㅿ": 10.39,
  "ㆀ": 10.39,
  "ㆁ": 10.39,
  "ㆂ": 10.39,
  "ㆃ": 10.39,
  "ㆄ": 10.39,
  "ㆅ": 10.39,
  "ㆆ": 10.39,
  "ㆇ": 10.39,
  "ㆈ": 10.39,
  "ㆉ": 10.39,
  "ㆊ": 10.39,
  "ㆋ": 10.39,
  "ㆌ": 10.39,
  "ㆍ": 10.39,
  "ㆎ": 10.39,
  "㆐": 11.09,
  "㆑": 11.09,
  "㆒": 11.09,
  "㆓": 11.09,
  "㆔": 11.09,
  "㆕": 11.09,
  "㆖": 11.09,
  "㆗": 11.09,
  "㆘": 11.09,
  "㆙": 11.09,
  "㆚": 11.09,
  "㆛": 11.09,
  "㆜": 11.09,
  "㆝": 11.09,
  "㆞": 11.09,
  "㆟": 11.09,
  "ㆠ": 12,
  "ㆡ": 12,
  "ㆢ": 12,
  "ㆣ": 12,
  "ㆤ": 12,
  "ㆥ": 12,
  "ㆦ": 12,
  "ㆧ": 12,
  "ㆨ": 12,
  "ㆩ": 12,
  "ㆪ": 12,
  "ㆫ": 12,
  "ㆬ": 12,
  "ㆭ": 12,
  "ㆮ": 12,
  "ㆯ": 12,
  "ㆰ": 12,
  "ㆱ": 12,
  "ㆲ": 12,
  "ㆳ": 12,
  "ㆴ": 12,
  "ㆵ": 12,
  "ㆶ": 12,
  "ㆷ": 12,
  "㈀": 10.39,
  "㈁": 10.39,
  "㈂": 10.39,
  "㈃": 10.39,
  "㈄": 10.39,
  "㈅": 10.39,
  "㈆": 10.39,
  "㈇": 10.39,
  "㈈": 10.39,
  "㈉": 10.39,
  "㈊": 10.39,
  "㈋": 10.39,
  "㈌": 10.39,
  "㈍": 10.39,
  "㈎": 10.39,
  "㈏": 10.39,
  "㈐": 10.39,
  "㈑": 10.39,
  "㈒": 10.39,
  "㈓": 10.39,
  "㈔": 10.39,
  "㈕": 10.39,
  "㈖": 10.39,
  "㈗": 10.39,
  "㈘": 10.39,
  "㈙": 10.39,
  "㈚": 10.39,
  "㈛": 10.39,
  "㈜": 10.22,
  "㈠": 12,
  "㈡": 12,
  "㈢": 12,
  "㈣": 12,
  "㈤": 12,
  "㈥": 12,
  "㈦": 12,
  "㈧": 12,
  "㈨": 12,
  "㈩": 12,
  "㈪": 12,
  "㈫": 12,
  "㈬": 12,
  "㈭": 12,
  "㈮": 12,
  "㈯": 12,
  "㈰": 12,
  "㈱": 12,
  "㈲": 12,
  "㈳": 12,
  "㈴": 12,
  "㈵": 12,
  "㈶": 12,
  "㈷": 12,
  "㈸": 12,
  "㈹": 12,
  "㈺": 12,
  "㈻": 12,
  "㈼": 12,
  "㈽": 12,
  "㈾": 12,
  "㈿": 12,
  "㉀": 12,
  "㉁": 12,
  "㉂": 12,
  "㉃": 12,
  "㉠": 10.39,
  "㉡": 10.39,
  "㉢": 10.39,
  "㉣": 10.39,
  "㉤": 10.39,
  "㉥": 10.39,
  "㉦": 10.39,
  "㉧": 10.39,
  "㉨": 10.39,
  "㉩": 10.39,
  "㉪": 10.39,
  "㉫": 10.39,
  "㉬": 10.39,
  "㉭": 10.39,
  "㉮": 10.39,
  "㉯": 10.39,
  "㉰": 10.39,
  "㉱": 10.39,
  "㉲": 10.39,
  "㉳": 10.39,
  "㉴": 10.39,
  "㉵": 10.39,
  "㉶": 10.39,
  "㉷": 10.39,
  "㉸": 10.39,
  "㉹": 10.39,
  "㉺": 10.39,
  "㉻": 10.39,
  "㉿": 10.16,
  "㊀": 12,
  "㊁": 12,
  "㊂": 12,
  "㊃": 12,
  "㊄": 12,
  "㊅": 12,
  "㊆": 12,
  "㊇": 12,
  "㊈": 12,
  "㊉": 12,
  "㊊": 12,
  "㊋": 12,
  "㊌": 12,
  "㊍": 12,
  "㊎": 12,
  "㊏": 12,
  "㊐": 12,
  "㊑": 12,
  "㊒": 12,
  "㊓": 12,
  "㊔": 12,
  "㊕": 12,
  "㊖": 12,
  "㊗": 11.09,
  "㊘": 12,
  "㊙": 11.09,
  "㊚": 12,
  "㊛": 12,
  "㊜": 12,
  "㊝": 12,
  "㊞": 12,
  "㊟": 12,
  "㊠": 12,
  "㊡": 12,
  "㊢": 12,
  "㊣": 12,
  "㊤": 12,
  "㊥": 12,
  "㊦": 12,
  "㊧": 12,
  "㊨": 12,
  "㊩": 12,
  "㊪": 12,
  "㊫": 12,
  "㊬": 12,
  "㊭": 12,
  "㊮": 12,
  "㊯": 12,
  "㊰": 12,
  "㋀": 12,
  "㋁": 12,
  "㋂": 12,
  "㋃": 12,
  "㋄": 12,
  "㋅": 12,
  "㋆": 12,
  "㋇": 12,
  "㋈": 12,
  "㋉": 12,
  "㋊": 12,
  "㋋": 12,
  "㋐": 11.09,
  "㋑": 11.09,
  "㋒": 11.09,
  "㋓": 11.09,
  "㋔": 11.09,
  "㋕": 11.09,
  "㋖": 11.09,
  "㋗": 11.09,
  "㋘": 11.09,
  "㋙": 11.09,
  "㋚": 11.09,
  "㋛": 11.09,
  "㋜": 11.09,
  "㋝": 11.09,
  "㋞": 11.09,
  "㋟": 11.09,
  "㋠": 11.09,
  "㋡": 11.09,
  "㋢": 11.09,
  "㋣": 11.09,
  "㋤": 11.09,
  "㋥": 11.09,
  "㋦": 11.09,
  "㋧": 11.09,
  "㋨": 11.09,
  "㋩": 11.09,
  "㋪": 11.09,
  "㋫": 11.09,
  "㋬": 11.09,
  "㋭": 11.09,
  "㋮": 11.09,
  "㋯": 11.09,
  "㋰": 11.09,
  "㋱": 11.09,
  "㋲": 11.09,
  "㋳": 11.09,
  "㋴": 11.09,
  "㋵": 11.09,
  "㋶": 11.09,
  "㋷": 11.09,
  "㋸": 11.09,
  "㋹": 11.09,
  "㋺": 11.09,
  "㋻": 11.09,
  "㋼": 11.09,
  "㋽": 11.09,
  "㋾": 11.09,
  "㌀": 11.09,
  "㌁": 11.09,
  "㌂": 11.09,
  "㌃": 11.09,
  "㌄": 11.09,
  "㌅": 11.09,
  "㌆": 11.09,
  "㌇": 11.09,
  "㌈": 11.09,
  "㌉": 11.09,
  "㌊": 11.09,
  "㌋": 11.09,
  "㌌": 11.09,
  "㌍": 11.09,
  "㌎": 11.09,
  "㌏": 11.09,
  "㌐": 11.09,
  "㌑": 11.09,
  "㌒": 11.09,
  "㌓": 11.09,
  "㌔": 11.09,
  "㌕": 11.09,
  "㌖": 11.09,
  "㌗": 11.09,
  "㌘": 11.09,
  "㌙": 11.09,
  "㌚": 11.09,
  "㌛": 11.09,
  "㌜": 11.09,
  "㌝": 11.09,
  "㌞": 11.09,
  "㌟": 11.09,
  "㌠": 11.09,
  "㌡": 11.09,
  "㌢": 11.09,
  "㌣": 11.09,
  "㌤": 11.09,
  "㌥": 11.09,
  "㌦": 11.09,
  "㌧": 11.09,
  "㌨": 11.09,
  "㌩": 11.09,
  "㌪": 11.09,
  "㌫": 11.09,
  "㌬": 12,
  "㌭": 11.09,
  "㌮": 11.09,
  "㌯": 11.09,
  "㌰": 11.09,
  "㌱": 11.09,
  "㌲": 11.09,
  "㌳": 11.09,
  "㌴": 11.09,
  "㌵": 11.09,
  "㌶": 11.09,
  "㌷": 11.09,
  "㌸": 11.09,
  "㌹": 11.09,
  "㌺": 11.09,
  "㌻": 11.09,
  "㌼": 11.09,
  "㌽": 11.09,
  "㌾": 11.09,
  "㌿": 11.09,
  "㍀": 11.09,
  "㍁": 11.09,
  "㍂": 11.09,
  "㍃": 11.09,
  "㍄": 11.09,
  "㍅": 11.09,
  "㍆": 11.09,
  "㍇": 11.09,
  "㍈": 11.09,
  "㍉": 11.09,
  "㍊": 11.09,
  "㍋": 11.09,
  "㍌": 11.09,
  "㍍": 11.09,
  "㍎": 11.09,
  "㍏": 11.09,
  "㍐": 11.09,
  "㍑": 11.09,
  "㍒": 11.09,
  "㍓": 11.09,
  "㍔": 11.09,
  "㍕": 11.09,
  "㍖": 11.09,
  "㍗": 11.09,
  "㍘": 12,
  "㍙": 12,
  "㍚": 12,
  "㍛": 12,
  "㍜": 12,
  "㍝": 12,
  "㍞": 12,
  "㍟": 12,
  "㍠": 12,
  "㍡": 12,
  "㍢": 12,
  "㍣": 12,
  "㍤": 12,
  "㍥": 12,
  "㍦": 12,
  "㍧": 12,
  "㍨": 12,
  "㍩": 12,
  "㍪": 12,
  "㍫": 12,
  "㍬": 12,
  "㍭": 12,
  "㍮": 12,
  "㍯": 12,
  "㍰": 12,
  "㍱": 11.09,
  "㍲": 12,
  "㍳": 12,
  "㍴": 12,
  "㍵": 12,
  "㍶": 12,
  "㍻": 11.09,
  "㍼": 11.09,
  "㍽": 11.09,
  "㍾": 11.09,
  "㍿": 11.09,
  "㎀": 10.39,
  "㎁": 10.39,
  "㎂": 10.39,
  "㎃": 10.39,
  "㎄": 10.39,
  "㎅": 11.09,
  "㎆": 11.09,
  "㎇": 11.09,
  "㎈": 11.09,
  "㎉": 11.09,
  "㎊": 10.39,
  "㎋": 10.39,
  "㎌": 10.39,
  "㎍": 11.09,
  "㎎": 12,
  "㎏": 12,
  "㎐": 11.09,
  "㎑": 10.39,
  "㎒": 10.39,
  "㎓": 10.39,
  "㎔": 10.39,
  "㎕": 10.39,
  "㎖": 11.09,
  "㎗": 11.09,
  "㎘": 11.09,
  "㎙": 10.39,
  "㎚": 10.39,
  "㎛": 11.09,
  "㎜": 12,
  "㎝": 12,
  "㎞": 12,
  "㎟": 12,
  "㎠": 12,
  "㎡": 12,
  "㎢": 12,
  "㎣": 12,
  "㎤": 12,
  "㎥": 12,
  "㎦": 12,
  "㎧": 10.39,
  "㎨": 10.39,
  "㎩": 10.39,
  "㎪": 10.39,
  "㎫": 10.39,
  "㎬": 10.39,
  "㎭": 10.39,
  "㎮": 10.39,
  "㎯": 10.39,
  "㎰": 11.09,
  "㎱": 11.09,
  "㎲": 11.09,
  "㎳": 11.09,
  "㎴": 10.39,
  "㎵": 10.39,
  "㎶": 10.39,
  "㎷": 10.39,
  "㎸": 10.39,
  "㎹": 10.39,
  "㎺": 10.39,
  "㎻": 10.39,
  "㎼": 10.39,
  "㎽": 10.39,
  "㎾": 10.39,
  "㎿": 10.39,
  "㏀": 10.39,
  "㏁": 10.39,
  "㏂": 12,
  "㏃": 10.39,
  "㏄": 12,
  "㏅": 10.39,
  "㏆": 10.39,
  "㏇": 10.16,
  "㏈": 11.09,
  "㏉": 10.39,
  "㏊": 10.39,
  "㏋": 11.09,
  "㏌": 11.09,
  "㏍": 11.09,
  "㏎": 12,
  "㏏": 10.39,
  "㏐": 10.39,
  "㏑": 12,
  "㏒": 12,
  "㏓": 10.39,
  "㏔": 11.09,
  "㏕": 12,
  "㏖": 10.39,
  "㏗": 11.09,
  "㏘": 12,
  "㏙": 12,
  "㏚": 11.09,
  "㏛": 10.39,
  "㏜": 10.39,
  "㏝": 10.39,
  "㏠": 12,
  "㏡": 12,
  "㏢": 12,
  "㏣": 12,
  "㏤": 12,
  "㏥": 12,
  "㏦": 12,
  "㏧": 12,
  "㏨": 12,
  "㏩": 12,
  "㏪": 12,
  "㏫": 12,
  "㏬": 12,
  "㏭": 12,
  "㏮": 12,
  "㏯": 12,
  "㏰": 12,
  "㏱": 12,
  "㏲": 12,
  "㏳": 12,
  "㏴": 12,
  "㏵": 12,
  "㏶": 12,
  "㏷": 12,
  "㏸": 12,
  "㏹": 12,
  "㏺": 12,
  "㏻": 12,
  "㏼": 12,
  "㏽": 12,
  "㏾": 12,
  "㐀": 12,
  "䶵": 12,
  "一": 12,
  "龥": 12,
  "ꀀ": 7.41,
  "ꀁ": 7.41,
  "ꀂ": 7.41,
  "ꀃ": 7.7,
  "ꀄ": 7.39,
  "ꀅ": 6.83,
  "ꀆ": 6.83,
  "ꀇ": 7.56,
  "ꀈ": 6.31,
  "ꀉ": 6.53,
  "ꀊ": 6.53,
  "ꀋ": 6.75,
  "ꀌ": 7.13,
  "ꀍ": 7.13,
  "ꀎ": 6.89,
  "ꀏ": 6.98,
  "ꀐ": 8.23,
  "ꀑ": 8.23,
  "ꀒ": 8.23,
  "ꀓ": 7.08,
  "ꀔ": 6.94,
  "ꀕ": 7.66,
  "ꀖ": 7.52,
  "ꀗ": 6.39,
  "ꀘ": 6.39,
  "ꀙ": 6.39,
  "ꀚ": 8.11,
  "ꀛ": 7.02,
  "ꀜ": 7.02,
  "ꀝ": 7.53,
  "ꀞ": 6.17,
  "ꀟ": 7.66,
  "ꀠ": 7.66,
  "ꀡ": 7.27,
  "ꀢ": 7,
  "ꀣ": 7,
  "ꀤ": 5.39,
  "ꀥ": 7.22,
  "ꀦ": 6.25,
  "ꀧ": 6.25,
  "ꀨ": 6.22,
  "ꀩ": 7.36,
  "ꀪ": 7.36,
  "ꀫ": 5.39,
  "ꀬ": 6.88,
  "ꀭ": 6.3,
  "ꀮ": 6.3,
  "ꀯ": 5.95,
  "ꀰ": 7.28,
  "ꀱ": 7.28,
  "ꀲ": 6.58,
  "ꀳ": 6.47,
  "ꀴ": 6.47,
  "ꀵ": 7.23,
  "ꀶ": 8.47,
  "ꀷ": 8.47,
  "ꀸ": 7.3,
  "ꀹ": 7.47,
  "ꀺ": 7.47,
  "ꀻ": 6.88,
  "ꀼ": 8.02,
  "ꀽ": 8.02,
  "ꀾ": 7.36,
  "ꀿ": 7.13,
  "ꁀ": 7.36,
  "ꁁ": 7.36,
  "ꁂ": 7.48,
  "ꁃ": 6.89,
  "ꁄ": 6.89,
  "ꁅ": 7.08,
  "ꁆ": 7.45,
  "ꁇ": 7.67,
  "ꁈ": 7.67,
  "ꁉ": 6.77,
  "ꁊ": 6.02,
  "ꁋ": 6.97,
  "ꁌ": 6.97,
  "ꁍ": 7.17,
  "ꁎ": 7.48,
  "ꁏ": 7.48,
  "ꁐ": 7.3,
  "ꁑ": 7.72,
  "ꁒ": 7.72,
  "ꁓ": 7.34,
  "ꁔ": 7.41,
  "ꁕ": 7.41,
  "ꁖ": 7.36,
  "ꁗ": 6.98,
  "ꁘ": 6.98,
  "ꁙ": 7.11,
  "ꁚ": 7.53,
  "ꁛ": 6.86,
  "ꁜ": 6.86,
  "ꁝ": 7.38,
  "ꁞ": 7.56,
  "ꁟ": 9.63,
  "ꁠ": 9.63,
  "ꁡ": 7.66,
  "ꁢ": 6.89,
  "ꁣ": 6.89,
  "ꁤ": 7.3,
  "ꁥ": 7.31,
  "ꁦ": 6.05,
  "ꁧ": 6.05,
  "ꁨ": 7.36,
  "ꁩ": 6.92,
  "ꁪ": 6.92,
  "ꁫ": 7.3,
  "ꁬ": 7.41,
  "ꁭ": 7.09,
  "ꁮ": 7.09,
  "ꁯ": 6.66,
  "ꁰ": 6.92,
  "ꁱ": 6.92,
  "ꁲ": 6.7,
  "ꁳ": 6.38,
  "ꁴ": 6.38,
  "ꁵ": 6.13,
  "ꁶ": 7.03,
  "ꁷ": 6.83,
  "ꁸ": 6.83,
  "ꁹ": 6.64,
  "ꁺ": 7.08,
  "ꁻ": 7.08,
  "ꁼ": 6.33,
  "ꁽ": 7.97,
  "ꁾ": 6.55,
  "ꁿ": 6.55,
  "ꂀ": 8.06,
  "ꂁ": 7.25,
  "ꂂ": 7.66,
  "ꂃ": 7.66,
  "ꂄ": 7.66,
  "ꂅ": 6.73,
  "ꂆ": 7.3,
  "ꂇ": 7.3,
  "ꂈ": 6.77,
  "ꂉ": 8.52,
  "ꂊ": 8.52,
  "ꂋ": 7.05,
  "ꂌ": 7.36,
  "ꂍ": 7.36,
  "ꂎ": 6.84,
  "ꂏ": 6.78,
  "ꂐ": 6.78,
  "ꂑ": 6.13,
  "ꂒ": 6.73,
  "ꂓ": 6.73,
  "ꂔ": 7.11,
  "ꂕ": 7.67,
  "ꂖ": 7.44,
  "ꂗ": 6.08,
  "ꂘ": 7.25,
  "ꂙ": 7.14,
  "ꂚ": 7.14,
  "ꂛ": 6.92,
  "ꂜ": 7.05,
  "ꂝ": 7.05,
  "ꂞ": 6.42,
  "ꂟ": 7.3,
  "ꂠ": 7.02,
  "ꂡ": 7.02,
  "ꂢ": 6.69,
  "ꂣ": 6.59,
  "ꂤ": 6.52,
  "ꂥ": 6.52,
  "ꂦ": 7.11,
  "ꂧ": 7.67,
  "ꂨ": 7.67,
  "ꂩ": 6.25,
  "ꂪ": 6.25,
  "ꂫ": 6.42,
  "ꂬ": 7.36,
  "ꂭ": 7.36,
  "ꂮ": 7.11,
  "ꂯ": 6.5,
  "ꂰ": 6.5,
  "ꂱ": 6.22,
  "ꂲ": 7.11,
  "ꂳ": 7.11,
  "ꂴ": 6.55,
  "ꂵ": 7.61,
  "ꂶ": 7.19,
  "ꂷ": 7.19,
  "ꂸ": 7.66,
  "ꂹ": 6.72,
  "ꂺ": 6.83,
  "ꂻ": 6.83,
  "ꂼ": 8.23,
  "ꂽ": 7.3,
  "ꂾ": 6.73,
  "ꂿ": 6.73,
  "ꃀ": 7,
  "ꃁ": 7.2,
  "ꃂ": 7.2,
  "ꃃ": 6.94,
  "ꃄ": 7.86,
  "ꃅ": 7.86,
  "ꃆ": 6.98,
  "ꃇ": 6.33,
  "ꃈ": 6.33,
  "ꃉ": 6.39,
  "ꃊ": 7.67,
  "ꃋ": 7.67,
  "ꃌ": 6.33,
  "ꃍ": 6.66,
  "ꃎ": 6.69,
  "ꃏ": 6.69,
  "ꃐ": 6.3,
  "ꃑ": 7.91,
  "ꃒ": 6.73,
  "ꃓ": 6.73,
  "ꃔ": 6.73,
  "ꃕ": 6.34,
  "ꃖ": 6.34,
  "ꃗ": 6.44,
  "ꃘ": 5.8,
  "ꃙ": 7.47,
  "ꃚ": 7.47,
  "ꃛ": 7.3,
  "ꃜ": 6.58,
  "ꃝ": 6.58,
  "ꃞ": 6.73,
  "ꃟ": 7.3,
  "ꃠ": 7.3,
  "ꃡ": 7.3,
  "ꃢ": 7.3,
  "ꃣ": 6.48,
  "ꃤ": 6.48,
  "ꃥ": 6.58,
  "ꃦ": 6.47,
  "ꃧ": 6.05,
  "ꃨ": 6.05,
  "ꃩ": 6.19,
  "ꃪ": 7.11,
  "ꃫ": 7.11,
  "ꃬ": 7.11,
  "ꃭ": 6.19,
  "ꃮ": 6.8,
  "ꃯ": 6.69,
  "ꃰ": 6.69,
  "ꃱ": 7.63,
  "ꃲ": 6.52,
  "ꃳ": 6.52,
  "ꃴ": 6.94,
  "ꃵ": 6.22,
  "ꃶ": 6.22,
  "ꃷ": 6.48,
  "ꃸ": 6.69,
  "ꃹ": 6.69,
  "ꃺ": 6.73,
  "ꃻ": 7.67,
  "ꃼ": 7.67,
  "ꃽ": 6.73,
  "ꃾ": 7.5,
  "ꃿ": 7.5,
  "ꄀ": 8.09,
  "ꄁ": 6.66,
  "ꄂ": 6.66,
  "ꄃ": 7.41,
  "ꄄ": 6.86,
  "ꄅ": 6.86,
  "ꄆ": 6.8,
  "ꄇ": 7.52,
  "ꄈ": 6.27,
  "ꄉ": 6.27,
  "ꄊ": 7.36,
  "ꄋ": 6.44,
  "ꄌ": 6.44,
  "ꄍ": 6.83,
  "ꄎ": 6.78,
  "ꄏ": 6.78,
  "ꄐ": 6.13,
  "ꄑ": 5.98,
  "ꄒ": 5.98,
  "ꄓ": 6.45,
  "ꄔ": 5.89,
  "ꄕ": 6.11,
  "ꄖ": 6.11,
  "ꄗ": 6.64,
  "ꄘ": 6.05,
  "ꄙ": 6.05,
  "ꄚ": 6.13,
  "ꄛ": 5.92,
  "ꄜ": 5.92,
  "ꄝ": 6.11,
  "ꄞ": 6.88,
  "ꄟ": 6.88,
  "ꄠ": 6.83,
  "ꄡ": 5.98,
  "ꄢ": 6.45,
  "ꄣ": 6.45,
  "ꄤ": 5.98,
  "ꄥ": 6.72,
  "ꄦ": 5.8,
  "ꄧ": 5.8,
  "ꄨ": 7.14,
  "ꄩ": 6.13,
  "ꄪ": 6.42,
  "ꄫ": 6.42,
  "ꄬ": 6.47,
  "ꄭ": 6.77,
  "ꄮ": 6.77,
  "ꄯ": 6.45,
  "ꄰ": 7.09,
  "ꄱ": 7.11,
  "ꄲ": 7.11,
  "ꄳ": 7.05,
  "ꄴ": 7.39,
  "ꄵ": 7.39,
  "ꄶ": 6.45,
  "ꄷ": 6.27,
  "ꄸ": 6.27,
  "ꄹ": 6.45,
  "ꄺ": 6.45,
  "ꄻ": 6.45,
  "ꄼ": 6.45,
  "ꄽ": 6.77,
  "ꄾ": 6.45,
  "ꄿ": 6.45,
  "ꅀ": 6.45,
  "ꅁ": 6.72,
  "ꅂ": 6.72,
  "ꅃ": 6.63,
  "ꅄ": 6.25,
  "ꅅ": 6.09,
  "ꅆ": 6.09,
  "ꅇ": 6.38,
  "ꅈ": 6.22,
  "ꅉ": 6.22,
  "ꅊ": 7.3,
  "ꅋ": 6.91,
  "ꅌ": 7.67,
  "ꅍ": 7.67,
  "ꅎ": 7.05,
  "ꅏ": 7.36,
  "ꅐ": 7.36,
  "ꅑ": 6.45,
  "ꅒ": 5.84,
  "ꅓ": 5.84,
  "ꅔ": 6.66,
  "ꅕ": 6.89,
  "ꅖ": 6.89,
  "ꅗ": 6.77,
  "ꅘ": 6.73,
  "ꅙ": 6.73,
  "ꅚ": 7.77,
  "ꅛ": 6.64,
  "ꅜ": 6.73,
  "ꅝ": 6.73,
  "ꅞ": 6.73,
  "ꅟ": 7.3,
  "ꅠ": 7.3,
  "ꅡ": 7.17,
  "ꅢ": 6.13,
  "ꅣ": 6.38,
  "ꅤ": 6.38,
  "ꅥ": 6.98,
  "ꅦ": 6.64,
  "ꅧ": 6.64,
  "ꅨ": 5.94,
  "ꅩ": 5.81,
  "ꅪ": 5.81,
  "ꅫ": 6.73,
  "ꅬ": 6.5,
  "ꅭ": 7.3,
  "ꅮ": 7.3,
  "ꅯ": 6.78,
  "ꅰ": 6.03,
  "ꅱ": 7.05,
  "ꅲ": 7.05,
  "ꅳ": 6.42,
  "ꅴ": 8,
  "ꅵ": 8,
  "ꅶ": 6.92,
  "ꅷ": 6.27,
  "ꅸ": 6.27,
  "ꅹ": 6.45,
  "ꅺ": 6.45,
  "ꅻ": 6.86,
  "ꅼ": 6.98,
  "ꅽ": 7.11,
  "ꅾ": 7.36,
  "ꅿ": 7.36,
  "ꆀ": 7.3,
  "ꆁ": 7.14,
  "ꆂ": 7.14,
  "ꆃ": 6.61,
  "ꆄ": 6.72,
  "ꆅ": 6.72,
  "ꆆ": 6.59,
  "ꆇ": 6.47,
  "ꆈ": 6.47,
  "ꆉ": 6.89,
  "ꆊ": 6.78,
  "ꆋ": 6.83,
  "ꆌ": 6.83,
  "ꆍ": 6.78,
  "ꆎ": 6.3,
  "ꆏ": 6.3,
  "ꆐ": 6.25,
  "ꆑ": 6.58,
  "ꆒ": 6.92,
  "ꆓ": 6.92,
  "ꆔ": 6.92,
  "ꆕ": 6.52,
  "ꆖ": 6.52,
  "ꆗ": 6.73,
  "ꆘ": 6.73,
  "ꆙ": 6.73,
  "ꆚ": 6.47,
  "ꆛ": 6.73,
  "ꆜ": 6.73,
  "ꆝ": 6.98,
  "ꆞ": 7.47,
  "ꆟ": 7.31,
  "ꆠ": 7.31,
  "ꆡ": 6.88,
  "ꆢ": 6.67,
  "ꆣ": 6.67,
  "ꆤ": 6.86,
  "ꆥ": 6.44,
  "ꆦ": 6.44,
  "ꆧ": 6.86,
  "ꆨ": 6.25,
  "ꆩ": 6.25,
  "ꆪ": 6.25,
  "ꆫ": 6.78,
  "ꆬ": 6,
  "ꆭ": 6,
  "ꆮ": 6.52,
  "ꆯ": 6.58,
  "ꆰ": 6.58,
  "ꆱ": 7.14,
  "ꆲ": 7.2,
  "ꆳ": 7.2,
  "ꆴ": 6.97,
  "ꆵ": 6.92,
  "ꆶ": 6.92,
  "ꆷ": 6.45,
  "ꆸ": 5.56,
  "ꆹ": 5.56,
  "ꆺ": 7.11,
  "ꆻ": 5.89,
  "ꆼ": 5.86,
  "ꆽ": 5.86,
  "ꆾ": 5.86,
  "ꆿ": 7.5,
  "ꇀ": 6.16,
  "ꇁ": 6.16,
  "ꇂ": 6.72,
  "ꇃ": 6.38,
  "ꇄ": 6.38,
  "ꇅ": 6.38,
  "ꇆ": 7.2,
  "ꇇ": 7.2,
  "ꇈ": 6.83,
  "ꇉ": 6.83,
  "ꇊ": 6.66,
  "ꇋ": 6.02,
  "ꇌ": 6.02,
  "ꇍ": 7.66,
  "ꇎ": 7.11,
  "ꇏ": 7.66,
  "ꇐ": 7.66,
  "ꇑ": 6.73,
  "ꇒ": 6.14,
  "ꇓ": 6.14,
  "ꇔ": 7.2,
  "ꇕ": 6.73,
  "ꇖ": 6.73,
  "ꇗ": 6.45,
  "ꇘ": 6,
  "ꇙ": 6,
  "ꇚ": 7.16,
  "ꇛ": 7,
  "ꇜ": 7,
  "ꇝ": 6.25,
  "ꇞ": 6.25,
  "ꇟ": 7.2,
  "ꇠ": 7.2,
  "ꇡ": 6.25,
  "ꇢ": 6.75,
  "ꇣ": 6.56,
  "ꇤ": 6.56,
  "ꇥ": 7.11,
  "ꇦ": 7.5,
  "ꇧ": 7.72,
  "ꇨ": 7.72,
  "ꇩ": 7.11,
  "ꇪ": 7.86,
  "ꇫ": 6.69,
  "ꇬ": 6.69,
  "ꇭ": 6.33,
  "ꇮ": 6.39,
  "ꇯ": 6.13,
  "ꇰ": 6.13,
  "ꇱ": 5.94,
  "ꇲ": 7.52,
  "ꇳ": 7.36,
  "ꇴ": 7.36,
  "ꇵ": 7.11,
  "ꇶ": 6.72,
  "ꇷ": 6.72,
  "ꇸ": 6.84,
  "ꇹ": 6.66,
  "ꇺ": 6.66,
  "ꇻ": 5.95,
  "ꇼ": 6.45,
  "ꇽ": 6.45,
  "ꇾ": 6.78,
  "ꇿ": 6.98,
  "ꈀ": 6.38,
  "ꈁ": 6.38,
  "ꈂ": 6.39,
  "ꈃ": 6.52,
  "ꈄ": 6.52,
  "ꈅ": 6.94,
  "ꈆ": 6.33,
  "ꈇ": 6.05,
  "ꈈ": 6.05,
  "ꈉ": 6.56,
  "ꈊ": 7.41,
  "ꈋ": 5.45,
  "ꈌ": 5.45,
  "ꈍ": 7.67,
  "ꈎ": 7.2,
  "ꈏ": 6.89,
  "ꈐ": 6.89,
  "ꈑ": 6.47,
  "ꈒ": 6.09,
  "ꈓ": 6.09,
  "ꈔ": 7.11,
  "ꈕ": 6.45,
  "ꈖ": 6.45,
  "ꈗ": 7.17,
  "ꈘ": 7.17,
  "ꈙ": 6.8,
  "ꈚ": 6.86,
  "ꈛ": 6.63,
  "ꈜ": 6.63,
  "ꈝ": 6.31,
  "ꈞ": 6.58,
  "ꈟ": 7.52,
  "ꈠ": 7.52,
  "ꈡ": 6.98,
  "ꈢ": 6.36,
  "ꈣ": 5.61,
  "ꈤ": 5.61,
  "ꈥ": 5.5,
  "ꈦ": 6.52,
  "ꈧ": 7.13,
  "ꈨ": 7.13,
  "ꈩ": 8.08,
  "ꈪ": 7.25,
  "ꈫ": 6.36,
  "ꈬ": 6.36,
  "ꈭ": 6.36,
  "ꈮ": 6.64,
  "ꈯ": 6.64,
  "ꈰ": 7.19,
  "ꈱ": 7.19,
  "ꈲ": 6.47,
  "ꈳ": 7.31,
  "ꈴ": 7.31,
  "ꈵ": 6.47,
  "ꈶ": 6.64,
  "ꈷ": 6.64,
  "ꈸ": 6.5,
  "ꈹ": 6.5,
  "ꈺ": 7.03,
  "ꈻ": 7.03,
  "ꈼ": 6.92,
  "ꈽ": 6.2,
  "ꈾ": 6.2,
  "ꈿ": 6.58,
  "ꉀ": 7.56,
  "ꉁ": 5.73,
  "ꉂ": 5.73,
  "ꉃ": 6.89,
  "ꉄ": 7.36,
  "ꉅ": 7.36,
  "ꉆ": 6.72,
  "ꉇ": 6.78,
  "ꉈ": 6.78,
  "ꉉ": 6.59,
  "ꉊ": 6.09,
  "ꉋ": 6.7,
  "ꉌ": 6.7,
  "ꉍ": 7.3,
  "ꉎ": 7.05,
  "ꉏ": 6.41,
  "ꉐ": 6.41,
  "ꉑ": 6.75,
  "ꉒ": 7.27,
  "ꉓ": 6.84,
  "ꉔ": 6.84,
  "ꉕ": 7.27,
  "ꉖ": 5.98,
  "ꉗ": 6.3,
  "ꉘ": 6.3,
  "ꉙ": 6.78,
  "ꉚ": 6.64,
  "ꉛ": 6.64,
  "ꉜ": 6.66,
  "ꉝ": 6.72,
  "ꉞ": 6.72,
  "ꉟ": 6.3,
  "ꉠ": 7.31,
  "ꉡ": 6.45,
  "ꉢ": 6.45,
  "ꉣ": 7.06,
  "ꉤ": 7.11,
  "ꉥ": 6.27,
  "ꉦ": 6.27,
  "ꉧ": 5.75,
  "ꉨ": 6.77,
  "ꉩ": 6.77,
  "ꉪ": 7.77,
  "ꉫ": 6.22,
  "ꉬ": 6.22,
  "ꉭ": 7.34,
  "ꉮ": 6.31,
  "ꉯ": 6.31,
  "ꉰ": 6.31,
  "ꉱ": 7.25,
  "ꉲ": 7.41,
  "ꉳ": 7.41,
  "ꉴ": 7.41,
  "ꉵ": 6.53,
  "ꉶ": 6.64,
  "ꉷ": 6.64,
  "ꉸ": 6.97,
  "ꉹ": 6.31,
  "ꉺ": 7.11,
  "ꉻ": 7.11,
  "ꉼ": 6.81,
  "ꉽ": 7.08,
  "ꉾ": 7.08,
  "ꉿ": 7.36,
  "ꊀ": 7.45,
  "ꊁ": 6.69,
  "ꊂ": 6.69,
  "ꊃ": 6.69,
  "ꊄ": 6.61,
  "ꊅ": 6.61,
  "ꊆ": 6.97,
  "ꊇ": 6.22,
  "ꊈ": 6.22,
  "ꊉ": 5.86,
  "ꊊ": 6.58,
  "ꊋ": 6.58,
  "ꊌ": 6.92,
  "ꊍ": 6.84,
  "ꊎ": 7.41,
  "ꊏ": 7.41,
  "ꊐ": 6.73,
  "ꊑ": 6.83,
  "ꊒ": 6.83,
  "ꊓ": 6.67,
  "ꊔ": 6.56,
  "ꊕ": 6.56,
  "ꊖ": 6.56,
  "ꊗ": 7.41,
  "ꊘ": 6.77,
  "ꊙ": 6.77,
  "ꊚ": 7.25,
  "ꊛ": 6.94,
  "ꊜ": 7.19,
  "ꊝ": 7.19,
  "ꊞ": 6.77,
  "ꊟ": 6.86,
  "ꊠ": 6.86,
  "ꊡ": 6.31,
  "ꊢ": 6.64,
  "ꊣ": 5.75,
  "ꊤ": 5.75,
  "ꊥ": 6.56,
  "ꊦ": 7.81,
  "ꊧ": 7.81,
  "ꊨ": 6.22,
  "ꊩ": 6.5,
  "ꊪ": 6.5,
  "ꊫ": 5.75,
  "ꊬ": 6.59,
  "ꊭ": 6.59,
  "ꊮ": 6.22,
  "ꊯ": 5.81,
  "ꊰ": 5.81,
  "ꊱ": 5.95,
  "ꊲ": 7.14,
  "ꊳ": 6.64,
  "ꊴ": 6.64,
  "ꊵ": 6.66,
  "ꊶ": 7.11,
  "ꊷ": 7.11,
  "ꊸ": 7.11,
  "ꊹ": 8.11,
  "ꊺ": 6.13,
  "ꊻ": 6.13,
  "ꊼ": 6.83,
  "ꊽ": 7.63,
  "ꊾ": 7.56,
  "ꊿ": 7.56,
  "ꋀ": 6.81,
  "ꋁ": 7.11,
  "ꋂ": 7.11,
  "ꋃ": 7.66,
  "ꋄ": 7.16,
  "ꋅ": 7.61,
  "ꋆ": 7.61,
  "ꋇ": 6.78,
  "ꋈ": 7.06,
  "ꋉ": 7.06,
  "ꋊ": 5.88,
  "ꋋ": 7,
  "ꋌ": 7,
  "ꋍ": 6.13,
  "ꋎ": 6.16,
  "ꋏ": 6.16,
  "ꋐ": 6.86,
  "ꋑ": 7.3,
  "ꋒ": 7.3,
  "ꋓ": 6.39,
  "ꋔ": 6.22,
  "ꋕ": 6.64,
  "ꋖ": 6.64,
  "ꋗ": 6.69,
  "ꋘ": 7.06,
  "ꋙ": 6.94,
  "ꋚ": 6.94,
  "ꋛ": 7.06,
  "ꋜ": 6.98,
  "ꋝ": 6.98,
  "ꋞ": 6.5,
  "ꋟ": 7,
  "ꋠ": 7,
  "ꋡ": 6.91,
  "ꋢ": 6.64,
  "ꋣ": 6.64,
  "ꋤ": 6.59,
  "ꋥ": 6.11,
  "ꋦ": 6.11,
  "ꋧ": 7.25,
  "ꋨ": 6.19,
  "ꋩ": 6.19,
  "ꋪ": 6.45,
  "ꋫ": 7.2,
  "ꋬ": 7.2,
  "ꋭ": 6.8,
  "ꋮ": 6.52,
  "ꋯ": 6.52,
  "ꋰ": 6.36,
  "ꋱ": 7.75,
  "ꋲ": 7.75,
  "ꋳ": 7.75,
  "ꋴ": 6.52,
  "ꋵ": 6.52,
  "ꋶ": 6.52,
  "ꋷ": 6.38,
  "ꋸ": 7.17,
  "ꋹ": 7.17,
  "ꋺ": 6.77,
  "ꋻ": 6.77,
  "ꋼ": 5.52,
  "ꋽ": 5.52,
  "ꋾ": 7.17,
  "ꋿ": 7.17,
  "ꌀ": 6.89,
  "ꌁ": 7.36,
  "ꌂ": 7.36,
  "ꌃ": 6.8,
  "ꌄ": 5.73,
  "ꌅ": 5.73,
  "ꌆ": 7.11,
  "ꌇ": 7.36,
  "ꌈ": 7.36,
  "ꌉ": 7.2,
  "ꌊ": 7.17,
  "ꌋ": 7.17,
  "ꌌ": 6.31,
  "ꌍ": 7.61,
  "ꌎ": 7.61,
  "ꌏ": 7.3,
  "ꌐ": 6.25,
  "ꌑ": 6.08,
  "ꌒ": 6.08,
  "ꌓ": 6.63,
  "ꌔ": 5.73,
  "ꌕ": 5.73,
  "ꌖ": 5.73,
  "ꌗ": 6.56,
  "ꌘ": 6.16,
  "ꌙ": 6.16,
  "ꌚ": 6.56,
  "ꌛ": 6.86,
  "ꌜ": 6.86,
  "ꌝ": 6.27,
  "ꌞ": 7.19,
  "ꌟ": 6.17,
  "ꌠ": 6.17,
  "ꌡ": 6.77,
  "ꌢ": 6.63,
  "ꌣ": 6.63,
  "ꌤ": 6.89,
  "ꌥ": 6.89,
  "ꌦ": 6.89,
  "ꌧ": 6.52,
  "ꌨ": 6.89,
  "ꌩ": 6.89,
  "ꌪ": 6,
  "ꌫ": 6.02,
  "ꌬ": 6.02,
  "ꌭ": 6.28,
  "ꌮ": 6.73,
  "ꌯ": 6.73,
  "ꌰ": 6.45,
  "ꌱ": 7.66,
  "ꌲ": 6.64,
  "ꌳ": 6.64,
  "ꌴ": 6.64,
  "ꌵ": 6.53,
  "ꌶ": 7.11,
  "ꌷ": 7.11,
  "ꌸ": 7.88,
  "ꌹ": 6.13,
  "ꌺ": 6.13,
  "ꌻ": 7.11,
  "ꌼ": 6.52,
  "ꌽ": 6.59,
  "ꌾ": 6.59,
  "ꌿ": 7.55,
  "ꍀ": 7.8,
  "ꍁ": 6.61,
  "ꍂ": 6.61,
  "ꍃ": 6.7,
  "ꍄ": 7.36,
  "ꍅ": 7.36,
  "ꍆ": 7,
  "ꍇ": 6.92,
  "ꍈ": 6.92,
  "ꍉ": 6.11,
  "ꍊ": 6.52,
  "ꍋ": 6.52,
  "ꍌ": 6.39,
  "ꍍ": 8.02,
  "ꍎ": 7.61,
  "ꍏ": 7.61,
  "ꍐ": 6.86,
  "ꍑ": 6.25,
  "ꍒ": 6.25,
  "ꍓ": 6.25,
  "ꍔ": 7.36,
  "ꍕ": 7.94,
  "ꍖ": 7.7,
  "ꍗ": 7.7,
  "ꍘ": 7.28,
  "ꍙ": 6.94,
  "ꍚ": 6.94,
  "ꍛ": 6.63,
  "ꍜ": 6.73,
  "ꍝ": 6.73,
  "ꍞ": 6.22,
  "ꍟ": 6.72,
  "ꍠ": 6.72,
  "ꍡ": 6.42,
  "ꍢ": 7.16,
  "ꍣ": 7.16,
  "ꍤ": 6.73,
  "ꍥ": 6.92,
  "ꍦ": 6.47,
  "ꍧ": 6.47,
  "ꍨ": 7.14,
  "ꍩ": 6.78,
  "ꍪ": 6.05,
  "ꍫ": 6.05,
  "ꍬ": 6.31,
  "ꍭ": 6.83,
  "ꍮ": 6.83,
  "ꍯ": 6.83,
  "ꍰ": 6.45,
  "ꍱ": 8.47,
  "ꍲ": 8.47,
  "ꍳ": 7,
  "ꍴ": 6.89,
  "ꍵ": 6.89,
  "ꍶ": 6.7,
  "ꍷ": 6.88,
  "ꍸ": 6.88,
  "ꍹ": 6.42,
  "ꍺ": 6.7,
  "ꍻ": 6.7,
  "ꍼ": 6.77,
  "ꍽ": 6.77,
  "ꍾ": 6.39,
  "ꍿ": 6.39,
  "ꎀ": 7.05,
  "ꎁ": 6.66,
  "ꎂ": 6.66,
  "ꎃ": 7,
  "ꎄ": 6.27,
  "ꎅ": 6.11,
  "ꎆ": 6.11,
  "ꎇ": 6.73,
  "ꎈ": 6.38,
  "ꎉ": 7,
  "ꎊ": 7,
  "ꎋ": 7.61,
  "ꎌ": 6.38,
  "ꎍ": 6.38,
  "ꎎ": 6.8,
  "ꎏ": 6.38,
  "ꎐ": 6.38,
  "ꎑ": 6.17,
  "ꎒ": 6.64,
  "ꎓ": 6.64,
  "ꎔ": 7.11,
  "ꎕ": 7.02,
  "ꎖ": 7.02,
  "ꎗ": 6.22,
  "ꎘ": 7,
  "ꎙ": 7,
  "ꎚ": 7,
  "ꎛ": 6.11,
  "ꎜ": 6.83,
  "ꎝ": 6.83,
  "ꎞ": 7.3,
  "ꎟ": 6.73,
  "ꎠ": 6.77,
  "ꎡ": 6.77,
  "ꎢ": 7.3,
  "ꎣ": 6.88,
  "ꎤ": 6.88,
  "ꎥ": 6.42,
  "ꎦ": 6.8,
  "ꎧ": 6.8,
  "ꎨ": 6.45,
  "ꎩ": 7.17,
  "ꎪ": 7.17,
  "ꎫ": 6.38,
  "ꎬ": 6.83,
  "ꎭ": 6.83,
  "ꎮ": 7.48,
  "ꎯ": 6.05,
  "ꎰ": 6.05,
  "ꎱ": 6,
  "ꎲ": 6.98,
  "ꎳ": 7.17,
  "ꎴ": 7.17,
  "ꎵ": 7.33,
  "ꎶ": 7.2,
  "ꎷ": 6.27,
  "ꎸ": 6.27,
  "ꎹ": 6.27,
  "ꎺ": 6.23,
  "ꎻ": 6.94,
  "ꎼ": 6.94,
  "ꎽ": 6.64,
  "ꎾ": 6.52,
  "ꎿ": 6.52,
  "ꏀ": 6.45,
  "ꏁ": 5.75,
  "ꏂ": 5.75,
  "ꏃ": 7.3,
  "ꏄ": 6.05,
  "ꏅ": 6.05,
  "ꏆ": 7.11,
  "ꏇ": 7.81,
  "ꏈ": 7.81,
  "ꏉ": 6.58,
  "ꏊ": 7.02,
  "ꏋ": 7.02,
  "ꏌ": 6.06,
  "ꏍ": 6.91,
  "ꏎ": 6.77,
  "ꏏ": 6.91,
  "ꏐ": 7.31,
  "ꏑ": 6.7,
  "ꏒ": 6.7,
  "ꏓ": 7.38,
  "ꏔ": 6.05,
  "ꏕ": 6.45,
  "ꏖ": 6.45,
  "ꏗ": 6.42,
  "ꏘ": 6.05,
  "ꏙ": 6.05,
  "ꏚ": 8.42,
  "ꏛ": 6.39,
  "ꏜ": 6.39,
  "ꏝ": 6.94,
  "ꏞ": 6.11,
  "ꏟ": 6.11,
  "ꏠ": 6.73,
  "ꏡ": 6.45,
  "ꏢ": 6.45,
  "ꏣ": 6.8,
  "ꏤ": 6.59,
  "ꏥ": 7.3,
  "ꏦ": 7.3,
  "ꏧ": 6.67,
  "ꏨ": 6.5,
  "ꏩ": 7.17,
  "ꏪ": 7.17,
  "ꏫ": 7.17,
  "ꏬ": 7.66,
  "ꏭ": 7.66,
  "ꏮ": 7.66,
  "ꏯ": 7.17,
  "ꏰ": 7.11,
  "ꏱ": 5.91,
  "ꏲ": 5.91,
  "ꏳ": 6.73,
  "ꏴ": 7.36,
  "ꏵ": 7.36,
  "ꏶ": 6.94,
  "ꏷ": 6.86,
  "ꏸ": 6.86,
  "ꏹ": 5.98,
  "ꏺ": 6.78,
  "ꏻ": 6.78,
  "ꏼ": 7.19,
  "ꏽ": 6.84,
  "ꏾ": 6.84,
  "ꏿ": 7.11,
  "ꐀ": 9.3,
  "ꐁ": 7.3,
  "ꐂ": 7.3,
  "ꐃ": 7.59,
  "ꐄ": 6.39,
  "ꐅ": 6.72,
  "ꐆ": 6.72,
  "ꐇ": 6.72,
  "ꐈ": 6.33,
  "ꐉ": 8.11,
  "ꐊ": 8.11,
  "ꐋ": 7.11,
  "ꐌ": 6.8,
  "ꐍ": 7.11,
  "ꐎ": 7.11,
  "ꐏ": 6.22,
  "ꐐ": 7.11,
  "ꐑ": 7.11,
  "ꐒ": 6.58,
  "ꐓ": 7.3,
  "ꐔ": 7.3,
  "ꐕ": 7.3,
  "ꐖ": 6.66,
  "ꐗ": 6.66,
  "ꐘ": 6.73,
  "ꐙ": 6.16,
  "ꐚ": 6.16,
  "ꐛ": 6.72,
  "ꐜ": 6.89,
  "ꐝ": 6.78,
  "ꐞ": 6.78,
  "ꐟ": 7.41,
  "ꐠ": 6.56,
  "ꐡ": 6.56,
  "ꐢ": 7.86,
  "ꐣ": 7.05,
  "ꐤ": 6.73,
  "ꐥ": 6.73,
  "ꐦ": 6.56,
  "ꐧ": 6.98,
  "ꐨ": 7.92,
  "ꐩ": 7.92,
  "ꐪ": 6.88,
  "ꐫ": 6.73,
  "ꐬ": 6.73,
  "ꐭ": 6.45,
  "ꐮ": 7.44,
  "ꐯ": 7.44,
  "ꐰ": 6.5,
  "ꐱ": 6.38,
  "ꐲ": 6.89,
  "ꐳ": 6.89,
  "ꐴ": 7.2,
  "ꐵ": 7.66,
  "ꐶ": 7.45,
  "ꐷ": 7.45,
  "ꐸ": 6.64,
  "ꐹ": 7.66,
  "ꐺ": 7.66,
  "ꐻ": 7.22,
  "ꐼ": 7.92,
  "ꐽ": 7.92,
  "ꐾ": 6.77,
  "ꐿ": 6.06,
  "ꑀ": 6.06,
  "ꑁ": 6,
  "ꑂ": 6.94,
  "ꑃ": 6.94,
  "ꑄ": 6.5,
  "ꑅ": 6.22,
  "ꑆ": 6.22,
  "ꑇ": 6.13,
  "ꑈ": 6.7,
  "ꑉ": 6.7,
  "ꑊ": 6.86,
  "ꑋ": 5.81,
  "ꑌ": 5.81,
  "ꑍ": 5.73,
  "ꑎ": 7.02,
  "ꑏ": 7.25,
  "ꑐ": 7.25,
  "ꑑ": 6,
  "ꑒ": 6.64,
  "ꑓ": 6.64,
  "ꑔ": 7.08,
  "ꑕ": 6.7,
  "ꑖ": 6.92,
  "ꑗ": 6.92,
  "ꑘ": 6.83,
  "ꑙ": 7.11,
  "ꑚ": 6.38,
  "ꑛ": 6.38,
  "ꑜ": 6.52,
  "ꑝ": 7.66,
  "ꑞ": 7.38,
  "ꑟ": 7.38,
  "ꑠ": 6.5,
  "ꑡ": 7.66,
  "ꑢ": 7.66,
  "ꑣ": 7.66,
  "ꑤ": 8.08,
  "ꑥ": 6.73,
  "ꑦ": 6.73,
  "ꑧ": 7.66,
  "ꑨ": 6.98,
  "ꑩ": 6.98,
  "ꑪ": 7.16,
  "ꑫ": 6.5,
  "ꑬ": 6.45,
  "ꑭ": 6.45,
  "ꑮ": 6.45,
  "ꑯ": 6.45,
  "ꑰ": 6.45,
  "ꑱ": 7.41,
  "ꑲ": 6.98,
  "ꑳ": 6.98,
  "ꑴ": 6.13,
  "ꑵ": 7.41,
  "ꑶ": 6.5,
  "ꑷ": 6.5,
  "ꑸ": 6.88,
  "ꑹ": 6.73,
  "ꑺ": 6.39,
  "ꑻ": 6.39,
  "ꑼ": 6.52,
  "ꑽ": 6.72,
  "ꑾ": 6.73,
  "ꑿ": 6.73,
  "ꒀ": 6.89,
  "ꒁ": 6.42,
  "ꒂ": 7.41,
  "ꒃ": 7.41,
  "ꒄ": 6.38,
  "ꒅ": 6.52,
  "ꒆ": 6.52,
  "ꒇ": 6.5,
  "ꒈ": 6.41,
  "ꒉ": 6.41,
  "ꒊ": 6.59,
  "ꒋ": 6.69,
  "ꒌ": 6.69,
  "꒐": 3.17,
  "꒑": 4.91,
  "꒒": 4.91,
  "꒓": 4.5,
  "꒔": 6.13,
  "꒕": 6.44,
  "꒖": 6.44,
  "꒗": 5.75,
  "꒘": 6,
  "꒙": 6.72,
  "꒚": 6.56,
  "꒛": 4.08,
  "꒜": 7,
  "꒝": 6.73,
  "꒞": 5.8,
  "꒟": 5.42,
  "꒠": 5.98,
  "꒡": 7.67,
  "꒤": 7.36,
  "꒥": 6.47,
  "꒦": 6.81,
  "꒧": 6.83,
  "꒨": 7.11,
  "꒩": 6,
  "꒪": 6.88,
  "꒫": 6.47,
  "꒬": 7.3,
  "꒭": 7.02,
  "꒮": 7.41,
  "꒯": 6.05,
  "꒰": 4.66,
  "꒱": 4.66,
  "꒲": 4.23,
  "꒳": 7.66,
  "꒵": 7.44,
  "꒶": 8.83,
  "꒷": 6.78,
  "꒸": 5.66,
  "꒹": 6.11,
  "꒺": 6.52,
  "꒻": 5.86,
  "꒼": 6.14,
  "꒽": 6.83,
  "꒾": 5.95,
  "꒿": 7.08,
  "꓀": 6.38,
  "꓂": 7.33,
  "꓃": 5.97,
  "꓄": 5.86,
  "꓆": 5.05,
  "가": 10.39,
  "힣": 10.39,
  "": 12,
  "": 8.36,
  "豈": 12,
  "更": 12,
  "車": 12,
  "賈": 12,
  "滑": 12,
  "串": 12,
  "句": 12,
  "龜": 12,
  "龜": 12,
  "契": 12,
  "金": 12,
  "喇": 12,
  "奈": 12,
  "懶": 12,
  "癩": 12,
  "羅": 12,
  "蘿": 12,
  "螺": 12,
  "裸": 12,
  "邏": 12,
  "樂": 12,
  "洛": 12,
  "烙": 12,
  "珞": 12,
  "落": 12,
  "酪": 12,
  "駱": 12,
  "亂": 12,
  "卵": 12,
  "欄": 12,
  "爛": 12,
  "蘭": 12,
  "鸞": 12,
  "嵐": 12,
  "濫": 12,
  "藍": 12,
  "襤": 12,
  "拉": 12,
  "臘": 12,
  "蠟": 12,
  "廊": 12,
  "朗": 12,
  "浪": 12,
  "狼": 12,
  "郎": 12,
  "來": 12,
  "冷": 12,
  "勞": 12,
  "擄": 12,
  "櫓": 12,
  "爐": 12,
  "盧": 12,
  "老": 12,
  "蘆": 12,
  "虜": 12,
  "路": 12,
  "露": 12,
  "魯": 12,
  "鷺": 12,
  "碌": 12,
  "祿": 12,
  "綠": 12,
  "菉": 12,
  "錄": 12,
  "鹿": 12,
  "論": 12,
  "壟": 12,
  "弄": 12,
  "籠": 12,
  "聾": 12,
  "牢": 12,
  "磊": 12,
  "賂": 12,
  "雷": 12,
  "壘": 12,
  "屢": 12,
  "樓": 12,
  "淚": 12,
  "漏": 12,
  "累": 12,
  "縷": 12,
  "陋": 12,
  "勒": 12,
  "肋": 12,
  "凜": 12,
  "凌": 12,
  "稜": 12,
  "綾": 12,
  "菱": 12,
  "陵": 12,
  "讀": 12,
  "拏": 12,
  "樂": 12,
  "諾": 12,
  "丹": 12,
  "寧": 12,
  "怒": 12,
  "率": 12,
  "異": 12,
  "北": 12,
  "磻": 12,
  "便": 12,
  "復": 12,
  "不": 12,
  "泌": 12,
  "數": 12,
  "索": 12,
  "參": 12,
  "塞": 12,
  "省": 12,
  "葉": 12,
  "說": 12,
  "殺": 12,
  "辰": 12,
  "沈": 12,
  "拾": 12,
  "若": 12,
  "掠": 12,
  "略": 12,
  "亮": 12,
  "兩": 12,
  "凉": 12,
  "梁": 12,
  "糧": 12,
  "良": 12,
  "諒": 12,
  "量": 12,
  "勵": 12,
  "呂": 12,
  "女": 12,
  "廬": 12,
  "旅": 12,
  "濾": 12,
  "礪": 12,
  "閭": 12,
  "驪": 12,
  "麗": 12,
  "黎": 12,
  "力": 12,
  "曆": 12,
  "歷": 12,
  "轢": 12,
  "年": 12,
  "憐": 12,
  "戀": 12,
  "撚": 12,
  "漣": 12,
  "煉": 12,
  "璉": 12,
  "秊": 12,
  "練": 12,
  "聯": 12,
  "輦": 12,
  "蓮": 12,
  "連": 12,
  "鍊": 12,
  "列": 12,
  "劣": 12,
  "咽": 12,
  "烈": 12,
  "裂": 12,
  "說": 12,
  "廉": 12,
  "念": 12,
  "捻": 12,
  "殮": 12,
  "簾": 12,
  "獵": 12,
  "令": 12,
  "囹": 12,
  "寧": 12,
  "嶺": 12,
  "怜": 12,
  "玲": 12,
  "瑩": 12,
  "羚": 12,
  "聆": 12,
  "鈴": 12,
  "零": 12,
  "靈": 12,
  "領": 12,
  "例": 12,
  "禮": 12,
  "醴": 12,
  "隸": 12,
  "惡": 12,
  "了": 12,
  "僚": 12,
  "寮": 12,
  "尿": 12,
  "料": 12,
  "樂": 12,
  "燎": 12,
  "療": 12,
  "蓼": 12,
  "遼": 12,
  "龍": 12,
  "暈": 12,
  "阮": 12,
  "劉": 12,
  "杻": 12,
  "柳": 12,
  "流": 12,
  "溜": 12,
  "琉": 12,
  "留": 12,
  "硫": 12,
  "紐": 12,
  "類": 12,
  "六": 12,
  "戮": 12,
  "陸": 12,
  "倫": 12,
  "崙": 12,
  "淪": 12,
  "輪": 12,
  "律": 12,
  "慄": 12,
  "栗": 12,
  "率": 12,
  "隆": 12,
  "利": 12,
  "吏": 12,
  "履": 12,
  "易": 12,
  "李": 12,
  "梨": 12,
  "泥": 12,
  "理": 12,
  "痢": 12,
  "罹": 12,
  "裏": 12,
  "裡": 12,
  "里": 12,
  "離": 12,
  "匿": 12,
  "溺": 12,
  "吝": 12,
  "燐": 12,
  "璘": 12,
  "藺": 12,
  "隣": 12,
  "鱗": 12,
  "麟": 12,
  "林": 12,
  "淋": 12,
  "臨": 12,
  "立": 12,
  "笠": 12,
  "粒": 12,
  "狀": 12,
  "炙": 12,
  "識": 12,
  "什": 12,
  "茶": 12,
  "刺": 12,
  "切": 12,
  "度": 12,
  "拓": 12,
  "糖": 12,
  "宅": 12,
  "洞": 12,
  "暴": 12,
  "輻": 12,
  "行": 12,
  "降": 12,
  "見": 12,
  "廓": 12,
  "兀": 12,
  "嗀": 12,
  "﨎": 12,
  "﨏": 12,
  "塚": 12,
  "﨑": 12,
  "晴": 12,
  "﨓": 12,
  "﨔": 12,
  "凞": 12,
  "猪": 12,
  "益": 12,
  "礼": 12,
  "神": 12,
  "祥": 12,
  "福": 12,
  "靖": 12,
  "精": 12,
  "羽": 12,
  "﨟": 12,
  "蘒": 12,
  "﨡": 12,
  "諸": 12,
  "﨣": 12,
  "﨤": 12,
  "逸": 12,
  "都": 12,
  "﨧": 12,
  "﨨": 12,
  "﨩": 12,
  "飯": 12,
  "飼": 12,
  "館": 12,
  "鶴": 12,
  "ﬀ": 6.94,
  "ﬁ": 7.31,
  "ﬂ": 7.39,
  "ﬃ": 9.59,
  "ﬄ": 9.59,
  "ﬅ": 6.39,
  "ﬆ": 9.11,
  "ﬓ": 13.78,
  "ﬔ": 14.08,
  "ﬕ": 13.97,
  "ﬖ": 13.83,
  "ﬗ": 17.3,
  "יִ": 2.95,
  "ﬞ": 0,
  "ײַ": 6,
  "ﬠ": 7.3,
  "ﬡ": 10.3,
  "ﬢ": 10.45,
  "ﬣ": 11.47,
  "ﬤ": 9.66,
  "ﬥ": 9.69,
  "ﬦ": 12.08,
  "ﬧ": 9.64,
  "ﬨ": 12.64,
  "﬩": 7.31,
  "שׁ": 9.39,
  "שׂ": 9.39,
  "שּׁ": 9.39,
  "שּׂ": 9.39,
  "אַ": 7.78,
  "אָ": 7.78,
  "אּ": 7.78,
  "בּ": 7.22,
  "גּ": 5.02,
  "דּ": 7.36,
  "הּ": 7.78,
  "וּ": 3.47,
  "זּ": 5.22,
  "טּ": 8.25,
  "יּ": 3.5,
  "ךּ": 6.59,
  "כּ": 6.63,
  "לּ": 6.52,
  "מּ": 8.13,
  "נּ": 4.83,
  "סּ": 8.22,
  "ףּ": 7.97,
  "פּ": 7.77,
  "צּ": 7.03,
  "קּ": 7.58,
  "רּ": 6.69,
  "שּ": 9.39,
  "תּ": 8.91,
  "וֹ": 3.08,
  "בֿ": 7.22,
  "כֿ": 6.63,
  "פֿ": 7.77,
  "ﭏ": 7.5,
  "ﭐ": 2.86,
  "ﭑ": 3.41,
  "ﭒ": 10.81,
  "ﭓ": 11.34,
  "ﭔ": 3.22,
  "ﭕ": 3.92,
  "ﭖ": 10.81,
  "ﭗ": 11.34,
  "ﭘ": 3.22,
  "ﭙ": 3.92,
  "ﭚ": 10.81,
  "ﭛ": 11.34,
  "ﭜ": 3.22,
  "ﭝ": 3.92,
  "ﭞ": 10.81,
  "ﭟ": 11.34,
  "ﭠ": 3.22,
  "ﭡ": 3.92,
  "ﭢ": 10.81,
  "ﭣ": 11.34,
  "ﭤ": 3.22,
  "ﭥ": 3.92,
  "ﭦ": 10.81,
  "ﭧ": 11.34,
  "ﭨ": 3.22,
  "ﭩ": 3.92,
  "ﭪ": 10.89,
  "ﭫ": 11.25,
  "ﭬ": 5.11,
  "ﭭ": 5.75,
  "ﭮ": 10.89,
  "ﭯ": 11.25,
  "ﭰ": 5.19,
  "ﭱ": 5.75,
  "ﭲ": 7.75,
  "ﭳ": 8.02,
  "ﭴ": 7.98,
  "ﭵ": 8.47,
  "ﭶ": 7.75,
  "ﭷ": 8.02,
  "ﭸ": 7.98,
  "ﭹ": 8.47,
  "ﭺ": 7.75,
  "ﭻ": 8.02,
  "ﭼ": 7.98,
  "ﭽ": 8.47,
  "ﭾ": 7.75,
  "ﭿ": 8.02,
  "ﮀ": 7.98,
  "ﮁ": 8.47,
  "ﮂ": 5.89,
  "ﮃ": 6.94,
  "ﮄ": 5.89,
  "ﮅ": 6.94,
  "ﮆ": 5.89,
  "ﮇ": 6.94,
  "ﮈ": 6.2,
  "ﮉ": 6.94,
  "ﮊ": 4.31,
  "ﮋ": 5.05,
  "ﮌ": 4.31,
  "ﮍ": 5.05,
  "ﮎ": 10.05,
  "ﮏ": 10.95,
  "ﮐ": 5.53,
  "ﮑ": 6.16,
  "ﮒ": 10.05,
  "ﮓ": 10.95,
  "ﮔ": 5.53,
  "ﮕ": 6.16,
  "ﮖ": 10.05,
  "ﮗ": 10.95,
  "ﮘ": 5.53,
  "ﮙ": 6.16,
  "ﮚ": 10.05,
  "ﮛ": 10.95,
  "ﮜ": 5.53,
  "ﮝ": 6.16,
  "ﮞ": 7.39,
  "ﮟ": 8.13,
  "ﮠ": 7.39,
  "ﮡ": 8.13,
  "ﮢ": 3.22,
  "ﮣ": 3.92,
  "ﮤ": 5.25,
  "ﮥ": 6.02,
  "ﮦ": 5.25,
  "ﮧ": 6.64,
  "ﮨ": 3.22,
  "ﮩ": 3.92,
  "ﮪ": 8.2,
  "ﮫ": 6.94,
  "ﮬ": 7.11,
  "ﮭ": 7.72,
  "ﮮ": 7.02,
  "ﮯ": 8,
  "ﮰ": 7.02,
  "ﮱ": 8,
  "ﯓ": 9.77,
  "ﯔ": 10.27,
  "ﯕ": 5.53,
  "ﯖ": 6.16,
  "ﯗ": 5.41,
  "ﯘ": 5.67,
  "ﯙ": 5.42,
  "ﯚ": 5.67,
  "ﯛ": 5.42,
  "ﯜ": 5.67,
  "ﯝ": 5.42,
  "ﯞ": 5.42,
  "ﯟ": 5.67,
  "ﯠ": 5.42,
  "ﯡ": 5.67,
  "ﯢ": 5.42,
  "ﯣ": 5.67,
  "ﯤ": 8.77,
  "ﯥ": 8.11,
  "ﯦ": 3.22,
  "ﯧ": 3.92,
  "ﯨ": 3.22,
  "ﯩ": 3.92,
  "ﯪ": 7.08,
  "ﯫ": 7.08,
  "ﯬ": 7.44,
  "ﯭ": 7.44,
  "ﯮ": 8.25,
  "ﯯ": 8.25,
  "ﯰ": 8.25,
  "ﯱ": 8.25,
  "ﯲ": 8.25,
  "ﯳ": 8.25,
  "ﯴ": 8.25,
  "ﯵ": 8.25,
  "ﯶ": 11.56,
  "ﯷ": 11.56,
  "ﯸ": 7.13,
  "ﯹ": 11.56,
  "ﯺ": 11.56,
  "ﯻ": 7.13,
  "ﯼ": 8.77,
  "ﯽ": 8.23,
  "ﯾ": 3.22,
  "ﯿ": 3.92,
  "ﰀ": 9.84,
  "ﰁ": 9.84,
  "ﰂ": 8.45,
  "ﰃ": 11.56,
  "ﰄ": 11.56,
  "ﰅ": 9.84,
  "ﰆ": 9.84,
  "ﰇ": 9.84,
  "ﰈ": 8.45,
  "ﰉ": 11.56,
  "ﰊ": 11.56,
  "ﰋ": 9.84,
  "ﰌ": 9.84,
  "ﰍ": 9.84,
  "ﰎ": 8.45,
  "ﰏ": 11.56,
  "ﰐ": 11.56,
  "ﰑ": 9.84,
  "ﰒ": 8.45,
  "ﰓ": 11.56,
  "ﰔ": 11.56,
  "ﰕ": 13.66,
  "ﰖ": 12.27,
  "ﰗ": 13.66,
  "ﰘ": 12.27,
  "ﰙ": 13.66,
  "ﰚ": 13.66,
  "ﰛ": 12.27,
  "ﰜ": 15.14,
  "ﰝ": 15.14,
  "ﰞ": 15.14,
  "ﰟ": 13.75,
  "ﰠ": 17.38,
  "ﰡ": 15.98,
  "ﰢ": 17.38,
  "ﰣ": 17.38,
  "ﰤ": 17.38,
  "ﰥ": 15.98,
  "ﰦ": 13.44,
  "ﰧ": 12.05,
  "ﰨ": 12.05,
  "ﰩ": 11.89,
  "ﰪ": 10.5,
  "ﰫ": 11.89,
  "ﰬ": 10.5,
  "ﰭ": 10.61,
  "ﰮ": 10.61,
  "ﰯ": 10.61,
  "ﰰ": 9.22,
  "ﰱ": 12.33,
  "ﰲ": 12.33,
  "ﰳ": 10.61,
  "ﰴ": 9.22,
  "ﰵ": 12.33,
  "ﰶ": 12.33,
  "ﰷ": 8.42,
  "ﰸ": 11.59,
  "ﰹ": 11.59,
  "ﰺ": 11.59,
  "ﰻ": 11.03,
  "ﰼ": 10.22,
  "ﰽ": 13.33,
  "ﰾ": 13.33,
  "ﰿ": 9.08,
  "ﱀ": 9.08,
  "ﱁ": 9.08,
  "ﱂ": 7.69,
  "ﱃ": 10.8,
  "ﱄ": 10.8,
  "ﱅ": 11.55,
  "ﱆ": 11.55,
  "ﱇ": 11.55,
  "ﱈ": 10.16,
  "ﱉ": 13.27,
  "ﱊ": 13.27,
  "ﱋ": 9.84,
  "ﱌ": 9.84,
  "ﱍ": 9.84,
  "ﱎ": 8.45,
  "ﱏ": 11.56,
  "ﱐ": 11.56,
  "ﱑ": 12.52,
  "ﱒ": 11.14,
  "ﱓ": 14.25,
  "ﱔ": 14.25,
  "ﱕ": 9.84,
  "ﱖ": 9.84,
  "ﱗ": 9.84,
  "ﱘ": 8.45,
  "ﱙ": 11.56,
  "ﱚ": 11.56,
  "ﱛ": 4.91,
  "ﱜ": 4.22,
  "ﱝ": 8.77,
  "ﱞ": 0,
  "ﱟ": 0,
  "ﱠ": 0,
  "ﱡ": 0,
  "ﱢ": 0,
  "ﱣ": 0,
  "ﱤ": 8.45,
  "ﱥ": 8.45,
  "ﱦ": 8.45,
  "ﱧ": 9.97,
  "ﱨ": 10.81,
  "ﱩ": 10.72,
  "ﱪ": 8.45,
  "ﱫ": 8.45,
  "ﱬ": 8.45,
  "ﱭ": 8.72,
  "ﱮ": 10.81,
  "ﱯ": 10.72,
  "ﱰ": 8.45,
  "ﱱ": 8.45,
  "ﱲ": 8.45,
  "ﱳ": 8.72,
  "ﱴ": 10.81,
  "ﱵ": 10.72,
  "ﱶ": 8.45,
  "ﱷ": 8.45,
  "ﱸ": 8.45,
  "ﱹ": 9.97,
  "ﱺ": 10.81,
  "ﱻ": 10.72,
  "ﱼ": 12.33,
  "ﱽ": 12.33,
  "ﱾ": 12.33,
  "ﱿ": 12.33,
  "ﲀ": 8.98,
  "ﲁ": 11.08,
  "ﲂ": 10.27,
  "ﲃ": 13.38,
  "ﲄ": 13.38,
  "ﲅ": 7.69,
  "ﲆ": 11.23,
  "ﲇ": 11.23,
  "ﲈ": 8.78,
  "ﲉ": 10.16,
  "ﲊ": 8.45,
  "ﲋ": 8.45,
  "ﲌ": 8.45,
  "ﲍ": 8.72,
  "ﲎ": 10.81,
  "ﲏ": 10.72,
  "ﲐ": 8.23,
  "ﲑ": 8.45,
  "ﲒ": 8.45,
  "ﲓ": 8.45,
  "ﲔ": 8.72,
  "ﲕ": 10.72,
  "ﲖ": 10.72,
  "ﲗ": 10.94,
  "ﲘ": 10.94,
  "ﲙ": 10.94,
  "ﲚ": 8.83,
  "ﲛ": 8.66,
  "ﲜ": 10.94,
  "ﲝ": 10.94,
  "ﲞ": 10.94,
  "ﲟ": 8.83,
  "ﲠ": 8.66,
  "ﲡ": 10.94,
  "ﲢ": 10.94,
  "ﲣ": 10.94,
  "ﲤ": 8.83,
  "ﲥ": 8.66,
  "ﲦ": 8.83,
  "ﲧ": 14.75,
  "ﲨ": 12.64,
  "ﲩ": 14.75,
  "ﲪ": 12.64,
  "ﲫ": 14.75,
  "ﲬ": 12.64,
  "ﲭ": 16.25,
  "ﲮ": 16.25,
  "ﲯ": 16.25,
  "ﲰ": 14.14,
  "ﲱ": 18.47,
  "ﲲ": 18.47,
  "ﲳ": 16.36,
  "ﲴ": 18.47,
  "ﲵ": 18.47,
  "ﲶ": 18.47,
  "ﲷ": 16.36,
  "ﲸ": 14.55,
  "ﲹ": 12.44,
  "ﲺ": 12.98,
  "ﲻ": 10.89,
  "ﲼ": 12.98,
  "ﲽ": 10.89,
  "ﲾ": 11.7,
  "ﲿ": 11.7,
  "ﳀ": 11.7,
  "ﳁ": 9.61,
  "ﳂ": 11.7,
  "ﳃ": 9.61,
  "ﳄ": 12.7,
  "ﳅ": 12.7,
  "ﳆ": 12.7,
  "ﳇ": 8.13,
  "ﳈ": 10.59,
  "ﳉ": 10.17,
  "ﳊ": 10.17,
  "ﳋ": 10.17,
  "ﳌ": 4.48,
  "ﳍ": 7.89,
  "ﳎ": 12.64,
  "ﳏ": 12.64,
  "ﳐ": 12.64,
  "ﳑ": 10.55,
  "ﳒ": 10.94,
  "ﳓ": 10.94,
  "ﳔ": 10.94,
  "ﳕ": 8.83,
  "ﳖ": 8.66,
  "ﳗ": 13.63,
  "ﳘ": 11.52,
  "ﳙ": 7.11,
  "ﳚ": 10.94,
  "ﳛ": 10.94,
  "ﳜ": 10.94,
  "ﳝ": 8.83,
  "ﳞ": 8.66,
  "ﳟ": 8.83,
  "ﳠ": 8.66,
  "ﳡ": 8.83,
  "ﳢ": 8.66,
  "ﳣ": 8.83,
  "ﳤ": 8.66,
  "ﳥ": 8.83,
  "ﳦ": 8.66,
  "ﳧ": 14.11,
  "ﳨ": 13.94,
  "ﳩ": 14.11,
  "ﳪ": 13.94,
  "ﳫ": 8.17,
  "ﳬ": 10.66,
  "ﳭ": 8.06,
  "ﳮ": 8.83,
  "ﳯ": 8.66,
  "ﳰ": 8.83,
  "ﳱ": 8.66,
  "ﳲ": 3.55,
  "ﳳ": 3.55,
  "ﳴ": 3.55,
  "ﳵ": 15.17,
  "ﳶ": 15.17,
  "ﳷ": 13.61,
  "ﳸ": 13.61,
  "ﳹ": 13.61,
  "ﳺ": 13.61,
  "ﳻ": 15.8,
  "ﳼ": 15.72,
  "ﳽ": 15.8,
  "ﳾ": 15.72,
  "ﳿ": 15.38,
  "ﴀ": 15.38,
  "ﴁ": 15.38,
  "ﴂ": 15.38,
  "ﴃ": 15.38,
  "ﴄ": 15.38,
  "ﴅ": 16.91,
  "ﴆ": 16.83,
  "ﴇ": 16.91,
  "ﴈ": 16.83,
  "ﴉ": 15.14,
  "ﴊ": 15.14,
  "ﴋ": 15.14,
  "ﴌ": 13.75,
  "ﴍ": 13.77,
  "ﴎ": 13.77,
  "ﴏ": 15.98,
  "ﴐ": 15.98,
  "ﴑ": 15.19,
  "ﴒ": 15.19,
  "ﴓ": 13.09,
  "ﴔ": 13.09,
  "ﴕ": 13.09,
  "ﴖ": 13.09,
  "ﴗ": 16.58,
  "ﴘ": 16.5,
  "ﴙ": 16.58,
  "ﴚ": 16.5,
  "ﴛ": 15.38,
  "ﴜ": 15.38,
  "ﴝ": 15.38,
  "ﴞ": 15.38,
  "ﴟ": 15.38,
  "ﴠ": 15.38,
  "ﴡ": 17.48,
  "ﴢ": 17.42,
  "ﴣ": 17.48,
  "ﴤ": 17.42,
  "ﴥ": 15.11,
  "ﴦ": 15.11,
  "ﴧ": 15.11,
  "ﴨ": 13.73,
  "ﴩ": 13.73,
  "ﴪ": 13.73,
  "ﴫ": 16.02,
  "ﴬ": 16.02,
  "ﴭ": 16.25,
  "ﴮ": 16.25,
  "ﴯ": 16.25,
  "ﴰ": 14.14,
  "ﴱ": 13.95,
  "ﴲ": 13.95,
  "ﴳ": 12.44,
  "ﴴ": 16.22,
  "ﴵ": 16.22,
  "ﴶ": 16.22,
  "ﴷ": 16.22,
  "ﴸ": 16.22,
  "ﴹ": 16.22,
  "ﴺ": 12.47,
  "ﴻ": 12.47,
  "ﴼ": 4.73,
  "ﴽ": 2.91,
  "﴾": 4.41,
  "﴿": 4.41,
  "ﵐ": 16.2,
  "ﵑ": 17.2,
  "ﵒ": 18.31,
  "ﵓ": 16.2,
  "ﵔ": 16.2,
  "ﵕ": 16.2,
  "ﵖ": 16.2,
  "ﵗ": 16.2,
  "ﵘ": 18.92,
  "ﵙ": 20.02,
  "ﵚ": 20.64,
  "ﵛ": 20.64,
  "ﵜ": 23.63,
  "ﵝ": 23.63,
  "ﵞ": 24.22,
  "ﵟ": 20.39,
  "ﵠ": 21.52,
  "ﵡ": 21.52,
  "ﵢ": 19,
  "ﵣ": 19.41,
  "ﵤ": 24.77,
  "ﵥ": 25.84,
  "ﵦ": 21.28,
  "ﵧ": 21.09,
  "ﵨ": 21.52,
  "ﵩ": 24.22,
  "ﵪ": 20.39,
  "ﵫ": 21.52,
  "ﵬ": 19,
  "ﵭ": 19.41,
  "ﵮ": 26.5,
  "ﵯ": 23.38,
  "ﵰ": 23.73,
  "ﵱ": 18.73,
  "ﵲ": 19.81,
  "ﵳ": 17.7,
  "ﵴ": 20.45,
  "ﵵ": 17.34,
  "ﵶ": 15.25,
  "ﵷ": 16.16,
  "ﵸ": 18.36,
  "ﵹ": 15.25,
  "ﵺ": 18.36,
  "ﵻ": 18.36,
  "ﵼ": 16.59,
  "ﵽ": 16.98,
  "ﵾ": 15.88,
  "ﵿ": 14.48,
  "ﶀ": 15.06,
  "ﶁ": 18.17,
  "ﶂ": 18.17,
  "ﶃ": 17.55,
  "ﶄ": 16.45,
  "ﶅ": 15.06,
  "ﶆ": 15.44,
  "ﶇ": 14.34,
  "ﶈ": 15.44,
  "ﶉ": 20.02,
  "ﶊ": 17.92,
  "ﶋ": 20.64,
  "ﶌ": 20.02,
  "ﶍ": 17.92,
  "ﶎ": 20.02,
  "ﶏ": 17.92,
  "ﶒ": 20.02,
  "ﶓ": 18.89,
  "ﶔ": 16.78,
  "ﶕ": 16.2,
  "ﶖ": 18.94,
  "ﶗ": 15.83,
  "ﶘ": 16.2,
  "ﶙ": 18.94,
  "ﶚ": 16.83,
  "ﶛ": 16.83,
  "ﶜ": 13.72,
  "ﶝ": 14.11,
  "ﶞ": 18.94,
  "ﶟ": 18.94,
  "ﶠ": 18.94,
  "ﶡ": 18.94,
  "ﶢ": 18.94,
  "ﶣ": 16.83,
  "ﶤ": 16.83,
  "ﶥ": 20.64,
  "ﶦ": 22.75,
  "ﶧ": 20.64,
  "ﶨ": 24.22,
  "ﶩ": 26.5,
  "ﶪ": 24.22,
  "ﶫ": 26.5,
  "ﶬ": 18.17,
  "ﶭ": 16.06,
  "ﶮ": 18.94,
  "ﶯ": 18.94,
  "ﶰ": 16.83,
  "ﶱ": 18.55,
  "ﶲ": 17.59,
  "ﶳ": 18.94,
  "ﶴ": 16.98,
  "ﶵ": 15.44,
  "ﶶ": 18.36,
  "ﶷ": 18.64,
  "ﶸ": 18.31,
  "ﶹ": 20.64,
  "ﶺ": 15.44,
  "ﶻ": 15.53,
  "ﶼ": 15.06,
  "ﶽ": 17.2,
  "ﶾ": 22.75,
  "ﶿ": 22.75,
  "ﷀ": 20.64,
  "ﷁ": 17.59,
  "ﷂ": 18.94,
  "ﷃ": 15.86,
  "ﷄ": 18.25,
  "ﷅ": 21.63,
  "ﷆ": 24.22,
  "ﷇ": 18.94,
  "ﷰ": 20.91,
  "ﷱ": 14.14,
  "ﷲ": 14.36,
  "ﷳ": 17.3,
  "ﷴ": 9.17,
  "ﷵ": 23.86,
  "ﷶ": 24.16,
  "ﷷ": 15.84,
  "ﷸ": 21.25,
  "ﷹ": 21.89,
  "ﷺ": 12.69,
  "ﷻ": 19.28,
  "︠": 0,
  "︡": 0,
  "︢": 0,
  "︣": 0,
  "︰": 12,
  "︱": 12,
  "︲": 12,
  "︳": 12,
  "︴": 12,
  "︵": 12,
  "︶": 12,
  "︷": 12,
  "︸": 12,
  "︹": 12,
  "︺": 12,
  "︻": 12,
  "︼": 12,
  "︽": 12,
  "︾": 12,
  "︿": 12,
  "﹀": 12,
  "﹁": 12,
  "﹂": 12,
  "﹃": 12,
  "﹄": 12,
  "﹉": 12,
  "﹊": 12,
  "﹋": 12,
  "﹌": 12,
  "﹍": 12,
  "﹎": 12,
  "﹏": 12,
  "﹐": 12,
  "﹑": 12,
  "﹒": 12,
  "﹔": 12,
  "﹕": 12,
  "﹖": 12,
  "﹗": 12,
  "﹘": 12,
  "﹙": 12,
  "﹚": 12,
  "﹛": 12,
  "﹜": 12,
  "﹝": 12,
  "﹞": 12,
  "﹟": 12,
  "﹠": 12,
  "﹡": 12,
  "﹢": 12,
  "﹣": 12,
  "﹤": 12,
  "﹥": 12,
  "﹦": 12,
  "﹨": 12,
  "﹩": 12,
  "﹪": 12,
  "﹫": 12,
  "ﹰ": 0,
  "ﹱ": 3.55,
  "ﹲ": 0,
  "ﹴ": 0,
  "ﹶ": 0,
  "ﹷ": 3.55,
  "ﹸ": 0,
  "ﹹ": 3.55,
  "ﹺ": 0,
  "ﹻ": 3.55,
  "ﹼ": 0,
  "ﹽ": 3.55,
  "ﹾ": 0,
  "ﹿ": 3.55,
  "ﺀ": 5.06,
  "ﺁ": 2.86,
  "ﺂ": 3.41,
  "ﺃ": 2.86,
  "ﺄ": 3.41,
  "ﺅ": 5.42,
  "ﺆ": 5.67,
  "ﺇ": 2.86,
  "ﺈ": 3.41,
  "ﺉ": 8.77,
  "ﺊ": 8.23,
  "ﺋ": 3.22,
  "ﺌ": 3.92,
  "ﺍ": 2.86,
  "ﺎ": 3.41,
  "ﺏ": 10.81,
  "ﺐ": 11.34,
  "ﺑ": 3.22,
  "ﺒ": 3.92,
  "ﺓ": 5.25,
  "ﺔ": 6.02,
  "ﺕ": 10.81,
  "ﺖ": 11.34,
  "ﺗ": 3.22,
  "ﺘ": 3.92,
  "ﺙ": 10.81,
  "ﺚ": 11.34,
  "ﺛ": 3.22,
  "ﺜ": 3.92,
  "ﺝ": 7.75,
  "ﺞ": 8.02,
  "ﺟ": 7.98,
  "ﺠ": 8.47,
  "ﺡ": 7.75,
  "ﺢ": 8.02,
  "ﺣ": 7.98,
  "ﺤ": 8.47,
  "ﺥ": 7.75,
  "ﺦ": 8.02,
  "ﺧ": 7.98,
  "ﺨ": 8.47,
  "ﺩ": 5.89,
  "ﺪ": 6.94,
  "ﺫ": 5.86,
  "ﺬ": 6.94,
  "ﺭ": 4.31,
  "ﺮ": 5.05,
  "ﺯ": 4.22,
  "ﺰ": 5.05,
  "ﺱ": 12.94,
  "ﺲ": 13.72,
  "ﺳ": 8.61,
  "ﺴ": 9.39,
  "ﺵ": 12.94,
  "ﺶ": 13.72,
  "ﺷ": 8.61,
  "ﺸ": 9.39,
  "ﺹ": 13.67,
  "ﺺ": 14.27,
  "ﺻ": 10.09,
  "ﺼ": 10.7,
  "ﺽ": 13.67,
  "ﺾ": 14.27,
  "ﺿ": 10.09,
  "ﻀ": 10.7,
  "ﻁ": 9.05,
  "ﻂ": 9.64,
  "ﻃ": 7.95,
  "ﻄ": 8.55,
  "ﻅ": 9.05,
  "ﻆ": 9.64,
  "ﻇ": 7.95,
  "ﻈ": 8.55,
  "ﻉ": 7.14,
  "ﻊ": 6.75,
  "ﻋ": 6.14,
  "ﻌ": 6.41,
  "ﻍ": 7.14,
  "ﻎ": 6.75,
  "ﻏ": 6.14,
  "ﻐ": 6.41,
  "ﻑ": 10.89,
  "ﻒ": 11.25,
  "ﻓ": 5.19,
  "ﻔ": 5.75,
  "ﻕ": 8.19,
  "ﻖ": 8.47,
  "ﻗ": 5.19,
  "ﻘ": 5.75,
  "ﻙ": 9.77,
  "ﻚ": 10.27,
  "ﻛ": 5.53,
  "ﻜ": 6.16,
  "ﻝ": 7.53,
  "ﻞ": 8.06,
  "ﻟ": 3.41,
  "ﻠ": 3.94,
  "ﻡ": 6.19,
  "ﻢ": 8.11,
  "ﻣ": 6.05,
  "ﻤ": 7.11,
  "ﻥ": 7.39,
  "ﻦ": 8.13,
  "ﻧ": 3.22,
  "ﻨ": 3.92,
  "ﻩ": 4.22,
  "ﻪ": 6.02,
  "ﻫ": 7.11,
  "ﻬ": 5.66,
  "ﻭ": 5.42,
  "ﻮ": 5.67,
  "ﻯ": 8.77,
  "ﻰ": 8.23,
  "ﻱ": 8.77,
  "ﻲ": 8.11,
  "ﻳ": 3.22,
  "ﻴ": 3.92,
  "ﻵ": 6.45,
  "ﻶ": 7.14,
  "ﻷ": 6.45,
  "ﻸ": 7.14,
  "ﻹ": 6.45,
  "ﻺ": 7.06,
  "ﻻ": 6.45,
  "ﻼ": 7.06,
  "！": 12,
  "＂": 12,
  "＃": 12,
  "＄": 12,
  "％": 12,
  "＆": 12,
  "＇": 12,
  "（": 12,
  "）": 12,
  "＊": 12,
  "＋": 12,
  "，": 12,
  "－": 12,
  "．": 12,
  "／": 12,
  "０": 12,
  "１": 12,
  "２": 12,
  "３": 12,
  "４": 12,
  "５": 12,
  "６": 12,
  "７": 12,
  "８": 12,
  "９": 12,
  "：": 12,
  "；": 12,
  "＜": 12,
  "＝": 12,
  "＞": 12,
  "？": 12,
  "＠": 12,
  "Ａ": 12,
  "Ｂ": 12,
  "Ｃ": 12,
  "Ｄ": 12,
  "Ｅ": 12,
  "Ｆ": 12,
  "Ｇ": 12,
  "Ｈ": 12,
  "Ｉ": 12,
  "Ｊ": 12,
  "Ｋ": 12,
  "Ｌ": 12,
  "Ｍ": 12,
  "Ｎ": 12,
  "Ｏ": 12,
  "Ｐ": 12,
  "Ｑ": 12,
  "Ｒ": 12,
  "Ｓ": 12,
  "Ｔ": 12,
  "Ｕ": 12,
  "Ｖ": 12,
  "Ｗ": 12,
  "Ｘ": 12,
  "Ｙ": 12,
  "Ｚ": 12,
  "［": 12,
  "＼": 12,
  "］": 12,
  "＾": 12,
  "＿": 12,
  "｀": 12,
  "ａ": 12,
  "ｂ": 12,
  "ｃ": 12,
  "ｄ": 12,
  "ｅ": 12,
  "ｆ": 12,
  "ｇ": 12,
  "ｈ": 12,
  "ｉ": 12,
  "ｊ": 12,
  "ｋ": 12,
  "ｌ": 12,
  "ｍ": 12,
  "ｎ": 12,
  "ｏ": 12,
  "ｐ": 12,
  "ｑ": 12,
  "ｒ": 12,
  "ｓ": 12,
  "ｔ": 12,
  "ｕ": 12,
  "ｖ": 12,
  "ｗ": 12,
  "ｘ": 12,
  "ｙ": 12,
  "ｚ": 12,
  "｛": 12,
  "｜": 12,
  "｝": 12,
  "～": 12,
  "｡": 6,
  "｢": 6,
  "｣": 6,
  "､": 6,
  "･": 6,
  "ｦ": 6,
  "ｧ": 6,
  "ｨ": 6,
  "ｩ": 6,
  "ｪ": 6,
  "ｫ": 6,
  "ｬ": 6,
  "ｭ": 6,
  "ｮ": 6,
  "ｯ": 6,
  "ｰ": 6,
  "ｱ": 6,
  "ｲ": 6,
  "ｳ": 6,
  "ｴ": 6,
  "ｵ": 6,
  "ｶ": 6,
  "ｷ": 6,
  "ｸ": 6,
  "ｹ": 6,
  "ｺ": 6,
  "ｻ": 6,
  "ｼ": 6,
  "ｽ": 6,
  "ｾ": 6,
  "ｿ": 6,
  "ﾀ": 6,
  "ﾁ": 6,
  "ﾂ": 6,
  "ﾃ": 6,
  "ﾄ": 6,
  "ﾅ": 6,
  "ﾆ": 6,
  "ﾇ": 6,
  "ﾈ": 6,
  "ﾉ": 6,
  "ﾊ": 6,
  "ﾋ": 6,
  "ﾌ": 6,
  "ﾍ": 6,
  "ﾎ": 6,
  "ﾏ": 6,
  "ﾐ": 6,
  "ﾑ": 6,
  "ﾒ": 6,
  "ﾓ": 6,
  "ﾔ": 6,
  "ﾕ": 6,
  "ﾖ": 6,
  "ﾗ": 6,
  "ﾘ": 6,
  "ﾙ": 6,
  "ﾚ": 6,
  "ﾛ": 6,
  "ﾜ": 6,
  "ﾝ": 6,
  "ﾞ": 6,
  "ﾟ": 6,
  "ﾠ": 6,
  "ﾡ": 5.7,
  "ﾢ": 6,
  "ﾣ": 6,
  "ﾤ": 5.7,
  "ﾥ": 6,
  "ﾦ": 6,
  "ﾧ": 5.7,
  "ﾨ": 6,
  "ﾩ": 6,
  "ﾪ": 6,
  "ﾫ": 6,
  "ﾬ": 6,
  "ﾭ": 6,
  "ﾮ": 6,
  "ﾯ": 6,
  "ﾰ": 6,
  "ﾱ": 6,
  "ﾲ": 6,
  "ﾳ": 6,
  "ﾴ": 6,
  "ﾵ": 6,
  "ﾶ": 6,
  "ﾷ": 6,
  "ﾸ": 6,
  "ﾹ": 6,
  "ﾺ": 6,
  "ﾻ": 6,
  "ﾼ": 6,
  "ﾽ": 6,
  "ﾾ": 6,
  "ￂ": 6,
  "ￃ": 6,
  "ￄ": 6,
  "ￅ": 6,
  "ￆ": 6,
  "ￇ": 6,
  "ￊ": 6,
  "ￋ": 6,
  "ￌ": 6,
  "ￍ": 6,
  "ￎ": 6,
  "ￏ": 6,
  "ￒ": 6,
  "ￓ": 6,
  "ￔ": 6,
  "ￕ": 6,
  "ￖ": 6,
  "ￗ": 6,
  "ￚ": 6,
  "ￛ": 6,
  "ￜ": 6,
  "￠": 12,
  "￡": 12,
  "￢": 12,
  "￣": 12,
  "￤": 12,
  "￥": 12,
  "￦": 12,
  "￨": 12,
  "￩": 6,
  "￪": 6,
  "￫": 6,
  "￬": 6,
  "￭": 6,
  "￮": 6,
  "￹": 7.23,
  "￺": 7.23,
  "￻": 7.23,
  "￼": 7.23
};

// node_modules/@shopify/polaris-viz/build/esm/data/character-width-offsets.json.js
var fontSize = {
  "0": 0,
  "1": 0.09,
  "2": 0.18,
  "3": 0.27,
  "4": 0.36,
  "5": 0.44,
  "6": 0.53,
  "7": 0.61,
  "8": 0.69,
  "9": 0.77,
  "10": 0.85,
  "11": 0.92,
  "12": 1,
  "13": 1.08,
  "14": 1.15,
  "15": 1.23,
  "16": 1.3,
  "17": 1.37,
  "18": 1.45,
  "19": 1.52,
  "20": 1.59,
  "21": 1.66,
  "22": 1.73,
  "23": 1.81,
  "24": 1.88,
  "25": 1.96,
  "26": 2.04,
  "27": 2.12,
  "28": 2.2,
  "29": 2.28,
  "30": 2.35,
  "31": 2.43,
  "32": 2.51,
  "33": 2.58,
  "34": 2.66,
  "35": 2.73,
  "36": 2.81,
  "37": 2.89,
  "38": 2.96,
  "39": 3.04,
  "40": 3.12
};
var fontWeight = {
  "100": 0.97,
  "200": 0.98,
  "300": 0.99,
  "400": 1,
  "450": 1.02,
  "500": 1.03,
  "600": 1.06,
  "700": 1.09,
  "800": 1.13,
  "900": 1.16
};
var characterWidthOffsets = {
  fontSize,
  fontWeight
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/ChartContainer.scss.js
var styles9 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "ChartContainer": "_ChartContainer_vopsd_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/ChartContainer.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/usePrefersReducedMotion.js
function usePrefersReducedMotion() {
  const prefersReducedMotion = typeof window === "undefined" ? false : window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  return {
    prefersReducedMotion
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/components/ChartDimensions/ChartDimensions.js
var import_react59 = __toESM(require_react());

// node_modules/use-debounce/dist/index.module.js
var import_react44 = __toESM(require_react());
function c6(u3, e4, c7) {
  var i2 = this, a3 = (0, import_react44.useRef)(null), o2 = (0, import_react44.useRef)(0), f2 = (0, import_react44.useRef)(null), l2 = (0, import_react44.useRef)([]), m2 = (0, import_react44.useRef)(), v2 = (0, import_react44.useRef)(), d2 = (0, import_react44.useRef)(u3), p2 = (0, import_react44.useRef)(true);
  (0, import_react44.useEffect)(function() {
    d2.current = u3;
  }, [u3]);
  var g2 = !e4 && 0 !== e4 && "undefined" != typeof window;
  if ("function" != typeof u3)
    throw new TypeError("Expected a function");
  e4 = +e4 || 0;
  var w2 = !!(c7 = c7 || {}).leading, s3 = !("trailing" in c7) || !!c7.trailing, x3 = "maxWait" in c7, y3 = x3 ? Math.max(+c7.maxWait || 0, e4) : null;
  (0, import_react44.useEffect)(function() {
    return p2.current = true, function() {
      p2.current = false;
    };
  }, []);
  var h2 = (0, import_react44.useMemo)(function() {
    var r3 = function(r4) {
      var n4 = l2.current, t6 = m2.current;
      return l2.current = m2.current = null, o2.current = r4, v2.current = d2.current.apply(t6, n4);
    }, n3 = function(r4, n4) {
      g2 && cancelAnimationFrame(f2.current), f2.current = g2 ? requestAnimationFrame(r4) : setTimeout(r4, n4);
    }, t5 = function(r4) {
      if (!p2.current)
        return false;
      var n4 = r4 - a3.current;
      return !a3.current || n4 >= e4 || n4 < 0 || x3 && r4 - o2.current >= y3;
    }, u4 = function(n4) {
      return f2.current = null, s3 && l2.current ? r3(n4) : (l2.current = m2.current = null, v2.current);
    }, c8 = function r4() {
      var c9 = Date.now();
      if (t5(c9))
        return u4(c9);
      if (p2.current) {
        var i3 = e4 - (c9 - a3.current), f3 = x3 ? Math.min(i3, y3 - (c9 - o2.current)) : i3;
        n3(r4, f3);
      }
    }, h3 = function() {
      var u5 = Date.now(), d3 = t5(u5);
      if (l2.current = [].slice.call(arguments), m2.current = i2, a3.current = u5, d3) {
        if (!f2.current && p2.current)
          return o2.current = a3.current, n3(c8, e4), w2 ? r3(a3.current) : v2.current;
        if (x3)
          return n3(c8, e4), r3(a3.current);
      }
      return f2.current || n3(c8, e4), v2.current;
    };
    return h3.cancel = function() {
      f2.current && (g2 ? cancelAnimationFrame(f2.current) : clearTimeout(f2.current)), o2.current = 0, l2.current = a3.current = m2.current = f2.current = null;
    }, h3.isPending = function() {
      return !!f2.current;
    }, h3.flush = function() {
      return f2.current ? u4(Date.now()) : v2.current;
    }, h3;
  }, [w2, x3, e4, y3, s3, g2]);
  return h2;
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/components/ChartDimensions/ChartDimensions.scss.js
var styles10 = {
  "ChartDimensions": "_ChartDimensions_qgx6z_1",
  "Chart": "_Chart_qgx6z_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/components/ChartDimensions/ChartDimensions.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useResizeObserver.js
var import_react45 = __toESM(require_react());

// node_modules/@juggle/resize-observer/lib/utils/resizeObservers.js
var resizeObservers = [];

// node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js
var hasActiveObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.activeTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js
var hasSkippedObservations = function() {
  return resizeObservers.some(function(ro) {
    return ro.skippedTargets.length > 0;
  });
};

// node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js
var msg = "ResizeObserver loop completed with undelivered notifications.";
var deliverResizeLoopError = function() {
  var event;
  if (typeof ErrorEvent === "function") {
    event = new ErrorEvent("error", {
      message: msg
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent("error", false, false);
    event.message = msg;
  }
  window.dispatchEvent(event);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js
var ResizeObserverBoxOptions;
(function(ResizeObserverBoxOptions2) {
  ResizeObserverBoxOptions2["BORDER_BOX"] = "border-box";
  ResizeObserverBoxOptions2["CONTENT_BOX"] = "content-box";
  ResizeObserverBoxOptions2["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

// node_modules/@juggle/resize-observer/lib/utils/freeze.js
var freeze = function(obj) {
  return Object.freeze(obj);
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverSize.js
var ResizeObserverSize = /* @__PURE__ */ function() {
  function ResizeObserverSize2(inlineSize, blockSize) {
    this.inlineSize = inlineSize;
    this.blockSize = blockSize;
    freeze(this);
  }
  return ResizeObserverSize2;
}();

// node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js
var DOMRectReadOnly = function() {
  function DOMRectReadOnly2(x3, y3, width, height) {
    this.x = x3;
    this.y = y3;
    this.width = width;
    this.height = height;
    this.top = this.y;
    this.left = this.x;
    this.bottom = this.top + this.height;
    this.right = this.left + this.width;
    return freeze(this);
  }
  DOMRectReadOnly2.prototype.toJSON = function() {
    var _a = this, x3 = _a.x, y3 = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
    return { x: x3, y: y3, top, right, bottom, left, width, height };
  };
  DOMRectReadOnly2.fromRect = function(rectangle) {
    return new DOMRectReadOnly2(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
  };
  return DOMRectReadOnly2;
}();

// node_modules/@juggle/resize-observer/lib/utils/element.js
var isSVG = function(target) {
  return target instanceof SVGElement && "getBBox" in target;
};
var isHidden = function(target) {
  if (isSVG(target)) {
    var _a = target.getBBox(), width = _a.width, height = _a.height;
    return !width && !height;
  }
  var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
  return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var isElement = function(obj) {
  var _a;
  if (obj instanceof Element) {
    return true;
  }
  var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
  return !!(scope && obj instanceof scope.Element);
};
var isReplacedElement = function(target) {
  switch (target.tagName) {
    case "INPUT":
      if (target.type !== "image") {
        break;
      }
    case "VIDEO":
    case "AUDIO":
    case "EMBED":
    case "OBJECT":
    case "CANVAS":
    case "IFRAME":
    case "IMG":
      return true;
  }
  return false;
};

// node_modules/@juggle/resize-observer/lib/utils/global.js
var global = typeof window !== "undefined" ? window : {};

// node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js
var cache = /* @__PURE__ */ new WeakMap();
var scrollRegexp = /auto|scroll/;
var verticalRegexp = /^tb|vertical/;
var IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);
var parseDimension = function(pixel) {
  return parseFloat(pixel || "0");
};
var size = function(inlineSize, blockSize, switchSizes) {
  if (inlineSize === void 0) {
    inlineSize = 0;
  }
  if (blockSize === void 0) {
    blockSize = 0;
  }
  if (switchSizes === void 0) {
    switchSizes = false;
  }
  return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var zeroBoxes = freeze({
  devicePixelContentBoxSize: size(),
  borderBoxSize: size(),
  contentBoxSize: size(),
  contentRect: new DOMRectReadOnly(0, 0, 0, 0)
});
var calculateBoxSizes = function(target, forceRecalculation) {
  if (forceRecalculation === void 0) {
    forceRecalculation = false;
  }
  if (cache.has(target) && !forceRecalculation) {
    return cache.get(target);
  }
  if (isHidden(target)) {
    cache.set(target, zeroBoxes);
    return zeroBoxes;
  }
  var cs = getComputedStyle(target);
  var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
  var removePadding = !IE && cs.boxSizing === "border-box";
  var switchSizes = verticalRegexp.test(cs.writingMode || "");
  var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || "");
  var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || "");
  var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
  var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
  var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
  var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
  var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
  var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
  var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
  var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
  var horizontalPadding = paddingLeft + paddingRight;
  var verticalPadding = paddingTop + paddingBottom;
  var horizontalBorderArea = borderLeft + borderRight;
  var verticalBorderArea = borderTop + borderBottom;
  var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
  var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
  var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
  var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
  var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
  var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
  var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
  var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
  var boxes = freeze({
    devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
    borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
    contentBoxSize: size(contentWidth, contentHeight, switchSizes),
    contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
  });
  cache.set(target, boxes);
  return boxes;
};
var calculateBoxSize = function(target, observedBox, forceRecalculation) {
  var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
  switch (observedBox) {
    case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
      return devicePixelContentBoxSize;
    case ResizeObserverBoxOptions.BORDER_BOX:
      return borderBoxSize;
    default:
      return contentBoxSize;
  }
};

// node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js
var ResizeObserverEntry = /* @__PURE__ */ function() {
  function ResizeObserverEntry2(target) {
    var boxes = calculateBoxSizes(target);
    this.target = target;
    this.contentRect = boxes.contentRect;
    this.borderBoxSize = freeze([boxes.borderBoxSize]);
    this.contentBoxSize = freeze([boxes.contentBoxSize]);
    this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
  }
  return ResizeObserverEntry2;
}();

// node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js
var calculateDepthForNode = function(node) {
  if (isHidden(node)) {
    return Infinity;
  }
  var depth = 0;
  var parent = node.parentNode;
  while (parent) {
    depth += 1;
    parent = parent.parentNode;
  }
  return depth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js
var broadcastActiveObservations = function() {
  var shallowestDepth = Infinity;
  var callbacks2 = [];
  resizeObservers.forEach(function processObserver(ro) {
    if (ro.activeTargets.length === 0) {
      return;
    }
    var entries = [];
    ro.activeTargets.forEach(function processTarget(ot) {
      var entry = new ResizeObserverEntry(ot.target);
      var targetDepth = calculateDepthForNode(ot.target);
      entries.push(entry);
      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
      if (targetDepth < shallowestDepth) {
        shallowestDepth = targetDepth;
      }
    });
    callbacks2.push(function resizeObserverCallback() {
      ro.callback.call(ro.observer, entries, ro.observer);
    });
    ro.activeTargets.splice(0, ro.activeTargets.length);
  });
  for (var _i = 0, callbacks_1 = callbacks2; _i < callbacks_1.length; _i++) {
    var callback = callbacks_1[_i];
    callback();
  }
  return shallowestDepth;
};

// node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js
var gatherActiveObservationsAtDepth = function(depth) {
  resizeObservers.forEach(function processObserver(ro) {
    ro.activeTargets.splice(0, ro.activeTargets.length);
    ro.skippedTargets.splice(0, ro.skippedTargets.length);
    ro.observationTargets.forEach(function processTarget(ot) {
      if (ot.isActive()) {
        if (calculateDepthForNode(ot.target) > depth) {
          ro.activeTargets.push(ot);
        } else {
          ro.skippedTargets.push(ot);
        }
      }
    });
  });
};

// node_modules/@juggle/resize-observer/lib/utils/process.js
var process2 = function() {
  var depth = 0;
  gatherActiveObservationsAtDepth(depth);
  while (hasActiveObservations()) {
    depth = broadcastActiveObservations();
    gatherActiveObservationsAtDepth(depth);
  }
  if (hasSkippedObservations()) {
    deliverResizeLoopError();
  }
  return depth > 0;
};

// node_modules/@juggle/resize-observer/lib/utils/queueMicroTask.js
var trigger;
var callbacks = [];
var notify = function() {
  return callbacks.splice(0).forEach(function(cb) {
    return cb();
  });
};
var queueMicroTask = function(callback) {
  if (!trigger) {
    var toggle_1 = 0;
    var el_1 = document.createTextNode("");
    var config2 = { characterData: true };
    new MutationObserver(function() {
      return notify();
    }).observe(el_1, config2);
    trigger = function() {
      el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
    };
  }
  callbacks.push(callback);
  trigger();
};

// node_modules/@juggle/resize-observer/lib/utils/queueResizeObserver.js
var queueResizeObserver = function(cb) {
  queueMicroTask(function ResizeObserver3() {
    requestAnimationFrame(cb);
  });
};

// node_modules/@juggle/resize-observer/lib/utils/scheduler.js
var watching = 0;
var isWatching = function() {
  return !!watching;
};
var CATCH_PERIOD = 250;
var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
var events = [
  "resize",
  "load",
  "transitionend",
  "animationend",
  "animationstart",
  "animationiteration",
  "keyup",
  "keydown",
  "mouseup",
  "mousedown",
  "mouseover",
  "mouseout",
  "blur",
  "focus"
];
var time2 = function(timeout) {
  if (timeout === void 0) {
    timeout = 0;
  }
  return Date.now() + timeout;
};
var scheduled = false;
var Scheduler = function() {
  function Scheduler2() {
    var _this = this;
    this.stopped = true;
    this.listener = function() {
      return _this.schedule();
    };
  }
  Scheduler2.prototype.run = function(timeout) {
    var _this = this;
    if (timeout === void 0) {
      timeout = CATCH_PERIOD;
    }
    if (scheduled) {
      return;
    }
    scheduled = true;
    var until = time2(timeout);
    queueResizeObserver(function() {
      var elementsHaveResized = false;
      try {
        elementsHaveResized = process2();
      } finally {
        scheduled = false;
        timeout = until - time2();
        if (!isWatching()) {
          return;
        }
        if (elementsHaveResized) {
          _this.run(1e3);
        } else if (timeout > 0) {
          _this.run(timeout);
        } else {
          _this.start();
        }
      }
    });
  };
  Scheduler2.prototype.schedule = function() {
    this.stop();
    this.run();
  };
  Scheduler2.prototype.observe = function() {
    var _this = this;
    var cb = function() {
      return _this.observer && _this.observer.observe(document.body, observerConfig);
    };
    document.body ? cb() : global.addEventListener("DOMContentLoaded", cb);
  };
  Scheduler2.prototype.start = function() {
    var _this = this;
    if (this.stopped) {
      this.stopped = false;
      this.observer = new MutationObserver(this.listener);
      this.observe();
      events.forEach(function(name2) {
        return global.addEventListener(name2, _this.listener, true);
      });
    }
  };
  Scheduler2.prototype.stop = function() {
    var _this = this;
    if (!this.stopped) {
      this.observer && this.observer.disconnect();
      events.forEach(function(name2) {
        return global.removeEventListener(name2, _this.listener, true);
      });
      this.stopped = true;
    }
  };
  return Scheduler2;
}();
var scheduler = new Scheduler();
var updateCount = function(n3) {
  !watching && n3 > 0 && scheduler.start();
  watching += n3;
  !watching && scheduler.stop();
};

// node_modules/@juggle/resize-observer/lib/ResizeObservation.js
var skipNotifyOnElement = function(target) {
  return !isSVG(target) && !isReplacedElement(target) && getComputedStyle(target).display === "inline";
};
var ResizeObservation = function() {
  function ResizeObservation2(target, observedBox) {
    this.target = target;
    this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
    this.lastReportedSize = {
      inlineSize: 0,
      blockSize: 0
    };
  }
  ResizeObservation2.prototype.isActive = function() {
    var size2 = calculateBoxSize(this.target, this.observedBox, true);
    if (skipNotifyOnElement(this.target)) {
      this.lastReportedSize = size2;
    }
    if (this.lastReportedSize.inlineSize !== size2.inlineSize || this.lastReportedSize.blockSize !== size2.blockSize) {
      return true;
    }
    return false;
  };
  return ResizeObservation2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js
var ResizeObserverDetail = /* @__PURE__ */ function() {
  function ResizeObserverDetail2(resizeObserver2, callback) {
    this.activeTargets = [];
    this.skippedTargets = [];
    this.observationTargets = [];
    this.observer = resizeObserver2;
    this.callback = callback;
  }
  return ResizeObserverDetail2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserverController.js
var observerMap = /* @__PURE__ */ new WeakMap();
var getObservationIndex = function(observationTargets, target) {
  for (var i2 = 0; i2 < observationTargets.length; i2 += 1) {
    if (observationTargets[i2].target === target) {
      return i2;
    }
  }
  return -1;
};
var ResizeObserverController = function() {
  function ResizeObserverController2() {
  }
  ResizeObserverController2.connect = function(resizeObserver2, callback) {
    var detail = new ResizeObserverDetail(resizeObserver2, callback);
    observerMap.set(resizeObserver2, detail);
  };
  ResizeObserverController2.observe = function(resizeObserver2, target, options) {
    var detail = observerMap.get(resizeObserver2);
    var firstObservation = detail.observationTargets.length === 0;
    if (getObservationIndex(detail.observationTargets, target) < 0) {
      firstObservation && resizeObservers.push(detail);
      detail.observationTargets.push(new ResizeObservation(target, options && options.box));
      updateCount(1);
      scheduler.schedule();
    }
  };
  ResizeObserverController2.unobserve = function(resizeObserver2, target) {
    var detail = observerMap.get(resizeObserver2);
    var index2 = getObservationIndex(detail.observationTargets, target);
    var lastObservation = detail.observationTargets.length === 1;
    if (index2 >= 0) {
      lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
      detail.observationTargets.splice(index2, 1);
      updateCount(-1);
    }
  };
  ResizeObserverController2.disconnect = function(resizeObserver2) {
    var _this = this;
    var detail = observerMap.get(resizeObserver2);
    detail.observationTargets.slice().forEach(function(ot) {
      return _this.unobserve(resizeObserver2, ot.target);
    });
    detail.activeTargets.splice(0, detail.activeTargets.length);
  };
  return ResizeObserverController2;
}();

// node_modules/@juggle/resize-observer/lib/ResizeObserver.js
var ResizeObserver2 = function() {
  function ResizeObserver3(callback) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (typeof callback !== "function") {
      throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
    }
    ResizeObserverController.connect(this, callback);
  }
  ResizeObserver3.prototype.observe = function(target, options) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.observe(this, target, options);
  };
  ResizeObserver3.prototype.unobserve = function(target) {
    if (arguments.length === 0) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
    }
    if (!isElement(target)) {
      throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
    }
    ResizeObserverController.unobserve(this, target);
  };
  ResizeObserver3.prototype.disconnect = function() {
    ResizeObserverController.disconnect(this);
  };
  ResizeObserver3.toString = function() {
    return "function ResizeObserver () { [polyfill code] }";
  };
  return ResizeObserver3;
}();

// node_modules/@shopify/polaris-viz/build/esm/hooks/useResizeObserver.js
var defaultEntry = false ? {
  contentRect: {
    width: 500,
    height: 500
  }
} : null;
function resizeObserver(callback) {
  if (typeof window === "undefined") {
    return ResizeObserver2;
  }
  return new (window.ResizeObserver || ResizeObserver2)(callback);
}
var useResizeObserver = () => {
  const [ref, setRef] = (0, import_react45.useState)(null);
  const [entry, setEntry] = (0, import_react45.useState)(defaultEntry);
  (0, import_react45.useLayoutEffect)(() => {
    if (!ref) {
      return;
    }
    const observer = resizeObserver(([entry2]) => setEntry(entry2));
    observer.observe(ref);
    return () => {
      observer.disconnect();
    };
  }, [ref, setEntry]);
  return {
    ref,
    setRef,
    entry
  };
};

// node_modules/@shopify/polaris-viz/build/esm/hooks/usePrintResizing.js
var import_react46 = __toESM(require_react());
function usePrintResizing({
  ref,
  setChartDimensions,
  onIsPrintingChange
}) {
  const [isPrinting, setIsPrinting] = (0, import_react46.useState)(false);
  const {
    isFirefox,
    isSafari
  } = useBrowserCheck();
  (0, import_react46.useLayoutEffect)(() => {
    const isServer = typeof window === "undefined";
    function handlePrint() {
      if (ref != null) {
        const {
          paddingRight,
          paddingLeft,
          paddingTop,
          paddingBottom
        } = getComputedStyle(ref);
        const width = ref.clientWidth - parseInt(paddingLeft, 10) - parseInt(paddingRight, 10);
        const height = ref.clientHeight - parseInt(paddingTop, 10) - parseInt(paddingBottom, 10);
        setChartDimensions({
          width,
          height
        });
        setIsPrinting((isPrinting2) => {
          const newIsPrinting = !isPrinting2;
          onIsPrintingChange(newIsPrinting);
          return newIsPrinting;
        });
      }
    }
    const printSafari = () => {
      setTimeout(() => {
        handlePrint();
      });
    };
    const addEventListener = typeof window.matchMedia("print").addEventListener === "function";
    const addListener = typeof window.matchMedia("print").addListener === "function";
    const notSafariOrServer = !isSafari && !isServer;
    const safariNotServer = isSafari && !isServer;
    if (isFirefox) {
      window.addEventListener("beforeprint", handlePrint);
      window.addEventListener("afterprint", handlePrint);
    }
    if (notSafariOrServer) {
      if (addEventListener) {
        window.matchMedia("print").addEventListener("change", handlePrint);
      } else if (addListener) {
        window.matchMedia("print").addListener(printSafari);
      }
    }
    if (safariNotServer) {
      if (addEventListener) {
        window.matchMedia("print").addEventListener("change", printSafari);
      } else if (addListener) {
        window.matchMedia("print").addListener(printSafari);
      }
    }
    return () => {
      if (isFirefox) {
        window.removeEventListener("beforeprint", handlePrint);
        window.removeEventListener("afterprint", handlePrint);
      }
      if (notSafariOrServer) {
        if (addEventListener) {
          window.matchMedia("print").removeEventListener("change", handlePrint);
        } else if (addListener) {
          window.matchMedia("print").removeListener(printSafari);
        }
      }
      if (safariNotServer) {
        if (addEventListener) {
          window.matchMedia("print").removeEventListener("change", printSafari);
        } else if (addListener) {
          window.matchMedia("print").removeListener(printSafari);
        }
      }
    };
  }, [onIsPrintingChange, setChartDimensions, ref, isFirefox, isSafari]);
  return {
    isPrinting
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartErrorBoundary/ChartErrorBoundary.js
var import_react58 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartErrorBoundary/utilities/checkForMismatchedData.js
function checkForMismatchedData(data) {
  if (data == null || data.length === 0) {
    return;
  }
  if (isDataGroupArray(data)) {
    checkDataGroup(data);
  } else {
    checkDataSeries(data);
  }
}
function checkDataSeries(data, type = "DataSeries") {
  if (data[0].data == null) {
    return false;
  }
  const firstSetLength = data[0].data.length;
  const hasMismatchedData = data.some((series) => series.data.length !== firstSetLength);
  if (hasMismatchedData) {
    console.warn(`The ${type}[] provided does not have equal series values.`, data);
    return true;
  }
}
function checkDataGroup(group2) {
  group2.some(({
    series
  }) => checkDataSeries(series, "DataGroup"));
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartErrorBoundary/ChartErrorBoundary.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/ChartSkeleton.scss.js
var styles11 = {
  "Container": "_Container_1ymq9_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/ChartSkeleton.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/Shimmer/Shimmer.js
var import_react47 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/Shimmer/Shimmer.scss.js
var styles12 = {
  "Shimmer": "_Shimmer_hqp2w_1",
  "shimmer": "_shimmer_hqp2w_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/Shimmer/Shimmer.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
function Shimmer({
  backgroundColor,
  width,
  height
}) {
  const semiTransparentBackground = changeColorOpacity(backgroundColor, 0);
  const ref = (0, import_react47.useRef)(null);
  (0, import_react47.useEffect)(() => {
    if (ref.current === null)
      return;
    ref.current.style.setProperty("--shimmerWidth", `${width}px`);
    ref.current.style.setProperty("--shimmerHeight", `${height}px`);
  }, [width, height]);
  const [min3, max3] = [width, height];
  const angle = Math.asin(max3 / min3) / (Math.PI / 180);
  return (0, import_jsx_runtime22.jsx)("div", {
    ref,
    className: styles12.Shimmer,
    style: {
      backgroundImage: `linear-gradient(-${angle}deg,
            ${semiTransparentBackground} 10%,
            ${semiTransparentBackground} 35%,
            ${backgroundColor} 50%,
            ${semiTransparentBackground} 65%,
            ${semiTransparentBackground} 100%)`
    }
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/GridSkeleton/GridSkeleton.js
var import_react50 = __toESM(require_react());

// node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var isCustomPropRE = /^--/;
function dangerousStyleValue(name2, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name2) && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const { style: style6, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map(
    (name2) => isFilterElement || instance.hasAttribute(name2) ? name2 : attributeCache[name2] || (attributeCache[name2] = name2.replace(
      /([A-Z])/g,
      // Attributes are written in dash case
      (n3) => "-" + n3.toLowerCase()
    ))
  );
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (const name2 in style6) {
    if (style6.hasOwnProperty(name2)) {
      const value = dangerousStyleValue(name2, style6[name2]);
      if (isCustomPropRE.test(name2)) {
        instance.style.setProperty(name2, value);
      } else {
        instance.style[name2] = value;
      }
    }
  }
  names.forEach((name2, i2) => {
    instance.setAttribute(name2, values[i2]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
  if (viewBox !== void 0) {
    instance.setAttribute("viewBox", viewBox);
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes2 = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes2.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v2) => isValueIdentity(v2, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor({ x: x3, y: y3, z: z2, ...style6 }) {
    const inputs = [];
    const transforms = [];
    if (x3 || y3 || z2) {
      inputs.push([x3 || 0, y3 || 0, z2 || 0]);
      transforms.push((xyz) => [
        `translate3d(${xyz.map((v2) => addUnit(v2, "px")).join(",")})`,
        // prettier-ignore
        isValueIdentity(xyz, 0)
      ]);
    }
    eachProp(style6, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style6[key];
        if (is.und(value))
          return;
        const unit2 = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(
          key === "rotate3d" ? ([x22, y22, z22, deg]) => [
            `rotate3d(${x22},${y22},${z22},${addUnit(deg, unit2)})`,
            isValueIdentity(deg, 0)
          ] : (input) => [
            `${key}(${input.map((v2) => addUnit(v2, unit2)).join(",")})`,
            isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
          ]
        );
      }
    });
    if (inputs.length) {
      style6.transform = new FluidTransform(inputs, transforms);
    }
    super(style6);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this.inputs = inputs;
    this.transforms = transforms;
    this._value = null;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity5 = true;
    each(this.inputs, (input, i2) => {
      const arg1 = getFluidValue(input[0]);
      const [t5, id] = this.transforms[i2](
        is.arr(arg1) ? arg1 : input.map(getFluidValue)
      );
      transform += " " + t5;
      identity5 = identity5 && id;
    });
    return identity5 ? "none" : transform;
  }
  // Start observing our inputs once we have an observer.
  observerAdded(count2) {
    if (count2 == 1)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && addFluidObserver(value, this)
        )
      );
  }
  // Stop observing our inputs once we have no observers.
  observerRemoved(count2) {
    if (count2 == 0)
      each(
        this.inputs,
        (input) => each(
          input,
          (value) => hasFluidValue(value) && removeFluidObserver(value, this)
        )
      );
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
globals_exports.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host2 = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style6) => new AnimatedStyle(style6),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
});
var animated = host2.animated;

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/GridSkeleton/GridSkeleton.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/ErrorText/ErrorText.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/hooks/useLabels.js
var import_react48 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/getWidestLabel.js
function getWidestLabel(labels) {
  let longestIndex = -1;
  let longestWidth = 0;
  labels.forEach(({
    truncatedWidth
  }, index2) => {
    if (truncatedWidth > longestWidth) {
      longestIndex = index2;
      longestWidth = truncatedWidth;
    }
  });
  return labels[longestIndex];
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/estimateTextHeight.js
function estimateTextHeight({
  characterWidths: characterWidths2,
  targetWidth,
  label
}) {
  const words = label.split(" ");
  let lines = 0;
  let lineWidth = 0;
  words.forEach((_2, index2) => {
    const wordParts = words[index2].split("-");
    lines += wordParts.length;
    const wordWidth = estimateStringWidth(words[index2], characterWidths2);
    lineWidth += wordWidth;
    if (lineWidth > targetWidth) {
      lines += 1;
      lineWidth = wordWidth;
    }
  });
  return lines * LINE_HEIGHT;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/formatAndAddEllipsis.js
function formatAndAddEllipsis(label) {
  let newLabel = label.trimEnd();
  if (newLabel.endsWith("-")) {
    newLabel = newLabel.substring(0, newLabel.length - 1);
  }
  return `${newLabel}${ELLIPSIS}`;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/truncateLastLine.js
var MAX_CYCLES = 10;
var STEP = 1;
function truncateLastLine({
  label,
  targetHeight,
  targetWidth,
  characterWidths: characterWidths2
}) {
  let newLabel = label;
  let lineStart = 0;
  let lineEnd = label.length;
  let counter = 0;
  if (lineEnd < lineStart) {
    return newLabel;
  }
  while (lineStart <= lineEnd && counter < MAX_CYCLES) {
    const middle = Math.floor((lineStart + lineEnd) / 2);
    newLabel = label.substring(0, middle);
    if (newLabel.length < label.length) {
      newLabel = formatAndAddEllipsis(newLabel);
    }
    const newLabelHeight = estimateTextHeight({
      label: newLabel,
      targetWidth,
      characterWidths: characterWidths2
    });
    if (newLabelHeight === targetHeight) {
      break;
    }
    if (newLabelHeight > targetHeight) {
      lineEnd = middle - STEP;
    }
    if (newLabelHeight < targetHeight) {
      lineStart = middle + STEP;
    }
    counter += STEP;
  }
  return newLabel;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/truncateSingleLine.js
function truncateSingleLine({
  characterWidths: characterWidths2,
  label,
  targetWidth
}) {
  const estimatedWidth = estimateStringWidth(label, characterWidths2);
  if (estimatedWidth <= targetWidth) {
    return label;
  }
  const characters = label.split("");
  let width = 0;
  let newLabel = "";
  let index2 = 0;
  while (width <= targetWidth - characterWidths2[ELLIPSIS]) {
    width += characterWidths2[characters[index2]];
    newLabel += characters[index2];
    index2++;
  }
  return formatAndAddEllipsis(newLabel);
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/endLineTruncate.js
function endLineTruncate({
  label,
  targetWidth,
  targetHeight,
  characterWidths: characterWidths2
}) {
  const isSingleLine = targetHeight <= LINE_HEIGHT;
  if (isSingleLine) {
    return truncateSingleLine({
      label,
      targetWidth,
      characterWidths: characterWidths2
    });
  }
  return truncateLastLine({
    label,
    targetWidth,
    targetHeight,
    characterWidths: characterWidths2
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/endWordTruncate.js
function endWordTruncate({
  word,
  targetWidth,
  characterWidths: characterWidths2
}) {
  let nextCharacterIndex = 1;
  let newWord = "";
  if (estimateStringWidth(word, characterWidths2) + characterWidths2.W <= targetWidth) {
    return word;
  }
  while (newWord.length < word.length && estimateStringWidth(newWord, characterWidths2) + characterWidths2.W < targetWidth) {
    nextCharacterIndex += 1;
    newWord = word.substring(0, nextCharacterIndex);
    newWord = `${newWord}${ELLIPSIS}`;
  }
  return newWord;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/truncateLabels.js
function truncateLabels({
  labels,
  targetWidth,
  targetHeight,
  characterWidths: characterWidths2,
  skipEndWordTruncate = false
}) {
  const truncatedLabels = [...labels];
  labels.forEach((_2, index2) => {
    truncatedLabels[index2].truncatedWords = [];
    truncatedLabels[index2].words = [];
    const words = truncatedLabels[index2].text.split(/(\s+)/).filter((word) => word.trim().length > 0);
    if (skipEndWordTruncate) {
      truncatedLabels[index2].truncatedWords.push(truncatedLabels[index2].text);
    } else {
      words.forEach((word) => {
        const wordWidth = estimateStringWidth(word, characterWidths2);
        truncatedLabels[index2].words.push({
          word,
          wordWidth
        });
        if (wordWidth > targetWidth) {
          truncatedLabels[index2].truncatedWords.push(endWordTruncate({
            word,
            targetWidth,
            characterWidths: characterWidths2
          }));
        } else {
          truncatedLabels[index2].truncatedWords.push(word);
        }
      });
    }
    truncatedLabels[index2].truncatedName = truncatedLabels[index2].truncatedWords.join(" ");
    truncatedLabels[index2].truncatedName = endLineTruncate({
      label: truncatedLabels[index2].truncatedName,
      targetWidth,
      targetHeight,
      characterWidths: characterWidths2
    });
    truncatedLabels[index2].truncatedWidth = estimateStringWidth(truncatedLabels[index2].truncatedName, characterWidths2);
    truncatedLabels[index2].truncatedWords = truncatedLabels[index2].truncatedName.split(" ");
  });
  return truncatedLabels;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/getDiagonalLabels.js
function getDiagonalLabels({
  characterWidths: characterWidths2,
  labels,
  longestLabelWidth,
  targetHeight,
  targetWidth
}) {
  const clampedTargetWidth = clamp({
    amount: longestLabelWidth,
    min: targetWidth,
    max: MAX_DIAGONAL_LABEL_WIDTH
  });
  const truncatedLabels = truncateLabels({
    labels,
    targetWidth: clampedTargetWidth,
    targetHeight,
    characterWidths: characterWidths2,
    skipEndWordTruncate: true
  });
  const lines = [];
  const centerPoint = targetWidth / 2 - LINE_HEIGHT / 2;
  for (let i2 = 0; i2 < labels.length; i2++) {
    lines[i2] = [];
    lines[i2].push({
      truncatedText: truncatedLabels[i2].truncatedName,
      fullText: truncatedLabels[i2].text,
      y: centerPoint,
      x: centerPoint,
      dominantBaseline: "hanging",
      width: clampedTargetWidth,
      height: LINE_HEIGHT,
      textAnchor: "end",
      transform: `rotate(-45)`
    });
  }
  const {
    truncatedWidth
  } = getWidestLabel(truncatedLabels);
  return {
    lines,
    containerHeight: clamp({
      amount: getRotatedHeight(truncatedWidth, 45, targetHeight),
      min: 0,
      max: MAX_DIAGONAL_VISIBLE_HEIGHT
    })
  };
}
function getRotatedHeight(width, angle, originalHeight) {
  const radians2 = Math.PI / 180 * angle;
  const hypotenuse = width * Math.sin(radians2);
  const opp = originalHeight * Math.cos(radians2);
  return Math.round(hypotenuse + opp);
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/getHorizontalLabels.js
var NEXT_INDEX = 1;
function getHorizontalLabels({
  labels,
  targetHeight,
  targetWidth,
  characterWidths: characterWidths2
}) {
  const truncatedLabels = truncateLabels({
    labels,
    targetWidth,
    targetHeight,
    characterWidths: characterWidths2
  });
  const lines = [];
  let longestLineCount = 0;
  truncatedLabels.forEach((label, index2) => {
    lines[index2] = [];
    let line = "";
    let lineNumber = 0;
    const words = label.truncatedWords;
    for (let wordIndex = 0; wordIndex < words.length; wordIndex++) {
      if (label.words[wordIndex] && label.words[wordIndex].wordWidth > targetWidth) {
        words[wordIndex] = endWordTruncate({
          word: words[wordIndex],
          targetWidth,
          characterWidths: characterWidths2
        });
      }
      line += words[wordIndex];
      while (words[wordIndex + 1] != null && estimateStringWidth(`${line} ${words[wordIndex + NEXT_INDEX]}`, characterWidths2) < targetWidth) {
        line += ` ${words[wordIndex + NEXT_INDEX]}`;
        wordIndex += 1;
      }
      lines[index2].push({
        truncatedText: line,
        fullText: truncatedLabels[index2].text,
        x: targetWidth / 2,
        y: lineNumber * LINE_HEIGHT,
        width: targetWidth,
        height: LINE_HEIGHT,
        textAnchor: "middle",
        dominantBaseline: "hanging"
      });
      lineNumber += 1;
      line = "";
      if (lineNumber > longestLineCount) {
        longestLineCount = lineNumber;
      }
    }
  });
  return {
    lines,
    containerHeight: longestLineCount * LINE_HEIGHT
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/getVerticalLabels.js
var QUARTER = 4;
function getVerticalLabels({
  labels,
  characterWidths: characterWidths2,
  longestLabelWidth,
  targetWidth
}) {
  const clampedTargetWidth = clamp({
    amount: longestLabelWidth,
    min: targetWidth,
    max: VERTICAL_LABEL_TARGET_WIDTH
  });
  const truncatedLabels = truncateLabels({
    labels,
    targetWidth: clampedTargetWidth,
    targetHeight: LINE_HEIGHT,
    characterWidths: characterWidths2,
    skipEndWordTruncate: true
  });
  const lines = [];
  let longestString = 0;
  for (let i2 = 0; i2 < labels.length; i2++) {
    lines[i2] = [];
    lines[i2].push({
      truncatedText: truncatedLabels[i2].truncatedName,
      fullText: truncatedLabels[i2].text,
      y: LINE_HEIGHT / QUARTER,
      x: 0,
      width: clampedTargetWidth,
      height: LINE_HEIGHT,
      textAnchor: "end",
      transform: `translate(${targetWidth / 2}) rotate(-90)`
    });
    if (truncatedLabels[i2].truncatedWidth > longestString) {
      longestString = truncatedLabels[i2].truncatedWidth;
    }
  }
  return {
    lines,
    containerHeight: longestString
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/hooks/useLabels.js
function useLabels({
  allowLineWrap,
  labels,
  onHeightChange = () => {
  },
  targetWidth
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const preparedLabels = (0, import_react48.useMemo)(() => {
    return labels.map((label) => {
      return {
        text: label,
        words: [],
        truncatedWords: [],
        truncatedName: "",
        truncatedWidth: 0
      };
    });
  }, [labels]);
  const longestLabelWidth = (0, import_react48.useMemo)(() => {
    return labels.reduce((prev, string) => {
      const newWidth = estimateStringWidth(string, characterWidths2);
      if (newWidth > prev) {
        return newWidth;
      }
      return prev;
    }, 0);
  }, [labels, characterWidths2]);
  const {
    lines,
    containerHeight
  } = (0, import_react48.useMemo)(() => {
    const shouldDrawHorizontal = checkIfShouldDrawHorizontal({
      allowLineWrap,
      longestLabelWidth,
      targetWidth
    });
    const shouldDrawDiagonal = targetWidth > DIAGONAL_LABEL_MIN_WIDTH;
    const shouldDrawVertical = targetWidth > VERTICAL_LABEL_MIN_WIDTH;
    switch (true) {
      case shouldDrawHorizontal: {
        return getHorizontalLabels({
          labels: preparedLabels,
          targetWidth,
          targetHeight: HORIZONTAL_LABEL_TARGET_HEIGHT,
          characterWidths: characterWidths2
        });
      }
      case shouldDrawDiagonal: {
        return getDiagonalLabels({
          characterWidths: characterWidths2,
          labels: preparedLabels,
          longestLabelWidth,
          targetHeight: LINE_HEIGHT,
          targetWidth
        });
      }
      case shouldDrawVertical: {
        return getVerticalLabels({
          characterWidths: characterWidths2,
          labels: preparedLabels,
          longestLabelWidth,
          targetWidth
        });
      }
      default: {
        return {
          lines: [],
          containerHeight: 0
        };
      }
    }
  }, [allowLineWrap, targetWidth, characterWidths2, preparedLabels, longestLabelWidth]);
  (0, import_react48.useEffect)(() => {
    onHeightChange(containerHeight);
  }, [containerHeight, onHeightChange]);
  return {
    lines,
    containerHeight
  };
}
function checkIfShouldDrawHorizontal({
  allowLineWrap,
  longestLabelWidth,
  targetWidth
}) {
  const isLabelLongerThanTarget = targetWidth > longestLabelWidth;
  if (allowLineWrap === false) {
    return isLabelLongerThanTarget;
  }
  return targetWidth >= HORIZONTAL_LABEL_MIN_WIDTH || isLabelLongerThanTarget;
}

// node_modules/@shopify/polaris-viz/build/esm/components/TextLine/TextLine.js
var import_react49 = __toESM(require_react());
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
function TextLine({
  index: index2,
  line
}) {
  const selectedTheme = useTheme();
  return (0, import_jsx_runtime23.jsx)(import_react49.Fragment, {
    children: line.map(({
      dominantBaseline,
      height,
      fullText,
      truncatedText,
      textAnchor,
      transform,
      width,
      x: x3,
      y: y3
    }, textIndex) => {
      const key = `${index2}-${textIndex}-${truncatedText}`;
      return (0, import_jsx_runtime23.jsxs)(import_react49.Fragment, {
        children: [(0, import_jsx_runtime23.jsx)("text", {
          textAnchor,
          dominantBaseline,
          height,
          width,
          x: x3,
          y: y3,
          fill: selectedTheme.xAxis.labelColor,
          fontSize: FONT_SIZE,
          fontFamily: FONT_FAMILY,
          transform,
          children: truncatedText
        }), (0, import_jsx_runtime23.jsx)("title", {
          children: fullText
        })]
      }, key);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/ErrorText/ErrorText.js
var TEXT_DROP_SHADOW_SIZE = 3;
function ErrorText({
  errorText,
  width,
  height
}) {
  const {
    chartContainer: {
      backgroundColor
    }
  } = useTheme();
  const {
    lines
  } = useLabels({
    allowLineWrap: true,
    labels: [errorText],
    targetWidth: width
  });
  return (0, import_jsx_runtime24.jsx)("g", {
    style: {
      transform: `translateY(${Math.max(0, height / 2 - FONT_SIZE / 2)}px)`,
      filter: `
        drop-shadow( ${TEXT_DROP_SHADOW_SIZE}px 0px 1px ${backgroundColor})
        drop-shadow( -${TEXT_DROP_SHADOW_SIZE}px  0px 1px ${backgroundColor})
        drop-shadow( 0px ${TEXT_DROP_SHADOW_SIZE}px 1px ${backgroundColor})
        drop-shadow( 0px -${TEXT_DROP_SHADOW_SIZE}px 1px ${backgroundColor})
      `
    },
    children: (0, import_jsx_runtime24.jsx)(TextLine, {
      index: 0,
      line: lines[0]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/GridSkeleton/GridSkeleton.js
var BRICK_HEIGHT = 12;
var BRICK_WIDTH = 32;
var INITIAL_DELAY = 200;
var NUMBER_OF_BRICKS = 5;
function GridSkeleton({
  dimensions,
  state,
  errorText
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    chartContainer: {
      padding
    },
    grid: {
      color: gridColor
    }
  } = useTheme();
  const {
    paddingLeft,
    paddingBottom,
    paddingTop
  } = paddingStringToObject(padding);
  const drawableHeight = height - paddingBottom - paddingTop;
  const ticks2 = new Array(NUMBER_OF_BRICKS).fill(null).map((_2, index2) => ({
    y: index2 * ((drawableHeight - BRICK_HEIGHT) / (NUMBER_OF_BRICKS - 1))
  }));
  const [springs, animation] = useSprings(ticks2.length, () => ({
    opacity: 1,
    config: {
      mass: 1,
      tension: 350,
      friction: 22,
      velocity: 0
    },
    default: {
      immediate: false
    },
    from: {
      transform: "translate(0px,0px) rotate(0deg)"
    }
  }));
  (0, import_react50.useEffect)(() => {
    const lastTickYPosition = ticks2[NUMBER_OF_BRICKS - 1].y;
    const distanceToFloor = (index2) => lastTickYPosition - ticks2[index2].y;
    if (state === ChartState.Error) {
      animation.start((index2) => ({
        to: async (next) => {
          switch (index2) {
            case 0:
              await next({
                delay: INITIAL_DELAY + 300,
                config: {
                  duration: 500
                },
                transform: `translate(10px,${distanceToFloor(index2) - BRICK_HEIGHT * 4.6}px) rotate(52deg)`
              });
              await next({
                config: {
                  duration: 150
                },
                transform: `translate(40px,${distanceToFloor(index2) - BRICK_HEIGHT * 2}px) rotate(52deg)`
              });
              await next({
                config: {
                  tension: 400,
                  friction: 40
                },
                transform: `translate(60px,${distanceToFloor(index2) - BRICK_HEIGHT * -0.1}px) rotate(0eg)`
              });
              break;
            case 1:
              await next({
                delay: INITIAL_DELAY + 100,
                config: {
                  duration: 80
                },
                transform: `translate(-1px,${ticks2[2].y - ticks2[index2].y - BRICK_HEIGHT}px) rotate(-3deg)`
              });
              await next({
                config: {
                  duration: 90
                },
                transform: `translate(-6px,${ticks2[2].y - ticks2[index2].y - BRICK_HEIGHT}px) rotate(-13deg)`
              });
              await next({
                config: {
                  duration: 390
                },
                transform: `translate(-4px,${distanceToFloor(index2) - BRICK_HEIGHT * 1.7}px) rotate(-23deg)`
              });
              await next({
                delay: 150,
                config: {
                  tension: 500,
                  friction: 100,
                  velocity: 0.03
                },
                transform: `translate(-10px,${distanceToFloor(index2) - BRICK_HEIGHT * 1.1}px) rotate(-40deg)`
              });
              break;
            case 2:
              await next({
                config: {
                  duration: 200
                },
                delay: INITIAL_DELAY + 150,
                transform: `translate(0px, 0px) rotate(-105deg)`
              });
              await next({
                config: {
                  duration: 200
                },
                transform: `translate(-15px,${distanceToFloor(index2) - BRICK_HEIGHT * 2.5}px) rotate(-157deg)`
              });
              await next({
                delay: 300,
                config: {
                  tension: 500,
                  friction: 40,
                  velocity: 0.03
                },
                transform: `translate(-3px,${distanceToFloor(index2) - BRICK_HEIGHT * 2.1}px) rotate(-150deg)`
              });
              break;
            case 3:
              await next({
                config: {
                  duration: 200
                },
                delay: INITIAL_DELAY,
                transform: `translate(0px, 0px) rotate(105deg)`
              });
              await next({
                delay: 0,
                config: {
                  tension: 500,
                  friction: 40,
                  velocity: 0.03
                },
                transform: `translate(8px,${distanceToFloor(index2) - BRICK_HEIGHT * 2.4}px) rotate(138deg)`
              });
              break;
          }
        }
      }));
    }
  }, [animation, state, ticks2]);
  return (0, import_jsx_runtime25.jsx)(import_react50.Fragment, {
    children: (0, import_jsx_runtime25.jsxs)("svg", {
      viewBox: `0 0 ${width} ${height}`,
      children: [springs.map((style6, index2) => {
        const y3 = ticks2[index2].y;
        return (0, import_jsx_runtime25.jsxs)("g", {
          children: [(0, import_jsx_runtime25.jsx)(animated.rect, {
            style: {
              ...style6,
              transformOrigin: `${index2 === 2 ? BRICK_WIDTH + paddingLeft : paddingLeft}px ${ticks2[index2].y + BRICK_HEIGHT}px`
            },
            x: paddingLeft,
            y: ticks2[index2].y,
            width: BRICK_WIDTH,
            height: BRICK_HEIGHT,
            ry: 2,
            rx: 2,
            fill: gridColor
          }), (0, import_jsx_runtime25.jsx)("rect", {
            x: 0,
            y: y3 + 5,
            width,
            height: 1,
            fill: gridColor
          })]
        }, index2);
      }), state === ChartState.Error && (0, import_jsx_runtime25.jsx)(ErrorText, {
        errorText,
        width,
        height
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SparkSkeleton/SparkSkeleton.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
function SparkSkeleton({
  dimensions,
  state,
  errorText
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    grid: {
      color: gridColor
    }
  } = useTheme();
  return (0, import_jsx_runtime26.jsxs)("svg", {
    viewBox: `0 0 ${width} ${height}`,
    children: [state === ChartState.Loading && (0, import_jsx_runtime26.jsx)("rect", {
      x: 0,
      y: 0,
      width,
      height,
      fill: gridColor,
      rx: DEFAULT_BORDER_RADIUS
    }), state === ChartState.Error && (0, import_jsx_runtime26.jsx)(ErrorText, {
      errorText,
      width,
      height
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleNormalizedSkeleton/SimpleNormalizedSkeleton.js
var import_react51 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleNormalizedSkeleton/SimpleNormalizedSkeleton.scss.js
var styles13 = {
  "Legend": "_Legend_iqjhb_1",
  "LegendItem": "_LegendItem_iqjhb_9",
  "LegendItemComponent": "_LegendItemComponent_iqjhb_30"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleNormalizedSkeleton/SimpleNormalizedSkeleton.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var SIZE_TO_PX = {
  small: 16,
  medium: 36,
  large: 56
};
function SimpleNormalizedSkeleton({
  dimensions,
  errorText,
  showLegend,
  size: size2,
  state
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    grid: {
      color: gridColor
    },
    bar: {
      borderRadius
    },
    chartContainer: {
      padding
    }
  } = useTheme();
  const id = useUniqueId("simple-bar-skeleton");
  return (0, import_jsx_runtime27.jsxs)("div", {
    style: {
      padding
    },
    children: [state === ChartState.Loading && (0, import_jsx_runtime27.jsxs)(import_react51.Fragment, {
      children: [showLegend && (0, import_jsx_runtime27.jsx)("div", {
        className: styles13.Legend,
        children: new Array(3).fill(0).map((_2, index2) => (0, import_jsx_runtime27.jsx)("div", {
          className: styles13.LegendItem,
          children: new Array(3).fill(0).map((_3, innerIndex) => (0, import_jsx_runtime27.jsx)("div", {
            className: styles13.LegendItemComponent,
            style: {
              background: gridColor
            }
          }, `${id}${index2}${innerIndex}`))
        }, `${id}${index2}`))
      }), (0, import_jsx_runtime27.jsx)("div", {
        style: {
          background: gridColor,
          borderRadius,
          height: SIZE_TO_PX[size2]
        }
      })]
    }), state === ChartState.Error && (0, import_jsx_runtime27.jsx)("svg", {
      viewBox: `0 0 ${width} ${height}`,
      children: (0, import_jsx_runtime27.jsx)(ErrorText, {
        errorText,
        width,
        height
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleBarSkeleton/SimpleBarSkeleton.js
var import_react52 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleBarSkeleton/SimpleBarSkeleton.scss.js
var styles14 = {
  "SimpleBarSkeleton": "_SimpleBarSkeleton_1nscx_1",
  "Item": "_Item_1nscx_8"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/SimpleBarSkeleton/SimpleBarSkeleton.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
function SimpleBarSkeleton({
  dimensions,
  state,
  errorText
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    grid: {
      color: gridColor
    },
    bar: {
      borderRadius
    }
  } = useTheme();
  const id = useUniqueId("simple-bar-skeleton");
  const BarMarkup = () => (0, import_jsx_runtime28.jsx)("span", {
    style: {
      display: "inline-block",
      background: gridColor,
      borderRadius
    }
  });
  return (0, import_jsx_runtime28.jsxs)("div", {
    className: styles14.SimpleBarSkeleton,
    children: [state === ChartState.Loading && (0, import_jsx_runtime28.jsx)(import_react52.Fragment, {
      children: new Array(4).fill(0).map((_2, index2) => (0, import_jsx_runtime28.jsxs)("div", {
        className: styles14.Item,
        children: [(0, import_jsx_runtime28.jsx)(BarMarkup, {}), (0, import_jsx_runtime28.jsx)(BarMarkup, {})]
      }, `${id}${index2}`))
    }), state === ChartState.Error && (0, import_jsx_runtime28.jsx)("svg", {
      viewBox: `0 0 ${width} ${height}`,
      children: (0, import_jsx_runtime28.jsx)(ErrorText, {
        errorText,
        width,
        height
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/FunnelSkeleton/FunnelSkeleton.js
var import_react55 = __toESM(require_react());
var import_jsx_runtime31 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/Bar/Bar.js
var import_react54 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useBarSpringConfig.js
function useBarSpringConfig({
  animationDelay = 0
}) {
  const {
    shouldAnimate
  } = useChartContext();
  return useSpringConfig({
    animationDelay: shouldAnimate ? animationDelay : 0,
    shouldAnimate,
    unmountedSpringConfig: BARS_LOAD_ANIMATION_CONFIG,
    mountedSpringConfig: BARS_TRANSITION_CONFIG
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/Bar/Bar.scss.js
var styles15 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Bar": "_Bar_1hwkw_144",
  "Group": "_Group_1hwkw_153"
};

// node_modules/@shopify/polaris-viz/build/esm/components/shared/Bar/Bar.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/ZeroValueLine/ZeroValueLine.js
var import_react53 = __toESM(require_react());
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
function getZeroValueLineCoords({
  x: x3,
  y: y3,
  direction,
  areAllNegative
}) {
  if (direction === "vertical") {
    return {
      x1: x3,
      x2: x3,
      y1: y3,
      y2: !areAllNegative ? y3 - ZERO_VALUE_LINE_HEIGHT : y3 + ZERO_VALUE_LINE_HEIGHT
    };
  }
  return {
    x1: x3,
    x2: !areAllNegative ? x3 + ZERO_VALUE_LINE_HEIGHT : x3 - ZERO_VALUE_LINE_HEIGHT,
    y1: y3,
    y2: y3
  };
}
function ZeroValueLine({
  x: x3,
  y: y3,
  theme,
  direction = "vertical",
  areAllNegative
}) {
  const selectedTheme = useTheme(theme);
  return (0, import_jsx_runtime29.jsx)(import_react53.Fragment, {
    children: (0, import_jsx_runtime29.jsx)("line", {
      stroke: selectedTheme.bar.zeroValueColor,
      strokeWidth: "1",
      ...getZeroValueLineCoords({
        x: x3,
        y: y3,
        direction,
        areAllNegative
      })
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/Bar/Bar.js
var Bar2 = (0, import_react54.memo)(function Bar3({
  animationDelay = 0,
  areAllNegative,
  ariaLabel,
  color: color2,
  height,
  index: index2,
  isActive = true,
  transform,
  width,
  x: x3,
  y: y3
}) {
  const selectedTheme = useTheme();
  const borderRadius = `0 ${selectedTheme.bar.borderRadius} ${selectedTheme.bar.borderRadius} 0`;
  const getPath = (0, import_react54.useCallback)((height2 = 0, width2 = 0) => {
    return getRoundedRectPath({
      height: height2,
      width: width2,
      borderRadius
    });
  }, [borderRadius]);
  const springConfig = useBarSpringConfig({
    animationDelay
  });
  const spring = useSpring({
    from: {
      pathD: getPath(height, 1)
    },
    to: {
      pathD: getPath(height, width)
    },
    ...springConfig
  });
  const ariaHidden = !ariaLabel;
  return (0, import_jsx_runtime30.jsx)("g", {
    className: styles15.Group,
    "aria-hidden": ariaHidden,
    role: "img",
    "aria-label": ariaLabel,
    transform: `translate(${x3}, ${y3})`,
    children: width !== 0 ? (0, import_jsx_runtime30.jsx)(animated.path, {
      d: spring.pathD,
      "data-id": `bar-${index2}`,
      "data-index": index2,
      "data-type": DataType.Bar,
      fill: color2,
      "aria-hidden": "true",
      style: {
        transform,
        opacity: isActive ? COLOR_VISION_ACTIVE_OPACITY : COLOR_VISION_FADED_OPACITY
      },
      className: styles15.Bar
    }) : (0, import_jsx_runtime30.jsx)(animated.g, {
      style: {
        transform: `translate(${x3}px, ${-y3}px)`
      },
      children: (0, import_jsx_runtime30.jsx)(ZeroValueLine, {
        x: x3,
        y: y3 + height / 2,
        direction: "horizontal",
        areAllNegative
      })
    })
  });
});

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/FunnelSkeleton/FunnelSkeleton.js
function FunnelSkeleton({
  dimensions,
  state,
  errorText
}) {
  const {
    width,
    height
  } = dimensions;
  const {
    grid: {
      color: gridColor
    }
  } = useTheme();
  const barsQuantity = 4;
  const gap = width * 0.05;
  const innerWidth = width - gap;
  const segmentWidth = innerWidth / barsQuantity;
  const barWidth = segmentWidth / 2;
  const id = useUniqueId("loadingFunnel");
  const heightGap = height * 1.3 / barsQuantity;
  return (0, import_jsx_runtime31.jsxs)("svg", {
    viewBox: `0 0 ${width} ${height}`,
    children: [state === ChartState.Loading && Array(barsQuantity).fill(null).map((_2, index2) => {
      const barHeight = height - heightGap * index2;
      const nextBarHeight = height - heightGap * (index2 + 1);
      const connector = {
        height,
        startX: segmentWidth / 2 * index2,
        startY: height - barHeight,
        nextX: segmentWidth / 2 * (index2 + 1),
        nextY: height - nextBarHeight
      };
      return (0, import_jsx_runtime31.jsxs)(import_react55.Fragment, {
        children: [(0, import_jsx_runtime31.jsx)(Bar2, {
          color: gridColor,
          x: segmentWidth * index2,
          y: height - barHeight,
          height: barHeight,
          width: barWidth
        }), index2 !== barsQuantity - 1 && (0, import_jsx_runtime31.jsx)("path", {
          style: {
            transform: `translateX(${segmentWidth / 2 * (index2 + 1)}px)`
          },
          fill: changeColorOpacity(gridColor, 0.2),
          d: `M${connector.startX} ${connector.startY}
                    L ${connector.nextX} ${connector.nextY}
                    V ${connector.height} H ${connector.startX} Z`
        })]
      }, `${id}${index2}`);
    }), state === ChartState.Error && (0, import_jsx_runtime31.jsx)(ErrorText, {
      errorText,
      width,
      height
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/DonutSkeleton/DonutSkeleton.js
var import_react57 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/DonutSkeleton/DonutSkeleton.scss.js
var styles16 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Donut": "_Donut_1xk67_144",
  "DonutWrapper": "_DonutWrapper_1xk67_154",
  "ContentWrapper": "_ContentWrapper_1xk67_162",
  "DonutChart": "_DonutChart_1xk67_180"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/DonutSkeleton/DonutSkeleton.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Arc/Arc.js
var import_react56 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Arc/Arc.scss.js
var styles17 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Arc": "_Arc_12guq_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Arc/Arc.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/classnames.js
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

// node_modules/@shopify/polaris-viz/build/esm/components/ConicGradientWithStops/ConicGradientWithStops.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/createCssConicGradient.js
function createCSSConicGradient(gradient) {
  if (gradient.length === 1) {
    const color2 = gradient[0].color;
    return `conic-gradient(${color2} 0%, ${color2} 100%)`;
  }
  const gradientStops = gradient.map(({
    color: color2,
    offset
  }) => `${color2} ${offset}%`);
  return `conic-gradient(${gradientStops.join(", ")})`;
}

// node_modules/@shopify/polaris-viz/build/esm/components/ConicGradientWithStops/ConicGradientWithStops.js
function ConicGradientWithStops({
  gradient,
  height,
  width,
  x: x3 = 0,
  y: y3 = 0
}) {
  const conicGradientValue = createCSSConicGradient(gradient);
  return (0, import_jsx_runtime32.jsx)("foreignObject", {
    x: x3,
    y: y3,
    width,
    height,
    children: (0, import_jsx_runtime32.jsx)("div", {
      style: {
        width: `${width}px`,
        height: `${height}px`,
        backgroundImage: conicGradientValue
      }
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Arc/Arc.js
var ANIMATION_SIZE_BUFFER = 30;
function Arc({
  animationDelay = 100,
  radius,
  width,
  height,
  startAngle,
  endAngle,
  color: color2,
  cornerRadius,
  thickness,
  index: index2 = 0,
  isAnimated: isAnimated2,
  activeIndex = 0
}) {
  const gradientId = (0, import_react56.useMemo)(() => uniqueId("DonutChart"), []);
  const createArc = arc_default().cornerRadius(cornerRadius);
  const gradient = getGradientFromColor(color2);
  const springConfig = useSpringConfig({
    animationDelay: index2 * animationDelay,
    shouldAnimate: isAnimated2,
    mountedSpringConfig: ARC_DATA_CHANGE_ANIMATION_CONFIG,
    unmountedSpringConfig: ARC_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedInnerRadius,
    animatedOuterRadius,
    animatedStartAngle,
    animatedEndAngle,
    animatedPadAngle
  } = useSpring({
    animatedInnerRadius: radius - thickness,
    animatedOuterRadius: radius,
    animatedStartAngle: startAngle,
    animatedEndAngle: endAngle,
    animatedPadAngle: ARC_PAD_ANGLE,
    from: {
      animatedOuterRadius: radius - thickness
    },
    ...springConfig
  });
  return (0, import_jsx_runtime33.jsxs)(import_react56.Fragment, {
    children: [(0, import_jsx_runtime33.jsx)("clipPath", {
      id: gradientId,
      transform: `translate(${width / 2 - ANIMATION_SIZE_BUFFER} ${height / 2 - ANIMATION_SIZE_BUFFER})`,
      children: (0, import_jsx_runtime33.jsx)(animated.path, {
        className: classNames(styles17.Arc),
        d: to2([animatedInnerRadius, animatedOuterRadius, animatedStartAngle, animatedEndAngle, animatedPadAngle], (animatedInnerRadius2, animatedOuterRadius2, animatedStartAngle2, animatedEndAngle2, animatedPadAngle2) => {
          return createArc({
            innerRadius: animatedInnerRadius2,
            outerRadius: animatedOuterRadius2,
            startAngle: animatedStartAngle2,
            endAngle: animatedEndAngle2,
            padAngle: animatedPadAngle2
          });
        })
      })
    }), (0, import_jsx_runtime33.jsx)("g", {
      style: {
        ...getColorVisionStylesForActiveIndex({
          activeIndex,
          index: index2
        })
      },
      className: classNames(styles17.Arc),
      ...getColorVisionEventAttrs({
        type: COLOR_VISION_SINGLE_ITEM,
        index: index2
      }),
      clipPath: `url(#${gradientId})`,
      children: (0, import_jsx_runtime33.jsx)(ConicGradientWithStops, {
        x: width / -2 - ANIMATION_SIZE_BUFFER,
        y: height / -2 - ANIMATION_SIZE_BUFFER,
        height: radius * 4,
        width: radius * 4,
        gradient
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/components/DonutSkeleton/DonutSkeleton.js
var ERROR_ANIMATION_PADDING = 40;
var FULL_CIRCLE = Math.PI * 2;
var INITIAL_DELAY2 = 700;
var RADIUS_PADDING = 20;
var SECONDARY_DELAY = 200;
function DonutSkeleton({
  dimensions: {
    height,
    width
  },
  state,
  errorText
}) {
  const diameter = Math.min(width, height);
  const radius = diameter / 2;
  const selectedTheme = useTheme();
  const arcThickness = selectedTheme.arc.thickness;
  const arcs = [{
    startAngle: 0,
    endAngle: FULL_CIRCLE * 0.25
  }, {
    startAngle: FULL_CIRCLE * 0.25,
    endAngle: FULL_CIRCLE * 0.45
  }, {
    startAngle: FULL_CIRCLE * 0.45,
    endAngle: FULL_CIRCLE * 0.6
  }, {
    startAngle: FULL_CIRCLE * 0.6,
    endAngle: FULL_CIRCLE
  }];
  const [springs, animation] = useSprings(arcs.length, () => ({
    from: {
      transform: "translate(0px,0px) rotate(0deg)"
    },
    config: config.stiff
  }));
  (0, import_react57.useEffect)(() => {
    const baseDistance = 82;
    const floor = {
      x: baseDistance * -0.1,
      y: baseDistance * 0.11
    };
    const firstFrame = {
      delay: INITIAL_DELAY2,
      config: {
        duration: 600,
        easing: easings.easeOutBounce
      },
      transform: `translate(
        ${floor.x}px,
        ${floor.y}px)
        rotate(12deg)`
    };
    if (state === ChartState.Error) {
      animation.start((index2) => ({
        to: async (next) => {
          switch (index2) {
            case 0:
              await next(firstFrame);
              await next({
                config: {
                  duration: 400,
                  easing: easings.easeInExpo
                },
                delay: SECONDARY_DELAY,
                transform: `translate(
                  ${baseDistance * 0.28}px,
                  ${baseDistance * 1.49}px) rotate(-48deg)`
              });
              break;
            case 1:
              await next(firstFrame);
              await next({
                config: {
                  duration: 140,
                  easing: easings.easeOutExpo
                },
                delay: SECONDARY_DELAY + 200,
                transform: `translate(
                  ${baseDistance * 0.62}px,
                  ${baseDistance * 0.17}px) rotate(55deg)`
              });
              break;
            case 2:
              await next(firstFrame);
              await next({
                config: {
                  duration: 190,
                  easing: easings.easeInExpo
                },
                delay: SECONDARY_DELAY,
                transform: `translate(
                  ${baseDistance * -0.5}px,
                  ${baseDistance * 0.12}px) rotate(-10deg)`
              });
              break;
            case 3:
              await next(firstFrame);
              await next({
                config: {
                  duration: 590,
                  easing: easings.easeInExpo
                },
                delay: SECONDARY_DELAY * 2,
                transform: `translate(
                  ${0}px,
                  ${0}px) rotate(-12deg)`
              });
              break;
          }
        }
      }));
    }
  }, [animation, height, radius, state]);
  const minX = -(40 + ERROR_ANIMATION_PADDING);
  const minY = -40;
  const viewBoxDimensions = {
    height: diameter + RADIUS_PADDING,
    width: diameter + RADIUS_PADDING - minX
  };
  const center = (radius + RADIUS_PADDING) / 2;
  const transformOrigin = `${center}px ${RADIUS_PADDING * 2}px`;
  return (0, import_jsx_runtime34.jsx)("div", {
    className: styles16.DonutWrapper,
    children: (0, import_jsx_runtime34.jsxs)("div", {
      className: styles16.Donut,
      children: [(0, import_jsx_runtime34.jsx)("svg", {
        viewBox: `${minX} ${minY} ${viewBoxDimensions.width} ${viewBoxDimensions.height}`,
        height: diameter,
        width: diameter,
        children: (0, import_jsx_runtime34.jsx)("g", {
          className: styles16.DonutChart,
          children: springs.map((style6, index2) => {
            return (0, import_jsx_runtime34.jsx)(animated.g, {
              style: {
                ...style6,
                transformOrigin
              },
              children: (0, import_jsx_runtime34.jsx)(Arc, {
                isAnimated: false,
                width: diameter,
                height: diameter,
                radius,
                startAngle: arcs[index2].startAngle,
                endAngle: arcs[index2].endAngle,
                color: selectedTheme.grid.color,
                cornerRadius: selectedTheme.arc.cornerRadius,
                thickness: arcThickness
              })
            }, `DonutSkeleton-${index2}`);
          })
        })
      }), state === ChartState.Error && (0, import_jsx_runtime34.jsx)("div", {
        className: styles16.ContentWrapper,
        children: (0, import_jsx_runtime34.jsx)("span", {
          style: {
            color: selectedTheme.xAxis.labelColor
          },
          children: errorText
        })
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartSkeleton/ChartSkeleton.js
function ChartSkeleton(props) {
  const {
    dimensions,
    errorText = "Could not load the chart",
    state = ChartState.Loading,
    theme,
    type
  } = props;
  const {
    chartContainer: {
      backgroundColor
    }
  } = useTheme(theme);
  const {
    width,
    height
  } = dimensions || {
    width: 0,
    height: 0
  };
  const SkeletonMarkup = () => {
    switch (type) {
      case "Donut":
        return (0, import_jsx_runtime35.jsx)(DonutSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText
        });
      case "Funnel":
        return (0, import_jsx_runtime35.jsx)(FunnelSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText
        });
      case "SimpleBar":
        return (0, import_jsx_runtime35.jsx)(SimpleBarSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText
        });
      case "SimpleNormalized": {
        const {
          showLegend = true,
          size: size2 = "small"
        } = props;
        return (0, import_jsx_runtime35.jsx)(SimpleNormalizedSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText,
          showLegend,
          size: size2
        });
      }
      case "Spark":
        return (0, import_jsx_runtime35.jsx)(SparkSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText
        });
      default:
        return (0, import_jsx_runtime35.jsx)(GridSkeleton, {
          dimensions: {
            width,
            height
          },
          state,
          errorText
        });
    }
  };
  if (width === 0)
    return null;
  return (0, import_jsx_runtime35.jsxs)("div", {
    className: styles11.Container,
    children: [(0, import_jsx_runtime35.jsx)(SkeletonMarkup, {}), state === ChartState.Loading && (0, import_jsx_runtime35.jsx)(Shimmer, {
      backgroundColor,
      width,
      height
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartErrorBoundary/ChartErrorBoundary.js
var ChartErrorBoundary = class extends import_react58.Component {
  static getDerivedStateFromError(_2) {
    return {
      hasError: true
    };
  }
  constructor(props) {
    super(props);
    this.state = {
      hasError: false
    };
    this.onError = (error, errorInfo) => {
      checkForMismatchedData(this.props.data);
      if (this.props.onError) {
        this.props.onError(error, errorInfo);
      } else {
        console.error({
          error,
          errorInfo
        });
      }
    };
  }
  componentDidCatch(error, errorInfo) {
    this.onError(error, errorInfo);
  }
  render() {
    if (this.state.hasError) {
      return (0, import_jsx_runtime36.jsx)(ChartSkeleton, {
        type: this.props.type,
        state: ChartState.Error,
        dimensions: this.props.dimensions
      });
    }
    return this.props.children;
  }
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/components/ChartDimensions/ChartDimensions.js
function ChartDimensions({
  children,
  data,
  onIsPrintingChange,
  sparkChart = false,
  skeletonType = "Default",
  onError
}) {
  const {
    chartContainer
  } = useTheme();
  const {
    onError: onErrorProvider
  } = usePolarisVizContext();
  const [chartDimensions, setChartDimensions] = (0, import_react59.useState)(null);
  const {
    ref,
    setRef,
    entry
  } = useResizeObserver();
  const previousEntry = usePrevious(entry);
  usePrintResizing({
    ref,
    setChartDimensions,
    onIsPrintingChange
  });
  const updateDimensions = (0, import_react59.useCallback)(() => {
    if ((previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.width) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.width) && (previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect.height) === (entry === null || entry === void 0 ? void 0 : entry.contentRect.height) || entry == null) {
      return;
    }
    const {
      width,
      height
    } = entry.contentRect;
    const {
      x: x3,
      y: y3
    } = entry.target.getBoundingClientRect();
    setChartDimensions({
      width,
      height,
      x: x3,
      y: y3 + window.scrollY
    });
  }, [entry, previousEntry === null || previousEntry === void 0 ? void 0 : previousEntry.contentRect]);
  const debouncedUpdateDimensions = c6(() => {
    updateDimensions();
  }, 100);
  (0, import_react59.useLayoutEffect)(() => {
    updateDimensions();
    if (chartDimensions === null) {
      setChartDimensions({
        width: 0,
        height: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight,
        x: 0,
        y: 0
      });
    }
    const isServer = typeof window === "undefined";
    if (!isServer) {
      window.addEventListener("resize", debouncedUpdateDimensions);
    }
    return () => {
      if (!isServer) {
        window.removeEventListener("resize", debouncedUpdateDimensions);
      }
    };
  }, [entry, updateDimensions, debouncedUpdateDimensions, chartDimensions, chartContainer.minHeight, sparkChart, chartContainer.sparkChartMinHeight]);
  return (0, import_jsx_runtime37.jsx)("div", {
    className: styles10.ChartDimensions,
    ref: setRef,
    style: {
      minHeight: sparkChart ? chartContainer.sparkChartMinHeight : chartContainer.minHeight
    },
    children: !hasValidDimensions(chartDimensions) ? null : (0, import_jsx_runtime37.jsx)(ChartErrorBoundary, {
      type: skeletonType !== null && skeletonType !== void 0 ? skeletonType : "Default",
      dimensions: chartDimensions,
      data,
      onError: onError !== null && onError !== void 0 ? onError : onErrorProvider,
      children: (0, import_jsx_runtime37.jsx)("div", {
        className: styles10.Chart,
        style: {
          height: chartDimensions.height,
          width: chartDimensions.width
        },
        children: (0, import_react59.cloneElement)(children, {
          dimensions: chartDimensions
        })
      })
    })
  });
}
function hasValidDimensions(chartDimensions) {
  if (chartDimensions == null) {
    return false;
  }
  return chartDimensions.width > 0 && chartDimensions.height > 0;
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartContainer/ChartContainer.js
var ChartContainer = (props) => {
  var _props$id;
  const id = (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : uniqueId("chart");
  const {
    prefersReducedMotion
  } = usePrefersReducedMotion();
  const [isPrinting, setIsPrinting] = (0, import_react60.useState)(false);
  const dataTooBigToAnimate = (0, import_react60.useMemo)(() => {
    return isLargeDataSet(props.data, props.type);
  }, [props.data, props.type]);
  const value = (0, import_react60.useMemo)(() => {
    const shouldAnimate = props.isAnimated && !prefersReducedMotion && !dataTooBigToAnimate;
    const printFriendlyTheme = isPrinting ? "Print" : props.theme;
    return {
      shouldAnimate,
      id,
      characterWidths,
      characterWidthOffsets,
      theme: printFriendlyTheme,
      isPerformanceImpacted: dataTooBigToAnimate
    };
  }, [id, isPrinting, prefersReducedMotion, props.isAnimated, props.theme, dataTooBigToAnimate]);
  const {
    chartContainer,
    grid
  } = useTheme(value.theme);
  const padding = !grid.verticalOverflow && chartContainer.padding == null ? "3px 0 0 0" : chartContainer.padding;
  return (0, import_jsx_runtime38.jsx)(ChartContext.Provider, {
    value,
    children: (0, import_jsx_runtime38.jsx)("div", {
      className: styles9.ChartContainer,
      style: {
        background: chartContainer.backgroundColor,
        padding,
        borderRadius: chartContainer.borderRadius
      },
      id: getChartId(value.id),
      children: (0, import_jsx_runtime38.jsx)(ChartDimensions, {
        data: props.data,
        onError: props.onError,
        onIsPrintingChange: setIsPrinting,
        skeletonType: props.skeletonType,
        sparkChart: props.sparkChart,
        children: props.children
      })
    })
  });
};

// node_modules/@shopify/polaris-viz/build/esm/components/SparkLineChart/SparkLineChart.js
function SparkLineChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    data: dataSeries,
    accessibilityLabel,
    id,
    isAnimated: isAnimated2,
    offsetLeft = 0,
    offsetRight = 0,
    onError,
    theme = defaultTheme,
    state,
    errorText
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints(dataSeries, true);
  return (0, import_jsx_runtime39.jsx)(ChartContainer, {
    id,
    isAnimated: isAnimated2,
    data,
    theme,
    sparkChart: true,
    onError,
    children: state !== ChartState.Success ? (0, import_jsx_runtime39.jsx)(ChartSkeleton, {
      type: "Spark",
      state,
      errorText,
      theme
    }) : (0, import_jsx_runtime39.jsx)(Chart, {
      data,
      accessibilityLabel,
      offsetLeft,
      offsetRight,
      theme
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SparkBarChart/Chart.js
var import_react61 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/SparkBarChart/SparkBarChart.scss.js
var styles18 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "VisuallyHidden": "_VisuallyHidden_12uto_144",
  "ComparisonLine": "_ComparisonLine_12uto_156"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SparkBarChart/Chart.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
function Chart2({
  data,
  dimensions,
  targetLine,
  accessibilityLabel
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const {
    width,
    height
  } = dimensions !== null && dimensions !== void 0 ? dimensions : {
    width: 0,
    height: 0
  };
  const viewboxHeight = height + ANIMATION_MARGIN * 2;
  return (0, import_jsx_runtime40.jsxs)(import_react61.Fragment, {
    children: [accessibilityLabel ? (0, import_jsx_runtime40.jsx)("span", {
      className: styles18.VisuallyHidden,
      children: accessibilityLabel
    }) : null, (0, import_jsx_runtime40.jsx)("svg", {
      xmlns: XMLNS,
      "aria-hidden": true,
      viewBox: `0 -${ANIMATION_MARGIN} ${width} ${viewboxHeight}`,
      style: {
        transform: `translateY(-${ANIMATION_MARGIN}px)`
      },
      className: styles18.Svg,
      height: viewboxHeight,
      width,
      children: (0, import_jsx_runtime40.jsx)(SparkBarSeries, {
        data,
        targetLine,
        height,
        shouldAnimate,
        useTransition,
        width
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SparkBarChart/SparkBarChart.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
function SparkBarChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    data,
    accessibilityLabel,
    id,
    isAnimated: isAnimated2,
    onError,
    targetLine,
    theme = defaultTheme,
    state,
    errorText
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  return (0, import_jsx_runtime41.jsx)(ChartContainer, {
    data,
    theme,
    sparkChart: true,
    id,
    isAnimated: isAnimated2,
    onError,
    children: state !== ChartState.Success ? (0, import_jsx_runtime41.jsx)(ChartSkeleton, {
      type: "Spark",
      state,
      errorText,
      theme
    }) : (0, import_jsx_runtime41.jsx)(Chart2, {
      data,
      targetLine,
      accessibilityLabel,
      theme
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/Chart.js
var import_react64 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/SimpleNormalizedChart.scss.js
var styles19 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Container": "_Container_pgxim_144",
  "VerticalContainer": "_VerticalContainer_pgxim_155",
  "VerticalContainerRightLabel": "_VerticalContainerRightLabel_pgxim_159",
  "HorizontalContainer": "_HorizontalContainer_pgxim_164",
  "HorizontalContainerBottomLabel": "_HorizontalContainerBottomLabel_pgxim_169",
  "BarContainer": "_BarContainer_pgxim_173",
  "VerticalBarContainer": "_VerticalBarContainer_pgxim_177",
  "HorizontalBarContainer": "_HorizontalBarContainer_pgxim_181",
  "VerticalLabelContainer": "_VerticalLabelContainer_pgxim_185",
  "HorizontalLabelContainer": "_HorizontalLabelContainer_pgxim_190",
  "HorizontalLabelContainerGrid": "_HorizontalLabelContainerGrid_pgxim_195",
  "LabelContainerEndJustify": "_LabelContainerEndJustify_pgxim_200"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/Chart.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/ColorVisionA11y/useColorVisionEvents.js
var import_react63 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/ExternalEvents/useExternalHideEvents.js
var import_react62 = __toESM(require_react());
function useExternalHideEvents() {
  const [hiddenIndexes, setHiddenIndexes] = (0, import_react62.useState)([]);
  useWatchColorVisionEvents({
    type: EXTERNAL_EVENTS_SET_HIDDEN_ITEMS,
    onIndexChange: ({
      detail
    }) => {
      setHiddenIndexes(detail.indexes);
    }
  });
  return {
    hiddenIndexes
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/ColorVisionA11y/useColorVisionEvents.js
function useColorVisionEvents(props) {
  const {
    enabled = true,
    dimensions,
    root = "chart"
  } = props || {};
  const {
    id
  } = useChartContext();
  const {
    hiddenIndexes
  } = useExternalHideEvents();
  (0, import_react63.useEffect)(() => {
    if (!enabled) {
      return;
    }
    const items = document.querySelectorAll(`#${root}_${id} [${COLOR_VISION_EVENT.dataAttribute}-watch="true"]`);
    function onMouseEnter(event) {
      var _event$target;
      const dataset = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dataset;
      const index2 = getDataSetItem(dataset, "index");
      const type = getDataSetItem(dataset, "type");
      if (id == null || type == null) {
        return;
      }
      const custom8 = new CustomEvent(getEventName(id, type), {
        detail: {
          index: Number(index2)
        }
      });
      window.dispatchEvent(custom8);
    }
    function onMouseLeave(event) {
      var _event$target2;
      const dataset = (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.dataset;
      const type = getDataSetItem(dataset, "type");
      if (id == null || type == null) {
        return;
      }
      const custom8 = new CustomEvent(getEventName(id, type), {
        detail: {
          index: -1
        }
      });
      window.dispatchEvent(custom8);
    }
    items.forEach((item) => {
      item.addEventListener("mouseenter", onMouseEnter);
      item.addEventListener("mouseleave", onMouseLeave);
      item.addEventListener("focus", onMouseEnter);
      item.addEventListener("blur", onMouseLeave);
    });
    return () => {
      items.forEach((item) => {
        item.removeEventListener("mouseenter", onMouseEnter);
        item.removeEventListener("mouseleave", onMouseLeave);
        item.removeEventListener("focus", onMouseEnter);
        item.removeEventListener("blur", onMouseLeave);
      });
    };
  }, [id, enabled, hiddenIndexes, dimensions, root]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/components/BarSegment/BarSegment.scss.js
var styles20 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Segment": "_Segment_7hgfv_144",
  "horizontal-RoundedCorners": "_horizontal-RoundedCorners_7hgfv_155",
  "vertical-RoundedCorners": "_vertical-RoundedCorners_7hgfv_162",
  "RoundedCorners": "_RoundedCorners_7hgfv_169",
  "horizontal-small": "_horizontal-small_7hgfv_173",
  "horizontal-medium": "_horizontal-medium_7hgfv_177",
  "horizontal-large": "_horizontal-large_7hgfv_181",
  "vertical-small": "_vertical-small_7hgfv_185",
  "vertical-medium": "_vertical-medium_7hgfv_189",
  "vertical-large": "_vertical-large_7hgfv_193"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/components/BarSegment/BarSegment.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var DELAY = 150;
function BarSegment({
  activeIndex,
  color: color2,
  index: index2,
  scale,
  size: size2,
  direction,
  roundedCorners
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const scaleNeedsRounding = scale > 0 && scale < 1.5;
  const safeScale = scaleNeedsRounding ? 1.5 : scale;
  const isMaxScale = scale >= 100;
  const delay = index2 * DELAY;
  const angle = direction === "horizontal" ? 90 : 180;
  const dimension = direction === "horizontal" ? "width" : "height";
  const backgroundColor = getCSSBackgroundFromColor(color2, angle);
  const springConfig = useBarSpringConfig({
    animationDelay: delay
  });
  const spring = useSpring({
    from: {
      [dimension]: `0%`
    },
    to: {
      [dimension]: `${safeScale}%`
    },
    ...springConfig
  });
  return (0, import_jsx_runtime42.jsx)(animated.div, {
    className: classNames(styles20.Segment, roundedCorners && !isMaxScale && styles20[`${direction}-RoundedCorners`], roundedCorners && isMaxScale && styles20.RoundedCorners, styles20[`${direction}-${size2}`]),
    style: {
      [dimension]: shouldAnimate ? spring[dimension] : `${safeScale}%`,
      background: backgroundColor,
      ...getColorVisionStylesForActiveIndex({
        activeIndex,
        index: index2
      })
    },
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index: index2
    }),
    tabIndex: 0
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/components/BarLabel/BarLabel.scss.js
var styles21 = {
  "Container": "_Container_971pd_1",
  "ContainerDefaultLabel": "_ContainerDefaultLabel_971pd_7",
  "ContaineBottomLabel": "_ContaineBottomLabel_971pd_11",
  "LabelColor": "_LabelColor_971pd_15",
  "Label": "_Label_971pd_15",
  "FormattedVerticalLabel": "_FormattedVerticalLabel_971pd_30",
  "FormattedHorizontalLabel": "_FormattedHorizontalLabel_971pd_38",
  "ValueContainer": "_ValueContainer_971pd_44",
  "ValueHorizontalContainer": "_ValueHorizontalContainer_971pd_49",
  "Value": "_Value_971pd_44"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/components/BarLabel/BarLabel.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ComparisonMetric/ComparisonMetric.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/constants.js
var NO_VALUE_WIDTH = 11;
var NO_VALUE_ICON_HEIGHT = 2;
var TEXT_ICON_SPACING = 4;
var ICON_SIZE = 5.5;
var FONT_SIZE2 = 11;
var FONT_WEIGHT = 450;
var HEIGHT2 = 16;
var Y_OFFSET = 3;

// node_modules/@shopify/polaris-viz/build/esm/utilities/estimateStringWidthWithOffset.js
function estimateStringWidthWithOffset(string, fontSize2, fontWeight2) {
  var _characterWidthOffset, _characterWidthOffset2;
  const width = estimateStringWidth(string, characterWidths);
  const fontSizeOffset = (_characterWidthOffset = characterWidthOffsets.fontSize[fontSize2]) !== null && _characterWidthOffset !== void 0 ? _characterWidthOffset : 1;
  const fontWeightOffset = (_characterWidthOffset2 = characterWidthOffsets.fontWeight[fontWeight2]) !== null && _characterWidthOffset2 !== void 0 ? _characterWidthOffset2 : 1;
  const adjustedWidth = width * fontSizeOffset * fontWeightOffset;
  return Math.round((adjustedWidth + Number.EPSILON) * 100) / 100;
}

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/utilities/estimateTrendIndicatorWidth.js
function estimateTrendIndicatorWidth(value, fontWeight2 = FONT_WEIGHT) {
  const textWidth = value ? estimateStringWidthWithOffset(value, FONT_SIZE2, fontWeight2) : NO_VALUE_WIDTH;
  const totalWidth = Math.round(ICON_SIZE + TEXT_ICON_SPACING + textWidth);
  return {
    totalWidth,
    textWidth
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/TrendIndicator.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/components/Svg/Svg.scss.js
var styles22 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "SVG": "_SVG_186th_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/components/Svg/Svg.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
function Svg({
  accessibilityLabel,
  children,
  height,
  width,
  tabIndex = 0
}) {
  const hasLabel = accessibilityLabel != null;
  return (0, import_jsx_runtime43.jsxs)("svg", {
    viewBox: `0 0 ${width} ${height}`,
    height,
    width,
    role: hasLabel ? "img" : void 0,
    className: styles22.SVG,
    tabIndex,
    children: [hasLabel && (0, import_jsx_runtime43.jsx)("title", {
      children: accessibilityLabel
    }), children]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/components/Arrows/ArrowUp.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
function ArrowUp() {
  return (0, import_jsx_runtime44.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "6",
    height: "6",
    fill: "none",
    viewBox: "0 0 6 6",
    children: (0, import_jsx_runtime44.jsx)("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M1 .25a.75.75 0 1 0 0 1.5h2.19L.594 4.345a.75.75 0 0 0 1.06 1.06L4.25 2.811V5a.75.75 0 0 0 1.5 0V1A.748.748 0 0 0 5 .25H1Z",
      clipRule: "evenodd"
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/components/Arrows/ArrowDown.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
function ArrowDown() {
  return (0, import_jsx_runtime45.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "6",
    height: "6",
    fill: "none",
    viewBox: "0 0 6 6",
    children: (0, import_jsx_runtime45.jsx)("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M5.75 1a.75.75 0 0 0-1.5 0v2.19L1.655.594a.75.75 0 1 0-1.06 1.06L3.189 4.25H1a.75.75 0 0 0 0 1.5h4a.748.748 0 0 0 .529-.218l.001-.002.002-.001A.748.748 0 0 0 5.75 5V1Z",
      clipRule: "evenodd"
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TrendIndicator/TrendIndicator.js
var TREND_FONT_WEIGHT = 650;
function TrendIndicator({
  accessibilityLabel,
  direction = "upward",
  tabIndex = -1,
  theme = "Light",
  trend = "neutral",
  value
}) {
  const selectedTheme = useTheme(theme);
  const svgProps = {
    accessibilityLabel,
    height: HEIGHT2,
    tabIndex
  };
  if (value == null) {
    return (0, import_jsx_runtime46.jsx)(Svg, {
      ...svgProps,
      width: NO_VALUE_WIDTH,
      children: (0, import_jsx_runtime46.jsx)("path", {
        d: "M0.519531 1.79395H12.0039V0.249023H0.519531V1.79395Z",
        fill: selectedTheme.trendIndicator.neutral,
        transform: `translate(${(NO_VALUE_WIDTH - NO_VALUE_WIDTH) / 2}, ${(HEIGHT2 - NO_VALUE_ICON_HEIGHT) / 2})`
      })
    });
  }
  const {
    textWidth,
    totalWidth
  } = estimateTrendIndicatorWidth(value, TREND_FONT_WEIGHT);
  return (0, import_jsx_runtime46.jsx)(Svg, {
    ...svgProps,
    width: totalWidth,
    children: (0, import_jsx_runtime46.jsxs)("g", {
      color: selectedTheme.trendIndicator[trend],
      children: [(0, import_jsx_runtime46.jsx)("g", {
        transform: `translate(0, ${(HEIGHT2 - ICON_SIZE) / 2})`,
        children: direction === "upward" ? (0, import_jsx_runtime46.jsx)(ArrowUp, {}) : (0, import_jsx_runtime46.jsx)(ArrowDown, {})
      }), (0, import_jsx_runtime46.jsx)("text", {
        x: ICON_SIZE + TEXT_ICON_SPACING,
        y: (HEIGHT2 + Y_OFFSET) / 2,
        fontSize: FONT_SIZE2,
        fill: "currentColor",
        fontWeight: TREND_FONT_WEIGHT,
        dominantBaseline: "middle",
        fontFamily: FONT_FAMILY,
        textRendering: "geometricPrecision",
        width: textWidth,
        children: value
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComparisonMetric/ComparisonMetric.js
function ComparisonMetric({
  metric,
  trend,
  accessibilityLabel
}) {
  let direction;
  switch (trend) {
    case "positive":
      direction = "upward";
      break;
    case "negative":
      direction = "downward";
      break;
    case "neutral":
    default:
      direction = void 0;
      break;
  }
  return (0, import_jsx_runtime47.jsx)(TrendIndicator, {
    trend,
    accessibilityLabel,
    direction,
    value: metric
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/components/BarLabel/BarLabel.js
function BarLabel({
  activeIndex,
  index: index2,
  label,
  value,
  color: color2,
  comparisonMetric,
  direction,
  legendPosition
}) {
  const selectedTheme = useTheme();
  const {
    labelColor,
    valueColor
  } = selectedTheme.legend;
  const comparisonIndicator = comparisonMetric ? (0, import_jsx_runtime48.jsx)(ComparisonMetric, {
    ...comparisonMetric
  }) : null;
  const angle = direction === "horizontal" ? 90 : 180;
  const backgroundColor = getCSSBackgroundFromColor(color2, angle);
  return (0, import_jsx_runtime48.jsxs)("li", {
    className: classNames(styles21.Container, legendPosition.includes("bottom") ? styles21.ContaineBottomLabel : styles21.ContainerDefaultLabel),
    style: getColorVisionStylesForActiveIndex({
      activeIndex,
      index: index2
    }),
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index: index2
    }),
    children: [(0, import_jsx_runtime48.jsx)("div", {
      style: {
        background: backgroundColor
      },
      className: styles21.LabelColor
    }), (0, import_jsx_runtime48.jsxs)("div", {
      className: styles21.Label,
      children: [(0, import_jsx_runtime48.jsx)("div", {
        style: {
          color: labelColor
        },
        className: direction === "horizontal" ? styles21.FormattedHorizontalLabel : styles21.FormattedVerticalLabel,
        children: label
      }), (0, import_jsx_runtime48.jsxs)("div", {
        style: {
          color: valueColor
        },
        className: direction === "horizontal" ? styles21.ValueHorizontalContainer : styles21.ValueContainer,
        children: [(0, import_jsx_runtime48.jsx)("span", {
          className: styles21.Value,
          children: value
        }), comparisonIndicator]
      })]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/Chart.js
function Chart3({
  comparisonMetrics = [],
  data,
  labelFormatter,
  legendPosition = "top-left",
  seriesNameFormatter,
  direction = "horizontal",
  size: size2 = "small",
  showLegend = true,
  renderLegendContent
}) {
  const flattenedData = data.map(({
    data: data2
  }) => data2).flat();
  useColorVisionEvents();
  const selectedTheme = useTheme();
  const colors3 = useThemeSeriesColors2(data, selectedTheme);
  const containsNegatives = flattenedData.some(({
    value
  }) => value !== null && value < 0);
  const [activeIndex, setActiveIndex] = (0, import_react64.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveIndex(detail.index)
  });
  if (WARN_FOR_DEVELOPMENT && containsNegatives) {
    console.warn("This component is not built to handle negatives. Consider using a different component.");
  }
  if (WARN_FOR_DEVELOPMENT && flattenedData.length > 4) {
    throw new Error("This component displays a max of 4 data items. Please modify your data before passing it into this component.");
  }
  const slicedData = flattenedData.slice(0, 4);
  const totalValue = sum(slicedData, ({
    value
  }) => value);
  const xScale = linear2().range([0, 100]).domain([0, totalValue]);
  const isVertical = direction === "vertical";
  const bars = isVertical ? slicedData.reverse() : slicedData;
  const isEmptyValues = slicedData.every(({
    value
  }) => !value);
  const isRightLabel = legendPosition.includes("right");
  const isBottomLabel = legendPosition.includes("bottom");
  const isVerticalAndRightLabel = isVertical && isRightLabel;
  const isVerticalAndBottomLabel = isVertical && isBottomLabel;
  const isHorizontalAndRightLabel = !isVertical && isRightLabel;
  const isHorizontalAndBottomLabel = !isVertical && isBottomLabel;
  const legendMarkup = () => {
    if (!showLegend) {
      return null;
    }
    if (renderLegendContent) {
      const colorVisionInteractionMethods = {
        getColorVisionStyles: (index2) => getColorVisionStylesForActiveIndex({
          activeIndex,
          index: index2
        }),
        getColorVisionEventAttrs: (index2) => getColorVisionEventAttrs({
          type: COLOR_VISION_SINGLE_ITEM,
          index: index2
        })
      };
      return (0, import_jsx_runtime49.jsx)("div", {
        className: classNames(isVertical ? styles19.VerticalLabelContainer : styles19.HorizontalLabelContainer, (isVerticalAndBottomLabel || isHorizontalAndRightLabel) && styles19.LabelContainerEndJustify),
        children: renderLegendContent(colorVisionInteractionMethods)
      });
    }
    return (0, import_jsx_runtime49.jsx)("ul", {
      className: classNames(...isVertical ? [styles19.VerticalLabelContainer] : [styles19.HorizontalLabelContainer, styles19.HorizontalLabelContainerGrid], (isVerticalAndBottomLabel || isHorizontalAndRightLabel) && styles19.LabelContainerEndJustify),
      children: slicedData.map(({
        key,
        value
      }, index2) => {
        var _data$index$name$toSt, _data$index$name;
        if (value == null) {
          return null;
        }
        const comparisonMetric = comparisonMetrics.find(({
          dataIndex
        }) => index2 === dataIndex);
        const formattedValue = labelFormatter(value);
        const formattedName = seriesNameFormatter((_data$index$name$toSt = (_data$index$name = data[index2].name) === null || _data$index$name === void 0 ? void 0 : _data$index$name.toString()) !== null && _data$index$name$toSt !== void 0 ? _data$index$name$toSt : "");
        return (0, import_jsx_runtime49.jsx)(BarLabel, {
          activeIndex,
          index: index2,
          label: formattedName,
          value: formattedValue,
          color: colors3[index2],
          comparisonMetric,
          direction,
          legendPosition
        }, `${key}-${formattedValue}-${index2}`);
      })
    });
  };
  return (0, import_jsx_runtime49.jsxs)("div", {
    className: classNames(styles19.Container, isVertical ? styles19.VerticalContainer : styles19.HorizontalContainer, isVerticalAndRightLabel && styles19.VerticalContainerRightLabel, isHorizontalAndBottomLabel && styles19.HorizontalContainerBottomLabel),
    children: [legendMarkup(), (0, import_jsx_runtime49.jsx)("div", {
      className: classNames(styles19.BarContainer, isVertical ? styles19.VerticalBarContainer : styles19.HorizontalBarContainer),
      children: isEmptyValues ? (0, import_jsx_runtime49.jsx)(BarSegment, {
        activeIndex: -1,
        index: -1,
        direction,
        size: size2,
        scale: 100,
        color: selectedTheme.seriesColors.empty,
        roundedCorners: selectedTheme.bar.borderRadius
      }, "empty-bar") : bars.map(({
        value,
        key
      }, index2) => {
        if (value == null || value === 0) {
          return null;
        }
        const colorIndex = isVertical ? bars.length - 1 - index2 : index2;
        return (0, import_jsx_runtime49.jsx)(BarSegment, {
          activeIndex,
          index: colorIndex,
          direction,
          size: size2,
          scale: xScale(value),
          color: colors3[colorIndex],
          roundedCorners: selectedTheme.bar.borderRadius
        }, `${key}-${index2}`);
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleNormalizedChart/SimpleNormalizedChart.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
function SimpleNormalizedChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    comparisonMetrics = [],
    data,
    labelFormatter = (value) => `${value}`,
    legendPosition = "top-left",
    seriesNameFormatter = (value) => `${value}`,
    direction = "horizontal",
    size: size2 = "small",
    showLegend = true,
    theme = defaultTheme,
    id,
    isAnimated: isAnimated2,
    state,
    errorText,
    renderLegendContent,
    onError
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  return (0, import_jsx_runtime50.jsx)(ChartContainer, {
    data,
    theme,
    id,
    isAnimated: isAnimated2,
    onError,
    children: state !== ChartState.Success ? (0, import_jsx_runtime50.jsx)(ChartSkeleton, {
      type: "SimpleNormalized",
      state,
      errorText,
      theme,
      showLegend: showLegend && !renderLegendContent,
      size: size2
    }) : (0, import_jsx_runtime50.jsx)(Chart3, {
      comparisonMetrics,
      data,
      labelFormatter,
      legendPosition,
      seriesNameFormatter,
      showLegend,
      direction,
      size: size2,
      renderLegendContent
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/LineChart.js
var import_react99 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getOpacityByLength.js
function getOpacityByDataLength(dataLength) {
  if (dataLength <= 4) {
    return 0.25;
  }
  if (dataLength <= 7) {
    return 0.1;
  }
  return 0;
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getLineChartDataWithDefaults.js
function getLineChartDataWithDefaults(data, colors3) {
  const areaOpacity = getOpacityByDataLength(data.length);
  const dataWithDefaults = data.map((series, index2) => {
    var _series$color, _series$styleOverride, _series$styleOverride2;
    const seriesColor = colors3[index2];
    const areaColor = isGradientType(seriesColor) ? getAverageColor(seriesColor[0].color, seriesColor[seriesColor.length - 1].color) : seriesColor;
    return {
      ...series,
      areaColor: series.isComparison ? void 0 : changeColorOpacity(areaColor, areaOpacity),
      // We want to override the color, not set a default
      // so it has to come last
      color: series.isComparison ? colors3[index2] : (_series$color = series.color) !== null && _series$color !== void 0 ? _series$color : colors3[index2],
      strokeDasharray: getStrokeDasharray(series),
      width: (_series$styleOverride = series.styleOverride) === null || _series$styleOverride === void 0 ? void 0 : (_series$styleOverride2 = _series$styleOverride.line) === null || _series$styleOverride2 === void 0 ? void 0 : _series$styleOverride2.width
    };
  });
  return dataWithDefaults;
}
function getStrokeDasharray(series) {
  var _series$styleOverride3, _series$styleOverride4;
  if (((_series$styleOverride3 = series.styleOverride) === null || _series$styleOverride3 === void 0 ? void 0 : (_series$styleOverride4 = _series$styleOverride3.line) === null || _series$styleOverride4 === void 0 ? void 0 : _series$styleOverride4.strokeDasharray) != null) {
    return series.styleOverride.line.strokeDasharray;
  }
  return series.isComparison ? STROKE_DOT_ARRAY_WIDTH : "none";
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/Chart.js
var import_react98 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useIndexForLabels.js
var import_react65 = __toESM(require_react());
function useIndexForLabels(data) {
  return (0, import_react65.useMemo)(() => {
    return data.reduce((longestIndex, currentSeries, index2, array2) => {
      const previousSeries = array2[index2 - 1];
      if (previousSeries && previousSeries.data.length < currentSeries.data.length) {
        return index2;
      }
      return longestIndex;
    }, 0);
  }, [data]);
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useFormattedLabels.js
var import_react66 = __toESM(require_react());
function useFormattedLabels({
  data,
  labelFormatter
}) {
  return (0, import_react66.useMemo)(() => {
    const formattedLabels = [];
    const unformattedLabels = [];
    if (data == null || data.length === 0) {
      return {
        formattedLabels,
        unformattedLabels
      };
    }
    data.forEach((series) => {
      if (series == null || series.data == null) {
        return;
      }
      series.data.forEach(({
        key
      }, index2) => {
        var _labelFormatter;
        formattedLabels[index2] = (_labelFormatter = labelFormatter === null || labelFormatter === void 0 ? void 0 : labelFormatter(`${key}`)) !== null && _labelFormatter !== void 0 ? _labelFormatter : `${key}`;
        unformattedLabels[index2] = `${key}`;
      });
    });
    return {
      formattedLabels,
      unformattedLabels
    };
  }, [data, labelFormatter]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartElements/ChartElements.scss.js
var styles23 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "ChartContainer": "_ChartContainer_11yon_144",
  "SVG": "_SVG_11yon_154"
};

// node_modules/@shopify/polaris-viz/build/esm/components/ChartElements/ChartDiv.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
function ChartDiv({
  children,
  height,
  width,
  style: style6 = {}
}) {
  return (0, import_jsx_runtime51.jsx)("div", {
    className: styles23.ChartContainer,
    style: {
      height,
      width,
      ...style6
    },
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartElements/ChartSVG.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
function ChartSVG({
  width,
  setRef,
  role = "list",
  height,
  emptyStateText,
  emptyState = false,
  children
}) {
  return (0, import_jsx_runtime52.jsx)("svg", {
    viewBox: `0 0 ${width} ${height}`,
    xmlns: XMLNS,
    width,
    height,
    className: styles23.SVG,
    role: emptyState ? "img" : role,
    "aria-label": emptyState ? emptyStateText : void 0,
    ref: setRef,
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ChartElements/index.js
var ChartElements = {
  Div: ChartDiv,
  Svg: ChartSVG
};

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/hooks/useLineChartTooltipContent.js
var import_react67 = __toESM(require_react());
function useLineChartTooltipContent({
  data,
  hiddenIndexes = [],
  indexForLabels,
  renderTooltipContent,
  seriesNameFormatter
}) {
  const {
    theme
  } = useChartContext();
  return (0, import_react67.useCallback)((activeIndex) => {
    if (activeIndex === -1) {
      return null;
    }
    const tooltipData = [{
      shape: "Line",
      data: []
    }];
    const key = data[indexForLabels].data[activeIndex] ? data[indexForLabels].data[activeIndex].key : "";
    data.forEach(({
      name: name2,
      data: seriesData,
      color: color2,
      isComparison
    }, index2) => {
      if (!seriesData[activeIndex]) {
        return;
      }
      const {
        value
      } = seriesData[activeIndex];
      tooltipData[0].data.push({
        key: `${seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : "")}`,
        value,
        color: color2,
        isComparison,
        isHidden: hiddenIndexes.includes(index2)
      });
    });
    return renderTooltipContent({
      data: tooltipData,
      activeIndex,
      title: `${key}`,
      dataSeries: data,
      theme
    });
  }, [data, renderTooltipContent, theme, hiddenIndexes, indexForLabels, seriesNameFormatter]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/Chart.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/hooks/useLegend.js
var import_react68 = __toESM(require_react());
function getAlteredDimensions(dimensions, legendsHeight, legendsWidth, direction) {
  const {
    width,
    height
  } = dimensions !== null && dimensions !== void 0 ? dimensions : {
    width: 0,
    height: 0
  };
  const isHorizontal = direction === "horizontal";
  return {
    height: isHorizontal ? height - legendsHeight - LEGENDS_TOP_MARGIN : height,
    width: !isHorizontal ? width - legendsWidth : width
  };
}
function useLegend({
  colors: colors3 = [],
  data,
  dimensions = {
    height: 0,
    width: 0
  },
  showLegend,
  direction = "horizontal",
  maxWidth = 0,
  seriesNameFormatter
}) {
  const defaultHeight = showLegend ? DEFAULT_LEGEND_HEIGHT : 0;
  const [legendDimensions, setLegendDimensions] = (0, import_react68.useState)({
    height: defaultHeight,
    width: maxWidth
  });
  const legend = (0, import_react68.useMemo)(() => {
    if (showLegend === false) {
      return [];
    }
    const legends = data.map(({
      series,
      shape
    }) => {
      return series.map(({
        name: name2,
        color: color2,
        isComparison,
        data: data2,
        metadata
      }) => {
        return {
          name: seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : ""),
          ...data2 && {
            value: data2.reduce((totalSum, current) => totalSum + (current.value || 0), 0).toString()
          },
          ...metadata && {
            trend: metadata.trend
          },
          color: color2,
          shape,
          isComparison
        };
      });
    });
    return legends.flat().map(({
      color: color2,
      ...rest
    }, index2) => {
      return {
        ...rest,
        color: color2 !== null && color2 !== void 0 ? color2 : colors3[index2]
      };
    });
  }, [colors3, data, seriesNameFormatter, showLegend]);
  const {
    height,
    width
  } = (0, import_react68.useMemo)(() => {
    if (showLegend === false) {
      return dimensions;
    }
    return getAlteredDimensions(dimensions, legendDimensions.height, legendDimensions.width, direction);
  }, [showLegend, dimensions, legendDimensions.height, legendDimensions.width, direction]);
  const hasValidDimensions2 = legendDimensions.height !== defaultHeight || legendDimensions.width !== maxWidth;
  return {
    legend,
    height,
    width,
    setLegendDimensions,
    isLegendMounted: showLegend === false || hasValidDimensions2
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/utilities/yAxisMinMax.js
function yAxisMinMax(series) {
  if (series.length === 0) {
    return {
      minY: EMPTY_STATE_CHART_MIN,
      maxY: EMPTY_STATE_CHART_MAX
    };
  }
  let minY = Infinity;
  let maxY = -Infinity;
  series.forEach(({
    data
  }) => {
    data.forEach(({
      value
    }) => {
      if (value == null) {
        return;
      }
      minY = Math.min(minY, value);
      maxY = Math.max(maxY, value);
    });
  });
  if (minY === Infinity || maxY === -Infinity) {
    return {
      minY: Math.min(minY, EMPTY_STATE_CHART_MIN),
      maxY: Math.max(maxY, EMPTY_STATE_CHART_MAX)
    };
  }
  return {
    minY,
    maxY
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/hooks/useFormatData.js
var import_react69 = __toESM(require_react());
function useFormatData(data) {
  const longestSeriesIndex = (0, import_react69.useMemo)(() => data.reduce((maxIndex2, currentSeries, currentIndex) => {
    return data[maxIndex2].data.length < currentSeries.data.length ? currentIndex : maxIndex2;
  }, 0), [data]);
  const longestSeriesLength = data[longestSeriesIndex] ? data[longestSeriesIndex].data.length - 1 : 0;
  return {
    longestSeriesLength,
    longestSeriesIndex
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useLinearLabelsAndDimensions.js
var import_react72 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useLinearXScale.js
var import_react70 = __toESM(require_react());
function useLinearXScale({
  drawableWidth,
  longestSeriesLength
}) {
  const xScale = (0, import_react70.useMemo)(() => {
    return linear2().range([0, drawableWidth]).domain([0, longestSeriesLength]);
  }, [drawableWidth, longestSeriesLength]);
  return {
    xScale
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useReducedLabelIndexes.js
var import_react71 = __toESM(require_react());
function useReducedLabelIndexes({
  dataLength,
  skipEveryNthLabel = -1
}) {
  const visibleIndexesForWideCharts = (0, import_react71.useMemo)(() => {
    if (dataLength === 0 || skipEveryNthLabel === 1) {
      return [];
    }
    return Array(dataLength).fill(null).map((_2, index2) => index2).filter((_2, index2) => index2 % skipEveryNthLabel === 0);
  }, [dataLength, skipEveryNthLabel]);
  return visibleIndexesForWideCharts;
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useLinearLabelsAndDimensions.js
var MAX_LINEAR_LABEL_WIDTH = 90;
function useLinearLabelsAndDimensions({
  data,
  drawableWidth: initialDrawableWidth,
  hideXAxis,
  labels,
  longestSeriesLength
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const longestSeriesLastIndex = (0, import_react72.useMemo)(() => data.reduce((max3, currentSeries) => Math.max(max3, currentSeries.data.length), 0), [data]);
  const longestLabelWidth = (0, import_react72.useMemo)(() => {
    const longestLabelWidth2 = labels.reduce((prev, cur) => {
      const width = estimateStringWidth(cur, characterWidths2);
      if (width > prev) {
        return width;
      }
      return prev;
    }, HORIZONTAL_LABEL_MIN_WIDTH) + LINEAR_LABELS_INNER_PADDING;
    return clamp({
      amount: longestLabelWidth2,
      min: 0,
      max: MAX_LINEAR_LABEL_WIDTH
    });
  }, [labels, characterWidths2]);
  const numberOfLabelsThatFit = Math.floor(initialDrawableWidth / longestLabelWidth);
  const skipEveryNthLabel = Math.ceil(labels.length / numberOfLabelsThatFit);
  const reducedLabelIndexes = useReducedLabelIndexes({
    dataLength: longestSeriesLastIndex,
    skipEveryNthLabel
  });
  const visibleLabelsCount = reducedLabelIndexes.length > 0 ? reducedLabelIndexes.length : labels.length;
  const labelWidth = (0, import_react72.useMemo)(() => {
    if (visibleLabelsCount === 0 || hideXAxis) {
      return 0;
    }
    return clamp({
      amount: Math.min(initialDrawableWidth / visibleLabelsCount - LINEAR_LABELS_INNER_PADDING, longestLabelWidth),
      min: 0,
      max: initialDrawableWidth
    });
  }, [initialDrawableWidth, visibleLabelsCount, hideXAxis, longestLabelWidth]);
  const drawableWidth = initialDrawableWidth;
  const {
    xScale
  } = useLinearXScale({
    drawableWidth,
    longestSeriesLength
  });
  return {
    labels,
    xScale,
    xAxisDetails: {
      labelWidth,
      reducedLabelIndexes
    }
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/utilities/checkAvailableAnnotations.js
function checkAvailableAnnotations(annotationsLookupTable) {
  const values = Object.values(annotationsLookupTable);
  return {
    hasXAxisAnnotations: values.some(({
      axis
    }) => axis === "x"),
    hasYAxisAnnotations: values.some(({
      axis
    }) => axis.includes("y"))
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/XAxis/XAxis.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/utilities/shouldSkipLabel.js
function shouldSkipLabel(index2, reducedLabelIndexes) {
  if (reducedLabelIndexes == null || reducedLabelIndexes.length === 0) {
    return false;
  }
  if (!reducedLabelIndexes.includes(index2)) {
    return true;
  }
  return false;
}

// node_modules/@shopify/polaris-viz/build/esm/components/XAxis/XAxis.js
function XAxis({
  allowLineWrap,
  ariaHidden = false,
  isLinearChart = false,
  labels,
  labelWidth,
  onHeightChange,
  reducedLabelIndexes,
  x: x3,
  xScale,
  y: y3
}) {
  const {
    lines
  } = useLabels({
    labels,
    onHeightChange,
    targetWidth: labelWidth,
    allowLineWrap
  });
  return (0, import_jsx_runtime53.jsx)("g", {
    "aria-hidden": true,
    children: lines.map((line, index2) => {
      const skipLastLabel = isLinearChart && labels.length > 1 && index2 === labels.length - 1;
      if (shouldSkipLabel(index2, reducedLabelIndexes) || skipLastLabel) {
        return null;
      }
      const xPosition = getXPosition(index2, xScale);
      return (0, import_jsx_runtime53.jsx)("g", {
        transform: `translate(${x3 + (xPosition !== null && xPosition !== void 0 ? xPosition : 0)},${y3})`,
        "aria-hidden": ariaHidden,
        children: (0, import_jsx_runtime53.jsx)(TextLine, {
          line,
          index: index2
        })
      }, index2);
    })
  });
}
function getXPosition(index2, xScale) {
  if (xScale instanceof linear2) {
    return xScale(index2);
  }
  return xScale(`${index2}`);
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalGridLines/HorizontalGridLines.js
var import_react73 = __toESM(require_react());
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var HorizontalGridLines = (0, import_react73.memo)(function HorizontalGridLines2({
  ticks: ticks2,
  transform,
  width
}) {
  const selectedTheme = useTheme();
  return (0, import_jsx_runtime54.jsx)(import_react73.Fragment, {
    children: ticks2.map(({
      yOffset
    }, index2) => (0, import_jsx_runtime54.jsx)("line", {
      x2: width,
      stroke: selectedTheme.grid.color,
      transform: `translate(${transform.x},${transform.y + yOffset})`
    }, index2))
  });
});

// node_modules/@shopify/polaris-viz/build/esm/components/YAxis/YAxis.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Labels/SingleTextLine.js
var import_react74 = __toESM(require_react());
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
function SingleTextLine({
  ariaHidden = false,
  color: color2,
  dominantBaseline = "hanging",
  targetWidth,
  text,
  textAnchor = "center",
  y: y3,
  x: x3
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const truncated = endLineTruncate({
    label: text,
    targetWidth,
    targetHeight: LINE_HEIGHT,
    characterWidths: characterWidths2
  });
  return (0, import_jsx_runtime55.jsxs)(import_react74.Fragment, {
    children: [(0, import_jsx_runtime55.jsx)("text", {
      "aria-hidden": ariaHidden,
      textAnchor,
      dominantBaseline,
      height: LINE_HEIGHT,
      width: targetWidth,
      fill: color2,
      fontSize: FONT_SIZE,
      fontFamily: FONT_FAMILY,
      y: y3,
      x: x3,
      children: truncated
    }), (0, import_jsx_runtime55.jsx)("title", {
      children: text
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/YAxis/YAxis.js
var PADDING_SIZE = 2;
function YAxis({
  ticks: ticks2,
  width,
  textAlign,
  ariaHidden = false,
  x: x3,
  y: y3
}) {
  const selectedTheme = useTheme();
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  return (0, import_jsx_runtime56.jsx)("g", {
    transform: `translate(${x3},${y3})`,
    "aria-hidden": "true",
    children: ticks2.map(({
      value,
      formattedValue,
      yOffset
    }) => {
      const stringWidth = estimateStringWidth(formattedValue, characterWidths2);
      const clampedWidth = clamp({
        amount: width,
        min: width + PADDING_SIZE,
        max: stringWidth
      });
      const x4 = textAlign === "right" ? width - clampedWidth : 0;
      return (0, import_jsx_runtime56.jsxs)("g", {
        transform: `translate(${x4},${yOffset})`,
        children: [(0, import_jsx_runtime56.jsx)("rect", {
          height: LINE_HEIGHT,
          width: clampedWidth + PADDING_SIZE,
          fill: selectedTheme.chartContainer.backgroundColor,
          y: -LINE_HEIGHT / 2,
          x: -PADDING_SIZE
        }), (0, import_jsx_runtime56.jsx)(SingleTextLine, {
          x: 0,
          y: 0,
          ariaHidden,
          color: selectedTheme.yAxis.labelColor,
          targetWidth: clampedWidth,
          text: formattedValue,
          textAnchor: "left",
          dominantBaseline: "middle"
        })]
      }, value);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VisuallyHiddenRows/VisuallyHiddenRows.js
var import_react75 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/VisuallyHiddenRows/VisuallyHiddenRows.scss.js
var styles24 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "VisuallyHidden": "_VisuallyHidden_at2zh_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/VisuallyHiddenRows/VisuallyHiddenRows.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var VisuallyHiddenRows = (0, import_react75.memo)(function Rows({
  data,
  formatYAxisLabel,
  xAxisLabels
}) {
  return (0, import_jsx_runtime57.jsxs)(import_react75.Fragment, {
    children: [(0, import_jsx_runtime57.jsxs)("g", {
      role: "row",
      children: [(0, import_jsx_runtime57.jsx)("text", {
        role: "rowheader"
      }), xAxisLabels.map((xAxisLabel, index2) => {
        return (0, import_jsx_runtime57.jsx)("text", {
          className: styles24.VisuallyHidden,
          role: "columnheader",
          children: xAxisLabel
        }, `a11y-${xAxisLabel}-${index2}`);
      })]
    }), data.map(({
      name: name2,
      data: data2
    }, index2) => {
      return (0, import_jsx_runtime57.jsxs)("g", {
        role: "row",
        children: [(0, import_jsx_runtime57.jsx)("text", {
          role: "rowheader",
          className: styles24.VisuallyHidden,
          children: name2
        }), data2.map(({
          value,
          key
        }, index3) => {
          return (0, import_jsx_runtime57.jsx)("text", {
            role: "cell",
            className: styles24.VisuallyHidden,
            children: value == null ? "" : formatYAxisLabel(value)
          }, `cell-${name2}-${value}-${key}-${index3}`);
        })]
      }, `row-${name2}-${index2}`);
    })]
  });
});

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/components/PointsAndCrosshair/PointsAndCrosshair.js
var import_react79 = __toESM(require_react());
var import_jsx_runtime61 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useLinearChartAnimations.js
var import_react76 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getPathLength.js
function getPathLength(element) {
  if (element == null) {
    return 0;
  }
  return element.getTotalLength();
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getPointAtLength.js
function getPointAtLength(element, length) {
  if (element == null || length == null) {
    return {
      x: 0,
      y: 0
    };
  }
  return element.getPointAtLength(length);
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useLinearChartAnimations.js
var SPRING_CONFIG = {
  friction: 5,
  clamp: true,
  mass: 1,
  tension: 190
};
function useLinearChartAnimations({
  activeIndex,
  lineGenerator,
  data
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const currentIndex = activeIndex == null ? 0 : activeIndex;
  const immediate = !shouldAnimate || data.length === 0 || activeIndex == null;
  const createOffScreenPath = (0, import_react76.useCallback)((data2) => {
    const offscreenPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
    offscreenPath.setAttribute("d", lineGenerator(data2) || "");
    return offscreenPath;
  }, [lineGenerator]);
  const totalPaths = (0, import_react76.useMemo)(() => {
    if (immediate)
      return null;
    return data.map(({
      data: data2
    }) => {
      const offscreenPath = createOffScreenPath(data2);
      return {
        element: offscreenPath,
        length: getPathLength(offscreenPath)
      };
    });
  }, [immediate, createOffScreenPath, data]);
  const subPaths = (0, import_react76.useMemo)(() => {
    if (immediate)
      return null;
    return data.map(({
      data: data2
    }) => {
      const path2 = createOffScreenPath(data2.slice(0, currentIndex + 1));
      return {
        element: path2,
        length: getPathLength(path2)
      };
    });
  }, [immediate, createOffScreenPath, currentIndex, data]);
  const getPercentage = (0, import_react76.useCallback)((subpathLength, totalLength) => {
    if (totalLength === 0) {
      return 0;
    }
    return subpathLength / totalLength * 100;
  }, []);
  const percentages = (0, import_react76.useMemo)(() => {
    if (immediate || !totalPaths || !subPaths)
      return null;
    return data.map((_2, index2) => {
      const totalLength = totalPaths[index2].length;
      const subPath = subPaths[index2];
      return getPercentage(subPath.length, totalLength);
    });
  }, [immediate, totalPaths, subPaths, data, getPercentage]);
  const getCoordinatesFromPercentage = (0, import_react76.useCallback)((percent, path2, totalLength) => {
    if (path2 == null || totalLength == null || totalLength === 0) {
      return {
        x: 0,
        y: 0
      };
    }
    const length = percent * totalLength / 100;
    return getPointAtLength(path2, length);
  }, []);
  const animatedPercentages = useSprings(percentages == null ? 0 : percentages.length, percentages == null ? [] : percentages.map((percentage) => ({
    percentage,
    config: SPRING_CONFIG,
    default: {
      immediate
    }
  })));
  return {
    animatedCoordinates: immediate || totalPaths == null ? null : animatedPercentages.map(({
      percentage
    }, index2) => {
      return percentage.to((percent) => {
        const totalLength = totalPaths[index2].length;
        const path2 = totalPaths[index2].element;
        return getCoordinatesFromPercentage(percent, path2, totalLength);
      });
    })
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Crosshair/Crosshair.scss.js
var style = {
  "Crosshair": "_Crosshair_1t1jt_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Crosshair/Crosshair.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());
function Crosshair({
  x: x3,
  height,
  opacity = 1,
  theme,
  id
}) {
  const selectedTheme = useTheme(theme);
  return (0, import_jsx_runtime58.jsx)(animated.rect, {
    className: style.Crosshair,
    x: x3,
    width: selectedTheme.crossHair.width,
    height,
    stroke: "none",
    id,
    style: {
      opacity,
      fill: selectedTheme.crossHair.color
    }
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/components/Points/Points.js
var import_react78 = __toESM(require_react());
var import_jsx_runtime60 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Point/Point.js
var import_react77 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Point/Point.scss.js
var styles25 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Point": "_Point_gkfp3_144",
  "VisuallyHidden": "_VisuallyHidden_gkfp3_152"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Point/Point.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var DEFAULT_RADIUS = 5;
var Point = (0, import_react77.memo)(function Point2({
  dataType,
  cx,
  cy,
  active,
  color: color2,
  onFocus,
  index: index2,
  ariaLabelledby,
  tabIndex = -1,
  isAnimated: isAnimated2,
  ariaHidden = false,
  visuallyHidden = false
}) {
  const selectedTheme = useTheme();
  const handleFocus = () => {
    if (onFocus != null) {
      return onFocus({
        index: index2,
        x: typeof cx === "number" ? cx : cx.get(),
        y: typeof cy === "number" ? cy : cy.get()
      });
    }
  };
  const radius = active ? DEFAULT_RADIUS : 0;
  const {
    animatedRadius
  } = useSpring({
    animatedRadius: radius,
    from: {
      animatedRadius: 0
    },
    config: {
      duration: BASE_ANIMATION_DURATION
    },
    default: {
      immediate: !isAnimated2
    }
  });
  return (0, import_jsx_runtime59.jsx)(animated.circle, {
    "data-type": dataType,
    "data-index": index2,
    role: ariaLabelledby == null ? "" : "image",
    "aria-labelledby": ariaLabelledby,
    tabIndex,
    cx,
    cy,
    r: isAnimated2 ? animatedRadius : radius,
    fill: color2,
    stroke: selectedTheme.line.pointStroke,
    strokeWidth: 2,
    onFocus: handleFocus,
    className: classNames(styles25.Point, visuallyHidden ? styles25.VisuallyHidden : null),
    "aria-hidden": ariaHidden
  });
});

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/components/Points/Points.js
function Points({
  activeIndex,
  animatedCoordinates,
  data,
  getXPosition: getXPosition3,
  gradientId,
  hiddenIndexes = [],
  longestSeriesIndex,
  tooltipId,
  xScale,
  yScale
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const [activeLineIndex, setActiveLineIndex] = (0, import_react78.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveLineIndex(detail.index);
    }
  });
  return (0, import_jsx_runtime60.jsx)(import_react78.Fragment, {
    children: data.map((singleSeries, seriesIndex) => {
      var _singleSeries$metadat, _singleSeries$metadat2, _singleSeries$metadat3, _singleData;
      if ((singleSeries === null || singleSeries === void 0 ? void 0 : (_singleSeries$metadat = singleSeries.metadata) === null || _singleSeries$metadat === void 0 ? void 0 : _singleSeries$metadat.isVisuallyHidden) === true) {
        return null;
      }
      const index2 = (_singleSeries$metadat2 = (_singleSeries$metadat3 = singleSeries.metadata) === null || _singleSeries$metadat3 === void 0 ? void 0 : _singleSeries$metadat3.relatedIndex) !== null && _singleSeries$metadat2 !== void 0 ? _singleSeries$metadat2 : seriesIndex;
      if (hiddenIndexes.includes(index2)) {
        return null;
      }
      const {
        data: singleData,
        name: name2,
        color: color2
      } = singleSeries;
      const isLongestLine = index2 === longestSeriesIndex;
      const pointGradientId = `${gradientId}-point-${index2}`;
      const animatedYPosition = animatedCoordinates == null || animatedCoordinates[index2] == null ? 0 : animatedCoordinates[index2].to((coord) => coord.y);
      const hasValidData = activeIndex == null ? false : ((_singleData = singleData[activeIndex !== null && activeIndex !== void 0 ? activeIndex : -1]) === null || _singleData === void 0 ? void 0 : _singleData.value) != null;
      const isLineActive = activeLineIndex !== -1 && activeLineIndex !== index2;
      const isPointVisuallyHidden = !hasValidData || animatedCoordinates == null || isLineActive;
      const isPointActive = hasValidData && activeIndex != null;
      const pointColor = isGradientType(color2) ? `url(#${pointGradientId})` : changeColorOpacity(color2);
      return (0, import_jsx_runtime60.jsxs)(import_react78.Fragment, {
        children: [isGradientType(color2) ? (0, import_jsx_runtime60.jsx)("defs", {
          children: (0, import_jsx_runtime60.jsx)(LinearGradientWithStops, {
            id: pointGradientId,
            gradient: changeGradientOpacity(color2),
            gradientUnits: "userSpaceOnUse",
            y1: "100%",
            y2: "0%"
          })
        }) : null, shouldAnimate ? (0, import_jsx_runtime60.jsx)(Point, {
          color: pointColor,
          cx: getXPosition3({
            isCrosshair: false
          }),
          cy: animatedYPosition,
          active: isPointActive,
          index: index2,
          tabIndex: -1,
          isAnimated: shouldAnimate,
          visuallyHidden: isPointVisuallyHidden,
          ariaHidden: true
        }) : null, singleData.map(({
          value
        }, dataIndex) => {
          if (value == null) {
            return null;
          }
          return (0, import_jsx_runtime60.jsx)("g", {
            style: getColorVisionStylesForActiveIndex({
              activeIndex: activeLineIndex,
              index: index2,
              fadedOpacity: 0
            }),
            children: (0, import_jsx_runtime60.jsx)(Point, {
              dataType: DataType.Point,
              color: pointColor,
              cx: xScale(dataIndex),
              cy: yScale(value),
              active: activeIndex === dataIndex,
              index: dataIndex,
              tabIndex: isLongestLine ? 0 : -1,
              ariaLabelledby: tooltipId,
              isAnimated: false,
              ariaHidden: false,
              visuallyHidden: shouldAnimate
            })
          }, `${name2}-${index2}-${dataIndex}`);
        })]
      }, `${name2}-${index2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/components/PointsAndCrosshair/PointsAndCrosshair.js
function PointsAndCrosshair({
  activeIndex,
  data,
  drawableHeight,
  emptyState,
  hiddenIndexes = [],
  longestSeriesIndex,
  theme,
  tooltipId,
  xScale,
  yScale
}) {
  const selectedTheme = useTheme(theme);
  const {
    shouldAnimate,
    isPerformanceImpacted
  } = useChartContext();
  const gradientId = (0, import_react79.useRef)(uniqueId("lineChartGradient"));
  const lineGenerator = (0, import_react79.useMemo)(() => {
    const generator = line_default().x((_2, index2) => xScale == null ? 0 : xScale(index2)).y(({
      value
    }) => yScale(value !== null && value !== void 0 ? value : 0));
    if (selectedTheme.line.hasSpline) {
      generator.curve(curveStepRounded);
    }
    return generator;
  }, [selectedTheme.line.hasSpline, xScale, yScale]);
  const {
    animatedCoordinates
  } = useLinearChartAnimations({
    data,
    lineGenerator,
    activeIndex
  });
  const getXPosition3 = ({
    isCrosshair
  } = {
    isCrosshair: false
  }) => {
    if (xScale == null) {
      return 0;
    }
    const offset = isCrosshair ? selectedTheme.crossHair.width / 2 : 0;
    if (animatedCoordinates != null && animatedCoordinates[longestSeriesIndex] != null && shouldAnimate) {
      return animatedCoordinates[longestSeriesIndex].to((coord) => coord.x - offset);
    }
    return xScale(activeIndex == null ? 0 : activeIndex) - offset;
  };
  return (0, import_jsx_runtime61.jsxs)(import_react79.Fragment, {
    children: [emptyState ? null : (0, import_jsx_runtime61.jsx)(Crosshair, {
      height: drawableHeight,
      id: `${tooltipId}-${CROSSHAIR_ID}`,
      opacity: activeIndex == null ? 0 : 1,
      theme,
      x: getXPosition3({
        isCrosshair: true
      })
    }), isPerformanceImpacted ? null : (0, import_jsx_runtime61.jsx)(Points, {
      activeIndex: emptyState ? null : activeIndex,
      animatedCoordinates,
      data,
      getXPosition: getXPosition3,
      gradientId: gradientId.current,
      hiddenIndexes,
      longestSeriesIndex,
      tooltipId,
      xScale,
      yScale
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/Annotations.js
var import_react86 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useSVGBlurEvent.js
var import_react80 = __toESM(require_react());
function useSVGBlurEvent({
  checkFn = () => true,
  onBlur,
  ref
}) {
  const checkFnCallback = useCallbackRef(checkFn);
  (0, import_react80.useEffect)(() => {
    const handleBlur = (event) => {
      const currentTarget = event.currentTarget;
      requestAnimationFrame(() => {
        if (!currentTarget.contains(document.activeElement) && checkFnCallback(document.activeElement)) {
          onBlur(event);
        }
      });
    };
    ref === null || ref === void 0 ? void 0 : ref.addEventListener("focusout", handleBlur);
    return () => {
      ref === null || ref === void 0 ? void 0 : ref.removeEventListener("focusout", handleBlur);
    };
  }, [checkFnCallback, onBlur, ref]);
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/shouldHideAnnotation.js
function shouldHideAnnotation({
  row,
  isShowingAllAnnotations,
  rowCount
}) {
  if (isShowingAllAnnotations) {
    return false;
  }
  if (rowCount === COLLAPSED_ANNOTATIONS_COUNT) {
    return false;
  }
  if (rowCount > COLLAPSED_ANNOTATIONS_COUNT && row > COLLAPSED_ANNOTATIONS_COUNT - 1) {
    return true;
  }
  return false;
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/isShowMoreAnnotationsButtonVisible.js
function isShowMoreAnnotationsButtonVisible(rowCount) {
  return shouldHideAnnotation({
    row: 3,
    isShowingAllAnnotations: false,
    rowCount
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/hooks/useAnnotationPositions.js
var import_react82 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/constants.js
var PILL_HEIGHT = 20;
var PILL_PADDING = 10;
var PILL_ROW_GAP = 8;
var PILL_X_MIN = -10;
var SHOW_MORE_BUTTON_OFFSET = 27;
var ANNOTATION_Y_AXIS_LABEL_HEIGHT = 11.5;

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/utilities/checkForHorizontalSpace.js
function checkForHorizontalSpace({
  positions,
  totalRows
}) {
  let checkAgain = false;
  [...Array.from({
    length: totalRows
  })].forEach((_2, rowIndex) => {
    const currentRow = rowIndex + 1;
    positions.filter(({
      row
    }) => row === currentRow).forEach((current, index2, filtered) => {
      const nextRow = currentRow + 1;
      const next = filtered[index2 + 1];
      if (next == null) {
        return;
      }
      const left = current.x;
      const right = current.x + current.width;
      if (current.row === next.row && next.x > left && next.x < right) {
        next.row = nextRow;
        checkAgain = true;
      }
    });
  });
  if (checkAgain) {
    checkForHorizontalSpace({
      positions,
      totalRows: totalRows + 1
    });
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/hooks/useShowMoreAnnotationsButton.js
var import_react81 = __toESM(require_react());
function useShowMoreAnnotationsButton({
  isShowingAllAnnotations,
  positions
}) {
  const rowCount = (0, import_react81.useMemo)(() => {
    return Math.max(...positions.map(({
      row
    }) => row)) + 1;
  }, [positions]);
  const showMoreButtonOffset = (0, import_react81.useMemo)(() => {
    if (!isShowingAllAnnotations) {
      return 0;
    }
    return isShowMoreAnnotationsButtonVisible(rowCount) ? SHOW_MORE_BUTTON_OFFSET : 0;
  }, [rowCount, isShowingAllAnnotations]);
  const totalRowHeight = (0, import_react81.useMemo)(() => {
    return positions.reduce((total, {
      y: y3,
      row
    }) => {
      if (!isShowingAllAnnotations && row > COLLAPSED_ANNOTATIONS_COUNT) {
        return total;
      }
      if (y3 > total) {
        return y3;
      }
      return total;
    }, 0) + PILL_HEIGHT + PILL_ROW_GAP + showMoreButtonOffset;
  }, [isShowingAllAnnotations, showMoreButtonOffset, positions]);
  return {
    rowCount,
    totalRowHeight
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/hooks/useAnnotationPositions.js
function useAnnotationPositions({
  annotations,
  axisLabelWidth,
  dataIndexes,
  drawableWidth,
  isShowingAllAnnotations,
  onHeightChange,
  xScale
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const textWidths = (0, import_react82.useMemo)(() => {
    return annotations.map((annotation) => {
      return estimateStringWidth(annotation.label, characterWidths2);
    });
  }, [annotations, characterWidths2]);
  const {
    positions,
    hiddenAnnotationsCount
  } = (0, import_react82.useMemo)(() => {
    let positions2 = annotations.map((annotation, dataIndex) => {
      const xPosition = getValueFromXScale(dataIndexes[annotation.startKey], xScale);
      const textWidth = textWidths[dataIndex];
      const width = clamp({
        amount: textWidth + PILL_PADDING * 2,
        min: textWidth + PILL_PADDING * 2,
        max: drawableWidth
      });
      const rawX = clamp({
        amount: xPosition,
        min: xPosition,
        max: xPosition + axisLabelWidth
      });
      let x3 = clamp({
        amount: rawX - width / 2,
        min: PILL_X_MIN,
        max: Infinity
      });
      const right = x3 + width;
      if (right > drawableWidth) {
        x3 -= right - drawableWidth;
      }
      return {
        index: dataIndex,
        line: {
          x: rawX,
          y: 0
        },
        row: 1,
        width,
        x: x3,
        y: 0
      };
    });
    positions2 = positions2.sort((one2, two) => one2.x - two.x);
    checkForHorizontalSpace({
      positions: positions2,
      totalRows: 1
    });
    positions2.forEach((current) => {
      const row = current.row - 1;
      current.y = row * PILL_HEIGHT + row * PILL_ROW_GAP;
    });
    const hiddenAnnotationsCount2 = positions2.filter(({
      row
    }) => row >= COLLAPSED_ANNOTATIONS_COUNT).length;
    return {
      positions: positions2,
      hiddenAnnotationsCount: hiddenAnnotationsCount2
    };
  }, [annotations, dataIndexes, textWidths, axisLabelWidth, xScale, drawableWidth]);
  const {
    totalRowHeight,
    rowCount
  } = useShowMoreAnnotationsButton({
    isShowingAllAnnotations,
    positions
  });
  (0, import_react82.useEffect)(() => {
    onHeightChange(totalRowHeight);
  }, [onHeightChange, totalRowHeight]);
  return {
    positions,
    rowCount,
    hiddenAnnotationsCount: isShowingAllAnnotations ? 0 : hiddenAnnotationsCount
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/Annotations.scss.js
var styles26 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Group": "_Group_kzepq_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/Annotations.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/ShowMoreAnnotationsButton/ShowMoreAnnotationsButton.scss.js
var styles27 = {
  "Button": "_Button_pb42n_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/ShowMoreAnnotationsButton/ShowMoreAnnotationsButton.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/ShowMoreAnnotationsButton/components/Shadow.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
function Shadow({
  height,
  width,
  fill,
  radius
}) {
  return (0, import_jsx_runtime62.jsx)("rect", {
    height,
    width,
    fill,
    ry: radius,
    y: 3,
    x: 3,
    opacity: 0.5
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/ShowMoreAnnotationsButton/components/Icon.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
function Icon({
  fill,
  isShowingAllAnnotations
}) {
  return (0, import_jsx_runtime63.jsx)("g", {
    transform: "translate(7,6)",
    children: isShowingAllAnnotations ? (0, import_jsx_runtime63.jsx)("path", {
      d: "M9 2C9.55228 2 10 1.55228 10 1C10 0.447715 9.55228 0 9 0L1 0C0.447715 0 0 0.447715 0 1C0 1.55228 0.447715 2 1 2L9 2Z",
      fill,
      transform: `translate(0,${4})`
    }) : (0, import_jsx_runtime63.jsx)("path", {
      d: "M5 0a1 1 0 0 0-1 1v3H1a1 1 0 1 0 0 2h3v3a1 1 0 1 0 2 0V6h3a1 1 0 1 0 0-2H6V1a1 1 0 0 0-1-1Z",
      fill
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/ShowMoreAnnotationsButton/ShowMoreAnnotationsButton.js
var STROKE = 2;
function ShowMoreAnnotationsButton({
  annotationsCount,
  collapseText = "Collapse annotations",
  expandText = "Expand annotations",
  isShowingAllAnnotations,
  onClick,
  tabIndex,
  width
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const selectedTheme = useTheme();
  const label = isShowingAllAnnotations ? collapseText : `${expandText} (${annotationsCount})`;
  const textWidth = estimateStringWidth(label, characterWidths2);
  const radius = PILL_HEIGHT / 2;
  const pillWidth = width + Math.abs(PILL_X_MIN);
  const pillHeight = PILL_HEIGHT + STROKE;
  return (0, import_jsx_runtime64.jsxs)("g", {
    className: styles27.Button,
    transform: `translate(${PILL_X_MIN},-1)`,
    onClick,
    tabIndex: 0,
    children: [!isShowingAllAnnotations && (0, import_jsx_runtime64.jsx)(Shadow, {
      height: pillHeight,
      width: pillWidth,
      fill: selectedTheme.annotations.backgroundColor,
      radius
    }), (0, import_jsx_runtime64.jsx)("rect", {
      height: pillHeight,
      width: pillWidth,
      fill: isShowingAllAnnotations ? "transparent" : selectedTheme.annotations.backgroundColor,
      ry: radius,
      stroke: isShowingAllAnnotations ? selectedTheme.annotations.backgroundColor : selectedTheme.chartContainer.backgroundColor,
      strokeWidth: STROKE
    }), (0, import_jsx_runtime64.jsx)(Icon, {
      fill: selectedTheme.annotations.textColor,
      isShowingAllAnnotations
    }), (0, import_jsx_runtime64.jsx)(SingleTextLine, {
      color: selectedTheme.annotations.textColor,
      text: label,
      targetWidth: pillWidth - PILL_PADDING * 2,
      y: PILL_HEIGHT - LINE_HEIGHT,
      x: pillWidth / 2 - textWidth / 2
    }), (0, import_jsx_runtime64.jsx)("foreignObject", {
      height: PILL_HEIGHT,
      width: pillWidth,
      style: {
        overflow: "visible"
      },
      children: (0, import_jsx_runtime64.jsx)("button", {
        className: styles27.Button,
        onClick,
        style: {
          borderRadius: PILL_HEIGHT / 2
        },
        tabIndex,
        children: label
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLine/AnnotationLine.js
var import_react83 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLine/AnnotationLine.scss.js
var styles28 = {
  "Line": "_Line_y7hzj_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLine/AnnotationLine.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var CARET_SIZE = 16;
var CARET_Y_OFFSET = -4;
function getLineCoords({
  direction,
  size: size2,
  x: x3,
  y: y3
}) {
  if (direction === "vertical") {
    return {
      x1: x3,
      x2: x3,
      y1: y3,
      y2: size2
    };
  }
  return {
    x1: x3,
    x2: size2,
    y1: y3,
    y2: y3
  };
}
function AnnotationLine({
  direction = "vertical",
  hasCaret = true,
  size: size2,
  x: x3,
  y: y3
}) {
  const selectedTheme = useTheme();
  const {
    isFirefox
  } = useBrowserCheck();
  const yPosition = hasCaret ? y3 + Math.abs(CARET_Y_OFFSET) : y3;
  return (0, import_jsx_runtime65.jsxs)(import_react83.Fragment, {
    children: [(0, import_jsx_runtime65.jsx)("line", {
      className: styles28.Line,
      stroke: selectedTheme.annotations.lineColor,
      strokeWidth: "1",
      strokeDasharray: "3 2",
      ...getLineCoords({
        direction,
        size: size2,
        x: x3,
        y: yPosition
      })
    }), hasCaret && (0, import_jsx_runtime65.jsx)("path", {
      d: "M9.31 7.866a2 2 0 0 1-2.62 0L1.664 3.512C.263 2.3 1.12 0 2.973 0h10.055c1.852 0 2.709 2.3 1.31 3.512L9.308 7.866Z",
      transform: `translate(${x3 - CARET_SIZE / 2}, ${y3 + CARET_Y_OFFSET})`,
      fill: selectedTheme.annotations.backgroundColor,
      opacity: isFirefox ? 1 : selectedTheme.annotations.pillOpacity
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLabel/AnnotationLabel.js
var import_react84 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLabel/AnnotationLabel.scss.js
var styles29 = {
  "Blur": "_Blur_m9tly_1",
  "Button": "_Button_m9tly_9"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationLabel/AnnotationLabel.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var PX_OFFSET = 1;
var CONTENT_LINE_OFFSET = 3;
function AnnotationLabel({
  ariaLabel,
  hasContent,
  index: index2,
  isVisible,
  label,
  position,
  setActiveIndex,
  tabIndex
}) {
  const selectedTheme = useTheme();
  const {
    isFirefox
  } = useBrowserCheck();
  const {
    x: x3,
    y: y3,
    width
  } = position;
  const formattedAriaLabel = `${ariaLabel}: ${label}`;
  return (0, import_jsx_runtime66.jsxs)("g", {
    transform: `translate(${x3},${y3})`,
    opacity: isVisible ? 1 : 0,
    "aria-hidden": true,
    children: [(0, import_jsx_runtime66.jsx)("foreignObject", {
      height: PILL_HEIGHT,
      width,
      style: {
        overflow: "visible"
      },
      children: (0, import_jsx_runtime66.jsx)("div", {
        className: styles29.Blur,
        style: {
          borderRadius: PILL_HEIGHT / 2
        }
      })
    }), (0, import_jsx_runtime66.jsx)("rect", {
      height: PILL_HEIGHT,
      width,
      fill: selectedTheme.annotations.backgroundColor,
      ry: PILL_HEIGHT / 2,
      opacity: isFirefox ? 1 : selectedTheme.annotations.pillOpacity
    }), (0, import_jsx_runtime66.jsx)(SingleTextLine, {
      ariaHidden: true,
      color: selectedTheme.annotations.textColor,
      text: label,
      targetWidth: width - PILL_PADDING * 2 + PX_OFFSET,
      y: PILL_HEIGHT - LINE_HEIGHT - PX_OFFSET,
      x: PILL_PADDING
    }), (0, import_jsx_runtime66.jsxs)(import_react84.Fragment, {
      children: [hasContent && (0, import_jsx_runtime66.jsx)("line", {
        x1: PILL_PADDING,
        x2: width - PILL_PADDING,
        y1: PILL_HEIGHT - CONTENT_LINE_OFFSET,
        y2: PILL_HEIGHT - CONTENT_LINE_OFFSET,
        stroke: selectedTheme.annotations.textColor,
        strokeDasharray: "1, 3",
        strokeWidth: 1
      }), (0, import_jsx_runtime66.jsx)("foreignObject", {
        height: PILL_HEIGHT,
        width,
        style: {
          overflow: "visible"
        },
        children: (0, import_jsx_runtime66.jsx)("button", {
          "aria-describedby": `annotation-content-${index2}`,
          "aria-label": formattedAriaLabel,
          className: styles29.Button,
          onMouseEnter: () => setActiveIndex(index2),
          onFocus: () => setActiveIndex(index2),
          tabIndex,
          style: {
            borderRadius: PILL_HEIGHT / 2
          },
          children: label
        })
      })]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationContent/AnnotationContent.js
var import_react85 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationContent/AnnotationContent.scss.js
var styles30 = {
  "Container": "_Container_195be_1",
  "Title": "_Title_195be_9",
  "Content": "_Content_195be_16",
  "Link": "_Link_195be_22"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationContent/AnnotationContent.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var MAX_WIDTH = 350;
function AnnotationContent({
  annotation,
  drawableWidth,
  index: index2,
  onMouseLeave,
  parentRef,
  tabIndex,
  x: x3,
  y: y3
}) {
  var _bounds$width;
  const selectedTheme = useTheme();
  const {
    isFirefox
  } = useBrowserCheck();
  const [ref, setRef] = (0, import_react85.useState)(null);
  const [bounds, setBounds] = (0, import_react85.useState)();
  (0, import_react85.useLayoutEffect)(() => {
    setBounds(ref === null || ref === void 0 ? void 0 : ref.getBoundingClientRect());
  }, [ref]);
  (0, import_react85.useEffect)(() => {
    const tooltip = document.querySelector("[data-tooltip]");
    if (tooltip) {
      tooltip.style.display = "none";
    }
    return () => {
      if (tooltip) {
        tooltip.style.display = "block";
      }
    };
  }, []);
  if (annotation.content == null) {
    return null;
  }
  const {
    content,
    title,
    linkText = "Learn more",
    linkUrl
  } = annotation.content;
  const width = (_bounds$width = bounds === null || bounds === void 0 ? void 0 : bounds.width) !== null && _bounds$width !== void 0 ? _bounds$width : 0;
  let xPosition = x3 - width / 2;
  if (xPosition + width > drawableWidth) {
    xPosition = drawableWidth - width;
  }
  return (0, import_react_dom2.createPortal)((0, import_jsx_runtime67.jsx)(Wrapper, {
    height: "100%",
    width: "100%",
    style: {
      pointerEvents: "none",
      overflow: "visible"
    },
    x: clamp({
      amount: xPosition,
      min: 0,
      max: drawableWidth
    }),
    y: y3,
    parentRef,
    children: (0, import_jsx_runtime67.jsxs)("div", {
      className: styles30.Container,
      "data-block-tooltip-events": true,
      onMouseLeave,
      ref: setRef,
      style: {
        width: "fit-content",
        maxWidth: Math.min(drawableWidth, MAX_WIDTH),
        // Firefox doesn't support blur so we'll remove
        // the opacity on this element.
        background: changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : TOOLTIP_BG_OPACITY)
      },
      id: `annotation-content-${index2}`,
      role: "dialog",
      children: [title != null && (0, import_jsx_runtime67.jsx)("p", {
        className: styles30.Title,
        style: {
          color: selectedTheme.tooltip.textColor
        },
        role: "heading",
        "aria-level": 2,
        children: title
      }), (0, import_jsx_runtime67.jsxs)("p", {
        className: styles30.Content,
        style: {
          color: selectedTheme.tooltip.textColor
        },
        "data-is-annotation-content": true,
        children: [content, linkUrl != null && (0, import_jsx_runtime67.jsx)("a", {
          href: linkUrl,
          className: styles30.Link,
          tabIndex,
          style: {
            color: selectedTheme.annotations.linkColor
          },
          children: linkText
        })]
      })]
    })
  }), parentRef !== null && parentRef !== void 0 ? parentRef : document.body);
}
function Wrapper({
  children,
  parentRef,
  ...theRest
}) {
  const Tag = parentRef ? "foreignObject" : "div";
  return (0, import_jsx_runtime67.jsx)(Tag, {
    ...theRest,
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/Annotations.js
function Annotations({
  annotationsLookupTable,
  axisLabelWidth,
  drawableHeight,
  drawableWidth,
  labels,
  onHeightChange,
  xScale
}) {
  const [activeIndex, setActiveIndex] = (0, import_react86.useState)(-1);
  const [isShowingAllAnnotations, setIsShowingAllAnnotations] = (0, import_react86.useState)(false);
  const [ref, setRef] = (0, import_react86.useState)(null);
  const {
    annotations,
    dataIndexes
  } = (0, import_react86.useMemo)(() => {
    const dataIndexes2 = {};
    const annotations2 = Object.keys(annotationsLookupTable).map((key) => {
      const annotation = annotationsLookupTable[key];
      if (!labels.includes(key) || annotation == null || annotation.axis === "y") {
        return null;
      }
      dataIndexes2[key] = labels.indexOf(key);
      return annotation;
    }).filter(Boolean);
    return {
      annotations: annotations2,
      dataIndexes: dataIndexes2
    };
  }, [annotationsLookupTable, labels]);
  const {
    hiddenAnnotationsCount,
    positions,
    rowCount
  } = useAnnotationPositions({
    annotations,
    axisLabelWidth,
    dataIndexes,
    drawableWidth,
    isShowingAllAnnotations,
    onHeightChange,
    xScale
  });
  const handleToggleAllAnnotations = () => {
    setIsShowingAllAnnotations(!isShowingAllAnnotations);
  };
  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };
  useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: (activeElement) => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== "true";
    }
  });
  const isShowMoreButtonVisible = isShowMoreAnnotationsButtonVisible(rowCount);
  const showMoreButtonOffset = isShowMoreButtonVisible ? SHOW_MORE_BUTTON_OFFSET : 0;
  return (0, import_jsx_runtime68.jsxs)("g", {
    ref: setRef,
    tabIndex: -1,
    className: styles26.Group,
    children: [isShowMoreButtonVisible && (0, import_jsx_runtime68.jsx)(ShowMoreAnnotationsButton, {
      annotationsCount: hiddenAnnotationsCount,
      collapseText: annotations[0].collapseButtonText,
      expandText: annotations[0].expandButtonText,
      isShowingAllAnnotations,
      onClick: handleToggleAllAnnotations,
      tabIndex: annotations.length,
      width: drawableWidth
    }), (0, import_jsx_runtime68.jsx)("g", {
      transform: `translate(0, ${showMoreButtonOffset})`,
      children: positions.map((position) => {
        const {
          line,
          y: y3,
          row,
          index: index2
        } = position;
        const annotation = annotations[index2];
        if (shouldHideAnnotation({
          row,
          isShowingAllAnnotations,
          rowCount
        })) {
          return null;
        }
        const hasContent = annotation.content != null;
        const isContentVisible = index2 === activeIndex && hasContent;
        const tabIndex = index2 + 1;
        const ariaLabel = `${annotation.startKey}`;
        return (0, import_jsx_runtime68.jsxs)(import_react86.Fragment, {
          children: [(0, import_jsx_runtime68.jsx)(AnnotationLine, {
            size: drawableHeight - showMoreButtonOffset,
            x: line.x,
            y: y3 + PILL_HEIGHT
          }), (0, import_jsx_runtime68.jsx)(AnnotationLabel, {
            ariaLabel,
            hasContent,
            index: index2,
            isVisible: !isContentVisible,
            label: annotation.label,
            position,
            setActiveIndex,
            tabIndex
          }), isContentVisible && (0, import_jsx_runtime68.jsx)(AnnotationContent, {
            annotation,
            drawableWidth,
            index: index2,
            onMouseLeave: handleOnMouseLeave,
            parentRef: ref,
            position,
            tabIndex,
            x: line.x,
            y: y3
          })]
        }, `annotation${index2}${annotation.startKey}`);
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/YAxisAnnotations.js
var import_react88 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/hooks/useYAxisAnnotationPositions.js
var import_react87 = __toESM(require_react());
function useYAxisAnnotationPositions({
  annotations,
  axis,
  drawableWidth,
  ticks: ticks2,
  yScale
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const textWidths = (0, import_react87.useMemo)(() => {
    return annotations.map((annotation) => {
      return estimateStringWidth(annotation.label, characterWidths2);
    });
  }, [annotations, characterWidths2]);
  const {
    positions
  } = (0, import_react87.useMemo)(() => {
    let positions2 = annotations.map((annotation, dataIndex) => {
      var _yScale;
      const rawY = (_yScale = yScale(Number(annotation.startKey))) !== null && _yScale !== void 0 ? _yScale : 0;
      const textWidth = textWidths[dataIndex];
      const width = clamp({
        amount: textWidth + PILL_PADDING * 2,
        min: textWidth + PILL_PADDING * 2,
        max: drawableWidth
      });
      const y3 = clamp({
        amount: rawY - PILL_HEIGHT / 2,
        min: 0,
        max: Infinity
      });
      const x3 = axis === "y2" ? 0 : drawableWidth - width;
      const lineWidth = axis === "y2" ? drawableWidth : drawableWidth - (drawableWidth - x3);
      return {
        index: dataIndex,
        line: {
          x: 0,
          y: rawY,
          width: lineWidth
        },
        showYAxisLabel: true,
        row: 1,
        width,
        x: x3,
        y: y3
      };
    });
    positions2 = positions2.sort((one2, two) => one2.y - two.y);
    ticks2.forEach(({
      yOffset
    }) => {
      positions2.forEach((current) => {
        const top = current.line.y - LINE_HEIGHT / 2;
        const bottom = top + LINE_HEIGHT;
        if (yOffset > top && yOffset < bottom) {
          current.showYAxisLabel = false;
        }
      });
    });
    function checkForSpace(totalRows) {
      let checkAgain = false;
      [...Array.from({
        length: totalRows
      })].forEach((_2, rowIndex) => {
        const currentRow = rowIndex + 1;
        positions2.filter(({
          row
        }) => row === currentRow).forEach((current, index2, filtered) => {
          const nextRow = currentRow + 1;
          const next = filtered[index2 + 1];
          if (next == null) {
            return;
          }
          if (current.line.y + ANNOTATION_Y_AXIS_LABEL_HEIGHT > next.line.y) {
            next.showYAxisLabel = false;
          }
          const top = current.y;
          const bottom = current.y + PILL_HEIGHT;
          if (current.row === next.row && next.y > top && next.y < bottom) {
            next.row = nextRow;
            checkAgain = true;
          }
        });
      });
      if (checkAgain) {
        checkForSpace(totalRows + 1);
      }
    }
    checkForSpace(1);
    positions2.forEach((current) => {
      const row = current.row - 1;
      if (axis === "y2") {
        current.x += (current.width + PILL_ROW_GAP) * row;
      } else {
        current.x -= (current.width + PILL_ROW_GAP) * row;
      }
    });
    return {
      positions: positions2
    };
  }, [annotations, ticks2, textWidths, yScale, drawableWidth, axis]);
  return {
    positions
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/YAxisAnnotations.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useEstimateStringWidth.js
function useEstimateStringWidth(string, fontSize2 = FONT_SIZE) {
  var _characterWidthOffset;
  const {
    characterWidths: characterWidths2,
    characterWidthOffsets: characterWidthOffsets2
  } = useChartContext();
  const offset = (_characterWidthOffset = characterWidthOffsets2.fontSize[fontSize2]) !== null && _characterWidthOffset !== void 0 ? _characterWidthOffset : 1;
  const width = estimateStringWidth(string, characterWidths2);
  return width * offset;
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/components/AnnotationYAxisLabel/AnnotationYAxisLabel.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var FONT_SIZE3 = 10;
function AnnotationYAxisLabel({
  axis,
  label,
  x: x3,
  y: y3
}) {
  const selectedTheme = useTheme();
  const width = useEstimateStringWidth(`${label}`, FONT_SIZE3);
  const xOffset = axis === "y2" ? 0 : width;
  return (0, import_jsx_runtime69.jsx)("text", {
    width,
    height: ANNOTATION_Y_AXIS_LABEL_HEIGHT,
    y: y3,
    dominantBaseline: "middle",
    fontSize: FONT_SIZE3,
    x: x3 - xOffset,
    fill: selectedTheme.annotations.axisLabelColor,
    children: label
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Annotations/YAxisAnnotations.js
function YAxisAnnotations({
  axis = "y",
  annotationsLookupTable,
  drawableWidth,
  ticks: ticks2,
  yScale
}) {
  const [activeIndex, setActiveIndex] = (0, import_react88.useState)(-1);
  const [ref, setRef] = (0, import_react88.useState)(null);
  const {
    annotations
  } = (0, import_react88.useMemo)(() => {
    const annotations2 = Object.keys(annotationsLookupTable).map((key) => {
      const annotation = annotationsLookupTable[key];
      if (!isValueWithinDomain(Number(annotation.startKey), yScale.domain())) {
        return null;
      }
      if (annotation == null || annotation.axis == null || annotation.axis !== axis) {
        return null;
      }
      return annotation;
    }).filter(Boolean);
    return {
      annotations: annotations2
    };
  }, [annotationsLookupTable, yScale, axis]);
  const {
    positions
  } = useYAxisAnnotationPositions({
    axis,
    annotations,
    drawableWidth,
    ticks: ticks2,
    yScale
  });
  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };
  useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: (activeElement) => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== "true";
    }
  });
  return (0, import_jsx_runtime70.jsx)("g", {
    ref: setRef,
    tabIndex: -1,
    className: styles26.Group,
    children: positions.map((position) => {
      var _line$width;
      const index2 = position.index;
      const annotation = annotations[index2];
      const {
        line,
        x: x3,
        y: y3
      } = position;
      const hasContent = annotation.content != null;
      const isContentVisible = index2 === activeIndex && hasContent;
      const tabIndex = index2 + 1;
      const ariaLabel = `${annotation.startKey}`;
      const axisLabelX = axis === "y2" ? drawableWidth + Y_AXIS_CHART_SPACING : -Y_AXIS_CHART_SPACING;
      return (0, import_jsx_runtime70.jsxs)(import_react88.Fragment, {
        children: [position.showYAxisLabel && (0, import_jsx_runtime70.jsx)(AnnotationYAxisLabel, {
          axis,
          y: line.y,
          x: axisLabelX,
          label: annotation.startKey
        }), (0, import_jsx_runtime70.jsx)(AnnotationLine, {
          direction: "horizontal",
          hasCaret: false,
          size: (_line$width = line.width) !== null && _line$width !== void 0 ? _line$width : 0,
          x: line.x,
          y: line.y
        }), (0, import_jsx_runtime70.jsx)(AnnotationLabel, {
          ariaLabel,
          hasContent,
          index: index2,
          isVisible: !isContentVisible,
          label: annotation.label,
          position,
          setActiveIndex,
          tabIndex
        }), isContentVisible && (0, import_jsx_runtime70.jsx)(AnnotationContent, {
          annotation,
          drawableWidth,
          index: index2,
          onMouseLeave: handleOnMouseLeave,
          parentRef: ref,
          position,
          tabIndex,
          x: drawableWidth - (drawableWidth - x3),
          y: y3
        })]
      }, `annotation${index2}${annotation.startKey}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/TooltipWrapper.js
var import_react92 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useRootContainer.js
var import_react89 = __toESM(require_react());
var useRootContainer = (id) => {
  const ref = (0, import_react89.useRef)(document.getElementById(id));
  function getRootElem() {
    if (!ref.current) {
      ref.current = document.createElement("div");
      ref.current.id = id;
      document.body.appendChild(ref.current);
    }
    return ref.current;
  }
  return getRootElem();
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/utilities/shouldBlockTooltipEvents.js
function shouldBlockTooltipEvents(event) {
  return event.composedPath().some((path2) => {
    const dataset = path2.dataset;
    return dataset != null && dataset.blockTooltipEvents === "true";
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/types.js
var TooltipHorizontalOffset;
(function(TooltipHorizontalOffset2) {
  TooltipHorizontalOffset2[TooltipHorizontalOffset2["Left"] = 0] = "Left";
  TooltipHorizontalOffset2[TooltipHorizontalOffset2["Right"] = 1] = "Right";
  TooltipHorizontalOffset2[TooltipHorizontalOffset2["Center"] = 2] = "Center";
})(TooltipHorizontalOffset || (TooltipHorizontalOffset = {}));
var TooltipVerticalOffset;
(function(TooltipVerticalOffset2) {
  TooltipVerticalOffset2[TooltipVerticalOffset2["Above"] = 0] = "Above";
  TooltipVerticalOffset2[TooltipVerticalOffset2["Below"] = 1] = "Below";
  TooltipVerticalOffset2[TooltipVerticalOffset2["Inline"] = 2] = "Inline";
  TooltipVerticalOffset2[TooltipVerticalOffset2["Center"] = 3] = "Center";
})(TooltipVerticalOffset || (TooltipVerticalOffset = {}));

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/constants.js
var DEFAULT_TOOLTIP_POSITION = {
  horizontal: TooltipHorizontalOffset.Center,
  vertical: TooltipVerticalOffset.Above
};
var TOOLTIP_POSITION_DEFAULT_RETURN = {
  x: 0,
  y: 0,
  position: DEFAULT_TOOLTIP_POSITION,
  activeIndex: null
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/components/TooltipAnimatedContainer.js
var import_react90 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/utilities.js
var TOOLTIP_MARGIN = 20;
var SCROLLBAR_WIDTH = 20;
function getAlteredVerticalBarPosition(props) {
  const {
    currentX,
    currentY,
    position
  } = props;
  const newPosition = {
    ...position
  };
  let x3 = currentX;
  let y3 = currentY;
  if (!props.isPerformanceImpacted) {
    if (newPosition.vertical === TooltipVerticalOffset.Inline) {
      newPosition.horizontal = TooltipHorizontalOffset.Left;
      const inline = getInlinePosition(y3, props);
      y3 = inline.value;
    }
    if (newPosition.vertical === TooltipVerticalOffset.Center) {
      const verticalCenter = getVerticalCenterPosition(y3, props);
      y3 = verticalCenter.value;
    }
    if (newPosition.vertical === TooltipVerticalOffset.Above) {
      const above = getAbovePosition(y3, props);
      y3 = above.value;
      if (above.wasOutsideBounds) {
        newPosition.horizontal = TooltipHorizontalOffset.Left;
      }
    }
    if (newPosition.vertical === TooltipVerticalOffset.Below) {
      const below = getBelowPosition(y3, props);
      y3 = below.value;
      if (below.wasOutsideBounds) {
        newPosition.horizontal = TooltipHorizontalOffset.Left;
      }
    }
  } else {
    var _props$chartDimension, _props$chartDimension2;
    y3 = clamp({
      amount: ((_props$chartDimension = (_props$chartDimension2 = props.chartDimensions) === null || _props$chartDimension2 === void 0 ? void 0 : _props$chartDimension2.y) !== null && _props$chartDimension !== void 0 ? _props$chartDimension : 0) - props.tooltipDimensions.height,
      min: 0,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN
    });
  }
  if (newPosition.horizontal === TooltipHorizontalOffset.Left) {
    const left = getLeftPosition(x3, props);
    if (left.wasOutsideBounds) {
      newPosition.horizontal = TooltipHorizontalOffset.Right;
    } else {
      x3 = left.value;
    }
  }
  if (newPosition.horizontal === TooltipHorizontalOffset.Right) {
    const right = getRightPosition(x3, props);
    x3 = right.value;
  }
  if (newPosition.horizontal === TooltipHorizontalOffset.Center) {
    const center = getCenterPosition(x3, props);
    x3 = center.value;
  }
  return {
    x: clamp({
      amount: x3,
      min: TOOLTIP_MARGIN,
      max: window.innerWidth - props.tooltipDimensions.width - TOOLTIP_MARGIN - SCROLLBAR_WIDTH
    }),
    y: clamp({
      amount: y3,
      min: window.scrollY + TOOLTIP_MARGIN,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN
    })
  };
}
function isOutsideBounds(data) {
  const {
    current,
    direction,
    alteredPosition
  } = data;
  if (direction === "x") {
    const isLeft = current < 0;
    const isRight = current + alteredPosition.tooltipDimensions.width > window.innerWidth;
    return isLeft || isRight;
  } else {
    const isAbove = current < window.scrollY;
    const isBelow = current + alteredPosition.tooltipDimensions.height > window.scrollY + window.innerHeight - alteredPosition.tooltipDimensions.height;
    return isAbove || isBelow;
  }
}
function getInlinePosition(...args) {
  const [value, props] = args;
  let y3 = value;
  const wasOutsideBounds = isOutsideBounds({
    current: y3,
    direction: "y",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    const bottom = y3 + props.tooltipDimensions.height;
    const offset = bottom - props.chartBounds.height;
    y3 -= offset + props.margin.Bottom;
  }
  return {
    value: y3,
    wasOutsideBounds
  };
}
function getVerticalCenterPosition(...args) {
  const [value, props] = args;
  let y3 = value - props.tooltipDimensions.height / 2;
  const wasOutsideBounds = isOutsideBounds({
    current: y3,
    direction: "y",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    if (y3 <= 0) {
      y3 = 0;
    } else {
      y3 = props.chartBounds.height - props.tooltipDimensions.height;
    }
  }
  return {
    value: y3,
    wasOutsideBounds
  };
}
function getAbovePosition(...args) {
  const [value, props] = args;
  let y3 = value - props.tooltipDimensions.height - TOOLTIP_MARGIN;
  const wasOutsideBounds = isOutsideBounds({
    current: y3,
    direction: "y",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    y3 = props.currentY;
  }
  return {
    value: y3,
    wasOutsideBounds
  };
}
function getBelowPosition(...args) {
  const [value, props] = args;
  let y3 = value + TOOLTIP_MARGIN * 2;
  const wasOutsideBounds = isOutsideBounds({
    current: y3,
    direction: "y",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    y3 -= props.tooltipDimensions.height + TOOLTIP_MARGIN;
  }
  return {
    value: y3,
    wasOutsideBounds
  };
}
function getLeftPosition(...args) {
  const [value, props] = args;
  let x3 = value - props.tooltipDimensions.width;
  const wasOutsideBounds = isOutsideBounds({
    current: x3,
    direction: "x",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    x3 = props.currentX + props.margin.Left + props.bandwidth + TOOLTIP_MARGIN;
  } else {
    x3 -= TOOLTIP_MARGIN;
  }
  return {
    value: x3,
    wasOutsideBounds
  };
}
function getRightPosition(...args) {
  const [value, props] = args;
  let x3 = value + props.bandwidth;
  const wasOutsideBounds = isOutsideBounds({
    current: x3,
    direction: "x",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    x3 -= props.tooltipDimensions.width + props.bandwidth + TOOLTIP_MARGIN;
  } else {
    x3 += TOOLTIP_MARGIN;
  }
  return {
    value: x3,
    wasOutsideBounds
  };
}
function getCenterPosition(...args) {
  const [value, props] = args;
  const offset = props.bandwidth - props.tooltipDimensions.width;
  let x3 = value + offset / 2;
  if (x3 < props.margin.Left) {
    x3 = props.currentX + props.margin.Left;
  }
  const wasOutsideBounds = isOutsideBounds({
    current: x3,
    direction: "x",
    alteredPosition: props
  });
  if (wasOutsideBounds) {
    x3 = props.chartBounds.width - props.tooltipDimensions.width - TOOLTIP_MARGIN * 2;
  }
  return {
    value: x3,
    wasOutsideBounds
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/components/TooltipAnimatedContainer.scss.js
var styles31 = {
  "Container": "_Container_1op8q_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/components/TooltipAnimatedContainer.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
function TooltipAnimatedContainer({
  activePointIndex,
  bandwidth = 0,
  chartBounds,
  children,
  currentX,
  currentY,
  id = "",
  getAlteredPosition = getAlteredVerticalBarPosition,
  margin,
  position = DEFAULT_TOOLTIP_POSITION,
  chartDimensions
}) {
  const {
    isPerformanceImpacted
  } = useChartContext();
  const tooltipRef = (0, import_react90.useRef)(null);
  const [tooltipDimensions, setTooltipDimensions] = (0, import_react90.useState)(null);
  const firstRender = (0, import_react90.useRef)(true);
  const {
    x: x3,
    y: y3,
    opacity,
    immediate
  } = (0, import_react90.useMemo)(() => {
    if (tooltipDimensions == null) {
      return {
        x: 0,
        y: 0,
        opacity: 0
      };
    }
    const {
      x: x4,
      y: y4
    } = getAlteredPosition({
      currentX,
      currentY,
      position,
      tooltipDimensions,
      chartBounds,
      margin,
      bandwidth,
      isPerformanceImpacted,
      chartDimensions
    });
    const shouldRenderImmediate = firstRender.current;
    firstRender.current = false;
    return {
      x: x4,
      y: y4,
      opacity: 1,
      immediate: isPerformanceImpacted || shouldRenderImmediate
    };
  }, [bandwidth, chartBounds, currentX, currentY, getAlteredPosition, margin, position, isPerformanceImpacted, tooltipDimensions, chartDimensions]);
  (0, import_react90.useEffect)(() => {
    if (tooltipRef.current == null) {
      return;
    }
    setTooltipDimensions(tooltipRef.current.getBoundingClientRect());
  }, [activePointIndex]);
  return (0, import_jsx_runtime71.jsx)("div", {
    id,
    className: styles31.Container,
    "data-tooltip": true,
    style: {
      top: 0,
      left: 0,
      opacity,
      transform: `translate3d(${Math.round(x3)}px, ${Math.round(y3)}px, 0px)`,
      transition: immediate ? "none" : "opacity 300ms ease, transform 150ms"
    },
    ref: tooltipRef,
    "aria-hidden": "true",
    children
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/TooltipWrapper.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/SwallowErrors/SwallowErrors.js
var import_react91 = __toESM(require_react());
var SwallowErrors = class extends import_react91.Component {
  static getDerivedStateFromError() {
    return {
      hasError: true
    };
  }
  constructor(props) {
    super(props);
    this.state = {
      hasError: false
    };
  }
  render() {
    if (this.state.hasError) {
      return null;
    }
    return this.props.children;
  }
};

// node_modules/@shopify/polaris-viz/build/esm/components/TooltipWrapper/TooltipWrapper.js
var TOOLTIP_ID = "polaris_viz_tooltip_root";
function TooltipWrapperRaw(props) {
  const {
    alwaysUpdatePosition = false,
    bandwidth = 0,
    chartBounds,
    focusElementDataType,
    getAlteredPosition,
    getPosition,
    id,
    onIndexChange,
    parentRef,
    chartDimensions
  } = props;
  const [position, setPosition] = (0, import_react92.useState)({
    x: 0,
    y: 0,
    activeIndex: -1,
    position: DEFAULT_TOOLTIP_POSITION
  });
  const activeIndexRef = (0, import_react92.useRef)(null);
  const focusElements = (0, import_react92.useMemo)(() => {
    return parentRef === null || parentRef === void 0 ? void 0 : parentRef.querySelectorAll(`[data-type="${focusElementDataType}"][aria-hidden="false"]`);
  }, [focusElementDataType, parentRef]);
  (0, import_react92.useEffect)(() => {
    activeIndexRef.current = position.activeIndex;
  }, [position.activeIndex]);
  const onMouseMove = (0, import_react92.useCallback)((event) => {
    const newPosition = getPosition({
      event,
      eventType: "mouse"
    });
    if (alwaysUpdatePosition && (newPosition.x < chartBounds.x || newPosition.y < chartBounds.y)) {
      return;
    }
    if (!alwaysUpdatePosition && activeIndexRef.current === newPosition.activeIndex) {
      return;
    }
    if (shouldBlockTooltipEvents(event)) {
      return;
    }
    setPosition(newPosition);
    onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(newPosition.activeIndex);
  }, [alwaysUpdatePosition, chartBounds, getPosition, onIndexChange]);
  const onMouseLeave = (0, import_react92.useCallback)(() => {
    onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(null);
    setPosition((prevState) => {
      return {
        ...prevState,
        activeIndex: -1
      };
    });
  }, [onIndexChange]);
  const onFocus = (0, import_react92.useCallback)((event) => {
    const target = event.currentTarget;
    if (!target) {
      return;
    }
    const index2 = Number(target.dataset.index);
    const newPosition = getPosition({
      index: index2,
      eventType: "focus"
    });
    setPosition(newPosition);
    onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(newPosition.activeIndex);
  }, [getPosition, onIndexChange]);
  const onFocusIn = (0, import_react92.useCallback)(() => {
    if (!(parentRef !== null && parentRef !== void 0 && parentRef.contains(document.activeElement))) {
      onMouseLeave();
    }
  }, [parentRef, onMouseLeave]);
  const setFocusListeners = (0, import_react92.useCallback)((attach) => {
    if (!focusElements) {
      return;
    }
    focusElements.forEach((el) => {
      if (attach) {
        el.addEventListener("focus", onFocus);
      } else {
        el.removeEventListener("focus", onFocus);
      }
    });
  }, [focusElements, onFocus]);
  (0, import_react92.useEffect)(() => {
    if (!parentRef) {
      return;
    }
    parentRef.addEventListener("mousemove", onMouseMove);
    parentRef.addEventListener("mouseleave", onMouseLeave);
    parentRef.addEventListener("touchmove", onMouseMove);
    parentRef.addEventListener("touchend", onMouseLeave);
    setFocusListeners(true);
    return () => {
      parentRef.removeEventListener("mousemove", onMouseMove);
      parentRef.removeEventListener("mouseleave", onMouseLeave);
      parentRef.removeEventListener("touchmove", onMouseMove);
      parentRef.removeEventListener("touchend", onMouseLeave);
      setFocusListeners(false);
    };
  }, [parentRef, onMouseMove, onMouseLeave, onFocus, setFocusListeners]);
  (0, import_react92.useEffect)(() => {
    document.addEventListener("focusin", onFocusIn);
    return () => {
      document.removeEventListener("focusin", onFocusIn);
    };
  }, [parentRef, onFocusIn]);
  if (position.activeIndex == null || position.activeIndex < 0) {
    return null;
  }
  return (0, import_jsx_runtime72.jsx)(TooltipAnimatedContainer, {
    activePointIndex: position.activeIndex,
    bandwidth,
    chartBounds,
    currentX: position.x,
    currentY: position.y,
    id,
    getAlteredPosition,
    margin: props.margin,
    position: position.position,
    chartDimensions,
    children: props.getMarkup(position.activeIndex)
  });
}
function TooltipWrapper({
  usePortal = false,
  ...props
}) {
  if (usePortal) {
    return (0, import_jsx_runtime72.jsx)(TooltipWithPortal, {
      ...props
    });
  }
  return (0, import_jsx_runtime72.jsx)(TooltipWithErrors, {
    ...props
  });
}
function TooltipWithErrors(props) {
  return (0, import_jsx_runtime72.jsx)(SwallowErrors, {
    children: (0, import_jsx_runtime72.jsx)(TooltipWrapperRaw, {
      ...props
    })
  });
}
function TooltipWithPortal(props) {
  const container = useRootContainer(TOOLTIP_ID);
  return (0, import_react_dom3.createPortal)((0, import_jsx_runtime72.jsx)(TooltipWithErrors, {
    ...props
  }), container);
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/utilities/getAlteredLineChartPosition.js
var TOOLTIP_MARGIN2 = 20;
var SCROLLBAR_WIDTH2 = 20;
function getAlteredLineChartPosition(props) {
  const {
    currentX,
    currentY,
    chartBounds
  } = props;
  let x3 = currentX;
  let y3 = currentY;
  if (props.isPerformanceImpacted) {
    var _chartBounds$y;
    y3 = (_chartBounds$y = chartBounds.y) !== null && _chartBounds$y !== void 0 ? _chartBounds$y : 0;
  }
  const right = getRightPosition2(x3, props);
  x3 = right.value;
  if (right.wasOutsideBounds) {
    const left = getLeftPosition2(x3, props);
    x3 = left.value;
  }
  return {
    x: clamp({
      amount: x3,
      min: TOOLTIP_MARGIN2,
      max: window.innerWidth - props.tooltipDimensions.width - TOOLTIP_MARGIN2 - SCROLLBAR_WIDTH2
    }),
    y: clamp({
      amount: y3,
      min: window.scrollY + TOOLTIP_MARGIN2,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN2
    })
  };
}
function isOutsideBounds2(data) {
  const {
    current,
    alteredPosition
  } = data;
  const min3 = TOOLTIP_MARGIN2;
  const max3 = window.innerWidth - TOOLTIP_MARGIN2 - SCROLLBAR_WIDTH2;
  const isLeft = current < min3;
  const isRight = current + alteredPosition.tooltipDimensions.width > max3;
  return {
    left: isLeft,
    right: isRight
  };
}
function getLeftPosition2(...args) {
  const [value] = args;
  return {
    value: value - TOOLTIP_MARGIN2,
    wasOutsideBounds: false
  };
}
function getRightPosition2(...args) {
  const [value, props] = args;
  let x3 = value + props.bandwidth;
  const wasOutsideBounds = isOutsideBounds2({
    current: x3,
    alteredPosition: props
  });
  if (wasOutsideBounds.right) {
    x3 -= props.tooltipDimensions.width + props.bandwidth + TOOLTIP_MARGIN2;
  } else {
    x3 += TOOLTIP_MARGIN2;
  }
  return {
    value: x3,
    wasOutsideBounds: wasOutsideBounds.right
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/LegendContainer.js
var import_react97 = __toESM(require_react());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/LegendContainer.scss.js
var style2 = {
  "Container": "_Container_ijalm_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/components/HiddenLegendTooltip.js
var import_react95 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/components/HiddenLegendTooltip.scss.js
var style3 = {
  "MoreText": "_MoreText_kibmg_1",
  "Tooltip": "_Tooltip_kibmg_11"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/components/HiddenLegendTooltip.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/Legend.js
var import_react94 = __toESM(require_react());
var import_jsx_runtime74 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/components/LegendItem/LegendItem.js
var import_react93 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/constants.js
var LEGEND_ITEM_LEFT_PADDING = 8;
var LEGEND_ITEM_RIGHT_PADDING = 16;
var LEGEND_ITEM_GAP = 8;

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/components/LegendItem/LegendItem.scss.js
var style4 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Legend": "_Legend_ynez4_144",
  "TextContainer": "_TextContainer_ynez4_163",
  "Text": "_Text_ynez4_163",
  "IconContainer": "_IconContainer_ynez4_181"
};

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/components/LegendItem/LegendItem.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var MINIMUM_LEGEND_ITEM_WIDTH = 100;
function LegendItem({
  activeIndex = -1,
  color: color2,
  colorVisionType,
  index: index2,
  isComparison,
  name: name2,
  renderSeriesIcon,
  shape,
  theme,
  value,
  onDimensionChange,
  backgroundColor,
  truncate = false,
  showLegendValues = false,
  seriesNameFormatter = (value2) => `${value2}`
}) {
  const selectedTheme = useTheme(theme);
  const ref = (0, import_react93.useRef)(null);
  const [width, setWidth] = (0, import_react93.useState)(0);
  const renderLegendValues = showLegendValues && value != null;
  (0, import_react93.useEffect)(() => {
    if (onDimensionChange && ref.current != null) {
      const {
        width: width2,
        height
      } = ref.current.getBoundingClientRect();
      setWidth(width2);
      onDimensionChange(index2, {
        width: Math.min(MINIMUM_LEGEND_ITEM_WIDTH, Math.round(width2)),
        height
      });
    }
  }, [onDimensionChange, ref, index2]);
  const colorBlindAttrs = colorVisionType == null ? {} : getColorVisionEventAttrs({
    type: colorVisionType,
    index: index2
  });
  const background = backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : selectedTheme.legend.backgroundColor;
  return (0, import_jsx_runtime73.jsxs)("button", {
    ...colorBlindAttrs,
    style: {
      background: background !== null && background !== void 0 ? background : "none",
      ...getColorVisionStylesForActiveIndex({
        activeIndex,
        index: index2
      }),
      paddingLeft: background ? LEGEND_ITEM_LEFT_PADDING : 0,
      paddingRight: background ? LEGEND_ITEM_RIGHT_PADDING : LEGEND_ITEM_LEFT_PADDING,
      gap: LEGEND_ITEM_GAP,
      // if there is overflow, add a max width and truncate with ellipsis
      maxWidth: truncate ? MINIMUM_LEGEND_ITEM_WIDTH : "100%",
      // if the item width is already less than MINIMUM_LEGEND_ITEM_WIDTH, don't set a minWidth
      minWidth: width < MINIMUM_LEGEND_ITEM_WIDTH ? void 0 : MINIMUM_LEGEND_ITEM_WIDTH
    },
    className: style4.Legend,
    ref,
    title: name2,
    children: [renderSeriesIcon == null ? (0, import_jsx_runtime73.jsx)("span", {
      style: {
        height: PREVIEW_ICON_SIZE,
        width: PREVIEW_ICON_SIZE
      },
      className: style4.IconContainer,
      children: (0, import_jsx_runtime73.jsx)(SeriesIcon, {
        shape,
        color: color2,
        isComparison
      })
    }) : renderSeriesIcon(), (0, import_jsx_runtime73.jsxs)("span", {
      className: style4.TextContainer,
      children: [(0, import_jsx_runtime73.jsx)("span", {
        className: style4.Text,
        style: {
          color: selectedTheme.legend.labelColor
        },
        children: seriesNameFormatter(name2)
      }), renderLegendValues ? (0, import_jsx_runtime73.jsx)("span", {
        className: style4.Text,
        style: {
          color: selectedTheme.legend.valueColor
        },
        children: value
      }) : null]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/Legend/Legend.js
function Legend({
  activeIndex = -1,
  colorVisionType,
  data,
  theme = DEFAULT_THEME_NAME,
  itemDimensions,
  indexOffset = 0,
  backgroundColor,
  truncate = false,
  showLegendValues = false,
  seriesNameFormatter
}) {
  const {
    hiddenIndexes
  } = useExternalHideEvents();
  const onDimensionChange = (0, import_react94.useCallback)((index2, dimensions) => {
    if (itemDimensions !== null && itemDimensions !== void 0 && itemDimensions.current) {
      itemDimensions.current[index2] = dimensions;
    }
  }, [itemDimensions]);
  const items = data.map((legend, index2) => {
    if (hiddenIndexes.includes(index2)) {
      return null;
    }
    return (0, import_jsx_runtime74.jsx)(LegendItem, {
      ...legend,
      activeIndex,
      colorVisionType,
      index: index2 + indexOffset,
      theme,
      backgroundColor,
      onDimensionChange,
      truncate,
      showLegendValues,
      seriesNameFormatter
    }, index2);
  });
  return (0, import_jsx_runtime74.jsx)(import_react94.Fragment, {
    children: items
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/components/HiddenLegendTooltip.js
var LEGEND_TOOLTIP_ID = "legend-toolip";
var LEGEND_TOOLIP_Z_INDEX = 520;
function HiddenLegendTooltip({
  activeIndex,
  colorVisionType,
  data,
  theme,
  label,
  lastVisibleIndex = 0,
  setActivatorWidth,
  dimensions,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme();
  const {
    isFirefox
  } = useBrowserCheck();
  const {
    id
  } = useChartContext();
  const tooltipId = `${LEGEND_TOOLTIP_ID}_${id}`;
  const container = useRootContainer(tooltipId);
  const tooltipRef = (0, import_react95.useRef)(null);
  const activatorRef = (0, import_react95.useRef)(null);
  useColorVisionEvents({
    enabled: true,
    root: LEGEND_TOOLTIP_ID,
    dimensions
  });
  const defaultPosition = (0, import_react95.useMemo)(() => ({
    top: 0,
    left: 0
  }), []);
  const [position, setPosition] = (0, import_react95.useState)(defaultPosition);
  const [active, setActive] = (0, import_react95.useState)(false);
  (0, import_react95.useEffect)(() => {
    if (activatorRef.current == null) {
      return;
    }
    const activator = activatorRef.current.getBoundingClientRect();
    setActivatorWidth(activator.width);
  }, [setActivatorWidth]);
  const getTooltipPosition = (0, import_react95.useCallback)(() => {
    if (tooltipRef.current == null || activatorRef.current == null) {
      return;
    }
    setActive(true);
    const activator = activatorRef.current.getBoundingClientRect();
    const tooltip = tooltipRef.current.getBoundingClientRect();
    const xPosition = activator.x + window.scrollX;
    const yPosition = activator.y + window.scrollY + activator.height;
    function getXPosition3() {
      const goesPastRightOfWindow = xPosition + tooltip.width + TOOLTIP_MARGIN > window.innerWidth;
      if (goesPastRightOfWindow) {
        return xPosition - tooltip.width + activator.width;
      }
      return xPosition;
    }
    function getYPosition2() {
      const goesPastBottomOfWindow = yPosition + tooltip.height + TOOLTIP_MARGIN >= window.innerHeight + window.scrollY;
      if (goesPastBottomOfWindow) {
        return yPosition - tooltip.height - activator.height;
      }
      return yPosition;
    }
    setPosition({
      top: getYPosition2(),
      left: getXPosition3()
    });
  }, [setPosition]);
  const handleMouseLeave = (0, import_react95.useCallback)((event) => {
    if ((event === null || event === void 0 ? void 0 : event.relatedTarget.id) !== tooltipId) {
      setActive(false);
      setPosition(defaultPosition);
    }
  }, [setActive, setPosition, defaultPosition, tooltipId]);
  return (0, import_jsx_runtime75.jsxs)(import_react95.Fragment, {
    children: [(0, import_jsx_runtime75.jsx)("button", {
      className: style3.MoreText,
      ref: activatorRef,
      onMouseEnter: getTooltipPosition,
      onMouseLeave: handleMouseLeave,
      onFocus: getTooltipPosition,
      onBlur: handleMouseLeave,
      style: {
        color: selectedTheme.legend.labelColor
      },
      children: label
    }), (0, import_react_dom4.createPortal)((0, import_jsx_runtime75.jsx)("div", {
      className: style3.Tooltip,
      ref: tooltipRef,
      onMouseLeave: handleMouseLeave,
      onBlur: handleMouseLeave,
      id: tooltipId,
      style: {
        visibility: active ? "visible" : "hidden",
        zIndex: active ? LEGEND_TOOLIP_Z_INDEX : -1e5,
        background: changeColorOpacity(selectedTheme.tooltip.backgroundColor, isFirefox ? 1 : TOOLTIP_BG_OPACITY),
        ...position
      },
      children: (0, import_jsx_runtime75.jsx)(Legend, {
        activeIndex,
        colorVisionType,
        data,
        theme,
        indexOffset: lastVisibleIndex,
        backgroundColor: "transparent",
        seriesNameFormatter
      })
    }), container)]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/hooks/useOverflowLegend.js
var import_react96 = __toESM(require_react());
var LEGEND_GAP = 10;
function useOverflowLegend(props) {
  const {
    direction,
    enableHideOverflow,
    legendItemDimensions,
    data: allData
  } = props;
  const {
    displayedData,
    hiddenData
  } = (0, import_react96.useMemo)(() => {
    if (!enableHideOverflow || !legendItemDimensions.current || allData.length <= 1) {
      return {
        displayedData: allData,
        hiddenData: []
      };
    }
    if (direction === "vertical") {
      const {
        height
      } = props;
      let lastVisibleIndex2 = allData.length;
      legendItemDimensions.current.reduce((totalHeight, card, index2) => {
        if (totalHeight + card.height + index2 * LEGEND_GAP > height) {
          lastVisibleIndex2 = index2;
        } else {
          return totalHeight + card.height;
        }
      }, lastVisibleIndex2);
      return {
        displayedData: allData.slice(0, lastVisibleIndex2 || 1),
        hiddenData: allData.slice(lastVisibleIndex2 || 1, allData.length)
      };
    }
    const {
      width,
      leftMargin,
      horizontalMargin,
      activatorWidth
    } = props;
    let lastVisibleIndex = allData.length;
    const containerWidth = width - leftMargin - horizontalMargin - activatorWidth;
    legendItemDimensions.current.reduce((totalWidth, card, index2) => {
      if (totalWidth + card.width + index2 * LEGEND_GAP > containerWidth) {
        lastVisibleIndex = index2;
      } else {
        return totalWidth + card.width;
      }
    }, lastVisibleIndex);
    return {
      displayedData: allData.slice(0, lastVisibleIndex || 1),
      hiddenData: allData.slice(lastVisibleIndex || 1, allData.length)
    };
  }, [enableHideOverflow, legendItemDimensions, direction, props, allData]);
  return {
    displayedData,
    hiddenData
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LegendContainer/LegendContainer.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
function LegendContainer({
  colorVisionType,
  data: allData,
  onDimensionChange,
  direction = "horizontal",
  fullWidth = false,
  position = "bottom",
  maxWidth,
  renderLegendContent,
  enableHideOverflow = false,
  renderHiddenLegendLabel = (count2) => `+${count2} more`,
  dimensions
}) {
  var _renderLegendContent;
  const selectedTheme = useTheme();
  const {
    setRef,
    entry
  } = useResizeObserver();
  const {
    theme
  } = useChartContext();
  const previousHeight = (0, import_react97.useRef)(DEFAULT_LEGEND_HEIGHT);
  const previousWidth = (0, import_react97.useRef)(DEFAULT_LEGEND_WIDTH);
  const [activeIndex, setActiveIndex] = (0, import_react97.useState)(-1);
  const isPositionTop = position.includes("top");
  const isPositionLeft = position.includes("left");
  const {
    horizontalMargin
  } = selectedTheme.grid;
  const leftMargin = isPositionLeft ? 0 : horizontalMargin;
  const legendItemDimensions = (0, import_react97.useRef)([{
    width: 0,
    height: 0
  }]);
  const [activatorWidth, setActivatorWidth] = (0, import_react97.useState)(0);
  const overflowLegendProps = direction === "horizontal" ? {
    direction: "horizontal",
    data: allData,
    enableHideOverflow,
    legendItemDimensions,
    width: (dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) || 0,
    activatorWidth,
    leftMargin,
    horizontalMargin
  } : {
    direction: "vertical",
    data: allData,
    height: dimensions === null || dimensions === void 0 ? void 0 : dimensions.height,
    enableHideOverflow,
    legendItemDimensions
  };
  const {
    displayedData,
    hiddenData
  } = useOverflowLegend(overflowLegendProps);
  const hasHiddenData = enableHideOverflow && displayedData.length < allData.length;
  const styleMap2 = {
    horizontal: {
      justifyContent: "flex-end",
      margin: isPositionTop ? `0 ${horizontalMargin}px ${LEGENDS_BOTTOM_MARGIN}px ${leftMargin}px` : `${LEGENDS_TOP_MARGIN}px ${horizontalMargin}px 0 ${leftMargin}px`,
      flexDirection: "row",
      flexWrap: enableHideOverflow ? "nowrap" : "wrap"
    },
    vertical: {
      alignItems: "flex-start",
      margin: `0 ${horizontalMargin}px 0 ${leftMargin}px`,
      flexDirection: "column",
      maxWidth: fullWidth ? "none" : maxWidth,
      flex: fullWidth ? 1 : "initial"
    },
    centerTiles: {
      justifyContent: "center"
    }
  };
  const shouldCenterTiles = (pos) => {
    if (pos === "top" || pos === "bottom") {
      return {
        justifyContent: "center"
      };
    }
  };
  const colorVisionInteractionMethods = {
    getColorVisionStyles: (index2) => getColorVisionStylesForActiveIndex({
      activeIndex,
      index: index2
    }),
    getColorVisionEventAttrs: (index2) => getColorVisionEventAttrs({
      type: colorVisionType,
      index: index2
    })
  };
  useWatchColorVisionEvents({
    type: colorVisionType,
    onIndexChange: ({
      detail
    }) => {
      setActiveIndex(detail.index);
    }
  });
  (0, import_react97.useEffect)(() => {
    const newHeight = entry === null || entry === void 0 ? void 0 : entry.contentRect.height;
    const newWidth = entry === null || entry === void 0 ? void 0 : entry.contentRect.width;
    const newDimensions = {
      height: newHeight,
      width: newWidth
    };
    if (entry == null || newHeight == null || newWidth == null) {
      return;
    }
    if ((0, import_fast_deep_equal.default)({
      height: previousHeight.current,
      width: previousWidth.current
    }, newDimensions)) {
      return;
    }
    previousHeight.current = newDimensions.height;
    previousWidth.current = newDimensions.width;
    onDimensionChange(newDimensions);
  }, [entry, onDimensionChange]);
  return (0, import_jsx_runtime76.jsx)("div", {
    className: classNames(style2.Container),
    ref: setRef,
    role: "list",
    style: {
      ...styleMap2[direction],
      ...shouldCenterTiles(position)
    },
    children: (_renderLegendContent = renderLegendContent === null || renderLegendContent === void 0 ? void 0 : renderLegendContent(colorVisionInteractionMethods)) !== null && _renderLegendContent !== void 0 ? _renderLegendContent : (0, import_jsx_runtime76.jsxs)(import_react97.Fragment, {
      children: [(0, import_jsx_runtime76.jsx)(Legend, {
        activeIndex,
        colorVisionType,
        data: hasHiddenData ? displayedData : allData,
        theme,
        itemDimensions: enableHideOverflow ? legendItemDimensions : void 0,
        truncate: hasHiddenData
      }), hasHiddenData && (0, import_jsx_runtime76.jsx)(HiddenLegendTooltip, {
        activeIndex,
        colorVisionType,
        data: hiddenData,
        theme,
        label: renderHiddenLegendLabel(allData.length - displayedData.length),
        lastVisibleIndex: allData.length - hiddenData.length,
        setActivatorWidth,
        dimensions
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/eventPoint.js
function eventPointNative(event) {
  const svgNode2 = event.currentTarget;
  if (svgNode2 == null) {
    return;
  }
  const screenCTM = svgNode2.getScreenCTM();
  if (screenCTM == null) {
    return;
  }
  const point6 = svgNode2.createSVGPoint();
  if (event instanceof MouseEvent) {
    point6.x = event.clientX;
    point6.y = event.clientY;
  } else if (event instanceof TouchEvent) {
    const touch = event.changedTouches[0];
    point6.x = touch.clientX;
    point6.y = touch.clientY;
  }
  const transformedSVGPoint = point6.matrixTransform(screenCTM.inverse());
  return {
    clientX: point6.x,
    clientY: point6.y,
    svgX: transformedSVGPoint.x,
    svgY: transformedSVGPoint.y
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/Chart.js
function Chart4({
  annotationsLookupTable,
  emptyStateText,
  data,
  dimensions,
  renderLegendContent,
  renderTooltipContent,
  renderHiddenLegendLabel,
  seriesNameFormatter,
  showLegend = true,
  hideLegendOverflow = true,
  slots,
  theme = DEFAULT_THEME_NAME,
  xAxisOptions,
  yAxisOptions
}) {
  var _dimensions$x2, _dimensions$y2, _slots$chart;
  useColorVisionEvents({
    enabled: data.length > 1,
    dimensions
  });
  const selectedTheme = useTheme(theme);
  const {
    isPerformanceImpacted
  } = useChartContext();
  const [activeIndex, setActiveIndex] = (0, import_react98.useState)(null);
  const [activeLineIndex, setActiveLineIndex] = (0, import_react98.useState)(-1);
  const [xAxisHeight, setXAxisHeight] = (0, import_react98.useState)(LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = (0, import_react98.useState)(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    data: [{
      shape: "Line",
      series: data
    }],
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveLineIndex(detail.index)
  });
  const {
    hiddenIndexes: hiddenLineIndexes
  } = useExternalHideEvents();
  const indexForLabels = useIndexForLabels(data);
  const {
    formattedLabels,
    unformattedLabels
  } = useFormattedLabels({
    data: [data[indexForLabels]],
    labelFormatter: xAxisOptions.labelFormatter
  });
  const tooltipId = (0, import_react98.useRef)(uniqueId("lineChart"));
  const [svgRef, setSvgRef] = (0, import_react98.useState)(null);
  const emptyState = data.length === 0 || data.every((series) => series.data.length === 0);
  const {
    minY,
    maxY
  } = yAxisMinMax(data);
  const yScaleOptions = {
    formatYAxisLabel: yAxisOptions.labelFormatter,
    integersOnly: yAxisOptions.integersOnly,
    fixedWidth: yAxisOptions.fixedWidth,
    maxYOverride: yAxisOptions.maxYOverride,
    max: maxY,
    min: minY
  };
  const {
    yAxisLabelWidth
  } = useYScale({
    ...yScaleOptions,
    drawableHeight: height,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const {
    longestSeriesLength,
    longestSeriesIndex
  } = useFormatData(data);
  const {
    drawableWidth,
    drawableHeight,
    chartXPosition,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: yAxisLabelWidth
  });
  const hideXAxis = xAxisOptions.hide || selectedTheme.xAxis.hide;
  const {
    xAxisDetails,
    xScale,
    labels
  } = useLinearLabelsAndDimensions({
    data,
    drawableWidth,
    hideXAxis,
    labels: formattedLabels,
    longestSeriesLength
  });
  const {
    ticks: ticks2,
    yScale
  } = useYScale({
    ...yScaleOptions,
    drawableHeight,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const getTooltipMarkup = useLineChartTooltipContent({
    data,
    renderTooltipContent,
    indexForLabels,
    hiddenIndexes: hiddenLineIndexes,
    seriesNameFormatter
  });
  if (xScale == null || drawableWidth == null || yAxisLabelWidth == null) {
    return null;
  }
  function getTooltipPosition({
    event,
    index: index2,
    eventType
  }) {
    if (eventType === "mouse") {
      const point6 = eventPointNative(event);
      if (point6 == null || xScale == null || data[longestSeriesIndex] == null) {
        return TOOLTIP_POSITION_DEFAULT_RETURN;
      }
      const {
        svgX
      } = point6;
      const closestIndex = Math.round(xScale.invert(svgX - chartXPosition));
      const activeIndex2 = clamp({
        amount: closestIndex,
        min: 0,
        max: data[longestSeriesIndex].data.length - 1
      });
      return {
        x: event.pageX,
        y: event.pageY,
        activeIndex: activeIndex2
      };
    } else {
      var _xScale, _dimensions$x, _dimensions$y;
      const activeIndex2 = index2 !== null && index2 !== void 0 ? index2 : 0;
      const x3 = (_xScale = xScale === null || xScale === void 0 ? void 0 : xScale(activeIndex2)) !== null && _xScale !== void 0 ? _xScale : 0;
      return {
        x: x3 + ((_dimensions$x = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x !== void 0 ? _dimensions$x : 0),
        y: (_dimensions$y = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y !== void 0 ? _dimensions$y : 0,
        activeIndex: activeIndex2
      };
    }
  }
  function moveCrosshair(index2) {
    setActiveIndex(0);
    if (index2 == null) {
      return;
    }
    const crosshair = document.getElementById(`${tooltipId.current}-${CROSSHAIR_ID}`);
    if (crosshair == null) {
      return;
    }
    crosshair.setAttribute("x", `${xScale(index2) - selectedTheme.crossHair.width / 2}`);
  }
  const chartBounds = {
    width,
    height,
    x: (_dimensions$x2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x2 !== void 0 ? _dimensions$x2 : chartXPosition,
    y: (_dimensions$y2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y2 !== void 0 ? _dimensions$y2 : chartYPosition
  };
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  const halfXAxisLabelWidth = xAxisDetails.labelWidth / 2;
  return (0, import_jsx_runtime77.jsxs)(import_react98.Fragment, {
    children: [(0, import_jsx_runtime77.jsxs)(ChartElements.Svg, {
      emptyState,
      emptyStateText,
      height,
      role: "table",
      setRef: setSvgRef,
      width,
      children: [hideXAxis ? null : (0, import_jsx_runtime77.jsx)(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        ariaHidden: true,
        isLinearChart: true,
        labels,
        labelWidth: xAxisDetails.labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes: xAxisDetails.reducedLabelIndexes,
        x: xAxisBounds.x - halfXAxisLabelWidth,
        xScale,
        y: xAxisBounds.y
      }), selectedTheme.grid.showHorizontalLines ? (0, import_jsx_runtime77.jsx)(HorizontalGridLines, {
        ticks: ticks2,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, (0, import_jsx_runtime77.jsx)(YAxis, {
        ticks: ticks2,
        width: yAxisLabelWidth + Y_AXIS_LABEL_OFFSET,
        textAlign: "right",
        ariaHidden: true,
        x: yAxisBounds.x,
        y: yAxisBounds.y
      }), emptyState ? null : (0, import_jsx_runtime77.jsx)(VisuallyHiddenRows, {
        data,
        formatYAxisLabel: yAxisOptions.labelFormatter,
        xAxisLabels: labels
      }), (0, import_jsx_runtime77.jsxs)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: [slots === null || slots === void 0 ? void 0 : (_slots$chart = slots.chart) === null || _slots$chart === void 0 ? void 0 : _slots$chart.call(slots, {
          yScale,
          xScale,
          drawableWidth,
          drawableHeight,
          theme
        }), data.map((singleSeries, index2) => {
          var _singleSeries$metadat;
          if (((_singleSeries$metadat = singleSeries.metadata) === null || _singleSeries$metadat === void 0 ? void 0 : _singleSeries$metadat.isVisuallyHidden) === true) {
            return null;
          }
          return (0, import_jsx_runtime77.jsx)(LineSeries, {
            activeLineIndex,
            data: singleSeries,
            hiddenIndexes: hiddenLineIndexes,
            index: index2,
            svgDimensions: {
              height: drawableHeight,
              width: drawableWidth
            },
            theme,
            xScale,
            yScale,
            type: "default"
          }, `${name}-${index2}`);
        }), (0, import_jsx_runtime77.jsx)(PointsAndCrosshair, {
          activeIndex,
          data,
          drawableHeight,
          emptyState,
          hiddenIndexes: hiddenLineIndexes,
          longestSeriesIndex,
          theme,
          tooltipId: tooltipId.current,
          xScale,
          yScale
        })]
      }), hasXAxisAnnotations && (0, import_jsx_runtime77.jsx)("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: (0, import_jsx_runtime77.jsx)(Annotations, {
          annotationsLookupTable,
          axisLabelWidth: xAxisDetails.labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          labels: unformattedLabels,
          onHeightChange: setAnnotationsHeight,
          xScale
        })
      }), hasYAxisAnnotations && (0, import_jsx_runtime77.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        tabIndex: -1,
        children: (0, import_jsx_runtime77.jsx)(YAxisAnnotations, {
          annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          ticks: ticks2,
          yScale
        })
      })]
    }), longestSeriesLength !== -1 && (0, import_jsx_runtime77.jsx)(TooltipWrapper, {
      alwaysUpdatePosition: true,
      chartBounds,
      focusElementDataType: DataType.Point,
      getAlteredPosition: getAlteredLineChartPosition,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      id: tooltipId.current,
      margin: ChartMargin,
      onIndexChange: (index2) => {
        if (index2 != null && isPerformanceImpacted) {
          moveCrosshair(index2);
        } else {
          setActiveIndex(index2);
        }
      },
      parentRef: svgRef,
      usePortal: true
    }), showLegend && (0, import_jsx_runtime77.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent,
      renderHiddenLegendLabel,
      dimensions,
      enableHideOverflow: hideLegendOverflow
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/LineChart.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getAxisOptions.js
function getYAxisOptionsWithDefaults(yAxisOptions = {}) {
  const yAxisOptionsFiltered = removeFalsyValues(yAxisOptions);
  return {
    labelFormatter: (value) => `${value}`,
    integersOnly: false,
    fixedWidth: false,
    maxYOverride: null,
    ...yAxisOptionsFiltered
  };
}
function getXAxisOptionsWithDefaults(xAxisOptions = {}) {
  const xAxisOptionsFiltered = removeFalsyValues(xAxisOptions);
  return {
    labelFormatter: (value) => `${value}`,
    hide: false,
    allowLineWrap: true,
    ...xAxisOptionsFiltered
  };
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/normalizeData.js
function normalizeData(data, key) {
  const normalizedData = {};
  data.forEach((item) => {
    const keyName = item[key];
    normalizedData[keyName] = item;
  });
  return normalizedData;
}

// node_modules/@shopify/polaris-viz/build/esm/components/SkipLink/SkipLink.scss.js
var styles32 = {
  "SkipLink": "_SkipLink_1jwcn_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/SkipLink/SkipLink.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var SkipLink = ({
  children,
  anchorId
}) => {
  return (0, import_jsx_runtime78.jsx)("a", {
    className: styles32.SkipLink,
    href: `#${anchorId}`,
    children
  });
};
var Anchor = ({
  id
}) => (0, import_jsx_runtime78.jsx)("a", {
  id,
  tabIndex: -1
});
SkipLink.Anchor = Anchor;

// node_modules/@shopify/polaris-viz/build/esm/components/LineChart/LineChart.js
function LineChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    data: dataSeries,
    emptyStateText,
    errorText,
    id,
    isAnimated: isAnimated2,
    onError,
    renderLegendContent,
    renderHiddenLegendLabel,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    hideLegendOverflow = true,
    skipLinkText,
    state,
    theme = defaultTheme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints(dataSeries, true);
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors2(data, selectedTheme);
  const skipLinkAnchorId = (0, import_react99.useRef)(uniqueId("lineChart"));
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  const annotationsLookupTable = normalizeData(annotations, "startKey");
  const dataWithDefaults = getLineChartDataWithDefaults(data, seriesColors);
  return (0, import_jsx_runtime79.jsxs)(import_react99.Fragment, {
    children: [skipLinkText == null || skipLinkText.length === 0 || data.length === 0 ? null : (0, import_jsx_runtime79.jsx)(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), (0, import_jsx_runtime79.jsx)(ChartContainer, {
      id,
      data,
      theme,
      isAnimated: isAnimated2,
      type: InternalChartType.Line,
      onError,
      children: state !== ChartState.Success ? (0, import_jsx_runtime79.jsx)(ChartSkeleton, {
        state,
        errorText,
        theme
      }) : (0, import_jsx_runtime79.jsx)(Chart4, {
        annotationsLookupTable,
        data: dataWithDefaults,
        emptyStateText,
        renderLegendContent,
        renderTooltipContent: renderTooltip,
        renderHiddenLegendLabel,
        seriesNameFormatter,
        showLegend,
        hideLegendOverflow,
        theme,
        xAxisOptions: xAxisOptionsWithDefaults,
        yAxisOptions: yAxisOptionsWithDefaults,
        slots: props.slots
      })
    }), skipLinkText == null || skipLinkText.length === 0 ? null : (0, import_jsx_runtime79.jsx)(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/StackedAreaChart.js
var import_react106 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/Chart.js
var import_react105 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/hooks/useStackedChartTooltipContent.js
var import_react100 = __toESM(require_react());
function useStackedChartTooltipContent({
  data,
  renderTooltipContent,
  seriesColors,
  seriesNameFormatter
}) {
  const {
    theme
  } = useChartContext();
  return (0, import_react100.useCallback)((activeIndex) => {
    if (activeIndex === -1) {
      return null;
    }
    const tooltipData = [{
      shape: "Bar",
      data: []
    }];
    data.forEach(({
      name: name2,
      data: seriesData,
      color: color2
    }, index2) => {
      const {
        value
      } = seriesData[activeIndex];
      tooltipData[0].data.push({
        key: `${seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : "")}`,
        value,
        color: color2 !== null && color2 !== void 0 ? color2 : seriesColors[index2]
      });
    });
    return renderTooltipContent({
      data: tooltipData,
      activeIndex,
      title: `${data[0].data[activeIndex].key}`,
      dataSeries: data,
      theme
    });
  }, [data, seriesColors, renderTooltipContent, theme, seriesNameFormatter]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/utilities/yAxisMinMax.js
function yAxisMinMax2(stackedValues) {
  const minY = Math.min(...stackedValues.map((value) => {
    return Math.min(...value.map(([startingValue, endingValue]) => Math.min(startingValue, endingValue)));
  }));
  const maxY = Math.max(...stackedValues.map((value) => Math.max(...value.map(([startingValue, endingValue]) => Math.max(startingValue, endingValue)))));
  return {
    minY,
    maxY
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/utilities/getAlteredStackedAreaChartPosition.js
var TOOLTIP_MARGIN3 = 20;
var SCROLLBAR_WIDTH3 = 20;
function getAlteredStackedAreaChartPosition(props) {
  const {
    currentX,
    currentY,
    chartBounds,
    margin,
    tooltipDimensions
  } = props;
  let x3 = currentX;
  let y3 = currentY;
  y3 = currentY >= chartBounds.y + chartBounds.height ? chartBounds.height - tooltipDimensions.height - TOOLTIP_MARGIN3 - margin.Bottom : currentY;
  const right = getRightPosition(x3, props);
  x3 = right.value;
  if (right.wasOutsideBounds) {
    const left = getLeftPosition3(x3);
    x3 = left.value;
  }
  return {
    x: clamp({
      amount: x3,
      min: TOOLTIP_MARGIN3,
      max: window.innerWidth - props.tooltipDimensions.width - TOOLTIP_MARGIN3 - SCROLLBAR_WIDTH3
    }),
    y: clamp({
      amount: y3,
      min: window.scrollY + TOOLTIP_MARGIN3,
      max: window.scrollY + window.innerHeight - props.tooltipDimensions.height - TOOLTIP_MARGIN3
    })
  };
}
function getLeftPosition3(value) {
  return {
    value: value - TOOLTIP_MARGIN3,
    wasOutsideBounds: false
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/Chart.scss.js
var styles33 = {
  "Group": "_Group_oqjz6_2"
};

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/Chart.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/hooks/useStackedData.js
var import_react101 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getStackedValues.js
function getKey(index2, name2) {
  return `${name2 !== null && name2 !== void 0 ? name2 : "stack"}-${index2}`;
}
function getStackedValues({
  series,
  labels,
  order,
  offset
}) {
  const stackedValues = stack_default().offset(offset).order(order).keys(series.map(({
    name: name2
  }, index2) => getKey(index2, name2)));
  const formattedData = labels.map((_2, labelIndex) => series.reduce((acc, {
    name: name2,
    data
  }, index2) => {
    const indexData = data[labelIndex];
    const namedData = {
      [getKey(index2, name2)]: indexData.value == null ? 0 : indexData.value
    };
    return Object.assign(acc, namedData);
  }, {}));
  return stackedValues(formattedData);
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/hooks/useStackedData.js
function useStackedData({
  data,
  xAxisOptions
}) {
  const indexForLabels = useIndexForLabels(data);
  const {
    formattedLabels
  } = useFormattedLabels({
    data: [data[indexForLabels]],
    labelFormatter: xAxisOptions.labelFormatter
  });
  const stackedValues = getStackedValues({
    series: data,
    labels: formattedLabels,
    order: reverse_default,
    offset: none_default
  });
  const longestSeriesLength = (0, import_react101.useMemo)(() => {
    return Math.max(...stackedValues.map((stack) => stack.length)) - 1;
  }, [stackedValues]);
  const longestSeriesIndex = (0, import_react101.useMemo)(() => data.reduce((maxIndex2, currentSeries, currentIndex) => {
    return data[maxIndex2].data.length < currentSeries.data.length ? currentIndex : maxIndex2;
  }, 0), [data]);
  return {
    labels: formattedLabels,
    longestSeriesIndex,
    longestSeriesLength,
    stackedValues
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/StackedAreas/StackedAreas.js
var import_react103 = __toESM(require_react());
var import_jsx_runtime82 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/Area/AnimatedArea.js
var import_react102 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/Area/Area.scss.js
var styles34 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Group": "_Group_kzepq_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/Area/AnimatedArea.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
function AnimatedArea2({
  activeLineIndex,
  animationIndex,
  areaGenerator,
  colors: colors3,
  data,
  duration,
  id,
  index: index2,
  lineGenerator,
  selectedTheme,
  zeroLineValues
}) {
  const {
    shouldAnimate
  } = useChartContext();
  const delay = animationIndex * (duration / 2);
  const mounted = (0, import_react102.useRef)(false);
  const springConfig = useSpringConfig({
    shouldAnimate,
    animationDelay: shouldAnimate ? delay : 0,
    mountedSpringConfig: AREAS_TRANSITION_CONFIG,
    unmountedSpringConfig: AREAS_LOAD_ANIMATION_CONFIG
  });
  const {
    animatedAreaShape,
    animatedLineShape,
    opacity
  } = useSpring({
    from: {
      opacity: 0,
      animatedAreaShape: areaGenerator(mounted.current ? data : zeroLineValues),
      animatedLineShape: lineGenerator(mounted.current ? data : zeroLineValues)
    },
    to: {
      opacity: 0.25,
      animatedAreaShape: areaGenerator(data),
      animatedLineShape: lineGenerator(data)
    },
    ...springConfig
  });
  if (animatedAreaShape == null || animatedLineShape == null) {
    return null;
  }
  const gradient = getGradientFromColor(colors3[index2]);
  return (0, import_jsx_runtime80.jsxs)("g", {
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index: index2
    }),
    tabIndex: -1,
    children: [(0, import_jsx_runtime80.jsx)("defs", {
      children: (0, import_jsx_runtime80.jsx)(LinearGradientWithStops, {
        id: `area-${id}-${index2}`,
        gradient,
        gradientUnits: "userSpaceOnUse",
        y1: "100%",
        y2: "0%"
      })
    }), (0, import_jsx_runtime80.jsxs)("g", {
      style: getColorVisionStylesForActiveIndex({
        activeIndex: activeLineIndex,
        index: index2
      }),
      "aria-hidden": "true",
      tabIndex: -1,
      className: styles34.Group,
      children: [(0, import_jsx_runtime80.jsx)(animated.path, {
        d: animatedLineShape,
        fill: "none",
        stroke: `url(#area-${id}-${index2})`,
        strokeWidth: selectedTheme.line.width
      }, `line-${index2}`), (0, import_jsx_runtime80.jsx)(animated.path, {
        style: {
          opacity
        },
        d: animatedAreaShape,
        fill: `url(#area-${id}-${index2})`
      }, index2)]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/Area/Area.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
function Area2({
  activeLineIndex,
  areaGenerator,
  colors: colors3,
  data,
  id,
  index: index2,
  lineGenerator,
  selectedTheme
}) {
  const opacity = 0.25;
  const areaShape = areaGenerator(data);
  const lineShape = lineGenerator(data);
  if (areaShape == null || lineShape == null) {
    return null;
  }
  const gradient = getGradientFromColor(colors3[index2]);
  return (0, import_jsx_runtime81.jsxs)("g", {
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_SINGLE_ITEM,
      index: index2
    }),
    tabIndex: -1,
    children: [(0, import_jsx_runtime81.jsx)("defs", {
      children: (0, import_jsx_runtime81.jsx)(LinearGradientWithStops, {
        id: `area-${id}-${index2}`,
        gradient,
        gradientUnits: "userSpaceOnUse",
        y1: "100%",
        y2: "0%"
      })
    }), (0, import_jsx_runtime81.jsxs)("g", {
      style: getColorVisionStylesForActiveIndex({
        activeIndex: activeLineIndex,
        index: index2
      }),
      "aria-hidden": "true",
      tabIndex: -1,
      className: styles34.Group,
      children: [(0, import_jsx_runtime81.jsx)("path", {
        d: lineShape,
        fill: "none",
        stroke: `url(#area-${id}-${index2})`,
        strokeWidth: selectedTheme.line.width
      }, `line-${index2}`), (0, import_jsx_runtime81.jsx)("path", {
        style: {
          opacity
        },
        d: areaShape,
        fill: `url(#area-${id}-${index2})`
      }, index2)]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/StackedAreas/StackedAreas.js
function StackedAreas({
  stackedValues,
  xScale,
  yScale,
  colors: colors3,
  theme,
  zeroLineValues
}) {
  const [activeLineIndex, setActiveLineIndex] = (0, import_react103.useState)(-1);
  const previousStackedValues = usePrevious(stackedValues);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveLineIndex(detail.index);
    }
  });
  const selectedTheme = useTheme(theme);
  const id = (0, import_react103.useMemo)(() => uniqueId("stackedAreas"), []);
  const areaGenerator = area_default().defined(([firstPoint, lastPoint]) => !isNaN(firstPoint) && !isNaN(lastPoint)).x((_2, index2) => xScale(index2)).y0(([firstPoint]) => yScale(firstPoint)).y1(([, lastPoint]) => yScale(lastPoint));
  const lineGenerator = line_default().defined(([firstPoint, lastPoint]) => !isNaN(firstPoint) && !isNaN(lastPoint)).x((_2, index2) => xScale(index2)).y(([, lastPoint]) => yScale(lastPoint));
  if (selectedTheme.line.hasSpline) {
    areaGenerator.curve(curveStepRounded);
    lineGenerator.curve(curveStepRounded);
  }
  const duration = (0, import_react103.useMemo)(() => {
    const count2 = stackedValues.length;
    const duration2 = count2 > LINE_ANIMATION_FAST_COUNT ? LINE_ANIMATION_FAST_DURATION : LINE_ANIMATION_SLOW_DURATION - count2 * LINE_ANIMATION_DURATION_STEP;
    return Math.round(duration2 / LINE_ANIMATION_DURATION_STEP) * LINE_ANIMATION_DURATION_STEP;
  }, [stackedValues.length]);
  return (0, import_jsx_runtime82.jsx)(import_react103.Fragment, {
    children: stackedValues.map((data, index2) => {
      const dataIsValidForAnimation = !previousStackedValues || data.length === previousStackedValues[index2].length;
      const AreaComponent = dataIsValidForAnimation ? AnimatedArea2 : Area2;
      return (0, import_jsx_runtime82.jsx)(AreaComponent, {
        activeLineIndex,
        animationIndex: index2,
        areaGenerator,
        colors: colors3,
        data,
        zeroLineValues: zeroLineValues[index2],
        duration,
        id,
        index: index2,
        lineGenerator,
        selectedTheme
      }, `${id}-${index2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/components/Points/Points.js
var import_react104 = __toESM(require_react());
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
function Points2({
  activePointIndex,
  animatedCoordinates,
  colors: colors3,
  getXPosition: getXPosition3,
  stackedValues,
  tooltipId,
  xScale,
  yScale
}) {
  const [activeLineIndex, setActiveLineIndex] = (0, import_react104.useState)(-1);
  const {
    shouldAnimate
  } = useChartContext();
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveLineIndex(detail.index);
    }
  });
  return (0, import_jsx_runtime83.jsxs)(import_react104.Fragment, {
    children: [stackedValues.map((stack, stackIndex) => {
      if (activePointIndex == null) {
        return null;
      }
      const [_2, y3] = stack[activePointIndex];
      const id = `${tooltipId}-point-${stackIndex}`;
      const color2 = colors3[stackIndex];
      const animatedYPostion = animatedCoordinates == null || animatedCoordinates[stackIndex] == null ? yScale(y3) : animatedCoordinates[stackIndex].to((coord) => coord.y);
      const pointColor = isGradientType(color2) ? `url(#${id})` : changeColorOpacity(color2);
      return (0, import_jsx_runtime83.jsxs)("g", {
        style: getColorVisionStylesForActiveIndex({
          activeIndex: activeLineIndex,
          index: stackIndex,
          fadedOpacity: 0
        }),
        children: [isGradientType(color2) && (0, import_jsx_runtime83.jsx)("defs", {
          children: (0, import_jsx_runtime83.jsx)(LinearGradientWithStops, {
            id,
            gradient: changeGradientOpacity(color2),
            gradientUnits: "userSpaceOnUse",
            y1: "100%",
            y2: "0%"
          })
        }), (0, import_jsx_runtime83.jsx)(Point, {
          color: pointColor,
          cx: getXPosition3({
            isCrosshair: false,
            index: stackIndex
          }),
          cy: animatedYPostion,
          active: true,
          index: stackIndex,
          tabIndex: stackIndex === 0 ? 0 : -1,
          isAnimated: shouldAnimate
        })]
      }, stackIndex);
    }), stackedValues[0].map(([x3, y3], dataIndex) => {
      return (0, import_jsx_runtime83.jsx)(Point, {
        dataType: DataType.Point,
        color: "white",
        cx: xScale(dataIndex),
        cy: yScale(y3),
        active: true,
        index: dataIndex,
        tabIndex: 0,
        ariaLabelledby: tooltipId,
        isAnimated: false,
        ariaHidden: false,
        visuallyHidden: true
      }, `point-${dataIndex}-${x3}}`);
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/Chart.js
var TOOLTIP_POSITION = {
  horizontal: TooltipHorizontalOffset.Left,
  vertical: TooltipVerticalOffset.Center
};
function Chart5({
  annotationsLookupTable,
  xAxisOptions,
  data,
  dimensions,
  renderLegendContent,
  renderTooltipContent,
  showLegend,
  theme,
  yAxisOptions,
  renderHiddenLegendLabel,
  seriesNameFormatter
}) {
  var _dimensions$x, _dimensions$y;
  useColorVisionEvents({
    enabled: data.length > 1
  });
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(data, selectedTheme);
  const [activePointIndex, setActivePointIndex] = (0, import_react105.useState)(null);
  const [svgRef, setSvgRef] = (0, import_react105.useState)(null);
  const [xAxisHeight, setXAxisHeight] = (0, import_react105.useState)(LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = (0, import_react105.useState)(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    colors: seriesColors,
    data: [{
      shape: "Line",
      series: data
    }],
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  const tooltipId = useUniqueId("stackedAreaChart");
  const hideXAxis = xAxisOptions.hide || selectedTheme.xAxis.hide;
  const {
    stackedValues,
    longestSeriesIndex,
    longestSeriesLength,
    labels: formattedLabels
  } = useStackedData({
    data,
    xAxisOptions
  });
  const zeroLineData = data.map((series) => ({
    ...series,
    data: series.data.map((point6) => ({
      ...point6,
      value: 0
    }))
  }));
  const {
    stackedValues: zeroLineValues
  } = useStackedData({
    data: zeroLineData,
    xAxisOptions
  });
  const {
    minY,
    maxY
  } = yAxisMinMax2(stackedValues);
  const yScaleOptions = {
    formatYAxisLabel: yAxisOptions.labelFormatter,
    integersOnly: yAxisOptions.integersOnly,
    maxYOverride: yAxisOptions.maxYOverride,
    max: maxY,
    min: minY
  };
  const {
    yAxisLabelWidth
  } = useYScale({
    ...yScaleOptions,
    drawableHeight: height,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const {
    drawableWidth,
    drawableHeight,
    chartXPosition,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: yAxisLabelWidth
  });
  const {
    xAxisDetails,
    xScale,
    labels
  } = useLinearLabelsAndDimensions({
    data,
    drawableWidth,
    hideXAxis,
    labels: formattedLabels,
    longestSeriesLength
  });
  const {
    ticks: ticks2,
    yScale
  } = useYScale({
    ...yScaleOptions,
    drawableHeight,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const getTooltipMarkup = useStackedChartTooltipContent({
    data,
    renderTooltipContent,
    seriesColors,
    seriesNameFormatter
  });
  const lineGenerator = (0, import_react105.useMemo)(() => {
    const generator = line_default().x((_2, index2) => xScale == null ? 0 : xScale(index2)).y(({
      value
    }) => yScale(value !== null && value !== void 0 ? value : 0)).defined(({
      value
    }) => value != null);
    if (selectedTheme.line.hasSpline) {
      generator.curve(curveStepRounded);
    }
    return generator;
  }, [xScale, yScale, selectedTheme.line.hasSpline]);
  const seriesForAnimation = (0, import_react105.useMemo)(() => {
    return stackedValues.map((value) => {
      return {
        name: "",
        data: value.map((val) => {
          return {
            key: "",
            value: val[1]
          };
        })
      };
    });
  }, [stackedValues]);
  const {
    animatedCoordinates
  } = useLinearChartAnimations({
    data: seriesForAnimation,
    lineGenerator,
    activeIndex: activePointIndex
  });
  const getXPosition3 = ({
    isCrosshair,
    index: index2
  }) => {
    if (xScale == null) {
      return 0;
    }
    const offset = isCrosshair ? selectedTheme.crossHair.width / 2 : 0;
    if (index2 != null && animatedCoordinates != null && animatedCoordinates[index2] != null && animatedCoordinates[index2]) {
      return animatedCoordinates[index2].to((coord) => coord.x - offset);
    }
    return xScale(activePointIndex == null ? 0 : activePointIndex) - offset;
  };
  if (xScale == null || drawableWidth == null || yAxisLabelWidth == null) {
    return null;
  }
  const chartBounds = {
    width,
    height,
    x: (_dimensions$x = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x !== void 0 ? _dimensions$x : chartXPosition,
    y: (_dimensions$y = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y !== void 0 ? _dimensions$y : chartYPosition
  };
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  const halfXAxisLabelWidth = xAxisDetails.labelWidth / 2;
  return (0, import_jsx_runtime84.jsxs)(ChartElements.Div, {
    height,
    width,
    children: [(0, import_jsx_runtime84.jsxs)(ChartElements.Svg, {
      width,
      setRef: setSvgRef,
      role: "table",
      height,
      children: [hideXAxis ? null : (0, import_jsx_runtime84.jsx)(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        isLinearChart: true,
        labels,
        labelWidth: xAxisDetails.labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes: xAxisDetails.reducedLabelIndexes,
        x: xAxisBounds.x - halfXAxisLabelWidth,
        xScale,
        y: xAxisBounds.y
      }), selectedTheme.grid.showHorizontalLines ? (0, import_jsx_runtime84.jsx)(HorizontalGridLines, {
        ticks: ticks2,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, (0, import_jsx_runtime84.jsx)(YAxis, {
        ticks: ticks2,
        width: yAxisLabelWidth,
        textAlign: "right",
        x: yAxisBounds.x,
        y: yAxisBounds.y
      }), (0, import_jsx_runtime84.jsx)(VisuallyHiddenRows, {
        data,
        formatYAxisLabel: yAxisOptions.labelFormatter,
        xAxisLabels: labels
      }), (0, import_jsx_runtime84.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        className: styles33.Group,
        "area-hidden": "true",
        children: (0, import_jsx_runtime84.jsx)(StackedAreas, {
          stackedValues,
          zeroLineValues,
          xScale,
          yScale,
          colors: seriesColors,
          theme
        })
      }), activePointIndex == null ? null : (0, import_jsx_runtime84.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: (0, import_jsx_runtime84.jsx)(Crosshair, {
          x: getXPosition3({
            isCrosshair: true,
            index: 0
          }),
          height: drawableHeight,
          theme
        })
      }), (0, import_jsx_runtime84.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: (0, import_jsx_runtime84.jsx)(Points2, {
          activePointIndex,
          animatedCoordinates,
          colors: seriesColors,
          getXPosition: getXPosition3,
          stackedValues,
          tooltipId,
          xScale,
          yScale
        })
      }), hasXAxisAnnotations && (0, import_jsx_runtime84.jsx)("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: (0, import_jsx_runtime84.jsx)(Annotations, {
          annotationsLookupTable,
          axisLabelWidth: xAxisDetails.labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          labels,
          onHeightChange: setAnnotationsHeight,
          xScale
        })
      }), hasYAxisAnnotations && (0, import_jsx_runtime84.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        tabIndex: -1,
        children: (0, import_jsx_runtime84.jsx)(YAxisAnnotations, {
          annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          ticks: ticks2,
          yScale
        })
      })]
    }), longestSeriesLength !== -1 && (0, import_jsx_runtime84.jsx)(TooltipWrapper, {
      alwaysUpdatePosition: true,
      chartBounds,
      focusElementDataType: DataType.Point,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      getAlteredPosition: getAlteredStackedAreaChartPosition,
      id: tooltipId,
      margin: ChartMargin,
      onIndexChange: (index2) => setActivePointIndex(index2),
      parentRef: svgRef,
      usePortal: true
    }), showLegend && (0, import_jsx_runtime84.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent,
      enableHideOverflow: true,
      dimensions: chartBounds,
      renderHiddenLegendLabel
    })]
  });
  function getTooltipPosition({
    event,
    index: index2,
    eventType
  }) {
    if (eventType === "mouse" && event) {
      const point6 = eventPointNative(event);
      if (point6 == null || xScale == null) {
        return TOOLTIP_POSITION_DEFAULT_RETURN;
      }
      const {
        svgX
      } = point6;
      const closestIndex = Math.round(xScale.invert(svgX - chartXPosition));
      const activeIndex = clamp({
        amount: closestIndex,
        min: 0,
        max: data[longestSeriesIndex].data.length - 1
      });
      return {
        x: event.pageX,
        y: event.pageY,
        position: TOOLTIP_POSITION,
        activeIndex
      };
    } else if (index2 != null) {
      var _xScale, _dimensions$x2, _dimensions$y2;
      const activeIndex = index2 !== null && index2 !== void 0 ? index2 : 0;
      const x3 = (_xScale = xScale === null || xScale === void 0 ? void 0 : xScale(activeIndex)) !== null && _xScale !== void 0 ? _xScale : 0;
      return {
        x: x3 + ((_dimensions$x2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x2 !== void 0 ? _dimensions$x2 : 0),
        y: (_dimensions$y2 = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y2 !== void 0 ? _dimensions$y2 : 0,
        position: TOOLTIP_POSITION,
        activeIndex: index2
      };
    }
    return TOOLTIP_POSITION_DEFAULT_RETURN;
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/StackedAreaChart/StackedAreaChart.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
function StackedAreaChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    xAxisOptions,
    yAxisOptions,
    data: dataSeries,
    state,
    errorText,
    onError,
    tooltipOptions,
    id,
    isAnimated: isAnimated2,
    renderLegendContent,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    skipLinkText,
    theme = defaultTheme,
    renderHiddenLegendLabel
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = fillMissingDataPoints(dataSeries, true);
  const skipLinkAnchorId = (0, import_react106.useRef)(uniqueId("stackedAreaChart"));
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  if (data.length === 0) {
    return null;
  }
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData(annotations, "startKey");
  return (0, import_jsx_runtime85.jsxs)(import_react106.Fragment, {
    children: [skipLinkText == null || skipLinkText.length === 0 ? null : (0, import_jsx_runtime85.jsx)(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), (0, import_jsx_runtime85.jsx)(ChartContainer, {
      data,
      theme,
      id,
      isAnimated: isAnimated2,
      onError,
      children: state !== ChartState.Success ? (0, import_jsx_runtime85.jsx)(ChartSkeleton, {
        state,
        errorText,
        theme
      }) : (0, import_jsx_runtime85.jsx)(Chart5, {
        annotationsLookupTable,
        data,
        renderLegendContent,
        renderTooltipContent: renderTooltip,
        seriesNameFormatter,
        showLegend,
        theme,
        xAxisOptions: xAxisOptionsWithDefaults,
        yAxisOptions: yAxisOptionsWithDefaults,
        renderHiddenLegendLabel
      })
    }), skipLinkText == null || skipLinkText.length === 0 ? null : (0, import_jsx_runtime85.jsx)(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/BarChart/BarChart.js
var import_react132 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/bucketDataSeries.js
function bucketDataSeries({
  dataSeries,
  maxSeries,
  renderBucketLegendLabel = () => "Other"
}) {
  if (dataSeries.length <= maxSeries || maxSeries <= 0) {
    return dataSeries;
  }
  const shownSeries = dataSeries.slice(0, maxSeries);
  const otherSeries = dataSeries.slice(maxSeries);
  const firstSeriesInOtherGroup = otherSeries[0];
  const otherGroup = otherSeries.reduce((accumulator, current) => {
    current.data.forEach((dataPoint, index2) => {
      accumulator.data[index2].value += dataPoint.value || 0;
    });
    return accumulator;
  }, {
    ...firstSeriesInOtherGroup,
    name: renderBucketLegendLabel(),
    data: firstSeriesInOtherGroup.data.map((dataPoint) => ({
      ...dataPoint,
      value: 0
    }))
  });
  return [...shownSeries, otherGroup];
}

// node_modules/@shopify/polaris-viz/build/esm/components/BarChart/BarChart.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/Chart.js
var import_react115 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getVerticalBarChartTooltipPosition.js
function getVerticalBarChartTooltipPosition({
  chartXPosition,
  formatPositionForTooltip,
  maxIndex: maxIndex2,
  step,
  tooltipPosition,
  yMax,
  yMin
}) {
  const {
    event,
    index: index2,
    eventType
  } = tooltipPosition;
  if (eventType === "mouse" && event) {
    const point6 = eventPointNative(event);
    if (point6 == null) {
      return TOOLTIP_POSITION_DEFAULT_RETURN;
    }
    const {
      svgX,
      svgY
    } = point6;
    const currentPoint = svgX - chartXPosition;
    const activeIndex = Math.floor(currentPoint / step);
    if (activeIndex < 0 || activeIndex > maxIndex2 || svgY <= yMin || svgY > yMax) {
      return TOOLTIP_POSITION_DEFAULT_RETURN;
    }
    return formatPositionForTooltip(activeIndex);
  } else if (index2 != null) {
    return formatPositionForTooltip(index2);
  }
  return TOOLTIP_POSITION_DEFAULT_RETURN;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/hooks/useVerticalBarChart.js
var import_react108 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/sortBarChartData.js
function sortBarChartData(labels, data) {
  return labels.map((_2, index2) => {
    return data.map((type) => {
      var _type$data$index;
      const value = (_type$data$index = type.data[index2]) === null || _type$data$index === void 0 ? void 0 : _type$data$index.value;
      if (value !== null && isNaN(Number(value))) {
        return null;
      }
      return value;
    });
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/hooks/useXScale.js
var import_react107 = __toESM(require_react());
var MAX_GROUPS = 9;
var MIN_GROUPS = 2;
var MAX_GAP = 0.5;
var MIN_GAP = 0.25;
function useXScale({
  drawableWidth,
  data,
  labels
}) {
  const gapScale = log().range([MIN_GAP, MAX_GAP]).domain([MIN_GROUPS, MAX_GROUPS]);
  const gap = Math.min(gapScale(data.length), MAX_GAP);
  const xScale = band().range([0, drawableWidth]).paddingInner(gap).paddingOuter(gap / 2).domain(data.map((_2, index2) => index2.toString()));
  const barWidthOffset = xScale.bandwidth() / 2;
  const xAxisLabels = (0, import_react107.useMemo)(() => {
    return labels.map((label, index2) => {
      const barXPosition = xScale(index2.toString());
      const xOffset = barXPosition == null ? barWidthOffset : barWidthOffset + barXPosition;
      return {
        value: label,
        xOffset
      };
    });
  }, [labels, xScale, barWidthOffset]);
  const gapWidth = (0, import_react107.useMemo)(() => {
    return xScale.step() - xScale.bandwidth();
  }, [xScale]);
  return {
    xScale,
    xAxisLabels,
    gapWidth
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/hooks/useVerticalBarChart.js
function useVerticalBarChart({
  data,
  drawableWidth,
  labels
}) {
  const sortedData = sortBarChartData(labels, data);
  const areAllNegative = (0, import_react108.useMemo)(() => {
    return ![...sortedData].reduce((prev, cur) => prev.concat(cur), []).some((num) => num !== null && num > 0);
  }, [sortedData]);
  const {
    xScale,
    gapWidth
  } = useXScale({
    drawableWidth,
    data: sortedData,
    labels
  });
  return {
    sortedData,
    areAllNegative,
    xScale,
    gapWidth
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/Chart.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getStackedMinMax.js
function getStackedMinMax({
  stackedValues,
  data,
  integersOnly
}) {
  if (stackedValues != null) {
    const minStackedValues = stackedValues.map((value) => Math.min(...value.map(([startingValue]) => startingValue)));
    const maxStackedValues = stackedValues.map((value) => Math.max(...value.map(([, endingValue]) => endingValue)));
    const calculatedMax = Math.max(...maxStackedValues);
    const min3 = Math.min(...minStackedValues);
    const max3 = data.length === 0 || calculatedMax === 0 && min3 === 0 ? DEFAULT_MAX_Y : Math.max(0, calculatedMax);
    return {
      min: integersOnly ? Math.floor(min3) : min3,
      max: integersOnly ? Math.ceil(max3) : max3
    };
  } else {
    const groupedDataPoints = data.reduce((groupedData, series) => {
      const rawValues = series.data.map(({
        value
      }) => value).filter((value) => value !== null);
      return groupedData.concat(rawValues);
    }, []);
    const calculatedMax = Math.max(...groupedDataPoints);
    const min3 = Math.min(...groupedDataPoints, 0);
    const max3 = data.length === 0 || calculatedMax === 0 && min3 === 0 ? DEFAULT_MAX_Y : Math.max(0, calculatedMax);
    return {
      min: integersOnly ? Math.floor(min3) : min3,
      max: integersOnly ? Math.ceil(max3) : max3
    };
  }
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useBarChartTooltipContent.js
var import_react109 = __toESM(require_react());
function useBarChartTooltipContent({
  data,
  renderTooltipContent,
  seriesColors,
  seriesNameFormatter
}) {
  const {
    theme
  } = useChartContext();
  return (0, import_react109.useCallback)((activeIndex) => {
    if (activeIndex === -1) {
      return null;
    }
    const tooltipData = [{
      shape: "Bar",
      data: []
    }];
    data.forEach(({
      name: name2,
      data: seriesData,
      color: color2
    }, index2) => {
      const {
        value
      } = seriesData[activeIndex];
      tooltipData[0].data.push({
        key: `${seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : "")}`,
        value,
        color: color2 !== null && color2 !== void 0 ? color2 : seriesColors[index2]
      });
    });
    return renderTooltipContent({
      data: tooltipData,
      activeIndex,
      title: `${data[0].data[activeIndex].key}`,
      dataSeries: data,
      theme
    });
  }, [data, seriesColors, theme, renderTooltipContent, seriesNameFormatter]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/GradientDefs/GradientDefs.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var GRADIENT_ID = "grad";
function GradientDefs({
  direction = "vertical",
  id,
  seriesColors = [],
  size: size2 = "100%",
  gradientUnits
}) {
  const {
    theme
  } = useChartContext();
  return (0, import_jsx_runtime86.jsx)("defs", {
    children: seriesColors.map((color2, index2) => {
      const gradId = getGradientDefId(theme, index2, id);
      return (0, import_jsx_runtime86.jsx)(Gradient, {
        color: color2,
        direction,
        gradientUnits,
        id: gradId,
        size: size2
      }, gradId);
    })
  });
}
function Gradient({
  id,
  color: color2,
  direction,
  size: size2,
  gradientUnits = "userSpaceOnUse"
}) {
  const gradient = getGradientFromColor(color2);
  const position = direction === "vertical" ? {
    y1: size2
  } : {
    x2: size2
  };
  return (0, import_jsx_runtime86.jsx)(LinearGradientWithStops, {
    gradient,
    gradientUnits,
    id,
    ...position
  });
}
function getGradientDefId(theme = DEFAULT_THEME_NAME, index2, id) {
  return [id, theme, index2, GRADIENT_ID].join("-");
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBarGroup/VerticalBarGroup.js
var import_react114 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getLoadAnimationDelay.js
function getLoadAnimationDelay(index2, dataLength) {
  return index2 * (LOAD_ANIMATION_DURATION / dataLength);
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/applyColorVisionToDomElement.js
function applyColorVisionToDomElement({
  element,
  activeIndex,
  isPerformanceImpacted
}) {
  const index2 = Number(element.dataset.index);
  const {
    opacity,
    transition
  } = getColorVisionStylesForActiveIndex({
    activeIndex,
    index: index2
  });
  element.style.opacity = `${opacity}`;
  element.style.transition = isPerformanceImpacted ? "none" : transition;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBarGroup/VerticalBarGroup.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/StackedBarGroups.js
var import_react111 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/StackedBarGroups.scss.js
var styles35 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Group": "_Group_kzepq_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/StackedBarGroups.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/pushGapToArray.js
function pushGapToArray({
  gaps,
  index: index2,
  direction,
  firstGapValue
}) {
  if (!gaps[direction][gaps[direction].length - 1]) {
    gaps[direction].push({
      index: index2,
      gap: firstGapValue
    });
    return;
  }
  const {
    gap
  } = gaps[direction][gaps[direction].length - 1];
  gaps[direction].push({
    index: index2,
    gap: gap + STACKED_BAR_GAP
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/hooks/useStackedGapsForVerticalChart.js
function useStackedGapsForVerticalChart({
  stackedValues,
  labels
}) {
  if (stackedValues == null) {
    return [];
  }
  const formattedStackedValues = labels.map((_2, labelIndex) => {
    return stackedValues.map((data) => {
      return data[labelIndex];
    });
  });
  const groupedGaps = {};
  formattedStackedValues.map((group2, groupIndex) => {
    const gaps = {
      positive: [],
      negative: []
    };
    const areAllNegative = !group2.some(([start2, end]) => {
      return start2 + end > 0;
    });
    group2.forEach(([start2, end], index2) => {
      if (end > 0) {
        pushGapToArray({
          gaps,
          index: index2,
          direction: "positive",
          firstGapValue: 0
        });
      }
      if (start2 < 0) {
        pushGapToArray({
          gaps,
          index: index2,
          direction: "negative",
          firstGapValue: areAllNegative ? 0 : STACKED_BAR_GAP
        });
      }
    });
    groupedGaps[groupIndex] = gaps;
  });
  return groupedGaps;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/utilities/formatAriaLabel.js
function formatAriaLabel(series) {
  return `${series.title}: ${series.data.map(({
    label,
    value
  }) => `${label} ${value}`)}`;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/components/Stack/Stack.js
var import_react110 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/components/Stack/Stack.scss.js
var styles36 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Bar": "_Bar_h2fc5_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/components/Stack/Stack.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/utilities/getBorderRadiusForStackedValues.js
function getBorderRadiusForStackedValues(values, groupIndex) {
  const highestIndex = getIndex(values, (value) => value > 0);
  const lowestIndex = getIndex(values, (value) => value < 0);
  if (groupIndex === highestIndex) {
    return BORDER_RADIUS.Top;
  }
  if (groupIndex === lowestIndex) {
    return BORDER_RADIUS.Bottom;
  }
  return BORDER_RADIUS.None;
}
function getIndex(values, checkFn) {
  let prevIndex = -1;
  const value = values.reduce((prev, cur, curIndex) => {
    if (curIndex > prevIndex && checkFn(cur)) {
      prevIndex = curIndex;
      return cur;
    }
    prevIndex = curIndex;
    return prev;
  }, -1);
  return values.lastIndexOf(value);
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getGapForIndex.js
function getGapForIndex({
  gaps,
  direction,
  seriesIndex
}) {
  var _gaps$direction$find$, _gaps$direction$find;
  return (_gaps$direction$find$ = (_gaps$direction$find = gaps[direction].find(({
    index: index2
  }) => index2 === seriesIndex)) === null || _gaps$direction$find === void 0 ? void 0 : _gaps$direction$find.gap) !== null && _gaps$direction$find$ !== void 0 ? _gaps$direction$find$ : 0;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/utilities/getYPosition.js
function getYPosition({
  start: start2,
  end,
  groupIndex,
  gaps,
  yScale
}) {
  if (start2 < 0) {
    return yScale(end) + getGapForIndex({
      gaps,
      direction: "negative",
      seriesIndex: groupIndex
    });
  }
  if (end > 0) {
    return yScale(end) - getGapForIndex({
      gaps,
      direction: "positive",
      seriesIndex: groupIndex
    });
  }
  return 0;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/components/Stack/Stack.js
function Stack({
  activeBarGroup,
  animationDelay,
  data,
  gaps,
  groupIndex,
  id,
  width,
  x: x3,
  yScale
}) {
  const [activeBarIndex, setActiveBarIndex] = (0, import_react110.useState)(-1);
  const {
    theme,
    shouldAnimate
  } = useChartContext();
  const keys = data[0] ? Object.keys(data[0].data) : [];
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      if (detail.index === -1 || activeBarGroup === -1 || activeBarGroup === groupIndex) {
        setActiveBarIndex(detail.index);
      }
    }
  });
  const {
    transform
  } = useSpring({
    from: {
      transform: `scale(1, 0)`
    },
    to: {
      transform: `scale(1, 1)`
    },
    config: BARS_TRANSITION_CONFIG,
    delay: shouldAnimate ? animationDelay : 0,
    default: {
      immediate: !shouldAnimate
    }
  });
  return (0, import_jsx_runtime87.jsx)(animated.g, {
    style: {
      transform,
      transformOrigin: `0px ${yScale(0)}px`
    },
    children: data.map((data2, index2) => {
      const [start2, end] = data2;
      const height = Math.abs(yScale(end) - yScale(start2));
      const values = data2.data ? Object.values(data2.data) : [];
      const ariaLabel = `${keys[index2]} ${values[index2]}`;
      const pathD = getRoundedRectPath({
        height,
        width,
        borderRadius: getBorderRadiusForStackedValues(values, index2)
      });
      const y3 = getYPosition({
        start: start2,
        end,
        groupIndex: index2,
        gaps: gaps[groupIndex],
        yScale
      });
      return (0, import_jsx_runtime87.jsxs)("g", {
        "aria-hidden": "true",
        children: [(0, import_jsx_runtime87.jsx)("path", {
          fill: `url(#${getGradientDefId(theme, index2, id)})`,
          d: pathD,
          transform: `translate(${x3},${y3})`,
          style: getColorVisionStylesForActiveIndex({
            activeIndex: activeBarIndex,
            index: index2
          }),
          "aria-hidden": "true"
        }, index2), (0, import_jsx_runtime87.jsx)("rect", {
          className: styles36.Bar,
          fill: "transparent",
          height: height + STACKED_BAR_GAP,
          width,
          transform: `translate(${x3},${y3})`,
          ...getColorVisionEventAttrs({
            type: COLOR_VISION_SINGLE_ITEM,
            index: index2
          }),
          tabIndex: -1,
          role: "listitem",
          "aria-label": ariaLabel
        })]
      }, `${groupIndex}-${index2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/StackedBarGroups/StackedBarGroups.js
function StackedBarGroups({
  accessibilityData,
  activeBarGroup,
  drawableHeight,
  gapWidth,
  id,
  labels,
  stackedValues,
  xScale,
  yScale
}) {
  const width = xScale.bandwidth() - BAR_SPACING;
  const formattedStackedValues = (0, import_react111.useMemo)(() => {
    return labels.map((_2, labelIndex) => {
      return stackedValues.map((data) => {
        return data[labelIndex];
      });
    });
  }, [labels, stackedValues]);
  const gaps = useStackedGapsForVerticalChart({
    stackedValues,
    labels
  });
  return (0, import_jsx_runtime88.jsx)(import_react111.Fragment, {
    children: formattedStackedValues.map((item, groupIndex) => {
      var _xScale;
      const x3 = (_xScale = xScale(groupIndex.toString())) !== null && _xScale !== void 0 ? _xScale : 0;
      const groupAriaLabel = formatAriaLabel(accessibilityData[groupIndex]);
      const animationDelay = getLoadAnimationDelay(groupIndex, formattedStackedValues.length);
      return (0, import_jsx_runtime88.jsxs)("g", {
        ...getColorVisionEventAttrs({
          type: COLOR_VISION_GROUP_ITEM,
          index: groupIndex
        }),
        className: styles35.Group,
        style: getColorVisionStylesForActiveIndex({
          activeIndex: activeBarGroup,
          index: groupIndex
        }),
        "aria-label": groupAriaLabel,
        role: "list",
        "data-type": DataType.BarGroup,
        "data-index": groupIndex,
        "aria-hidden": "false",
        children: [(0, import_jsx_runtime88.jsx)("rect", {
          height: drawableHeight,
          fill: "transparent",
          x: x3 - gapWidth / 2,
          width: xScale.bandwidth() + gapWidth,
          "aria-hidden": "true"
        }), (0, import_jsx_runtime88.jsx)(Stack, {
          activeBarGroup,
          animationDelay,
          data: item,
          gaps,
          groupIndex,
          id,
          width,
          x: x3,
          yScale
        })]
      }, groupIndex);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/BarGroup/BarGroup.js
var import_react113 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/BarGroup/BarGroup.scss.js
var styles37 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "BarGroup": "_BarGroup_1gnzm_144",
  "Bar": "_Bar_1gnzm_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/BarGroup/BarGroup.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBar/VerticalBar.js
var import_react112 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBar/VerticalBar.scss.js
var styles38 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Bar": "_Bar_1w2vx_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBar/VerticalBar.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var VerticalBar = (0, import_react112.memo)(function Bar4({
  animationDelay = 0,
  ariaLabel,
  color: color2,
  height,
  index: index2,
  rawValue,
  role,
  width,
  x: x3,
  zeroPosition,
  areAllNegative
}) {
  const selectedTheme = useTheme();
  const borderRadius = selectedTheme.bar.borderRadius;
  const treatAsNegative = rawValue < 0;
  const zeroValue = rawValue === 0;
  const yPosition = (0, import_react112.useMemo)(() => {
    return treatAsNegative ? zeroPosition + height : zeroPosition - height;
  }, [height, treatAsNegative, zeroPosition]);
  const style6 = (0, import_react112.useMemo)(() => {
    if (yPosition == null)
      return;
    return {
      transform: `translateX(${treatAsNegative ? x3 + width : x3}px)`
    };
  }, [yPosition, treatAsNegative, x3, width]);
  const getPath = (0, import_react112.useCallback)((height2 = 0, width2 = 0) => {
    return getRoundedRectPath({
      height: height2,
      width: width2,
      borderRadius: `${borderRadius} ${borderRadius} 0 0`
    });
  }, [borderRadius]);
  const springConfig = useBarSpringConfig({
    animationDelay
  });
  const rotate = `${treatAsNegative ? "rotate(180)" : "rotate(0)"}`;
  const {
    pathD,
    transform
  } = useSpring({
    from: {
      pathD: getPath(1, width),
      transform: `translate(0 ${zeroPosition}) ${rotate}`
    },
    to: {
      pathD: getPath(height, width),
      transform: `translate(0 ${yPosition}) ${rotate}`
    },
    ...springConfig
  });
  return (0, import_jsx_runtime89.jsx)(import_react112.Fragment, {
    children: !zeroValue ? (0, import_jsx_runtime89.jsx)("g", {
      "aria-hidden": "true",
      style: style6,
      children: (0, import_jsx_runtime89.jsx)(animated.path, {
        "data-id": `bar-${index2}`,
        "data-index": index2,
        "data-type": DataType.Bar,
        d: pathD,
        fill: color2,
        "aria-label": ariaLabel,
        role,
        className: styles38.Bar,
        "aria-hidden": "true",
        transform
      })
    }) : (0, import_jsx_runtime89.jsx)(ZeroValueLine, {
      x: x3 + width / 2,
      y: yPosition,
      direction: "vertical",
      areAllNegative
    })
  });
});

// node_modules/@shopify/polaris-viz/build/esm/utilities/getHoverZoneOffset.js
function getHoverZoneOffset({
  barSize,
  zeroPosition,
  max: max3,
  position
}) {
  let offset = HOVER_TARGET_ZONE;
  const chartMaxSize = max3 - zeroPosition;
  const chartNegativeMaxSize = max3 - chartMaxSize;
  if (position === "horizontal") {
    if (barSize + offset >= chartMaxSize) {
      offset = chartMaxSize - barSize;
    }
  } else if (barSize + offset >= chartNegativeMaxSize) {
    offset = chartNegativeMaxSize - barSize;
  }
  const clampedSize = clamp({
    amount: barSize + offset,
    min: barSize,
    max: max3
  });
  return {
    clampedSize,
    offset
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/BarGroup/BarGroup.js
var COLOR_VISION_MASK = "colorVisionMask";
function BarGroup({
  animationDelay,
  x: x3,
  data,
  yScale,
  width,
  colors: colors3,
  drawableHeight,
  indexOffset,
  barGroupIndex,
  accessibilityData,
  activeBarGroup,
  gapWidth,
  theme,
  areAllNegative
}) {
  const groupAriaLabel = formatAriaLabel(accessibilityData[barGroupIndex]);
  const {
    id,
    isPerformanceImpacted
  } = useChartContext();
  const selectedTheme = useTheme(theme);
  const maskItems = (0, import_react113.useMemo)(() => {
    const chart = document.getElementById(getChartId(id));
    if (chart == null) {
      return [];
    }
    return chart.querySelectorAll(`[data-type="${COLOR_VISION_MASK}"][data-group-index="${barGroupIndex}"]`);
  }, [colors3]);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      if (detail.index === -1 || activeBarGroup === -1 || activeBarGroup === barGroupIndex) {
        maskItems.forEach((element) => {
          applyColorVisionToDomElement({
            element,
            activeIndex: detail.index,
            isPerformanceImpacted
          });
        });
      }
    }
  });
  const dataLength = clamp({
    amount: data.length,
    min: 1,
    max: Infinity
  });
  const barWidth = width / dataLength;
  const getBarHeight = (0, import_react113.useCallback)((rawValue) => {
    return Math.abs(yScale(rawValue) - yScale(0));
  }, [yScale]);
  const gradientId = (0, import_react113.useMemo)(() => uniqueId("gradient"), []);
  const maskId = (0, import_react113.useMemo)(() => uniqueId("mask"), []);
  const gradients = colors3.map((color2) => {
    return typeof color2 === "string" ? [{
      color: color2,
      offset: 0
    }] : color2;
  });
  return (0, import_jsx_runtime90.jsxs)(import_react113.Fragment, {
    children: [(0, import_jsx_runtime90.jsx)("mask", {
      id: maskId,
      children: data.map((rawValue, index2) => {
        if (rawValue == null) {
          return null;
        }
        return (0, import_jsx_runtime90.jsx)("g", {
          className: styles37.BarGroup,
          "data-type": DataType.BarGroup,
          "data-index": barGroupIndex,
          children: (0, import_jsx_runtime90.jsx)(VerticalBar, {
            height: getBarHeight(rawValue),
            color: MASK_HIGHLIGHT_COLOR,
            x: x3 + (barWidth + BAR_SPACING) * index2,
            zeroPosition: yScale(0),
            rawValue,
            width: barWidth,
            index: index2,
            animationDelay,
            areAllNegative
          })
        }, `${barGroupIndex}${index2}`);
      })
    }), (0, import_jsx_runtime90.jsx)("g", {
      mask: `url(#${maskId})`,
      children: gradients.map((gradient, index2) => {
        return (0, import_jsx_runtime90.jsxs)("g", {
          children: [(0, import_jsx_runtime90.jsx)(LinearGradientWithStops, {
            gradient,
            id: `${gradientId}${index2}`
          }), (0, import_jsx_runtime90.jsx)("rect", {
            x: x3 + (barWidth + BAR_SPACING) * index2,
            y: SHAPE_ANIMATION_HEIGHT_BUFFER * -1,
            width: barWidth - BAR_SPACING,
            height: drawableHeight + SHAPE_ANIMATION_HEIGHT_BUFFER * 2,
            "data-type": COLOR_VISION_MASK,
            "data-index": index2,
            "data-group-index": barGroupIndex,
            fill: data[index2] === 0 ? selectedTheme.bar.zeroValueColor : `url(#${gradientId}${index2})`
          })]
        }, `${maskId}${index2}`);
      })
    }), (0, import_jsx_runtime90.jsxs)("g", {
      ...getColorVisionEventAttrs({
        type: COLOR_VISION_GROUP_ITEM,
        index: barGroupIndex
      }),
      className: styles37.BarGroup,
      "data-type": DataType.BarGroup,
      "data-index": barGroupIndex,
      "aria-hidden": "false",
      "aria-label": groupAriaLabel,
      role: "list",
      children: [(0, import_jsx_runtime90.jsx)("rect", {
        width: barWidth * dataLength + gapWidth,
        x: x3 - gapWidth / 2,
        height: drawableHeight,
        fill: "transparent",
        "aria-hidden": "true"
      }), data.map((rawValue, index2) => {
        if (rawValue === null) {
          return null;
        }
        const {
          label,
          value
        } = accessibilityData[barGroupIndex].data[index2];
        const ariaLabel = `${label} ${value}`;
        const height = clamp({
          amount: Math.abs(yScale(rawValue) - yScale(0)),
          min: 1,
          max: Infinity
        });
        const isNegative = rawValue < 0;
        const y3 = isNegative ? yScale(0) : yScale(0) - height;
        const {
          clampedSize,
          offset
        } = getHoverZoneOffset({
          barSize: height,
          zeroPosition: yScale(0),
          max: drawableHeight,
          position: "vertical"
        });
        return (0, import_jsx_runtime90.jsx)("rect", {
          height: clampedSize,
          x: x3 + barWidth * index2,
          y: isNegative || areAllNegative ? y3 : y3 - offset,
          width: barWidth,
          fill: "transparent",
          "aria-label": ariaLabel,
          role: "listitem",
          ...getColorVisionEventAttrs({
            type: COLOR_VISION_SINGLE_ITEM,
            index: index2 + indexOffset,
            watch: !isPerformanceImpacted
          }),
          className: styles37.Bar,
          tabIndex: -1
        }, index2);
      })]
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/components/VerticalBarGroup/VerticalBarGroup.js
function VerticalBarGroup({
  colors: colors3,
  data,
  drawableHeight,
  gapWidth,
  id,
  indexOffset = 0,
  labels,
  sortedData,
  stackedValues,
  xScale,
  yScale,
  yAxisOptions,
  areAllNegative
}) {
  const {
    id: chartId,
    isPerformanceImpacted
  } = useChartContext();
  const [activeBarGroup, setActiveBarGroup] = (0, import_react114.useState)(-1);
  const groupElements = (0, import_react114.useMemo)(() => {
    const chart = document.getElementById(getChartId(chartId));
    if (chart == null) {
      return [];
    }
    return chart.querySelectorAll(`[data-type="${DataType.BarGroup}"]`);
  }, [sortedData]);
  useWatchColorVisionEvents({
    type: COLOR_VISION_GROUP_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveBarGroup(detail.index);
      groupElements.forEach((element) => {
        applyColorVisionToDomElement({
          element,
          activeIndex: detail.index,
          isPerformanceImpacted
        });
      });
    }
  });
  const accessibilityData = (0, import_react114.useMemo)(() => labels.map((title, index2) => {
    const content = data.map(({
      data: data2,
      name: name2
    }) => {
      var _data$index$value;
      return {
        label: name2 !== null && name2 !== void 0 ? name2 : "",
        value: yAxisOptions.labelFormatter((_data$index$value = data2[index2].value) !== null && _data$index$value !== void 0 ? _data$index$value : 0)
      };
    });
    return {
      title,
      data: content
    };
  }), [data, labels, yAxisOptions]);
  if (stackedValues != null) {
    return (0, import_jsx_runtime91.jsx)(StackedBarGroups, {
      accessibilityData,
      activeBarGroup,
      colors: colors3,
      drawableHeight,
      gapWidth,
      id,
      labels,
      stackedValues,
      xScale,
      yScale
    });
  }
  return (0, import_jsx_runtime91.jsx)(import_react114.Fragment, {
    children: sortedData.map((item, index2) => {
      const xPosition = xScale(index2.toString());
      const animationDelay = getLoadAnimationDelay(index2, sortedData.length);
      return (0, import_jsx_runtime91.jsx)(BarGroup, {
        accessibilityData,
        activeBarGroup,
        animationDelay,
        barGroupIndex: index2,
        colors: colors3,
        data: item,
        gapWidth,
        drawableHeight,
        indexOffset,
        width: xScale.bandwidth(),
        x: xPosition == null ? 0 : xPosition,
        yScale,
        areAllNegative
      }, index2);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/Chart.js
function Chart6({
  annotationsLookupTable = {},
  data,
  dimensions,
  emptyStateText,
  renderLegendContent,
  renderTooltipContent,
  showLegend,
  type,
  xAxisOptions,
  yAxisOptions,
  renderHiddenLegendLabel,
  seriesNameFormatter
}) {
  useColorVisionEvents({
    enabled: data.length > 1,
    dimensions
  });
  const selectedTheme = useTheme();
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const [svgRef, setSvgRef] = (0, import_react115.useState)(null);
  const id = (0, import_react115.useMemo)(() => uniqueId("VerticalBarChart"), []);
  const [xAxisHeight, setXAxisHeight] = (0, import_react115.useState)(LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = (0, import_react115.useState)(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    data: [{
      shape: "Bar",
      series: data
    }],
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  const emptyState = data.length === 0;
  const indexForLabels = useIndexForLabels(data);
  const {
    formattedLabels,
    unformattedLabels
  } = useFormattedLabels({
    data: [data[indexForLabels]],
    labelFormatter: xAxisOptions.labelFormatter
  });
  const isStacked = type === "stacked";
  const stackedValues = isStacked ? getStackedValues({
    series: data,
    labels: formattedLabels,
    order: none_default2,
    offset: diverging_default
  }) : null;
  const reducedLabelIndexes = useReducedLabelIndexes({
    dataLength: data[0] ? data[0].data.length : 0
  });
  const {
    min: min3,
    max: max3
  } = getStackedMinMax({
    stackedValues,
    data,
    integersOnly: yAxisOptions.integersOnly
  });
  let yScaleMax;
  if (yAxisOptions.maxYOverride === null) {
    yScaleMax = max3;
  } else {
    const allValuesAreZero = data.every((series) => series.data.every((point6) => point6.value === 0));
    yScaleMax = allValuesAreZero ? 0 : max3;
  }
  const yScaleOptions = {
    formatYAxisLabel: yAxisOptions.labelFormatter,
    integersOnly: yAxisOptions.integersOnly,
    maxYOverride: yAxisOptions.maxYOverride,
    max: yScaleMax,
    min: min3
  };
  const {
    ticks: initialTicks
  } = useYScale({
    ...yScaleOptions,
    drawableHeight: height,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const yAxisLabelWidth = (0, import_react115.useMemo)(() => {
    const longest = Math.max(...initialTicks.map(({
      formattedValue
    }) => estimateStringWidth(formattedValue, characterWidths2)));
    return longest;
  }, [characterWidths2, initialTicks]);
  const {
    drawableWidth,
    drawableHeight,
    chartXPosition,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: yAxisLabelWidth
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const chartBounds = {
    width,
    height,
    x: chartXPosition,
    y: chartYPosition
  };
  const hideXAxis = xAxisOptions.hide || selectedTheme.xAxis.hide;
  const {
    sortedData,
    areAllNegative,
    xScale,
    gapWidth
  } = useVerticalBarChart({
    data,
    drawableWidth,
    labels: formattedLabels
  });
  const {
    ticks: ticks2,
    yScale
  } = useYScale({
    ...yScaleOptions,
    drawableHeight,
    verticalOverflow: selectedTheme.grid.verticalOverflow
  });
  const barColors = data.map(({
    color: color2
  }) => color2);
  const getTooltipMarkup = useBarChartTooltipContent({
    renderTooltipContent,
    data,
    seriesColors: barColors,
    seriesNameFormatter
  });
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  const xAxisLabelHalf = xScale.bandwidth() / 2;
  return (0, import_jsx_runtime92.jsxs)(ChartElements.Div, {
    height,
    width,
    children: [(0, import_jsx_runtime92.jsxs)(ChartElements.Svg, {
      height,
      width,
      emptyStateText,
      emptyState,
      setRef: setSvgRef,
      children: [hideXAxis ? null : (0, import_jsx_runtime92.jsx)(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        labels: formattedLabels,
        labelWidth: xScale.bandwidth(),
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes,
        x: xAxisBounds.x,
        xScale,
        y: xAxisBounds.y
      }), (0, import_jsx_runtime92.jsx)(GradientDefs, {
        direction: "vertical",
        gradientUnits: isStacked ? "objectBoundingBox" : "userSpaceOnUse",
        id,
        seriesColors: barColors,
        size: isStacked ? "100%" : `${width}px`
      }), selectedTheme.grid.showHorizontalLines ? (0, import_jsx_runtime92.jsx)(HorizontalGridLines, {
        ticks: ticks2,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, (0, import_jsx_runtime92.jsx)(YAxis, {
        ticks: ticks2,
        textAlign: "right",
        width: yAxisLabelWidth,
        x: yAxisBounds.x,
        y: yAxisBounds.y
      }), (0, import_jsx_runtime92.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: (0, import_jsx_runtime92.jsx)(VerticalBarGroup, {
          colors: barColors,
          data,
          drawableHeight,
          gapWidth,
          id,
          labels: formattedLabels,
          sortedData,
          stackedValues,
          xScale,
          yAxisOptions,
          yScale,
          areAllNegative
        })
      }), hasXAxisAnnotations && (0, import_jsx_runtime92.jsx)("g", {
        transform: `translate(${chartXPosition + xAxisLabelHalf},0)`,
        tabIndex: -1,
        children: (0, import_jsx_runtime92.jsx)(Annotations, {
          annotationsLookupTable,
          axisLabelWidth: xScale.bandwidth(),
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          labels: unformattedLabels,
          onHeightChange: setAnnotationsHeight,
          xScale
        })
      }), hasYAxisAnnotations && (0, import_jsx_runtime92.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        tabIndex: -1,
        children: (0, import_jsx_runtime92.jsx)(YAxisAnnotations, {
          annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          ticks: ticks2,
          yScale
        })
      })]
    }), sortedData.length > 0 && (0, import_jsx_runtime92.jsx)(TooltipWrapper, {
      bandwidth: xScale.bandwidth(),
      chartBounds,
      focusElementDataType: DataType.BarGroup,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      margin: {
        ...ChartMargin,
        Top: chartYPosition
      },
      parentRef: svgRef,
      chartDimensions: dimensions,
      usePortal: true
    }), showLegend && (0, import_jsx_runtime92.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent,
      enableHideOverflow: true,
      dimensions,
      renderHiddenLegendLabel
    })]
  });
  function formatPositionForTooltip(index2) {
    var _xScale, _dimensions$x, _dimensions$y;
    if (index2 == null) {
      return TOOLTIP_POSITION_DEFAULT_RETURN;
    }
    const xPosition = (_xScale = xScale(`${index2}`)) !== null && _xScale !== void 0 ? _xScale : 0;
    const sortedDataPos = sortedData[index2].map((num) => Math.abs(num !== null && num !== void 0 ? num : 0));
    const highestValuePos = type === "stacked" ? sortedData[index2].reduce(sumPositiveData, 0) : Math.max(...sortedDataPos);
    const x3 = xPosition + chartXPosition;
    const y3 = yScale(highestValuePos) + chartYPosition;
    return {
      x: x3 + ((_dimensions$x = dimensions === null || dimensions === void 0 ? void 0 : dimensions.x) !== null && _dimensions$x !== void 0 ? _dimensions$x : 0),
      y: Math.abs(y3) + ((_dimensions$y = dimensions === null || dimensions === void 0 ? void 0 : dimensions.y) !== null && _dimensions$y !== void 0 ? _dimensions$y : 0),
      position: {
        horizontal: TooltipHorizontalOffset.Center,
        vertical: areAllNegative ? TooltipVerticalOffset.Below : TooltipVerticalOffset.Above
      },
      activeIndex: index2
    };
  }
  function getTooltipPosition({
    event,
    index: index2,
    eventType
  }) {
    return getVerticalBarChartTooltipPosition({
      tooltipPosition: {
        event,
        index: index2,
        eventType
      },
      chartXPosition,
      formatPositionForTooltip,
      maxIndex: sortedData.length - 1,
      step: xScale.step(),
      yMin: ChartMargin.Top,
      yMax: drawableHeight + Number(ChartMargin.Bottom) + xAxisHeight
    });
  }
}
function sumPositiveData(prevValue, currValue) {
  return currValue < 0 ? prevValue : prevValue + currValue;
}

// node_modules/@shopify/polaris-viz/build/esm/components/VerticalBarChart/VerticalBarChart.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
function VerticalBarChart({
  annotationsLookupTable = {},
  data,
  dimensions,
  emptyStateText,
  renderLegendContent,
  renderTooltipContent,
  showLegend,
  type = "default",
  xAxisOptions,
  yAxisOptions,
  renderHiddenLegendLabel,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme();
  const seriesColors = useThemeSeriesColors(data, selectedTheme);
  const seriesWithDefaults = data.map((series, index2) => ({
    color: seriesColors[index2],
    ...series
  }));
  return (0, import_jsx_runtime93.jsx)(Chart6, {
    dimensions,
    annotationsLookupTable,
    data: seriesWithDefaults,
    emptyStateText,
    renderLegendContent,
    renderTooltipContent,
    seriesNameFormatter,
    showLegend,
    type,
    xAxisOptions,
    yAxisOptions,
    renderHiddenLegendLabel
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/Chart.js
var import_react131 = __toESM(require_react());
var import_jsx_runtime105 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalSeriesColors.js
var import_react116 = __toESM(require_react());
function useHorizontalSeriesColors(data) {
  const selectedTheme = useTheme();
  const longestSeriesCount = (0, import_react116.useMemo)(() => {
    return data.reduce((prev, cur) => {
      const count2 = cur.data.length;
      return count2 > prev ? count2 : prev;
    }, 0);
  }, [data]);
  const seriesColors = (0, import_react116.useMemo)(() => {
    const nonComparison = data.filter(({
      isComparison
    }) => isComparison !== true);
    const seriesColors2 = getSeriesColors(nonComparison.length, selectedTheme);
    data.forEach(({
      color: color2,
      isComparison
    }, index2) => {
      let newColor;
      if (isComparison) {
        newColor = selectedTheme.seriesColors.comparison;
      } else if (color2 != null) {
        newColor = color2;
      }
      if (newColor) {
        seriesColors2.splice(index2, 0, newColor);
      }
    });
    return seriesColors2.slice(0, data.length);
  }, [data, selectedTheme]);
  return {
    longestSeriesCount,
    seriesColors
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useDataForHorizontalChart.js
var import_react117 = __toESM(require_react());
function useDataForHorizontalChart({
  data,
  isSimple,
  isStacked,
  labelFormatter
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const allNumbers = (0, import_react117.useMemo)(() => {
    return data.reduce((prev, cur) => {
      const numbers2 = cur.data.map(({
        value
      }) => value).filter((value) => value !== null);
      return prev.concat(...numbers2);
    }, []);
  }, [data]);
  const lowestNegative = (0, import_react117.useMemo)(() => Math.min(0, ...allNumbers), [allNumbers]);
  const highestPositive = (0, import_react117.useMemo)(() => Math.max(0, ...allNumbers), [allNumbers]);
  const longestLabel = (0, import_react117.useMemo)(() => {
    if (!isSimple && !isStacked) {
      return {
        positive: 0,
        negative: 0
      };
    }
    const negativeTextSize = lowestNegative === 0 ? 0 : estimateStringWidth(`${labelFormatter(lowestNegative)}`, characterWidths2) + HORIZONTAL_BAR_LABEL_OFFSET;
    const positiveTextSize = highestPositive === 0 ? 0 : estimateStringWidth(`${labelFormatter(highestPositive)}`, characterWidths2) + HORIZONTAL_BAR_LABEL_OFFSET;
    return {
      negative: negativeTextSize,
      positive: positiveTextSize
    };
  }, [labelFormatter, isSimple, isStacked, highestPositive, lowestNegative, characterWidths2]);
  const areAllZero = (0, import_react117.useMemo)(() => {
    return !allNumbers.some((num) => num !== null && num !== 0);
  }, [allNumbers]);
  const areAllNegative = (0, import_react117.useMemo)(() => {
    if (areAllZero) {
      return false;
    }
    return !allNumbers.some((num) => num !== null && num > 0);
  }, [areAllZero, allNumbers]);
  return {
    allNumbers,
    areAllNegative,
    highestPositive,
    longestLabel,
    lowestNegative
  };
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/formatDataIntoGroups.js
function formatDataIntoGroups(data) {
  const groups2 = [];
  data.forEach(({
    data: dataPoints
  }) => {
    dataPoints.forEach(({
      value
    }, dataIndex) => {
      if (value == null) {
        return;
      }
      if (!groups2[dataIndex]) {
        groups2[dataIndex] = [value];
      } else {
        groups2[dataIndex].push(value);
      }
    });
  });
  return groups2;
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalStackedValues.js
var import_react118 = __toESM(require_react());
function useHorizontalStackedValues({
  data,
  isStacked
}) {
  const {
    stackedValues,
    stackedMin,
    stackedMax
  } = (0, import_react118.useMemo)(() => {
    if (!isStacked || data.length === 0) {
      return {
        stackedMin: 0,
        stackedMax: 0,
        labels: [],
        stackedValues: []
      };
    }
    const longestSeries = data.reduce((prev, cur) => {
      if (cur.data.length > prev.data.length) {
        return cur;
      }
      return prev;
    }, data[0]);
    const labels = longestSeries.data.map(({
      key
    }) => `${key}`);
    const stackedValues2 = getStackedValues({
      series: data,
      labels,
      order: none_default2,
      offset: diverging_default
    });
    const {
      min: min3,
      max: max3
    } = getStackedMinMax({
      stackedValues: stackedValues2,
      data,
      integersOnly: false
    });
    const formattedStackedValues = labels.map((_2, labelIndex) => {
      return stackedValues2.map((data2) => {
        return data2[labelIndex];
      });
    });
    return {
      stackedMin: min3,
      stackedMax: max3,
      labels,
      stackedValues: formattedStackedValues
    };
  }, [isStacked, data]);
  return {
    stackedValues,
    stackedMin,
    stackedMax
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalTicksAndScale.js
var import_react119 = __toESM(require_react());
function useHorizontalTicksAndScale({
  maxWidth,
  allNumbers,
  labelFormatter,
  isStacked,
  stackedMin,
  stackedMax
}) {
  const xScale = (0, import_react119.useMemo)(() => {
    const areAllZero = !allNumbers.some((num) => num != null && num !== 0);
    const domainValues = [0, ...allNumbers];
    if (areAllZero) {
      domainValues.push(1);
    }
    return linear2().range([0, maxWidth]).domain(extent(domainValues, (num) => num)).nice();
  }, [maxWidth, allNumbers]);
  const ticks2 = (0, import_react119.useMemo)(() => {
    return xScale.ticks();
  }, [xScale]);
  const xScaleStacked = (0, import_react119.useMemo)(() => {
    if (!isStacked) {
      return null;
    }
    const xScale2 = linear2().range([0, maxWidth]).domain([stackedMin, stackedMax]).nice();
    return xScale2;
  }, [isStacked, maxWidth, stackedMin, stackedMax]);
  const ticksStacked = (0, import_react119.useMemo)(() => {
    if (!isStacked || !xScaleStacked) {
      return [];
    }
    return xScaleStacked.ticks();
  }, [isStacked, xScaleStacked]);
  const finalTicks = isStacked ? ticksStacked : ticks2;
  return {
    ticks: finalTicks,
    xScale: isStacked ? xScaleStacked : xScale,
    ticksFormatted: finalTicks.map((tick) => `${labelFormatter(tick)}`)
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalXScale.js
function useHorizontalXScale({
  allNumbers,
  isStacked,
  labelFormatter,
  maxWidth,
  stackedMax = 0,
  stackedMin = 0,
  longestLabel
}) {
  let drawableWidth = maxWidth;
  let chartXPosition = 0;
  const labelWidth = longestLabel.positive + longestLabel.negative;
  drawableWidth -= labelWidth;
  chartXPosition += labelWidth / 2;
  const {
    xScale,
    ticks: ticks2,
    ticksFormatted
  } = useHorizontalTicksAndScale({
    maxWidth: drawableWidth,
    allNumbers,
    labelFormatter,
    isStacked,
    stackedMin,
    stackedMax
  });
  return {
    xScale,
    ticks: ticks2,
    ticksFormatted,
    drawableWidth,
    chartXPosition
  };
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalBarSizes.js
var import_react120 = __toESM(require_react());
var MIN_BAR_HEIGHT2 = 6;
function useHorizontalBarSizes({
  chartDimensions,
  isSimple,
  isStacked,
  seriesLength,
  singleBarCount,
  xAxisHeight
}) {
  return (0, import_react120.useMemo)(() => {
    const spaceBetweenXAxis = isSimple ? 0 : HORIZONTAL_SPACE_BETWEEN_CHART_AND_AXIS;
    const simpleHeight = chartDimensions.height + HORIZONTAL_SPACE_BETWEEN_SETS;
    const containerHeight = isSimple ? simpleHeight : chartDimensions.height;
    const xAxisAreaHeight = isSimple ? 0 : xAxisHeight + spaceBetweenXAxis;
    const chartHeight = containerHeight - xAxisAreaHeight;
    const groupHeight = chartHeight / seriesLength;
    const groupBarsAreaHeight = groupHeight - HORIZONTAL_GROUP_LABEL_HEIGHT - (singleBarCount - 1) * HORIZONTAL_SPACE_BETWEEN_SINGLE - HORIZONTAL_SPACE_BETWEEN_SETS;
    const barHeight = clamp({
      amount: groupBarsAreaHeight / (isStacked ? 1 : singleBarCount),
      min: MIN_BAR_HEIGHT2,
      max: Infinity
    });
    if (WARN_FOR_DEVELOPMENT && groupBarsAreaHeight < 0) {
      console.error("The height available for drawing the chart is too small and this will cause overlaps between labels and bars. Maybe you should increase the chart height or use fewer data series?");
    }
    return {
      barHeight,
      chartHeight,
      groupBarsAreaHeight,
      groupHeight
    };
  }, [chartDimensions, isSimple, isStacked, seriesLength, singleBarCount, xAxisHeight]);
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/useHorizontalTransitions.js
var import_react121 = __toESM(require_react());
function useHorizontalTransitions({
  chartXPosition,
  groupHeight,
  series
}) {
  const {
    shouldAnimate,
    id
  } = useChartContext();
  const seriesWithIndex = (0, import_react121.useMemo)(() => {
    return series[0].data.map(({
      key
    }, index2) => ({
      key: `${key}`,
      index: index2
    }));
  }, [series]);
  const getTransform = (index2) => {
    return `translate(${chartXPosition}px,${groupHeight * index2}px)`;
  };
  const animationTrail = 50;
  const outOfChartPosition = getTransform(series.length + 1);
  const transitions = useTransition(seriesWithIndex, {
    keys: (item) => {
      return item.key === "" ? `${id}-${item.index}` : item.key;
    },
    initial: ({
      index: index2
    }) => ({
      opacity: 1,
      transform: getTransform(index2)
    }),
    from: ({
      index: index2
    }) => ({
      opacity: 0,
      transform: shouldAnimate ? outOfChartPosition : getTransform(index2)
    }),
    leave: {
      opacity: 0,
      transform: outOfChartPosition
    },
    update: ({
      index: index2
    }) => ({
      opacity: 1,
      transform: getTransform(index2)
    }),
    expires: true,
    config: BARS_SORT_TRANSITION_CONFIG,
    trail: shouldAnimate ? animationTrail : 0,
    immediate: !shouldAnimate
  });
  return {
    transitions
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/VerticalGridLines/VerticalGridLines.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var VerticalGridLines = ({
  chartHeight,
  ticks: ticks2,
  xScale,
  stroke
}) => {
  return (0, import_jsx_runtime94.jsx)("g", {
    transform: `translate(0, ${HORIZONTAL_GROUP_LABEL_HEIGHT})`,
    "aria-hidden": "true",
    children: ticks2.map((value, index2) => {
      if (value === 0) {
        return null;
      }
      return (0, import_jsx_runtime94.jsx)("line", {
        y1: 0,
        y2: chartHeight - HORIZONTAL_GROUP_LABEL_HEIGHT,
        stroke,
        transform: `translate(${xScale(value)},0)`
      }, index2);
    })
  });
};

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChartXAxisLabels/HorizontalBarChartXAxisLabels.js
var import_react122 = __toESM(require_react());
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
function HorizontalBarChartXAxisLabels({
  allowLineWrap,
  chartX,
  chartY,
  labels,
  labelWidth,
  onHeightChange,
  ticks: ticks2,
  xScale
}) {
  const {
    lines
  } = useLabels({
    allowLineWrap,
    labels,
    onHeightChange,
    targetWidth: labelWidth
  });
  return (0, import_jsx_runtime95.jsx)(import_react122.Fragment, {
    children: lines.map((line, index2) => {
      var _xScale;
      const x3 = (_xScale = xScale(ticks2[index2])) !== null && _xScale !== void 0 ? _xScale : 0;
      return (0, import_jsx_runtime95.jsx)("g", {
        transform: `translate(${chartX + x3},${chartY})`,
        children: (0, import_jsx_runtime95.jsx)(TextLine, {
          line,
          index: index2
        })
      }, index2);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalGroup/HorizontalGroup.js
var import_react126 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalGroup/HorizontalGroup.scss.js
var style5 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Group": "_Group_kzepq_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalGroup/HorizontalGroup.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/GroupLabel/GroupLabel.scss.js
var styles39 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Label": "_Label_1vvi2_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/shared/GroupLabel/GroupLabel.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
var LABEL_RIGHT_PADDING = 15;
function GroupLabel({
  areAllNegative,
  containerWidth,
  label,
  zeroPosition
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const labelWidth = estimateStringWidth(label, characterWidths2);
  const selectedTheme = useTheme();
  const maxWidth = areAllNegative ? labelWidth : containerWidth - zeroPosition;
  return (0, import_jsx_runtime96.jsx)("foreignObject", {
    height: HORIZONTAL_GROUP_LABEL_HEIGHT,
    width: "100%",
    x: zeroPosition + (areAllNegative ? labelWidth * -1 : 0),
    "aria-hidden": "true",
    children: (0, import_jsx_runtime96.jsx)("div", {
      className: styles39.Label,
      style: {
        background: selectedTheme.chartContainer.backgroundColor,
        fontSize: `${FONT_SIZE}px`,
        color: selectedTheme.yAxis.labelColor,
        maxWidth,
        height: HORIZONTAL_GROUP_LABEL_HEIGHT,
        width: labelWidth + LABEL_RIGHT_PADDING
      },
      children: label
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalStackedBars/HorizontalStackedBars.js
var import_react124 = __toESM(require_react());
var import_jsx_runtime100 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalStackedBars/hooks/useStackedGaps.js
var import_react123 = __toESM(require_react());
function useStackedGaps({
  stackedValues,
  groupIndex
}) {
  return (0, import_react123.useMemo)(() => {
    const gaps = {
      positive: [],
      negative: []
    };
    stackedValues[groupIndex].forEach(([start2, end], index2) => {
      if (end > 0) {
        pushGapToArray({
          gaps,
          index: index2,
          direction: "positive",
          firstGapValue: 0
        });
      }
      if (start2 < 0) {
        pushGapToArray({
          gaps,
          index: index2,
          direction: "negative",
          firstGapValue: STACKED_BAR_GAP
        });
      }
    });
    return gaps;
  }, [groupIndex, stackedValues]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalStackedBars/utilities/getXPosition.js
function getXPosition2({
  start: start2,
  end,
  seriesIndex,
  gaps,
  xScale
}) {
  if (start2 < 0) {
    return xScale(start2) - getGapForIndex({
      gaps,
      direction: "negative",
      seriesIndex
    });
  }
  if (end > 0) {
    return xScale(start2) + getGapForIndex({
      gaps,
      direction: "positive",
      seriesIndex
    });
  }
  return xScale(start2);
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalStackedBars/components/StackedBar/StackedBar.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
function StackedBar({
  animationDelay,
  activeBarIndex,
  ariaLabel,
  borderRadius,
  color: color2,
  height,
  seriesIndex,
  setActiveBarIndex,
  width,
  x: x3,
  zeroPosition
}) {
  const springConfig = useBarSpringConfig({
    animationDelay
  });
  const {
    transform
  } = useSpring({
    from: {
      transform: `scale(0, 1)`
    },
    to: {
      transform: `scale(1, 1)`
    },
    ...springConfig
  });
  const pathD = getRoundedRectPath({
    height,
    width,
    borderRadius
  });
  return (0, import_jsx_runtime97.jsxs)(animated.g, {
    style: {
      transform,
      transformOrigin: `${zeroPosition}px 0px`
    },
    children: [(0, import_jsx_runtime97.jsx)("path", {
      d: pathD,
      fill: `url(#${color2})`,
      height,
      style: {
        outline: "none",
        transformOrigin: `${x3}px 0px`,
        ...getColorVisionStylesForActiveIndex({
          activeIndex: activeBarIndex,
          index: seriesIndex
        })
      },
      width,
      transform: `translate(${x3},0)`,
      "aria-hidden": "true"
    }), (0, import_jsx_runtime97.jsx)("rect", {
      fill: "transparent",
      height,
      width: width + STACKED_BAR_GAP,
      x: x3,
      ...getColorVisionEventAttrs({
        type: COLOR_VISION_SINGLE_ITEM,
        index: seriesIndex
      }),
      "aria-label": ariaLabel,
      role: "img",
      tabIndex: -1,
      onMouseOver: () => setActiveBarIndex(seriesIndex),
      onMouseLeave: () => setActiveBarIndex(-1)
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/LabelWrapper/LabelWrapper.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
function LabelWrapper({
  animationDelay,
  children,
  x: x3
}) {
  const springConfig = useBarSpringConfig({
    animationDelay
  });
  const spring = useSpring({
    from: {
      transform: "translateX(0px)",
      opacity: 0
    },
    to: {
      opacity: 1,
      transform: `translateX(${x3}px)`
    },
    ...springConfig
  });
  return (
    // animating the foreignObject does not work on Safari,
    // so we need to use a g instead
    (0, import_jsx_runtime98.jsx)(animated.g, {
      style: {
        opacity: spring.opacity,
        transform: spring.transform
      },
      children
    })
  );
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/Label/Label.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
function Label({
  barHeight,
  color: color2,
  label,
  labelWidth,
  y: y3
}) {
  const labelYOffset = barHeight / 2;
  return (0, import_jsx_runtime99.jsx)("text", {
    height: HORIZONTAL_BAR_LABEL_HEIGHT,
    width: labelWidth,
    "aria-hidden": "true",
    y: y3 + labelYOffset,
    fontSize: `${FONT_SIZE}px`,
    fontFamily: FONT_FAMILY,
    fill: color2,
    dominantBaseline: "central",
    children: label
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/getBarId.js
function getBarId(id, groupIndex, seriesIndex) {
  return `${id}-series-${groupIndex}-${seriesIndex}`;
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalStackedBars/HorizontalStackedBars.js
function getBorderRadius({
  lastIndexes,
  seriesIndex
}) {
  const [positive, negative] = lastIndexes;
  if (positive === seriesIndex) {
    return BORDER_RADIUS.Right;
  }
  if (negative === seriesIndex) {
    return BORDER_RADIUS.Left;
  }
  return BORDER_RADIUS.None;
}
function HorizontalStackedBars({
  activeGroupIndex,
  animationDelay,
  barHeight,
  dataKeys,
  groupIndex,
  id,
  name: name2,
  stackedValues,
  xScale,
  areAllNegative,
  isSimple,
  labelFormatter
}) {
  const selectedTheme = useTheme();
  const {
    theme,
    characterWidths: characterWidths2
  } = useChartContext();
  const [activeBarIndex, setActiveBarIndex] = (0, import_react124.useState)(-1);
  const hideGroupLabel = selectedTheme.groupLabel.hide;
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      if (activeGroupIndex === -1 || activeGroupIndex === groupIndex) {
        setActiveBarIndex(detail.index);
      }
    }
  });
  const lastIndexes = (0, import_react124.useMemo)(() => {
    let lastPos = -1;
    let lastNeg = -1;
    stackedValues[groupIndex].forEach(([start2, end], index2) => {
      if (start2 < 0) {
        lastNeg = index2;
      }
      if (end > 0) {
        lastPos = index2;
      }
    });
    return [lastPos, lastNeg];
  }, [groupIndex, stackedValues]);
  const gaps = useStackedGaps({
    stackedValues,
    groupIndex
  });
  const groupSum = stackedValues[groupIndex].reduce((_2, item) => {
    if (item.data) {
      return Object.values(item.data).reduce((sum3, value) => sum3 + value, 0);
    }
    return 0;
  }, 0);
  const isNegative = groupSum && groupSum < 0;
  const label = labelFormatter(groupSum);
  const labelWidth = estimateStringWidth(`${label}`, characterWidths2);
  const minGroupStartPoint = stackedValues[groupIndex].reduce((min3, item) => {
    const start2 = item[0];
    return start2 < min3 ? start2 : min3;
  }, Infinity);
  const maxGroupEndPoint = stackedValues[groupIndex].reduce((max3, item) => {
    const end = item[1];
    return end > max3 ? end : max3;
  }, -Infinity);
  const groupLabelX = isNegative ? xScale(minGroupStartPoint) - labelWidth - HORIZONTAL_BAR_LABEL_OFFSET : xScale(maxGroupEndPoint) + HORIZONTAL_BAR_LABEL_OFFSET;
  return (0, import_jsx_runtime100.jsxs)("g", {
    style: {
      transform: `translate(0, ${HORIZONTAL_GROUP_LABEL_HEIGHT}px`
    },
    "aria-hidden": "true",
    children: [stackedValues[groupIndex].map((item, seriesIndex) => {
      var _dataKeys$seriesIndex;
      const [start2, end] = item;
      const barId = getBarId(id, groupIndex, seriesIndex);
      const width = Math.abs(xScale(end) - xScale(start2));
      const borderRadius = getBorderRadius({
        lastIndexes,
        seriesIndex
      });
      const x3 = getXPosition2({
        start: start2,
        end,
        seriesIndex,
        gaps,
        xScale
      });
      const key = (_dataKeys$seriesIndex = dataKeys[seriesIndex]) !== null && _dataKeys$seriesIndex !== void 0 ? _dataKeys$seriesIndex : "";
      const ariaLabel = `${key} ${end}`;
      const areAllValuesZero = stackedValues[groupIndex].every(([start3, end2]) => start3 + end2 === 0);
      return (0, import_jsx_runtime100.jsx)(import_react124.Fragment, {
        children: areAllValuesZero ? (0, import_jsx_runtime100.jsx)(ZeroValueLine, {
          x: areAllNegative ? x3 - NEGATIVE_ZERO_LINE_OFFSET : x3,
          y: barHeight / 2,
          direction: "horizontal"
        }) : (0, import_jsx_runtime100.jsx)(StackedBar, {
          animationDelay,
          activeBarIndex,
          ariaLabel,
          borderRadius,
          color: getGradientDefId(theme, seriesIndex, id),
          height: barHeight,
          seriesIndex,
          setActiveBarIndex,
          width,
          x: x3,
          zeroPosition: xScale(0)
        }, `${name2}${barId}`)
      }, `stackedBar ${barId}`);
    }), !isSimple && !hideGroupLabel && (0, import_jsx_runtime100.jsx)(LabelWrapper, {
      animationDelay,
      x: groupLabelX,
      children: (0, import_jsx_runtime100.jsx)(Label, {
        barHeight,
        color: selectedTheme.xAxis.labelColor,
        label,
        labelWidth,
        y: 0
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalBars/HorizontalBars.js
var import_react125 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getTrendIndicatorData.js
function getTrendIndicatorData(trendMetadata) {
  if (trendMetadata != null) {
    var _trendMetadata$value;
    const {
      totalWidth
    } = estimateTrendIndicatorWidth((_trendMetadata$value = trendMetadata.value) !== null && _trendMetadata$value !== void 0 ? _trendMetadata$value : "");
    return {
      trendIndicatorProps: trendMetadata,
      trendIndicatorWidth: totalWidth
    };
  }
  return {
    trendIndicatorProps: void 0,
    trendIndicatorWidth: 0
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalBars/HorizontalBars.scss.js
var styles40 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Bar": "_Bar_h2fc5_144"
};

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalBars/HorizontalBars.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var SERIES_DELAY = 150;
function HorizontalBars({
  activeGroupIndex,
  animationDelay = 0,
  barHeight,
  data,
  groupIndex,
  id,
  isSimple,
  labelFormatter,
  name: name2,
  xScale,
  zeroPosition,
  containerWidth,
  areAllNegative
}) {
  const selectedTheme = useTheme();
  const {
    characterWidths: characterWidths2,
    theme
  } = useChartContext();
  const [activeBarIndex, setActiveBarIndex] = (0, import_react125.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      if (activeGroupIndex === -1 || activeGroupIndex === groupIndex) {
        setActiveBarIndex(detail.index);
      }
    }
  });
  return (0, import_jsx_runtime101.jsx)("g", {
    transform: `translate(${zeroPosition},${HORIZONTAL_GROUP_LABEL_HEIGHT})`,
    "aria-hidden": "true",
    children: data.map((_2, seriesIndex) => {
      var _data$seriesIndex, _data$seriesIndex$met;
      if (data[seriesIndex].data[groupIndex] == null) {
        return;
      }
      const seriesAnimationDelay = animationDelay + SERIES_DELAY * seriesIndex;
      const {
        value
      } = data[seriesIndex].data[groupIndex];
      if (value == null) {
        return null;
      }
      const isNegative = value && value < 0;
      const label = labelFormatter(value);
      const ariaLabel = `${data[seriesIndex] ? data[seriesIndex].name : ""} ${value}`;
      const {
        trendIndicatorProps,
        trendIndicatorWidth
      } = getTrendIndicatorData((_data$seriesIndex = data[seriesIndex]) === null || _data$seriesIndex === void 0 ? void 0 : (_data$seriesIndex$met = _data$seriesIndex.metadata) === null || _data$seriesIndex$met === void 0 ? void 0 : _data$seriesIndex$met.trends[groupIndex]);
      const labelWidth = estimateStringWidth(`${label}`, characterWidths2);
      function getBarWidthAndLabelX() {
        const width = Math.abs(xScale(value !== null && value !== void 0 ? value : 0) - xScale(0));
        const itemSpacing = trendIndicatorProps == null ? HORIZONTAL_BAR_LABEL_OFFSET : HORIZONTAL_BAR_LABEL_OFFSET * 2;
        const leftLabelOffset = isSimple ? labelWidth + itemSpacing + trendIndicatorWidth : 0;
        const clampedWidth = clamp({
          amount: width,
          min: 1,
          max: Infinity
        });
        if (isNegative) {
          return {
            labelX: -(clampedWidth + leftLabelOffset),
            barWidth: clampedWidth
          };
        }
        return {
          labelX: clampedWidth + HORIZONTAL_BAR_LABEL_OFFSET,
          barWidth: clampedWidth
        };
      }
      const {
        labelX,
        barWidth
      } = getBarWidthAndLabelX();
      const y3 = barHeight * seriesIndex + HORIZONTAL_SPACE_BETWEEN_SINGLE * seriesIndex;
      const {
        clampedSize
      } = getHoverZoneOffset({
        barSize: barWidth,
        zeroPosition: xScale(0),
        max: containerWidth,
        position: "horizontal"
      });
      const trendYOffset = (barHeight - HEIGHT2) / 2;
      return (0, import_jsx_runtime101.jsxs)(import_react125.Fragment, {
        children: [(0, import_jsx_runtime101.jsx)(Bar2, {
          animationDelay: seriesAnimationDelay,
          areAllNegative,
          color: `url(#${getGradientDefId(theme, seriesIndex, id)})`,
          height: barHeight,
          index: groupIndex,
          isActive: activeBarIndex === -1 || activeBarIndex === seriesIndex,
          transform: isNegative ? "scaleX(-1)" : "",
          width: barWidth,
          x: 0,
          y: y3
        }), isSimple && (0, import_jsx_runtime101.jsxs)(LabelWrapper, {
          animationDelay: seriesAnimationDelay,
          x: labelX,
          children: [(0, import_jsx_runtime101.jsx)(Label, {
            barHeight,
            color: selectedTheme.xAxis.labelColor,
            label,
            labelWidth,
            y: y3
          }), trendIndicatorProps != null && (0, import_jsx_runtime101.jsx)("g", {
            transform: `translate(${labelWidth + HORIZONTAL_BAR_LABEL_OFFSET}, ${y3 + trendYOffset})`,
            children: (0, import_jsx_runtime101.jsx)(TrendIndicator, {
              ...trendIndicatorProps
            })
          })]
        }), (0, import_jsx_runtime101.jsx)("rect", {
          className: styles40.Bar,
          x: 0,
          y: y3 - HORIZONTAL_SPACE_BETWEEN_SINGLE / 2,
          width: clampedSize,
          height: barHeight + HORIZONTAL_SPACE_BETWEEN_SINGLE,
          fill: "transparent",
          style: {
            transform: isNegative ? "scaleX(-1)" : ""
          },
          ...getColorVisionEventAttrs({
            type: COLOR_VISION_SINGLE_ITEM,
            index: seriesIndex
          }),
          tabIndex: -1,
          role: "img",
          "aria-label": ariaLabel
        })]
      }, `series-${seriesIndex}-${id}-${name2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/shared/HorizontalGroup/HorizontalGroup.js
function HorizontalGroup({
  areAllNegative,
  ariaLabel,
  barHeight,
  containerWidth,
  data,
  groupHeight,
  id,
  index: index2,
  isSimple,
  isStacked,
  name: name2,
  stackedValues,
  xAxisOptions,
  yAxisOptions,
  xScale,
  zeroPosition
}) {
  const [activeGroupIndex, setActiveGroupIndex] = (0, import_react126.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_GROUP_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveGroupIndex(detail.index);
    }
  });
  const dataKeys = (0, import_react126.useMemo)(() => {
    return data.map(({
      name: name3
    }) => name3 !== null && name3 !== void 0 ? name3 : "");
  }, [data]);
  const rowHeight = (0, import_react126.useMemo)(() => {
    const barPlusSpaceHeight = barHeight + HORIZONTAL_SPACE_BETWEEN_SINGLE;
    if (isStacked) {
      return HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight;
    }
    return HORIZONTAL_GROUP_LABEL_HEIGHT + barPlusSpaceHeight * data.length;
  }, [barHeight, data.length, isStacked]);
  const animationDelay = index2 * (LOAD_ANIMATION_DURATION / data[0].data.length);
  return (0, import_jsx_runtime102.jsxs)("g", {
    style: getColorVisionStylesForActiveIndex({
      activeIndex: activeGroupIndex,
      index: index2
    }),
    ...getColorVisionEventAttrs({
      type: COLOR_VISION_GROUP_ITEM,
      index: index2
    }),
    "data-type": DataType.BarGroup,
    "data-index": index2,
    "aria-hidden": "false",
    "aria-label": ariaLabel,
    role: "list",
    className: style5.Group,
    children: [(0, import_jsx_runtime102.jsx)("rect", {
      fill: "transparent",
      height: groupHeight,
      width: containerWidth,
      y: -(groupHeight - rowHeight) / 2
    }), (0, import_jsx_runtime102.jsx)(GroupLabel, {
      areAllNegative,
      containerWidth,
      label: yAxisOptions.labelFormatter(name2),
      zeroPosition
    }), isStacked ? (0, import_jsx_runtime102.jsx)(HorizontalStackedBars, {
      activeGroupIndex,
      animationDelay,
      ariaLabel,
      barHeight,
      dataKeys,
      groupIndex: index2,
      id,
      name: name2,
      stackedValues,
      xScale,
      areAllNegative,
      labelFormatter: xAxisOptions.labelFormatter,
      isSimple
    }) : (0, import_jsx_runtime102.jsx)(HorizontalBars, {
      animationDelay,
      activeGroupIndex,
      barHeight,
      data,
      groupIndex: index2,
      id,
      isSimple,
      labelFormatter: xAxisOptions.labelFormatter,
      name: name2,
      xScale,
      zeroPosition,
      containerWidth,
      areAllNegative
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartXAnnotations/HorizontalBarChartXAnnotations.js
var import_react128 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartXAnnotations/hooks/useHorizontalBarChartXAnnotationPositions.js
var import_react127 = __toESM(require_react());
function useHorizontalBarChartXAnnotationPositions({
  annotations,
  drawableWidth,
  isShowingAllAnnotations,
  onHeightChange,
  xScale
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const textWidths = (0, import_react127.useMemo)(() => {
    return annotations.map((annotation) => {
      return estimateStringWidth(annotation.label, characterWidths2);
    });
  }, [annotations, characterWidths2]);
  const {
    positions,
    hiddenAnnotationsCount
  } = (0, import_react127.useMemo)(() => {
    let positions2 = annotations.map((annotation, dataIndex) => {
      const xPosition = xScale(Number(annotation.startKey));
      const textWidth = textWidths[dataIndex];
      const width = clamp({
        amount: textWidth + PILL_PADDING * 2,
        min: textWidth + PILL_PADDING * 2,
        max: drawableWidth
      });
      let x3 = clamp({
        amount: xPosition - width / 2,
        min: PILL_X_MIN,
        max: Infinity
      });
      const right = x3 + width;
      if (right > drawableWidth) {
        x3 -= right - drawableWidth;
      }
      return {
        index: dataIndex,
        line: {
          x: xPosition,
          y: 0
        },
        row: 1,
        width,
        x: x3,
        y: 0
      };
    });
    positions2 = positions2.sort((one2, two) => one2.x - two.x);
    checkForHorizontalSpace({
      positions: positions2,
      totalRows: 1
    });
    positions2.forEach((current) => {
      const row = current.row - 1;
      current.y = row * PILL_HEIGHT + row * PILL_ROW_GAP;
    });
    const hiddenAnnotationsCount2 = positions2.filter(({
      row
    }) => row >= COLLAPSED_ANNOTATIONS_COUNT).length;
    return {
      positions: positions2,
      hiddenAnnotationsCount: hiddenAnnotationsCount2
    };
  }, [annotations, textWidths, xScale, drawableWidth]);
  const {
    rowCount,
    totalRowHeight
  } = useShowMoreAnnotationsButton({
    isShowingAllAnnotations,
    positions
  });
  (0, import_react127.useEffect)(() => {
    onHeightChange(totalRowHeight);
  }, [onHeightChange, totalRowHeight]);
  return {
    positions,
    rowCount,
    hiddenAnnotationsCount: isShowingAllAnnotations ? 0 : hiddenAnnotationsCount
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartXAnnotations/HorizontalBarChartXAnnotations.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
function HorizontalBarChartXAnnotations({
  annotationsLookupTable,
  drawableHeight,
  drawableWidth,
  onHeightChange,
  xScale
}) {
  const [activeIndex, setActiveIndex] = (0, import_react128.useState)(-1);
  const [isShowingAllAnnotations, setIsShowingAllAnnotations] = (0, import_react128.useState)(false);
  const [ref, setRef] = (0, import_react128.useState)(null);
  const {
    annotations
  } = (0, import_react128.useMemo)(() => {
    const annotations2 = Object.keys(annotationsLookupTable).map((key) => {
      const annotation = annotationsLookupTable[key];
      if (!isValueWithinDomain(Number(annotation.startKey), xScale.domain())) {
        return null;
      }
      if (annotation == null || annotation.axis == null || annotation.axis === "y") {
        return null;
      }
      return annotation;
    }).filter(Boolean);
    return {
      annotations: annotations2
    };
  }, [annotationsLookupTable, xScale]);
  const {
    hiddenAnnotationsCount,
    positions,
    rowCount
  } = useHorizontalBarChartXAnnotationPositions({
    annotations,
    drawableWidth,
    isShowingAllAnnotations,
    onHeightChange,
    xScale
  });
  const handleToggleAllAnnotations = () => {
    setIsShowingAllAnnotations(!isShowingAllAnnotations);
  };
  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };
  useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: (activeElement) => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== "true";
    }
  });
  const isShowMoreButtonVisible = isShowMoreAnnotationsButtonVisible(rowCount);
  const showMoreButtonOffset = isShowMoreButtonVisible ? SHOW_MORE_BUTTON_OFFSET : 0;
  return (0, import_jsx_runtime103.jsxs)("g", {
    ref: setRef,
    tabIndex: -1,
    children: [isShowMoreButtonVisible && (0, import_jsx_runtime103.jsx)(ShowMoreAnnotationsButton, {
      annotationsCount: hiddenAnnotationsCount,
      collapseText: annotations[0].collapseButtonText,
      expandText: annotations[0].expandButtonText,
      isShowingAllAnnotations,
      onClick: handleToggleAllAnnotations,
      tabIndex: annotations.length,
      width: drawableWidth
    }), (0, import_jsx_runtime103.jsx)("g", {
      transform: `translate(0, ${showMoreButtonOffset})`,
      children: positions.map((position) => {
        const {
          line,
          y: y3,
          row,
          index: index2
        } = position;
        const annotation = annotations[index2];
        if (shouldHideAnnotation({
          row,
          isShowingAllAnnotations,
          rowCount
        })) {
          return null;
        }
        const hasContent = annotation.content != null;
        const isContentVisible = index2 === activeIndex && hasContent;
        const tabIndex = index2 + 1;
        const ariaLabel = `${annotation.startKey}`;
        return (0, import_jsx_runtime103.jsxs)(import_react128.Fragment, {
          children: [(0, import_jsx_runtime103.jsx)(AnnotationLine, {
            size: drawableHeight - showMoreButtonOffset,
            x: line.x,
            y: y3 + PILL_HEIGHT
          }), (0, import_jsx_runtime103.jsx)(AnnotationLabel, {
            ariaLabel,
            hasContent,
            index: index2,
            isVisible: !isContentVisible,
            label: annotation.label,
            position,
            setActiveIndex,
            tabIndex
          }), isContentVisible && (0, import_jsx_runtime103.jsx)(AnnotationContent, {
            annotation,
            drawableWidth,
            index: index2,
            onMouseLeave: handleOnMouseLeave,
            parentRef: ref,
            position,
            tabIndex,
            x: line.x,
            y: y3
          })]
        }, `annotation${index2}${annotation.startKey}`);
      })
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartYAnnotations/HorizontalBarChartYAnnotations.js
var import_react130 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartYAnnotations/hooks/useHorizontalBarChartYAnnotationsPositions.js
var import_react129 = __toESM(require_react());
var Y_OFFSET2 = LINE_HEIGHT / 2;
var LABEL_PADDING = 5;
function useHorizontalBarChartYAnnotationsPositions({
  annotations,
  dataIndexes,
  groupHeight,
  drawableWidth,
  zeroPosition
}) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  const textWidths = (0, import_react129.useMemo)(() => {
    return annotations.map((annotation) => {
      return estimateStringWidth(annotation.label, characterWidths2);
    });
  }, [annotations, characterWidths2]);
  const {
    positions
  } = (0, import_react129.useMemo)(() => {
    const positions2 = annotations.map((annotation, dataIndex) => {
      const rawY = dataIndexes[annotation.startKey] * groupHeight + Y_OFFSET2;
      const textWidth = textWidths[dataIndex];
      const labelWidth = estimateStringWidth(`${annotation.startKey}`, characterWidths2);
      const width = clamp({
        amount: textWidth + PILL_PADDING * 2,
        min: textWidth + PILL_PADDING * 2,
        max: drawableWidth
      });
      const y3 = clamp({
        amount: rawY - PILL_HEIGHT / 2,
        min: 0,
        max: Infinity
      });
      return {
        index: dataIndex,
        line: {
          x: zeroPosition + labelWidth + LABEL_PADDING,
          y: rawY
        },
        row: 1,
        width,
        x: drawableWidth - width,
        y: y3
      };
    });
    return {
      positions: positions2
    };
  }, [annotations, dataIndexes, groupHeight, textWidths, drawableWidth, characterWidths2, zeroPosition]);
  return {
    positions
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/components/HorizontalBarChartYAnnotations/HorizontalBarChartYAnnotations.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
function HorizontalBarChartYAnnotations({
  annotationsLookupTable,
  drawableWidth,
  groupHeight,
  labels,
  zeroPosition
}) {
  const [activeIndex, setActiveIndex] = (0, import_react130.useState)(-1);
  const [ref, setRef] = (0, import_react130.useState)(null);
  const {
    annotations,
    dataIndexes
  } = (0, import_react130.useMemo)(() => {
    const dataIndexes2 = {};
    const annotations2 = Object.keys(annotationsLookupTable).map((key) => {
      const annotation = annotationsLookupTable[key];
      if (!labels.includes(key) || annotation == null || annotation.axis === "x") {
        return null;
      }
      dataIndexes2[key] = labels.indexOf(key);
      return annotation;
    }).filter(Boolean);
    return {
      annotations: annotations2,
      dataIndexes: dataIndexes2
    };
  }, [annotationsLookupTable, labels]);
  const {
    positions
  } = useHorizontalBarChartYAnnotationsPositions({
    annotations,
    dataIndexes,
    drawableWidth,
    groupHeight,
    zeroPosition
  });
  const handleOnMouseLeave = () => {
    setActiveIndex(-1);
  };
  useSVGBlurEvent({
    ref,
    onBlur: handleOnMouseLeave,
    checkFn: (activeElement) => {
      const focusedParent = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement;
      return (focusedParent === null || focusedParent === void 0 ? void 0 : focusedParent.dataset.isAnnotationContent) !== "true";
    }
  });
  return (0, import_jsx_runtime104.jsx)("g", {
    ref: setRef,
    tabIndex: -1,
    children: (0, import_jsx_runtime104.jsx)("g", {
      transform: `translate(0, ${0})`,
      children: positions.map((position) => {
        const index2 = position.index;
        const annotation = annotations[index2];
        const {
          line,
          x: x3,
          y: y3
        } = position;
        const hasContent = annotation.content != null;
        const isContentVisible = index2 === activeIndex && hasContent;
        const tabIndex = index2 + 1;
        const ariaLabel = `${annotation.startKey}`;
        return (0, import_jsx_runtime104.jsxs)(import_react130.Fragment, {
          children: [(0, import_jsx_runtime104.jsx)(AnnotationLine, {
            direction: "horizontal",
            hasCaret: false,
            size: drawableWidth - (drawableWidth - x3),
            x: line.x,
            y: line.y
          }), (0, import_jsx_runtime104.jsx)(AnnotationLabel, {
            ariaLabel,
            hasContent,
            index: index2,
            isVisible: !isContentVisible,
            label: annotation.label,
            position,
            setActiveIndex,
            tabIndex
          }), isContentVisible && (0, import_jsx_runtime104.jsx)(AnnotationContent, {
            annotation,
            drawableWidth,
            index: index2,
            onMouseLeave: handleOnMouseLeave,
            parentRef: ref,
            position,
            tabIndex,
            x: drawableWidth - (drawableWidth - x3),
            y: y3
          })]
        }, `annotation${index2}${annotation.startKey}`);
      })
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/utilities/getAlteredHorizontalBarPosition.js
function getAlteredHorizontalBarPosition(props) {
  if (props.currentX < 0) {
    return getNegativeOffset(props);
  }
  return getPositiveOffset(props);
}
function getNegativeOffset(props) {
  const {
    bandwidth,
    currentX,
    currentY,
    tooltipDimensions
  } = props;
  const flippedX = currentX * -1;
  const yOffset = (bandwidth - tooltipDimensions.height) / 2;
  const y3 = currentY - tooltipDimensions.height;
  if (flippedX - tooltipDimensions.width < 0) {
    return {
      x: flippedX,
      y: y3 < 0 ? 0 : y3
    };
  }
  return {
    x: flippedX - tooltipDimensions.width - TOOLTIP_MARGIN,
    y: currentY + HORIZONTAL_GROUP_LABEL_HEIGHT + yOffset
  };
}
function getPositiveOffset(props) {
  const {
    bandwidth,
    currentX,
    currentY,
    tooltipDimensions,
    chartBounds
  } = props;
  const isOutside = isOutsideBounds3({
    x: currentX,
    y: currentY,
    tooltipDimensions,
    chartBounds
  });
  if (isOutside.top && isOutside.right) {
    return {
      x: chartBounds.width - tooltipDimensions.width,
      y: 0
    };
  }
  if (isOutside.top && !isOutside.right) {
    return {
      x: currentX + TOOLTIP_MARGIN,
      y: 0
    };
  }
  if (!isOutside.right && !isOutside.bottom) {
    const yOffset = (bandwidth - tooltipDimensions.height) / 2;
    return {
      x: currentX + TOOLTIP_MARGIN,
      y: currentY + HORIZONTAL_GROUP_LABEL_HEIGHT + yOffset
    };
  }
  if (isOutside.right) {
    const x3 = currentX - tooltipDimensions.width;
    const y3 = currentY - tooltipDimensions.height + HORIZONTAL_GROUP_LABEL_HEIGHT - TOOLTIP_MARGIN;
    if (y3 < 0) {
      return {
        x: x3,
        y: bandwidth + HORIZONTAL_GROUP_LABEL_HEIGHT + TOOLTIP_MARGIN
      };
    }
    return {
      x: x3,
      y: y3
    };
  }
  if (isOutside.bottom) {
    return {
      x: currentX + TOOLTIP_MARGIN,
      y: chartBounds.height - tooltipDimensions.height - HORIZONTAL_GROUP_LABEL_HEIGHT
    };
  }
  return {
    x: currentX,
    y: currentY
  };
}
function isOutsideBounds3({
  x: x3,
  y: y3,
  tooltipDimensions,
  chartBounds
}) {
  const right = x3 + TOOLTIP_MARGIN + tooltipDimensions.width;
  const bottom = y3 + tooltipDimensions.height;
  return {
    left: x3 <= 0,
    right: right > chartBounds.width,
    bottom: bottom > chartBounds.height,
    top: y3 <= 0
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/Chart.js
function Chart7({
  annotationsLookupTable,
  data,
  dimensions,
  renderHiddenLegendLabel,
  renderLegendContent,
  renderTooltipContent,
  seriesNameFormatter,
  showLegend,
  type,
  xAxisOptions,
  yAxisOptions
}) {
  useColorVisionEvents({
    enabled: data.length > 1
  });
  const selectedTheme = useTheme();
  const id = (0, import_react131.useMemo)(() => uniqueId("HorizontalBarChart"), []);
  const isStacked = type === "stacked";
  const [svgRef, setSvgRef] = (0, import_react131.useState)(null);
  const [xAxisHeight, setXAxisHeight] = (0, import_react131.useState)(LINE_HEIGHT);
  const [annotationsHeight, setAnnotationsHeight] = (0, import_react131.useState)(0);
  const {
    longestSeriesCount,
    seriesColors
  } = useHorizontalSeriesColors(data);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    data: [{
      shape: "Bar",
      series: data
    }],
    dimensions,
    showLegend,
    colors: seriesColors,
    seriesNameFormatter
  });
  const {
    allNumbers,
    longestLabel,
    areAllNegative
  } = useDataForHorizontalChart({
    data,
    isSimple: false,
    isStacked,
    labelFormatter: xAxisOptions.labelFormatter
  });
  const highestValueForSeries = (0, import_react131.useMemo)(() => {
    const groups2 = formatDataIntoGroups(data);
    const maxes = groups2.map((numbers2) => {
      const values = numbers2.map((value) => value).filter(Boolean);
      if (values.length === 0) {
        return 0;
      }
      return areAllNegative ? Math.min(...values) : Math.max(...values);
    });
    return maxes;
  }, [data, areAllNegative]);
  const {
    stackedValues,
    stackedMin,
    stackedMax
  } = useHorizontalStackedValues({
    isStacked,
    data
  });
  const chartYPosition = ChartMargin.Top + annotationsHeight;
  const drawableHeight = height - xAxisHeight - chartYPosition;
  const {
    xScale,
    ticks: ticks2,
    ticksFormatted,
    drawableWidth,
    chartXPosition
  } = useHorizontalXScale({
    allNumbers,
    stackedMin,
    stackedMax,
    isStacked,
    maxWidth: width - longestLabel.negative - longestLabel.positive,
    labelFormatter: xAxisOptions.labelFormatter,
    longestLabel
  });
  const {
    barHeight,
    chartHeight,
    groupBarsAreaHeight,
    groupHeight
  } = useHorizontalBarSizes({
    chartDimensions: {
      width: drawableWidth,
      height: drawableHeight
    },
    isSimple: xAxisOptions.hide,
    isStacked,
    seriesLength: longestSeriesCount,
    singleBarCount: data.length,
    xAxisHeight
  });
  const annotationsDrawableHeight = chartYPosition + chartHeight + ANNOTATIONS_LABELS_OFFSET;
  const getTooltipMarkup = useBarChartTooltipContent({
    data,
    seriesColors,
    renderTooltipContent,
    seriesNameFormatter
  });
  const {
    transitions
  } = useHorizontalTransitions({
    series: data,
    groupHeight,
    chartXPosition
  });
  const zeroPosition = longestLabel.negative + xScale(0);
  const labelWidth = drawableWidth / ticks2.length;
  const chartBounds = {
    width,
    height,
    x: chartXPosition,
    y: 0
  };
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  const {
    unformattedLabels
  } = useFormattedLabels({
    data,
    labelFormatter: yAxisOptions.labelFormatter
  });
  const getAriaLabel = useAriaLabel(data, {
    xAxisLabelFormatter: xAxisOptions.labelFormatter,
    yAxisLabelFormatter: yAxisOptions.labelFormatter
  });
  return (0, import_jsx_runtime105.jsxs)(ChartElements.Div, {
    height,
    width,
    children: [(0, import_jsx_runtime105.jsxs)(ChartElements.Svg, {
      setRef: setSvgRef,
      width,
      height,
      children: [xAxisOptions.hide === true ? null : (0, import_jsx_runtime105.jsxs)("g", {
        transform: `translate(${chartXPosition}, ${chartYPosition})`,
        children: [(0, import_jsx_runtime105.jsx)(VerticalGridLines, {
          chartHeight: chartHeight + HORIZONTAL_SPACE_BETWEEN_CHART_AND_AXIS,
          stroke: selectedTheme.grid.color,
          ticks: ticks2,
          xScale
        }), (0, import_jsx_runtime105.jsx)(HorizontalBarChartXAxisLabels, {
          allowLineWrap: xAxisOptions.allowLineWrap,
          chartX: -labelWidth / 2,
          chartY: drawableHeight,
          labels: ticksFormatted,
          labelWidth,
          onHeightChange: setXAxisHeight,
          ticks: ticks2,
          xScale
        })]
      }), (0, import_jsx_runtime105.jsx)(GradientDefs, {
        direction: "horizontal",
        gradientUnits: isStacked ? "objectBoundingBox" : "userSpaceOnUse",
        id,
        seriesColors,
        size: isStacked ? "100%" : `${width}px`
      }), (0, import_jsx_runtime105.jsx)("g", {
        transform: `translate(${0}, ${chartYPosition})`,
        children: transitions((style6, item, _transition, index2) => {
          var _item$key;
          const {
            opacity,
            transform
          } = style6;
          const name2 = (_item$key = item.key) !== null && _item$key !== void 0 ? _item$key : "";
          const ariaLabel = getAriaLabel({
            seriesIndex: item.index,
            key: item.key
          });
          return (0, import_jsx_runtime105.jsx)(animated.g, {
            style: {
              opacity,
              transform
            },
            children: (0, import_jsx_runtime105.jsx)(HorizontalGroup, {
              areAllNegative,
              ariaLabel,
              barHeight,
              containerWidth: width,
              data,
              groupHeight,
              id,
              index: index2,
              isSimple: false,
              isStacked,
              name: name2,
              stackedValues,
              xAxisOptions,
              xScale,
              yAxisOptions,
              zeroPosition
            })
          }, `group-${name2}`);
        })
      }), hasXAxisAnnotations && (0, import_jsx_runtime105.jsx)("g", {
        transform: `translate(${chartXPosition}, ${0})`,
        children: (0, import_jsx_runtime105.jsx)(HorizontalBarChartXAnnotations, {
          annotationsLookupTable,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          onHeightChange: setAnnotationsHeight,
          xScale
        })
      }), hasYAxisAnnotations && (0, import_jsx_runtime105.jsx)("g", {
        transform: `translate(${chartXPosition}, ${chartYPosition})`,
        children: (0, import_jsx_runtime105.jsx)(HorizontalBarChartYAnnotations, {
          annotationsLookupTable,
          drawableWidth,
          groupHeight,
          labels: unformattedLabels,
          zeroPosition
        })
      })]
    }), highestValueForSeries.length !== 0 && (0, import_jsx_runtime105.jsx)(TooltipWrapper, {
      bandwidth: groupBarsAreaHeight,
      chartBounds,
      focusElementDataType: DataType.BarGroup,
      getAlteredPosition: getAlteredHorizontalBarPosition,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      margin: ChartMargin,
      parentRef: svgRef
    }), showLegend && (0, import_jsx_runtime105.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      dimensions,
      enableHideOverflow: true,
      onDimensionChange: setLegendDimensions,
      renderLegendContent,
      renderHiddenLegendLabel
    })]
  });
  function formatPositionForTooltip(index2) {
    if (isStacked) {
      const x4 = stackedValues[index2].reduce((prev, cur) => {
        const [start2, end] = cur;
        if (start2 < 0) {
          return prev;
        }
        return prev + (xScale(end) - xScale(start2));
      }, xScale(0));
      return {
        x: x4,
        y: groupHeight * index2,
        activeIndex: index2
      };
    }
    const highestValue = highestValueForSeries[index2];
    const x3 = chartXPosition + xScale(highestValue);
    return {
      x: highestValue < 0 ? -x3 : x3,
      y: groupHeight * index2,
      activeIndex: index2
    };
  }
  function getTooltipPosition({
    event,
    index: index2,
    eventType
  }) {
    if (eventType === "mouse" && event) {
      const point6 = eventPointNative(event);
      if (point6 == null) {
        return TOOLTIP_POSITION_DEFAULT_RETURN;
      }
      const {
        svgY
      } = point6;
      const currentPoint = svgY - 0;
      const currentIndex = Math.floor(currentPoint / groupHeight);
      if (currentIndex < 0 || currentIndex > longestSeriesCount - 1) {
        return TOOLTIP_POSITION_DEFAULT_RETURN;
      }
      return formatPositionForTooltip(currentIndex);
    } else if (index2 != null) {
      return formatPositionForTooltip(index2);
    }
    return TOOLTIP_POSITION_DEFAULT_RETURN;
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/HorizontalBarChart/HorizontalBarChart.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());
function HorizontalBarChart({
  annotationsLookupTable = {},
  data,
  dimensions,
  renderHiddenLegendLabel,
  renderLegendContent,
  renderTooltipContent,
  seriesNameFormatter,
  showLegend,
  type = "default",
  xAxisOptions,
  yAxisOptions
}) {
  return (0, import_jsx_runtime106.jsx)(Chart7, {
    dimensions,
    annotationsLookupTable,
    data,
    renderTooltipContent,
    seriesNameFormatter,
    showLegend,
    type,
    xAxisOptions,
    yAxisOptions,
    renderLegendContent,
    renderHiddenLegendLabel
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/BarChart/BarChart.js
function BarChart(props) {
  var _dataSeries$, _dataSeries$$data$;
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    annotations = [],
    data: dataSeries,
    state,
    errorText,
    direction = "vertical",
    emptyStateText,
    id,
    isAnimated: isAnimated2,
    tooltipOptions,
    renderLegendContent,
    showLegend = true,
    maxSeries,
    skipLinkText,
    theme = defaultTheme,
    type = "default",
    xAxisOptions,
    yAxisOptions,
    onError,
    renderHiddenLegendLabel,
    renderBucketLegendLabel,
    seriesNameFormatter = (value) => `${value}`
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const filledData = fillMissingDataPoints(dataSeries, isValidDate((_dataSeries$ = dataSeries[0]) === null || _dataSeries$ === void 0 ? void 0 : (_dataSeries$$data$ = _dataSeries$.data[0]) === null || _dataSeries$$data$ === void 0 ? void 0 : _dataSeries$$data$.key));
  const data = maxSeries ? bucketDataSeries({
    dataSeries: filledData,
    maxSeries,
    renderBucketLegendLabel
  }) : filledData;
  const skipLinkAnchorId = (0, import_react132.useRef)(uniqueId("BarChart"));
  const emptyState = data.length === 0;
  const hideSkipLink = skipLinkText == null || skipLinkText.length === 0 || emptyState;
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  const annotationsLookupTable = normalizeData(annotations, "startKey");
  const renderTooltip = getTooltipContentRenderer({
    tooltipOptions,
    theme,
    data
  });
  const ChartByDirection = direction === "vertical" ? (0, import_jsx_runtime107.jsx)(VerticalBarChart, {
    annotationsLookupTable,
    data,
    emptyStateText,
    renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter,
    showLegend,
    type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults,
    renderHiddenLegendLabel
  }) : (0, import_jsx_runtime107.jsx)(HorizontalBarChart, {
    annotationsLookupTable,
    data,
    renderHiddenLegendLabel,
    renderLegendContent,
    renderTooltipContent: renderTooltip,
    seriesNameFormatter,
    showLegend,
    type,
    xAxisOptions: xAxisOptionsWithDefaults,
    yAxisOptions: yAxisOptionsWithDefaults
  });
  return (0, import_jsx_runtime107.jsxs)(import_react132.Fragment, {
    children: [hideSkipLink ? null : (0, import_jsx_runtime107.jsx)(SkipLink, {
      anchorId: skipLinkAnchorId.current,
      children: skipLinkText
    }), (0, import_jsx_runtime107.jsx)(ChartContainer, {
      id,
      isAnimated: isAnimated2,
      data,
      onError,
      theme,
      type: InternalChartType.Bar,
      children: state !== ChartState.Success ? (0, import_jsx_runtime107.jsx)(ChartSkeleton, {
        state,
        errorText,
        theme
      }) : ChartByDirection
    }), hideSkipLink ? null : (0, import_jsx_runtime107.jsx)(SkipLink.Anchor, {
      id: skipLinkAnchorId.current
    })]
  });
}
function isValidDate(dateString) {
  if (dateString == null) {
    return false;
  }
  const parsedDate = Date.parse(dateString.toString());
  return !isNaN(parsedDate);
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/Chart.js
var import_react135 = __toESM(require_react());
var import_jsx_runtime112 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/FunnelSegment.js
var import_react133 = __toESM(require_react());
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/Label.scss.js
var styles41 = {
  "Label": "_Label_hgwz8_1",
  "YAxis": "_YAxis_hgwz8_17"
};

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/Label.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
var LABEL_HEIGHT = 20;
var LARGE_FONT = 20;
var SMALL_FONT = 14;
var FONT_SIZES = {
  small: SMALL_FONT,
  large: LARGE_FONT
};
function Label2({
  label,
  labelWidth,
  labelHelper,
  size: size2,
  color: color2,
  backgroundColor,
  transform
}) {
  const fontSize2 = FONT_SIZES[size2];
  return (
    /* To display labels correctly in Safari, we need to wrap foreignObject in group element
    and apply the transform property on the group element. */
    (0, import_jsx_runtime108.jsx)(animated.g, {
      "aria-hidden": true,
      style: {
        transform
      },
      children: (0, import_jsx_runtime108.jsx)("foreignObject", {
        height: LABEL_HEIGHT,
        width: labelWidth,
        "aria-hidden": "true",
        className: styles41.YAxis,
        children: (0, import_jsx_runtime108.jsxs)("div", {
          className: styles41.Label,
          style: {
            fontSize: `${fontSize2}px`,
            color: color2,
            lineHeight: `${HORIZONTAL_BAR_LABEL_HEIGHT}px`
          },
          children: [(0, import_jsx_runtime108.jsx)("span", {
            style: {
              backgroundColor,
              height: HORIZONTAL_BAR_LABEL_HEIGHT,
              userSelect: "none"
            },
            children: label
          }), labelHelper]
        })
      })
    })
  );
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/FunnelSegment.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
var Y_AXIS_LABEL_VERTICAL_OFFSET = 32;
var PERCENT_LABEL_VERTICAL_OFFSET = 24;
function FunnelSegment({
  barWidth,
  barHeight,
  drawableHeight,
  x: x3,
  ariaLabel,
  index: index2 = 0,
  color: color2,
  connector,
  isLast,
  portalTo,
  percentLabel,
  formattedYValue,
  labelHelper
}) {
  const selectedTheme = useTheme();
  const mounted = (0, import_react133.useRef)(false);
  const borderRadius = selectedTheme.bar.borderRadius;
  const {
    xAxis: {
      labelColor: axisLabelColor
    },
    chartContainer: {
      backgroundColor
    }
  } = useTheme();
  const springConfig = useBarSpringConfig({
    animationDelay: index2 * 150
  });
  const {
    animatedHeight,
    animatedStartY,
    animatedNextY
  } = useSpring({
    from: {
      animatedHeight: mounted.current ? barHeight : 0,
      animatedStartY: drawableHeight,
      animatedNextY: drawableHeight
    },
    to: {
      animatedHeight: barHeight,
      animatedStartY: connector.startY,
      animatedNextY: connector.nextY
    },
    ...springConfig
  });
  return (0, import_jsx_runtime109.jsxs)(import_react133.Fragment, {
    children: [(0, import_react_dom5.createPortal)((0, import_jsx_runtime109.jsx)(animated.path, {
      "aria-label": ariaLabel,
      fill: color2,
      width: barWidth,
      d: animatedHeight.to((value) => getRoundedRectPath({
        height: value,
        width: barWidth,
        borderRadius: `${borderRadius} ${borderRadius} 0 0`
      })),
      style: {
        transform: animatedHeight.to((value) => `translate(${x3}px, ${drawableHeight - value}px)`)
      }
    }), portalTo), !isLast && (0, import_jsx_runtime109.jsx)(animated.path, {
      d: to2([animatedStartY, animatedNextY, animatedHeight], (startY, nextY) => `M${connector.startX} ${startY}
               L ${connector.nextX} ${nextY}
               V ${connector.height} H ${connector.startX} Z`),
      fill: connector.fill
    }), (0, import_jsx_runtime109.jsx)(Label2, {
      transform: animatedStartY.to((value) => `translate(${x3}px, ${value - Y_AXIS_LABEL_VERTICAL_OFFSET}px)`),
      label: formattedYValue,
      labelWidth: barWidth,
      size: "large",
      color: axisLabelColor
    }), (0, import_jsx_runtime109.jsx)(Label2, {
      backgroundColor,
      label: percentLabel,
      labelWidth: barWidth,
      labelHelper,
      transform: animatedNextY.to((value) => `translate(${Number(x3) + Number(barWidth)}px, ${value - PERCENT_LABEL_VERTICAL_OFFSET}px)`),
      size: "small",
      color: changeColorOpacity(axisLabelColor, 0.7)
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/FunnelChartXAxisLabels.js
var import_react134 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/FunnelChartXAxisArrows.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var ARROW_WIDTH = 11;
var ARROW_HEIGHT = 9;
function FunnelChartXAxisArrows({
  onHeightChange,
  x: x3,
  index: index2,
  chartX,
  chartY,
  labelWidth
}) {
  var _firstLabel$transform;
  const {
    lines
  } = useLabels({
    allowLineWrap: true,
    labels: ["→"],
    targetWidth: labelWidth,
    onHeightChange
  });
  const firstLine = lines[0];
  const firstLabel = firstLine[0];
  const areLabelsVertical = (_firstLabel$transform = firstLabel.transform) === null || _firstLabel$transform === void 0 ? void 0 : _firstLabel$transform.includes("rotate(-90)");
  const getArrowTransform = () => {
    if (areLabelsVertical) {
      return `translate(${chartX + x3 - labelWidth / 2 + ARROW_WIDTH / 2},${chartY + ARROW_HEIGHT})`;
    }
    return `translate(${chartX - labelWidth / 1.5 + x3},${chartY})`;
  };
  const arrowLine = [{
    ...firstLabel,
    transform: void 0
  }];
  return (0, import_jsx_runtime110.jsx)("g", {
    transform: getArrowTransform(),
    children: (0, import_jsx_runtime110.jsx)(TextLine, {
      line: arrowLine,
      index: index2
    })
  }, `${index2}-arrow`);
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/components/FunnelChartXAxisLabels.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
function FunnelChartXAxisLabels({
  allowLineWrap,
  chartX,
  chartY,
  labels,
  labelWidth,
  onHeightChange,
  reducedLabelIndexes,
  xScale
}) {
  const {
    lines
  } = useLabels({
    allowLineWrap,
    labels,
    targetWidth: labelWidth,
    onHeightChange
  });
  return (0, import_jsx_runtime111.jsx)(import_react134.Fragment, {
    children: lines.map((line, index2) => {
      var _xScale;
      if (shouldSkipLabel(index2, reducedLabelIndexes)) {
        return null;
      }
      const x3 = (_xScale = xScale(index2.toString())) !== null && _xScale !== void 0 ? _xScale : 0;
      return (0, import_jsx_runtime111.jsxs)("g", {
        children: [index2 === 0 ? null : (0, import_jsx_runtime111.jsx)(FunnelChartXAxisArrows, {
          onHeightChange,
          x: x3,
          index: index2,
          chartX,
          chartY,
          labelWidth
        }), (0, import_jsx_runtime111.jsx)("g", {
          transform: `translate(${chartX + x3},${chartY})`,
          children: (0, import_jsx_runtime111.jsx)(TextLine, {
            line,
            index: index2
          })
        }, index2)]
      }, `label-group-${index2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/Chart.js
var X_LABEL_OFFSET = 16;
var NEGATIVE_LABEL_OFFSET = -4;
function Chart8({
  data,
  dimensions,
  xAxisOptions,
  yAxisOptions,
  labelHelpers
}) {
  const {
    theme
  } = useChartContext();
  const selectedTheme = useTheme();
  const [xAxisHeight, setXAxisHeight] = (0, import_react135.useState)(LINE_HEIGHT);
  const dataSeries = data[0].data;
  const colorOverride = data[0].color;
  const [maskRef, setMaskRef] = (0, import_react135.useState)(null);
  const xValues = dataSeries.map(({
    key
  }) => key);
  const yValues = dataSeries.map(({
    value
  }) => value);
  const {
    width,
    height
  } = dimensions || {
    width: 0,
    height: 0
  };
  const labels = (0, import_react135.useMemo)(() => dataSeries.map(({
    key
  }) => xAxisOptions.labelFormatter(key)), [dataSeries, xAxisOptions]);
  const xScale = band().domain(xValues).range([0, width]).paddingInner(0.5);
  const labelXScale = band().range([0, width]).paddingInner(0.5).paddingOuter(0).domain(labels.map((_2, index2) => index2.toString()));
  const drawableHeight = height - xAxisHeight - X_LABEL_OFFSET;
  const yScale = linear2().range([0, drawableHeight - BAR_CONTAINER_TEXT_HEIGHT]).domain([0, Math.max(...yValues)]);
  const barWidth = xScale.bandwidth();
  const getBarHeight = (0, import_react135.useCallback)((rawValue) => {
    const rawHeight = Math.abs(yScale(rawValue) - yScale(0));
    const needsMinHeight = rawHeight < MIN_BAR_HEIGHT && rawHeight !== 0;
    return needsMinHeight ? MIN_BAR_HEIGHT : rawHeight;
  }, [yScale]);
  const reducedLabelIndexes = useReducedLabelIndexes({
    dataLength: data[0] ? data[0].data.length : 0
  });
  const color2 = colorOverride || selectedTheme.seriesColors.single;
  const barsGradient = getGradientFromColor(color2);
  const averageColor = getAverageColor(barsGradient[0].color, barsGradient.length > 1 ? barsGradient[1].color : barsGradient[0].color);
  const connectorGradientId = (0, import_react135.useMemo)(() => uniqueId("connector-gradient"), []);
  const connectorGradient = [{
    color: changeColorOpacity(averageColor, 0.2),
    offset: 0
  }, {
    color: changeColorOpacity(averageColor, 0),
    offset: 100
  }];
  const gradientId = (0, import_react135.useMemo)(() => uniqueId("gradient"), []);
  const maskId = (0, import_react135.useMemo)(() => uniqueId("mask"), []);
  const handlePercentLabelFormatter = (percentCalculation) => {
    const percentRounded = Math.round(percentCalculation);
    if (percentCalculation) {
      return `${yAxisOptions.labelFormatter(percentRounded)}%`;
    } else {
      return "";
    }
  };
  return (0, import_jsx_runtime112.jsxs)(ChartElements.Svg, {
    height,
    width,
    children: [(0, import_jsx_runtime112.jsx)(LinearGradientWithStops, {
      gradient: connectorGradient,
      id: connectorGradientId,
      x1: "0%",
      x2: "0%",
      y1: "100%",
      y2: "0%"
    }), (0, import_jsx_runtime112.jsx)(LinearGradientWithStops, {
      gradient: barsGradient,
      id: `${gradientId}`
    }), (0, import_jsx_runtime112.jsx)("mask", {
      ref: setMaskRef,
      id: `${maskId}-${theme}-grad`
    }), dataSeries.map((dataPoint, index2) => {
      const nextPoint = dataSeries[index2 + 1];
      const xPosition = xScale(dataPoint.key);
      const x3 = xPosition == null ? 0 : xPosition;
      const nextBarHeight = getBarHeight((nextPoint === null || nextPoint === void 0 ? void 0 : nextPoint.value) || 0);
      const yAxisValue = dataPoint.value;
      const percentCalculation = nextPoint !== null && nextPoint !== void 0 && nextPoint.value && yAxisValue ? nextPoint.value / yAxisValue * 100 : 0;
      const barHeight = getBarHeight(dataPoint.value || 0);
      const percentLabel = handlePercentLabelFormatter(percentCalculation);
      const formattedYValue = yAxisOptions.labelFormatter(yAxisValue);
      const labelHelper = labelHelpers === null || labelHelpers === void 0 ? void 0 : labelHelpers.find((helper) => helper.key === dataPoint.key);
      return (0, import_jsx_runtime112.jsx)(import_react135.Fragment, {
        children: maskRef && (0, import_jsx_runtime112.jsx)("g", {
          role: "listitem",
          children: (0, import_jsx_runtime112.jsx)(FunnelSegment, {
            percentLabel,
            labelHelper: labelHelper && labelHelper.value,
            formattedYValue,
            isLast: index2 === dataSeries.length - 1,
            connector: {
              height: drawableHeight,
              startX: x3 + barWidth,
              startY: drawableHeight - barHeight,
              nextX: xScale(nextPoint === null || nextPoint === void 0 ? void 0 : nextPoint.key),
              nextY: drawableHeight - nextBarHeight,
              nextPoint,
              fill: `url(#${connectorGradientId})`
            },
            ariaLabel: `${xAxisOptions.labelFormatter(dataPoint.key)}: ${yAxisOptions.labelFormatter(dataPoint.value)}`,
            barWidth,
            barHeight,
            color: MASK_HIGHLIGHT_COLOR,
            x: x3,
            portalTo: maskRef,
            index: index2,
            drawableHeight
          })
        }, dataPoint.key)
      }, dataPoint.key);
    }), (0, import_jsx_runtime112.jsx)("g", {
      "aria-hidden": "true",
      children: (0, import_jsx_runtime112.jsx)(FunnelChartXAxisLabels, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        chartX: barWidth / NEGATIVE_LABEL_OFFSET,
        chartY: drawableHeight + X_LABEL_OFFSET,
        labels,
        labelWidth: barWidth + barWidth / 2,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes,
        xScale: labelXScale
      })
    }), (0, import_jsx_runtime112.jsx)("rect", {
      mask: `url(#${maskId}-${theme}-grad)`,
      x: 0,
      y: 0,
      width,
      height: drawableHeight,
      fill: `url(#${gradientId})`,
      style: {
        pointerEvents: "none"
      }
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/FunnelChart/FunnelChart.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
function FunnelChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    data,
    theme = defaultTheme,
    xAxisOptions,
    yAxisOptions,
    id,
    isAnimated: isAnimated2,
    state,
    errorText,
    labelHelpers,
    onError
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(data, selectedTheme);
  const seriesWithDefaults = data.map((series, index2) => ({
    color: seriesColors[index2],
    ...series
  }));
  const xAxisOptionsForChart = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsForChart = getYAxisOptionsWithDefaults(yAxisOptions);
  return (0, import_jsx_runtime113.jsx)(ChartContainer, {
    data,
    id,
    isAnimated: isAnimated2,
    onError,
    theme,
    children: state !== ChartState.Success ? (0, import_jsx_runtime113.jsx)(ChartSkeleton, {
      type: "Funnel",
      state,
      errorText,
      theme
    }) : (0, import_jsx_runtime113.jsx)(Chart8, {
      data: seriesWithDefaults,
      labelHelpers,
      xAxisOptions: xAxisOptionsForChart,
      yAxisOptions: yAxisOptionsForChart
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleBarChart/Chart.js
var import_react136 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleBarChart/utilities.js
function getLongestTrendIndicator(data, highestPositive, lowestNegative) {
  const longestTrendIndicator = data.reduce((longestTrendIndicator2, series) => {
    var _metadata$trends;
    const {
      data: seriesData,
      metadata
    } = series;
    const trends = (_metadata$trends = metadata === null || metadata === void 0 ? void 0 : metadata.trends) !== null && _metadata$trends !== void 0 ? _metadata$trends : {};
    const trendEntries = Object.entries(trends);
    for (const [index2, trend] of trendEntries) {
      const dataPoint = seriesData[index2];
      if ((dataPoint === null || dataPoint === void 0 ? void 0 : dataPoint.value) === highestPositive) {
        var _trend$value;
        longestTrendIndicator2.positive = estimateTrendIndicatorWidth((_trend$value = trend.value) !== null && _trend$value !== void 0 ? _trend$value : "").totalWidth;
      } else if ((dataPoint === null || dataPoint === void 0 ? void 0 : dataPoint.value) === lowestNegative) {
        var _trend$value2;
        longestTrendIndicator2.negative = estimateTrendIndicatorWidth((_trend$value2 = trend.value) !== null && _trend$value2 !== void 0 ? _trend$value2 : "").totalWidth;
      }
    }
    return longestTrendIndicator2;
  }, {
    positive: 0,
    negative: 0
  });
  if (longestTrendIndicator.positive > 0) {
    longestTrendIndicator.positive += HORIZONTAL_BAR_LABEL_OFFSET;
  }
  if (longestTrendIndicator.negative > 0) {
    longestTrendIndicator.negative += HORIZONTAL_BAR_LABEL_OFFSET;
  }
  return longestTrendIndicator;
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleBarChart/Chart.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getContainerAlignmentForLegend.js
var styleMap = {
  top: {
    flexDirection: "column-reverse",
    alignItems: "center"
  },
  bottom: {
    flexDirection: "column",
    alignItems: "center"
  },
  right: {
    flexDirection: "row",
    alignItems: "center"
  },
  left: {
    flexDirection: "row-reverse",
    alignItems: "center"
  },
  "top-left": {
    flexDirection: "row-reverse",
    alignItems: "start"
  },
  "top-right": {
    flexDirection: "row",
    alignItems: "start"
  },
  "bottom-right": {
    flexDirection: "row",
    alignItems: "end"
  },
  "bottom-left": {
    flexDirection: "row-reverse",
    alignItems: "end"
  },
  "top-left-column": {
    flexDirection: "column-reverse",
    alignItems: "start"
  },
  "top-right-column": {
    flexDirection: "column-reverse",
    alignItems: "end"
  },
  "bottom-right-column": {
    flexDirection: "column",
    alignItems: "end"
  },
  "bottom-left-column": {
    flexDirection: "column",
    alignItems: "start"
  }
};
function getContainerAlignmentForLegend(position, alignCornersWithinColumn = false) {
  const isCornerPosition = position.includes("-");
  const styleKey = alignCornersWithinColumn && isCornerPosition ? `${position}-column` : position;
  return styleMap[styleKey];
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleBarChart/Chart.js
function Chart9({
  data,
  dimensions,
  renderLegendContent,
  legendPosition = "bottom-right",
  seriesNameFormatter,
  showLegend,
  type,
  xAxisOptions,
  yAxisOptions
}) {
  useColorVisionEvents({
    enabled: data.length > 1
  });
  const id = (0, import_react136.useMemo)(() => uniqueId("SimpleBarChart"), []);
  const {
    labelFormatter
  } = xAxisOptions;
  const isStacked = type === "stacked";
  const {
    longestSeriesCount,
    seriesColors
  } = useHorizontalSeriesColors(data);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    data: [{
      shape: "Bar",
      series: data
    }],
    dimensions,
    colors: seriesColors,
    showLegend,
    seriesNameFormatter
  });
  const {
    allNumbers,
    longestLabel,
    highestPositive,
    lowestNegative,
    areAllNegative
  } = useDataForHorizontalChart({
    data,
    isSimple: true,
    isStacked,
    labelFormatter
  });
  const {
    stackedValues,
    stackedMin,
    stackedMax
  } = useHorizontalStackedValues({
    isStacked,
    data
  });
  const longestTrendIndicator = getLongestTrendIndicator(data, highestPositive, lowestNegative);
  const trendIndicatorOffset = longestTrendIndicator.positive + longestTrendIndicator.negative;
  const {
    xScale
  } = useHorizontalXScale({
    allNumbers,
    isStacked,
    labelFormatter,
    maxWidth: width - trendIndicatorOffset,
    stackedMax,
    stackedMin,
    longestLabel
  });
  const {
    barHeight,
    groupHeight
  } = useHorizontalBarSizes({
    chartDimensions: {
      width,
      height
    },
    isSimple: true,
    isStacked,
    seriesLength: longestSeriesCount,
    singleBarCount: data.length,
    xAxisHeight: 0
  });
  const {
    transitions
  } = useHorizontalTransitions({
    series: data,
    groupHeight,
    chartXPosition: 0
  });
  const zeroPosition = xScale(0) + longestLabel.negative + longestTrendIndicator.negative;
  const getAriaLabel = useAriaLabel(data, {
    xAxisLabelFormatter: labelFormatter
  });
  const containerStyle = getContainerAlignmentForLegend(legendPosition, true);
  return (0, import_jsx_runtime114.jsxs)(ChartElements.Div, {
    style: containerStyle,
    width: "auto",
    height: "auto",
    children: [(0, import_jsx_runtime114.jsxs)(ChartElements.Svg, {
      height,
      width,
      children: [(0, import_jsx_runtime114.jsx)(GradientDefs, {
        direction: "horizontal",
        gradientUnits: isStacked ? "objectBoundingBox" : "userSpaceOnUse",
        id,
        seriesColors,
        size: isStacked ? "100%" : `${width}px`
      }), transitions((style6, item, _transition, index2) => {
        var _item$key, _data$0$data$item$ind;
        const {
          opacity,
          transform
        } = style6;
        const name2 = (_item$key = item.key) !== null && _item$key !== void 0 ? _item$key : "";
        const ariaLabel = getAriaLabel({
          seriesIndex: item.index,
          key: (_data$0$data$item$ind = data[0].data[item.index]) === null || _data$0$data$item$ind === void 0 ? void 0 : _data$0$data$item$ind.key
        });
        return (0, import_jsx_runtime114.jsx)(animated.g, {
          style: {
            opacity,
            transform
          },
          children: (0, import_jsx_runtime114.jsx)(HorizontalGroup, {
            areAllNegative,
            ariaLabel,
            barHeight,
            containerWidth: width,
            data,
            groupHeight,
            id,
            index: index2,
            isSimple: true,
            isStacked,
            name: name2,
            stackedValues,
            xAxisOptions,
            xScale,
            yAxisOptions,
            zeroPosition
          })
        }, `group-${name2}`);
      })]
    }), showLegend && (0, import_jsx_runtime114.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent,
      position: legendPosition
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/SimpleBarChart/SimpleBarChart.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime());
function SimpleBarChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    id,
    isAnimated: isAnimated2,
    data,
    renderLegendContent,
    legendPosition = "bottom-right",
    onError,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    theme = defaultTheme,
    type = "default",
    xAxisOptions,
    yAxisOptions,
    state,
    errorText
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
  return (0, import_jsx_runtime115.jsx)(ChartContainer, {
    data,
    theme,
    id,
    isAnimated: isAnimated2,
    onError,
    children: state !== ChartState.Success ? (0, import_jsx_runtime115.jsx)(ChartSkeleton, {
      type: "SimpleBar",
      state,
      errorText,
      theme
    }) : (0, import_jsx_runtime115.jsx)(Chart9, {
      data,
      renderLegendContent,
      seriesNameFormatter,
      legendPosition,
      showLegend,
      type,
      xAxisOptions: xAxisOptionsWithDefaults,
      yAxisOptions: yAxisOptionsWithDefaults
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/PolarisVizProvider/PolarisVizProvider.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime());
var PolarisVizProvider2 = ({
  themes,
  children,
  defaultTheme,
  onError
}) => {
  return (0, import_jsx_runtime116.jsx)(PolarisVizProvider, {
    themes,
    animated,
    defaultTheme,
    onError,
    children
  });
};

// node_modules/@shopify/polaris-viz/build/esm/utilities/flattenDataGroupToDataSeries.js
function flattenDataGroupToDataSeries(data) {
  return data.reduce((previous, {
    series
  }) => {
    return previous.concat(series);
  }, []);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/Chart.js
var React3 = __toESM(require_react());
var import_react145 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useThemeSeriesColorsForDataGroup.js
function useThemeSeriesColorsForDataGroup(data, selectedTheme) {
  const series = flattenDataGroupToDataSeries(data);
  return useThemeSeriesColors2(series, selectedTheme);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getZeroIndex.js
function getZeroIndex({
  doesOneChartContainAllNegativeValues,
  shouldPlaceZeroInMiddleOfChart,
  ticks: ticks2
}) {
  const ticksLength = ticks2.length - 1;
  if (shouldPlaceZeroInMiddleOfChart) {
    return Math.floor(ticksLength / 2);
  }
  if (doesOneChartContainAllNegativeValues) {
    return ticksLength;
  }
  return ticks2.findIndex(({
    value
  }) => value === 0);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getTicksBetweenZeroAndMax.js
function getTicksBetweenZeroAndMax({
  doesOneChartContainAllNegativeValues,
  shouldPlaceZeroInMiddleOfChart,
  ticksLength,
  zeroIndex
}) {
  if (!shouldPlaceZeroInMiddleOfChart && doesOneChartContainAllNegativeValues) {
    return ticksLength;
  }
  return ticksLength - zeroIndex;
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/types.js
var AxisValueRange;
(function(AxisValueRange2) {
  AxisValueRange2[AxisValueRange2["AllNegative"] = 0] = "AllNegative";
  AxisValueRange2[AxisValueRange2["SomeNegative"] = 1] = "SomeNegative";
  AxisValueRange2[AxisValueRange2["AllPositive"] = 2] = "AllPositive";
})(AxisValueRange || (AxisValueRange = {}));

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getSourceTicksIndex.js
function getSourceTicksIndex({
  axes,
  doBothChartsContainMixedValues,
  shouldPlaceZeroInMiddleOfChart
}) {
  if (shouldPlaceZeroInMiddleOfChart) {
    const indexWithNegative2 = axes.findIndex(({
      valuesRange
    }) => valuesRange !== AxisValueRange.AllNegative);
    return indexWithNegative2 === -1 ? 0 : indexWithNegative2;
  }
  if (doBothChartsContainMixedValues) {
    const {
      index: indexWithBiggestDifference
    } = axes.reduce((prev, cur) => {
      const prevDiff = Math.abs(prev.max - prev.min);
      const curDiff = Math.abs(cur.max - cur.min);
      return prevDiff > curDiff ? prev : cur;
    });
    return indexWithBiggestDifference;
  }
  const indexWithNegative = axes.findIndex(({
    valuesRange
  }) => valuesRange === AxisValueRange.SomeNegative);
  return indexWithNegative === -1 ? 0 : indexWithNegative;
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getInitialYScaleValues.js
function getInitialYScaleValues({
  drawableHeight,
  primaryAxis,
  shouldPlaceZeroInMiddleOfChart
}) {
  if (shouldPlaceZeroInMiddleOfChart) {
    return {
      drawableHeight,
      max: primaryAxis.max,
      min: -primaryAxis.max
    };
  }
  return {
    drawableHeight,
    max: primaryAxis.max,
    min: primaryAxis.min
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useGetDualAxis.js
var import_react137 = __toESM(require_react());
function useGetDualAxis({
  data
}) {
  return (0, import_react137.useMemo)(() => {
    return data.map((series, index2) => {
      let min3;
      let max3;
      const yAxisOptions = getYAxisOptionsWithDefaults(series.yAxisOptions);
      switch (series.shape) {
        case "Line": {
          const {
            minY,
            maxY
          } = yAxisMinMax(series.series);
          min3 = minY;
          max3 = maxY;
          break;
        }
        case "Bar": {
          const {
            min: yMin,
            max: yMax
          } = getStackedMinMax({
            stackedValues: null,
            data: series.series,
            integersOnly: yAxisOptions.integersOnly
          });
          min3 = yMin;
          max3 = yMax;
          break;
        }
      }
      return {
        valuesRange: getValuesRange(min3, max3),
        min: min3,
        max: max3,
        index: index2,
        shape: series.shape,
        yAxisOptions,
        name: series.name
      };
    });
  }, [data]);
}
function getValuesRange(min3, max3) {
  if (min3 <= 0 && max3 <= 0) {
    return AxisValueRange.AllNegative;
  } else if (min3 < 0 || max3 < 0) {
    return AxisValueRange.SomeNegative;
  } else {
    return AxisValueRange.AllPositive;
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useMixedDataValues.js
var import_react138 = __toESM(require_react());
function useMixedDataValues(axes) {
  return (0, import_react138.useMemo)(() => {
    const areAllValuesNegative = axes.every(({
      valuesRange
    }) => valuesRange === AxisValueRange.AllNegative);
    const doesOneChartContainAllNegativeValues = axes.some(({
      valuesRange
    }) => valuesRange === AxisValueRange.AllNegative);
    const doBothChartsContainMixedValues = axes.every(({
      valuesRange
    }) => valuesRange === AxisValueRange.SomeNegative);
    const shouldPlaceZeroInMiddleOfChart = !areAllValuesNegative && (doesOneChartContainAllNegativeValues || doBothChartsContainMixedValues);
    return {
      shouldPlaceZeroInMiddleOfChart,
      areAllValuesNegative,
      doesOneChartContainAllNegativeValues,
      doBothChartsContainMixedValues
    };
  }, [axes]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useDualAxisTicks.js
function useDualAxisTicks({
  data,
  drawableHeight
}) {
  const axes = useGetDualAxis({
    data
  });
  const {
    areAllValuesNegative,
    doesOneChartContainAllNegativeValues,
    doBothChartsContainMixedValues,
    shouldPlaceZeroInMiddleOfChart
  } = useMixedDataValues(axes);
  const sourceOfTruthIndex = getSourceTicksIndex({
    axes,
    doBothChartsContainMixedValues,
    shouldPlaceZeroInMiddleOfChart
  });
  const primaryAxis = axes[sourceOfTruthIndex === 0 ? 0 : 1];
  const secondaryAxis = axes[sourceOfTruthIndex === 0 ? 1 : 0];
  const initialYScaleValues = getInitialYScaleValues({
    drawableHeight,
    primaryAxis,
    shouldPlaceZeroInMiddleOfChart
  });
  const {
    ticks: ticks2,
    yScale
  } = useYScale({
    ...initialYScaleValues,
    formatYAxisLabel: primaryAxis.yAxisOptions.labelFormatter,
    integersOnly: primaryAxis.yAxisOptions.integersOnly
  });
  const ticksLength = ticks2.length - 1;
  const zeroIndex = getZeroIndex({
    doesOneChartContainAllNegativeValues,
    shouldPlaceZeroInMiddleOfChart,
    ticks: ticks2
  });
  const ticksBetweenZeroAndMax = getTicksBetweenZeroAndMax({
    doesOneChartContainAllNegativeValues,
    shouldPlaceZeroInMiddleOfChart,
    ticksLength,
    zeroIndex
  });
  let secondaryMaxforTicks = Math.abs(doesOneChartContainAllNegativeValues ? secondaryAxis.min : secondaryAxis.max);
  secondaryMaxforTicks = getClosestDivisibleNumber(secondaryMaxforTicks, ticksBetweenZeroAndMax);
  const tickHeight = Math.abs(secondaryMaxforTicks / ticksBetweenZeroAndMax);
  const intialSecondaryTicks = ticks2.map((tick, index2) => {
    const alteredIndex = index2 - zeroIndex;
    const formattedValue = roundToDecimals(tickHeight * alteredIndex, 2);
    return {
      value: tickHeight * alteredIndex,
      formattedValue: secondaryAxis.yAxisOptions.labelFormatter(`${formattedValue}`),
      yOffset: yScale(tick.value)
    };
  });
  const primaryTicks = sourceOfTruthIndex === 0 ? ticks2 : intialSecondaryTicks;
  const secondaryTicks = sourceOfTruthIndex === 0 ? intialSecondaryTicks : ticks2;
  return {
    areAllValuesNegative,
    doesOneChartContainAllNegativeValues,
    doBothChartsContainMixedValues,
    primaryTicks,
    primaryAxis,
    secondaryTicks,
    secondaryAxis,
    yScale,
    shouldPlaceZeroInMiddleOfChart,
    ticksBetweenZeroAndMax
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useDualAxisTickWidths.js
var import_react139 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getLongestTickWidth.js
function getLongestTickWidth(ticks2, characterWidths2) {
  return ticks2.reduce((previous, {
    formattedValue
  }) => {
    const width = estimateStringWidth(formattedValue, characterWidths2);
    if (width > previous) {
      return width;
    }
    return previous;
  }, 0);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useDualAxisTickWidths.js
function useDualAxisTicksWidth(leftTicks, rightTicks) {
  const {
    characterWidths: characterWidths2
  } = useChartContext();
  return (0, import_react139.useMemo)(() => {
    return {
      leftTickWidth: getLongestTickWidth(leftTicks, characterWidths2),
      rightTickWidth: getLongestTickWidth(rightTicks, characterWidths2)
    };
  }, [leftTicks, rightTicks, characterWidths2]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/getSecondaryDataForMixedData.js
function getSecondaryDataForMixedData({
  shouldPlaceZeroInMiddleOfChart,
  doesOneChartContainAllNegativeValues,
  doBothChartsContainMixedValues,
  drawableHeight,
  secondaryAxis,
  yScale
}) {
  if (shouldPlaceZeroInMiddleOfChart) {
    let min3 = -secondaryAxis.max;
    let max3 = secondaryAxis.max;
    if (secondaryAxis.valuesRange === AxisValueRange.AllNegative) {
      min3 = secondaryAxis.min;
      max3 = -secondaryAxis.min;
    }
    return {
      secondaryDrawableHeight: drawableHeight,
      secondaryMin: min3,
      secondaryMax: max3
    };
  }
  if (doesOneChartContainAllNegativeValues) {
    return {
      secondaryDrawableHeight: drawableHeight,
      secondaryMin: secondaryAxis.min,
      secondaryMax: secondaryAxis.max
    };
  }
  if (doBothChartsContainMixedValues) {
    return {
      secondaryDrawableHeight: drawableHeight,
      secondaryMin: -secondaryAxis.max,
      secondaryMax: secondaryAxis.max
    };
  }
  return {
    secondaryDrawableHeight: yScale(0),
    secondaryMax: secondaryAxis.max,
    secondaryMin: secondaryAxis.min
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useDualAxisScale.js
function useDualAxisScale({
  doBothChartsContainMixedValues,
  doesOneChartContainAllNegativeValues,
  drawableHeight,
  primaryAxis,
  secondaryAxis,
  shouldPlaceZeroInMiddleOfChart,
  ticksBetweenZeroAndMax,
  yScale
}) {
  const {
    secondaryDrawableHeight,
    secondaryMax,
    secondaryMin
  } = getSecondaryDataForMixedData({
    doBothChartsContainMixedValues,
    doesOneChartContainAllNegativeValues,
    drawableHeight,
    secondaryAxis,
    shouldPlaceZeroInMiddleOfChart,
    yScale
  });
  const {
    yScale: secondaryYScale
  } = useYScale({
    drawableHeight: secondaryDrawableHeight,
    formatYAxisLabel: secondaryAxis.yAxisOptions.labelFormatter,
    integersOnly: secondaryAxis.yAxisOptions.integersOnly,
    max: getClosestDivisibleNumber(secondaryMax, ticksBetweenZeroAndMax),
    min: secondaryMin,
    // For non-source of truth, the ticks are exactly
    // what they should be, so we don't want to apply .nice()
    // to the scale.
    shouldRoundUp: false
  });
  const barYScale = primaryAxis.shape === "Bar" ? yScale : secondaryYScale;
  const lineYScale = primaryAxis.shape === "Bar" ? secondaryYScale : yScale;
  return {
    barYScale,
    lineYScale,
    primaryYScale: yScale,
    secondaryYScale
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useXScale.js
var import_react140 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useGetLabelsFromDataGroups.js
var import_fast_deep_equal2 = __toESM(require_fast_deep_equal());
function useGetLabelsFromDataGroups({
  data,
  xAxisOptions
}) {
  const {
    formattedLabels: firstLabels
  } = useFormattedLabels({
    data: data[0].series,
    labelFormatter: xAxisOptions.labelFormatter
  });
  const {
    formattedLabels: secondLabels
  } = useFormattedLabels({
    data: data[1].series,
    labelFormatter: xAxisOptions.labelFormatter
  });
  if ((0, import_fast_deep_equal2.default)(firstLabels, secondLabels)) {
    return firstLabels;
  }
  const firstKeysMatch = firstLabels[0] === secondLabels[0];
  const lengthsMatch = firstLabels.length !== secondLabels.length;
  if (lengthsMatch) {
    if (firstKeysMatch) {
      return firstLabels.length > secondLabels.length ? firstLabels : secondLabels;
    }
    if (WARN_FOR_DEVELOPMENT) {
      console.warn("Data groups do not have matching keys. Labels will not be rendered");
    }
    return [];
  } else {
    return firstKeysMatch ? firstLabels : [];
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useXScale.js
function useXScale2({
  drawableWidth,
  data,
  xAxisOptions
}) {
  const labels = useGetLabelsFromDataGroups({
    data,
    xAxisOptions
  });
  const labelsLength = labels.length;
  const xScale = (0, import_react140.useMemo)(() => {
    return linear2().range([0, drawableWidth]).domain([0, labelsLength]);
  }, [drawableWidth, labelsLength]);
  return {
    xScale,
    labels
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useSplitDataForCharts.js
var import_react141 = __toESM(require_react());
function useSplitDataForCharts(data, colors3) {
  return (0, import_react141.useMemo)(() => {
    const barChartDataIndex = data.findIndex(({
      shape
    }) => shape === "Bar");
    const barChartData = data[barChartDataIndex];
    const lineChartData = data[barChartDataIndex === 0 ? 1 : 0];
    const firstLength = data[0].series.length;
    const chartColors = [colors3.slice(0, firstLength), colors3.slice(firstLength)];
    const barChartColors = chartColors[barChartDataIndex];
    const lineChartColors = chartColors[barChartDataIndex === 0 ? 1 : 0];
    const barChartIndexOffset = barChartDataIndex === 0 ? 0 : firstLength;
    const lineChartIndexOffset = barChartDataIndex !== 0 ? 0 : firstLength;
    return {
      barChartData,
      lineChartData,
      barChartColors,
      lineChartColors,
      barChartIndexOffset,
      lineChartIndexOffset
    };
  }, [colors3, data]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useComboChartTooltipContent.js
var import_react142 = __toESM(require_react());
function useComboChartTooltipContent({
  data,
  renderTooltipContent,
  seriesColors,
  seriesNameFormatter
}) {
  const {
    theme
  } = useChartContext();
  return (0, import_react142.useCallback)((activeIndex) => {
    if (activeIndex === -1) {
      return null;
    }
    const tooltipData = [];
    let index2 = 0;
    data.forEach(({
      shape,
      name: name2,
      series,
      yAxisOptions
    }) => {
      const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(yAxisOptions);
      const data2 = {
        shape,
        name: name2,
        data: []
      };
      series.forEach(({
        name: name3,
        data: seriesData,
        color: color2,
        isComparison
      }) => {
        const {
          value
        } = seriesData[activeIndex];
        data2.data.push({
          key: `${seriesNameFormatter(name3 !== null && name3 !== void 0 ? name3 : "")}`,
          value: yAxisOptionsWithDefaults.labelFormatter(value),
          color: color2 !== null && color2 !== void 0 ? color2 : seriesColors[index2],
          isComparison
        });
        index2++;
      });
      tooltipData.push(data2);
    });
    return renderTooltipContent({
      data: tooltipData,
      activeIndex,
      title: `${data[0].series[0].data[activeIndex].key}`,
      dataSeries: flattenDataGroupToDataSeries(data),
      theme
    });
  }, [data, seriesColors, renderTooltipContent, theme, seriesNameFormatter]);
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/hooks/useComboChartPositions.js
function useComboChartPositions({
  leftTickWidth,
  primaryAxis,
  rightTickWidth,
  secondaryAxis,
  width
}) {
  const selectedTheme = useTheme();
  const horizontalMargin = selectedTheme.grid.horizontalMargin;
  const primaryLabelWidth = primaryAxis.name == null ? 0 : LINE_HEIGHT * 2;
  const secondaryLabelWidth = secondaryAxis.name == null ? 0 : LINE_HEIGHT;
  const leftTotalWidth = primaryLabelWidth + leftTickWidth + Y_AXIS_CHART_SPACING;
  const rightTotalWidth = Y_AXIS_CHART_SPACING + rightTickWidth + secondaryLabelWidth;
  const primaryLabelXPosition = horizontalMargin;
  const leftYAxisXPosition = primaryLabelXPosition + primaryLabelWidth;
  const chartXPosition = horizontalMargin + leftTotalWidth;
  const drawableWidth = width - chartXPosition - rightTotalWidth - horizontalMargin - secondaryLabelWidth;
  const rightAxisXPosition = chartXPosition + drawableWidth + Y_AXIS_CHART_SPACING;
  const secondaryLabelXPosition = rightAxisXPosition + rightTickWidth + secondaryLabelWidth;
  return {
    chartXPosition,
    drawableWidth,
    leftAxis: {
      x: leftYAxisXPosition,
      labelX: primaryLabelXPosition
    },
    rightAxis: {
      x: rightAxisXPosition,
      labelX: secondaryLabelXPosition
    }
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/Chart.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/components/AxisLabel/AxisLabel.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime());
function AxisLabel({
  height,
  name: name2,
  axis,
  x: x3,
  y: y3
}) {
  const stringWidth = useEstimateStringWidth(name2);
  const selectedTheme = useTheme();
  const rotate = axis === "primary" ? -90 : 90;
  const yCenter = height / 2;
  const halfStringSize = stringWidth / 2;
  const yOffset = axis === "primary" ? yCenter : yCenter - stringWidth;
  const xOffset = axis === "primary" ? 0 : LINE_HEIGHT;
  return (0, import_jsx_runtime117.jsxs)("g", {
    transform: `translate(${x3 + xOffset},${y3 + yOffset + halfStringSize}) rotate(${rotate})`,
    children: [(0, import_jsx_runtime117.jsx)("rect", {
      width: stringWidth,
      height: LINE_HEIGHT,
      fill: selectedTheme.chartContainer.backgroundColor
    }), (0, import_jsx_runtime117.jsx)(SingleTextLine, {
      color: selectedTheme.yAxis.labelColor,
      targetWidth: Math.max(stringWidth, height),
      text: name2,
      x: 0,
      y: 0
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/components/ComboBarChart/ComboBarChart.js
var import_react143 = __toESM(require_react());
var import_jsx_runtime118 = __toESM(require_jsx_runtime());
function ComboBarChart({
  colors: colors3,
  data,
  drawableHeight,
  drawableWidth,
  indexOffset,
  labels,
  yScale
}) {
  const id = (0, import_react143.useMemo)(() => uniqueId("ComboBarChart"), []);
  const yAxisOptionsWithDefaults = getYAxisOptionsWithDefaults(data.yAxisOptions);
  const {
    sortedData,
    xScale,
    gapWidth
  } = useVerticalBarChart({
    data: data.series,
    drawableWidth,
    labels
  });
  return (0, import_jsx_runtime118.jsx)(VerticalBarGroup, {
    colors: colors3,
    data: data.series,
    drawableHeight,
    gapWidth,
    id,
    indexOffset,
    labels,
    sortedData,
    stackedValues: null,
    xScale,
    yAxisOptions: yAxisOptionsWithDefaults,
    yScale
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/components/ComboLineChart/ComboLineChart.js
var import_react144 = __toESM(require_react());
var import_jsx_runtime119 = __toESM(require_jsx_runtime());
function ComboLineChart({
  activeIndex,
  colors: colors3,
  data,
  drawableHeight,
  drawableWidth,
  indexOffset,
  theme,
  xScale,
  yScale
}) {
  const [activeLineIndex, setActiveLineIndex] = (0, import_react144.useState)(-1);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveLineIndex(detail.index)
  });
  const dataWithDefaults = getLineChartDataWithDefaults(data.series, colors3);
  const {
    longestSeriesIndex
  } = useFormatData(dataWithDefaults);
  return (0, import_jsx_runtime119.jsxs)(import_react144.Fragment, {
    children: [dataWithDefaults.map((singleSeries, index2) => {
      return (0, import_jsx_runtime119.jsx)(LineSeries, {
        activeLineIndex,
        data: singleSeries,
        index: index2 + indexOffset,
        svgDimensions: {
          height: drawableHeight,
          width: drawableWidth
        },
        theme,
        xScale,
        yScale,
        type: "default"
      }, `${name}-${index2}`);
    }), (0, import_jsx_runtime119.jsx)(PointsAndCrosshair, {
      activeIndex,
      data: dataWithDefaults,
      drawableHeight,
      emptyState: false,
      longestSeriesIndex,
      theme,
      tooltipId: "none",
      xScale,
      yScale
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/Chart.js
function Chart10({
  annotationsLookupTable,
  data,
  dimensions,
  renderTooltipContent,
  showLegend,
  theme,
  xAxisOptions,
  renderLegendContent,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme(theme);
  useColorVisionEvents();
  const colors3 = useThemeSeriesColorsForDataGroup(data, selectedTheme);
  const [xAxisHeight, setXAxisHeight] = (0, import_react145.useState)(LINE_HEIGHT);
  const [svgRef, setSvgRef] = (0, import_react145.useState)(null);
  const [activeIndex, setActiveIndex] = (0, import_react145.useState)(null);
  const [annotationsHeight, setAnnotationsHeight] = (0, import_react145.useState)(0);
  const {
    legend,
    setLegendDimensions,
    height,
    width
  } = useLegend({
    colors: colors3,
    data,
    dimensions,
    showLegend,
    seriesNameFormatter
  });
  const {
    drawableHeight,
    chartYPosition,
    xAxisBounds,
    yAxisBounds
  } = useChartPositions({
    annotationsHeight,
    height,
    width,
    xAxisHeight,
    yAxisWidth: 0
  });
  const annotationsDrawableHeight = chartYPosition + drawableHeight + ANNOTATIONS_LABELS_OFFSET;
  const {
    doBothChartsContainMixedValues,
    doesOneChartContainAllNegativeValues,
    primaryTicks,
    primaryAxis,
    secondaryTicks,
    secondaryAxis,
    shouldPlaceZeroInMiddleOfChart,
    ticksBetweenZeroAndMax,
    yScale
  } = useDualAxisTicks({
    data,
    drawableHeight
  });
  const {
    leftTickWidth,
    rightTickWidth
  } = useDualAxisTicksWidth(primaryTicks, secondaryTicks);
  const {
    barYScale,
    lineYScale,
    primaryYScale,
    secondaryYScale
  } = useDualAxisScale({
    doesOneChartContainAllNegativeValues,
    doBothChartsContainMixedValues,
    drawableHeight: annotationsDrawableHeight,
    primaryAxis,
    secondaryAxis,
    yScale,
    shouldPlaceZeroInMiddleOfChart,
    ticksBetweenZeroAndMax
  });
  const {
    chartXPosition,
    drawableWidth,
    leftAxis,
    rightAxis
  } = useComboChartPositions({
    leftTickWidth,
    primaryAxis,
    rightTickWidth,
    secondaryAxis,
    width
  });
  const {
    barChartData,
    barChartColors,
    lineChartColors,
    lineChartData,
    barChartIndexOffset,
    lineChartIndexOffset
  } = useSplitDataForCharts(data, colors3);
  const {
    xScale,
    labels
  } = useXScale2({
    drawableWidth,
    data,
    xAxisOptions
  });
  const reducedLabelIndexes = useReducedLabelIndexes({
    dataLength: labels.length
  });
  const labelWidth = drawableWidth / labels.length;
  const chartBounds = {
    width,
    height,
    x: chartXPosition,
    y: chartYPosition
  };
  const getTooltipMarkup = useComboChartTooltipContent({
    renderTooltipContent,
    data,
    seriesColors: colors3,
    seriesNameFormatter
  });
  const {
    hasXAxisAnnotations,
    hasYAxisAnnotations
  } = checkAvailableAnnotations(annotationsLookupTable);
  return (0, import_jsx_runtime120.jsxs)(ChartElements.Div, {
    height,
    width,
    children: [(0, import_jsx_runtime120.jsxs)(ChartElements.Svg, {
      width,
      setRef: setSvgRef,
      height,
      children: [selectedTheme.grid.showHorizontalLines ? (0, import_jsx_runtime120.jsx)(HorizontalGridLines, {
        ticks: primaryTicks,
        transform: {
          x: selectedTheme.grid.horizontalOverflow ? 0 : chartXPosition,
          y: chartYPosition
        },
        width: selectedTheme.grid.horizontalOverflow ? width : drawableWidth
      }) : null, (0, import_jsx_runtime120.jsx)(XAxis, {
        allowLineWrap: xAxisOptions.allowLineWrap,
        labels,
        labelWidth,
        onHeightChange: setXAxisHeight,
        reducedLabelIndexes,
        x: chartXPosition,
        xScale,
        y: xAxisBounds.y
      }), primaryAxis.name != null && (0, import_jsx_runtime120.jsx)(AxisLabel, {
        axis: "primary",
        height: drawableHeight,
        name: primaryAxis.name,
        x: leftAxis.labelX,
        y: yAxisBounds.y
      }), (0, import_jsx_runtime120.jsx)(YAxis, {
        ticks: primaryTicks,
        textAlign: "right",
        width: leftTickWidth,
        x: leftAxis.x,
        y: yAxisBounds.y
      }), (0, import_jsx_runtime120.jsx)("g", {
        transform: `translate(${chartXPosition},${chartYPosition})`,
        children: (0, import_jsx_runtime120.jsx)(ComboBarChart, {
          indexOffset: barChartIndexOffset,
          colors: barChartColors,
          data: barChartData,
          drawableHeight,
          drawableWidth,
          labels,
          yScale: barYScale
        })
      }), (0, import_jsx_runtime120.jsx)("g", {
        transform: `translate(${chartXPosition + drawableWidth / labels.length / 2},${chartYPosition})`,
        children: (0, import_jsx_runtime120.jsx)(ComboLineChart, {
          activeIndex,
          colors: lineChartColors,
          data: lineChartData,
          drawableHeight,
          drawableWidth,
          indexOffset: lineChartIndexOffset,
          theme,
          xScale,
          yScale: lineYScale
        })
      }), hasXAxisAnnotations && (0, import_jsx_runtime120.jsx)("g", {
        transform: `translate(${chartXPosition},0)`,
        tabIndex: -1,
        children: (0, import_jsx_runtime120.jsx)(Annotations, {
          annotationsLookupTable,
          axisLabelWidth: labelWidth,
          drawableHeight: annotationsDrawableHeight,
          drawableWidth,
          labels,
          onHeightChange: setAnnotationsHeight,
          xScale
        })
      }), hasYAxisAnnotations && (0, import_jsx_runtime120.jsx)(React3.Fragment, {
        children: (0, import_jsx_runtime120.jsxs)("g", {
          transform: `translate(${chartXPosition},${chartYPosition})`,
          tabIndex: -1,
          children: [(0, import_jsx_runtime120.jsx)(YAxisAnnotations, {
            axis: "y1",
            annotationsLookupTable,
            drawableHeight: annotationsDrawableHeight,
            drawableWidth,
            ticks: primaryTicks,
            yScale: primaryYScale
          }), (0, import_jsx_runtime120.jsx)(YAxisAnnotations, {
            axis: "y2",
            annotationsLookupTable,
            drawableHeight: annotationsDrawableHeight,
            drawableWidth,
            ticks: secondaryTicks,
            yScale: secondaryYScale
          })]
        })
      }), (0, import_jsx_runtime120.jsx)(YAxis, {
        ticks: secondaryTicks,
        textAlign: "left",
        width: rightTickWidth,
        x: rightAxis.x,
        y: yAxisBounds.y
      }), secondaryAxis.name != null && (0, import_jsx_runtime120.jsx)(AxisLabel, {
        axis: "secondary",
        height: drawableHeight,
        name: secondaryAxis.name,
        x: rightAxis.labelX,
        y: yAxisBounds.y
      })]
    }), (0, import_jsx_runtime120.jsx)(TooltipWrapper, {
      bandwidth: labelWidth,
      chartBounds,
      focusElementDataType: DataType.BarGroup,
      getMarkup: getTooltipMarkup,
      getPosition: getTooltipPosition,
      margin: ChartMargin,
      onIndexChange: (index2) => setActiveIndex(index2),
      parentRef: svgRef
    }), showLegend && (0, import_jsx_runtime120.jsx)(LegendContainer, {
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      onDimensionChange: setLegendDimensions,
      renderLegendContent
    })]
  });
  function formatPositionForTooltip(index2) {
    var _xScale;
    if (index2 == null) {
      return TOOLTIP_POSITION_DEFAULT_RETURN;
    }
    const sortedData = sortBarChartData(labels, barChartData.series);
    const xPosition = (_xScale = xScale(index2)) !== null && _xScale !== void 0 ? _xScale : 0;
    const sortedDataPos = sortedData[index2].map((num) => Math.abs(num !== null && num !== void 0 ? num : 0));
    const highestValuePos = Math.max(...sortedDataPos);
    const x3 = xPosition + chartXPosition;
    const y3 = barYScale(highestValuePos) + ChartMargin.Top;
    return {
      x: x3,
      y: Math.abs(y3),
      position: {
        horizontal: TooltipHorizontalOffset.Left,
        vertical: TooltipVerticalOffset.Above
      },
      activeIndex: index2
    };
  }
  function getTooltipPosition({
    event,
    index: index2,
    eventType
  }) {
    return getVerticalBarChartTooltipPosition({
      tooltipPosition: {
        event,
        index: index2,
        eventType
      },
      chartXPosition,
      formatPositionForTooltip,
      maxIndex: labels.length - 1,
      step: labelWidth,
      yMin: ChartMargin.Top,
      yMax: drawableHeight + Number(ChartMargin.Bottom) + xAxisHeight
    });
  }
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/utilities/formatDataForTooltip.js
function formatDataForTooltip2({
  data,
  xAxisOptions
}) {
  const formattedData = data.data.map((data2) => {
    return {
      ...data2,
      data: data2.data.map((values) => {
        return {
          ...values,
          key: `${values.key}`,
          value: `${values.value}`
        };
      })
    };
  });
  return {
    formattedData,
    title: data.title ? xAxisOptions.labelFormatter(data.title) : void 0
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/ComboChart/ComboChart.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime());
function ComboChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    data,
    annotations = [],
    onError,
    id,
    isAnimated: isAnimated2,
    renderTooltipContent,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    theme = defaultTheme,
    xAxisOptions,
    renderLegendContent
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const xAxisOptionsWithDefaults = getXAxisOptionsWithDefaults(xAxisOptions);
  const annotationsLookupTable = normalizeData(annotations, "startKey");
  function renderTooltip(tooltipData) {
    if (renderTooltipContent != null) {
      return renderTooltipContent({
        ...tooltipData,
        dataSeries: flattenDataGroupToDataSeries(data)
      });
    }
    const {
      title,
      formattedData
    } = formatDataForTooltip2({
      data: tooltipData,
      xAxisOptions: xAxisOptionsWithDefaults
    });
    return (0, import_jsx_runtime121.jsx)(TooltipContent, {
      data: formattedData,
      theme,
      title
    });
  }
  return (0, import_jsx_runtime121.jsx)(ChartContainer, {
    data,
    onError,
    id,
    isAnimated: isAnimated2,
    theme,
    type: InternalChartType.Combo,
    children: (0, import_jsx_runtime121.jsx)(Chart10, {
      annotationsLookupTable,
      data,
      renderTooltipContent: renderTooltip,
      seriesNameFormatter,
      showLegend,
      theme,
      xAxisOptions: xAxisOptionsWithDefaults,
      renderLegendContent
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/Chart.js
var import_react149 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/utilities/getAnimationDelayForItems.js
function getAnimationDelayForItems(count2) {
  const scalingFactor = count2 * 0.1;
  return Math.min(DEFAULT_ANIMATION_DELAY / scalingFactor, DEFAULT_ANIMATION_DELAY);
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/DonutChart.scss.js
var styles42 = {
  "colorWhite": "white",
  "colorBlack": "black",
  "colorDarkComparison": "rgba(144, 176, 223, 0.8)",
  "colorLightComparison": "#6793cc",
  "colorGray00": "#ffffff",
  "colorGray10": "#f6f6f7",
  "colorGray20": "#eeeeef",
  "colorGray30": "#dadadd",
  "colorGray40": "#cbcbcf",
  "colorGray50": "#bdbdc2",
  "colorGray60": "#b0b0b6",
  "colorGray70": "#9d9da5",
  "colorGray80": "#909099",
  "colorGray90": "#82828c",
  "colorGray100": "#70707b",
  "colorGray110": "#5e5e69",
  "colorGray120": "#545460",
  "colorGray130": "#4b4b57",
  "colorGray140": "#43434e",
  "colorGray150": "#2e2e36",
  "colorGray160": "#1f1f25",
  "colorIndigo00": "#f7f5ff",
  "colorIndigo10": "#efecff",
  "colorIndigo20": "#e4deff",
  "colorIndigo30": "#d4cbff",
  "colorIndigo40": "#c5b7fe",
  "colorIndigo50": "#b6a3fe",
  "colorIndigo60": "#a78ffd",
  "colorIndigo70": "#997afc",
  "colorIndigo80": "#8c63fb",
  "colorIndigo90": "#7f4afa",
  "colorIndigo100": "#7329f9",
  "colorIndigo110": "#6511e2",
  "colorIndigo120": "#540dbf",
  "colorIndigo130": "#44089e",
  "colorIndigo140": "#34057d",
  "colorIndigo150": "#25035e",
  "colorIndigo160": "#16013e",
  "colorBlue00": "#f3f7ff",
  "colorBlue10": "#e6eefe",
  "colorBlue20": "#d6e3fd",
  "colorBlue30": "#bdd2fb",
  "colorBlue40": "#a3c2f7",
  "colorBlue50": "#88b1f2",
  "colorBlue60": "#6ba2ec",
  "colorBlue70": "#4b92e5",
  "colorBlue80": "#4282cd",
  "colorBlue90": "#3672bb",
  "colorBlue100": "#2b62a9",
  "colorBlue110": "#215297",
  "colorBlue120": "#174385",
  "colorBlue130": "#0e3572",
  "colorBlue140": "#06275f",
  "colorBlue150": "#021a4c",
  "colorBlue160": "#000d36",
  "colorTeal00": "#f0f8fb",
  "colorTeal10": "#e0f1f8",
  "colorTeal20": "#c8e7f4",
  "colorTeal30": "#9edaef",
  "colorTeal40": "#79cce5",
  "colorTeal50": "#69bbd3",
  "colorTeal60": "#5baac1",
  "colorTeal70": "#4c9aaf",
  "colorTeal80": "#3f899e",
  "colorTeal90": "#33798c",
  "colorTeal100": "#286a7b",
  "colorTeal110": "#1d5a69",
  "colorTeal120": "#144b59",
  "colorTeal130": "#0b3d48",
  "colorTeal140": "#042f38",
  "colorTeal150": "#012129",
  "colorTeal160": "#001419",
  "colorMagenta00": "#fcf4fa",
  "colorMagenta10": "#f9e9f5",
  "colorMagenta20": "#f5dbef",
  "colorMagenta30": "#f0c4e6",
  "colorMagenta40": "#eaaedd",
  "colorMagenta50": "#e596d4",
  "colorMagenta60": "#e07dcc",
  "colorMagenta70": "#da62c4",
  "colorMagenta80": "#c654b1",
  "colorMagenta90": "#b1489e",
  "colorMagenta100": "#9c3c8b",
  "colorMagenta110": "#873178",
  "colorMagenta120": "#722665",
  "colorMagenta130": "#5e1c53",
  "colorMagenta140": "#4a1341",
  "colorMagenta150": "#370b30",
  "colorMagenta160": "#23041e",
  "colorPurple00": "#f9f5ff",
  "colorPurple10": "#f3eafe",
  "colorPurple20": "#ebdcfd",
  "colorPurple30": "#e0c8fa",
  "colorPurple40": "#d4b3f6",
  "colorPurple50": "#c89ef1",
  "colorPurple60": "#bd8aea",
  "colorPurple70": "#b176e2",
  "colorPurple80": "#a85de0",
  "colorPurple90": "#9f41dc",
  "colorPurple100": "#8c35c4",
  "colorPurple110": "#7a29ab",
  "colorPurple120": "#671e93",
  "colorPurple130": "#55147a",
  "colorPurple140": "#430b62",
  "colorPurple150": "#32054a",
  "colorPurple160": "#200132",
  "colorOrange00": "#fcf5f3",
  "colorOrange10": "#f9ebe6",
  "colorOrange20": "#f5ddd4",
  "colorOrange30": "#f1c9b8",
  "colorOrange40": "#eeb498",
  "colorOrange50": "#ec9d71",
  "colorOrange60": "#df8b55",
  "colorOrange70": "#ca7d4a",
  "colorOrange80": "#b66e3f",
  "colorOrange90": "#a26134",
  "colorOrange100": "#8e532a",
  "colorOrange110": "#7a4621",
  "colorOrange120": "#673a17",
  "colorOrange130": "#552d0d",
  "colorOrange140": "#432205",
  "colorOrange150": "#311701",
  "colorOrange160": "#1f0c00",
  "colorYellow00": "#fff6df",
  "colorYellow10": "#fcedc2",
  "colorYellow20": "#fae275",
  "colorYellow30": "#e6d25f",
  "colorYellow40": "#d1c256",
  "colorYellow50": "#bdb24e",
  "colorYellow60": "#aaa246",
  "colorYellow70": "#97933e",
  "colorYellow80": "#858337",
  "colorYellow90": "#74742c",
  "colorYellow100": "#636522",
  "colorYellow110": "#535718",
  "colorYellow120": "#444810",
  "colorYellow130": "#363a08",
  "colorYellow140": "#2a2d03",
  "colorYellow150": "#1d1f01",
  "colorYellow160": "#111200",
  "Donut": "_Donut_1ga5u_144",
  "DonutWrapper": "_DonutWrapper_1ga5u_152",
  "ContentWrapper": "_ContentWrapper_1ga5u_160",
  "ContentValue": "_ContentValue_1ga5u_171",
  "ComparisonMetric": "_ComparisonMetric_1ga5u_179",
  "DonutChart": "_DonutChart_1ga5u_183"
};

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/Chart.js
var import_jsx_runtime125 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/InnerValue/InnerValue.js
var import_react146 = __toESM(require_react());
var import_jsx_runtime122 = __toESM(require_jsx_runtime());
var SCALING_FACTOR = 0.07;
function InnerValue({
  activeValue,
  activeIndex,
  comparisonMetric,
  labelFormatter,
  isAnimated: isAnimated2,
  renderInnerValueContent,
  totalValue,
  diameter,
  dimensions
}) {
  var _renderInnerValueCont;
  const selectedTheme = useTheme();
  const {
    animatedValue
  } = useSpring({
    animatedValue: totalValue,
    from: {
      animatedValue: 0
    },
    config: config.stiff,
    default: {
      immediate: !isAnimated2
    }
  });
  const fontSize2 = diameter * SCALING_FACTOR;
  const animatedTotalValue = (0, import_jsx_runtime122.jsx)(animated.span, {
    children: animatedValue.to((value) => animatedValue.isPaused ? labelFormatter(value) : labelFormatter(Math.abs(Math.floor(value))))
  });
  const activeValueExists = activeValue !== null && activeValue !== void 0;
  const valueToDisplay = activeValueExists ? labelFormatter(activeValue) : animatedTotalValue;
  const innerContent = (_renderInnerValueCont = renderInnerValueContent === null || renderInnerValueContent === void 0 ? void 0 : renderInnerValueContent({
    activeValue,
    activeIndex,
    animatedTotalValue,
    totalValue,
    dimensions
  })) !== null && _renderInnerValueCont !== void 0 ? _renderInnerValueCont : (0, import_jsx_runtime122.jsxs)(import_react146.Fragment, {
    children: [(0, import_jsx_runtime122.jsx)(animated.p, {
      className: classNames(styles42.ContentValue),
      style: {
        color: selectedTheme.xAxis.labelColor,
        fontSize: fontSize2
      },
      children: valueToDisplay
    }), comparisonMetric != null && !activeValueExists && (0, import_jsx_runtime122.jsx)("div", {
      className: styles42.ComparisonMetric,
      children: (0, import_jsx_runtime122.jsx)(ComparisonMetric, {
        metric: comparisonMetric.metric,
        trend: comparisonMetric.trend,
        accessibilityLabel: comparisonMetric.accessibilityLabel
      })
    })]
  });
  return (0, import_jsx_runtime122.jsx)("div", {
    className: styles42.ContentWrapper,
    children: innerContent
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/LegendValues.js
var import_react148 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/LegendValues.scss.js
var styles43 = {
  "Table": "_Table_1h9pq_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/components/LegendValueItem/LegendValueItem.js
var import_react147 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/components/LegendValueItem/LegendValueItem.scss.js
var styles44 = {
  "ColorPreview": "_ColorPreview_bcym0_1",
  "Name": "_Name_bcym0_5",
  "alignLeft": "_alignLeft_bcym0_13",
  "alignRight": "_alignRight_bcym0_17"
};

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/components/LegendValueItem/LegendValueItem.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime());
function LegendValueItem({
  name: name2,
  value,
  index: index2,
  labelFormatter,
  longestLegendValueWidth,
  trend,
  seriesColors,
  seriesNameFormatter,
  maxTrendIndicatorWidth,
  onDimensionChange,
  getColorVisionStyles,
  getColorVisionEventAttrs: getColorVisionEventAttrs2
}) {
  const selectedTheme = useTheme();
  const ref = (0, import_react147.useRef)(null);
  const minWidth = 200;
  (0, import_react147.useEffect)(() => {
    if (onDimensionChange && ref.current != null) {
      const {
        width,
        height
      } = ref.current.getBoundingClientRect();
      onDimensionChange({
        width: Math.min(minWidth, Math.round(width)),
        height
      });
    }
  }, [onDimensionChange, ref, minWidth]);
  const valueExists = value !== null && value !== void 0;
  return (0, import_jsx_runtime123.jsxs)("tr", {
    ref,
    style: {
      ...getColorVisionStyles(index2)
    },
    ...getColorVisionEventAttrs2(index2),
    children: [(0, import_jsx_runtime123.jsx)("td", {
      className: styles44.ColorPreview,
      children: (0, import_jsx_runtime123.jsx)(SquareColorPreview, {
        color: seriesColors[index2]
      })
    }), (0, import_jsx_runtime123.jsx)("td", {
      className: styles44.Name,
      style: {
        color: selectedTheme.legend.labelColor
      },
      title: name2,
      children: (0, import_jsx_runtime123.jsx)("span", {
        children: seriesNameFormatter(name2)
      })
    }), (0, import_jsx_runtime123.jsx)("td", {
      className: styles44.alignRight,
      width: longestLegendValueWidth,
      children: (0, import_jsx_runtime123.jsx)("span", {
        style: {
          color: selectedTheme.legend.labelColor
        },
        children: valueExists ? labelFormatter(value) : "-"
      })
    }), trend && valueExists && (0, import_jsx_runtime123.jsx)("td", {
      className: styles44.alignLeft,
      width: maxTrendIndicatorWidth,
      style: {
        minWidth: maxTrendIndicatorWidth,
        paddingLeft: "4px"
      },
      children: (0, import_jsx_runtime123.jsx)("span", {
        children: (0, import_jsx_runtime123.jsx)(TrendIndicator, {
          ...trend
        })
      })
    })]
  }, name2);
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/components/LegendValues/LegendValues.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime());
var TABLE_LEGEND_PADDING = 50;
function LegendValues({
  data: allData,
  activeIndex,
  dimensions,
  legendFullWidth,
  labelFormatter,
  renderHiddenLegendLabel = (count2) => `+${count2} more`,
  getColorVisionStyles,
  getColorVisionEventAttrs: getColorVisionEventAttrs2,
  seriesNameFormatter
}) {
  const selectedTheme = useTheme();
  const {
    theme,
    characterWidths: characterWidths2
  } = useChartContext();
  const legendItemDimensions = (0, import_react148.useRef)([{
    width: 0,
    height: 0
  }]);
  const seriesCount = clamp({
    amount: allData.length,
    min: 1,
    max: Infinity
  });
  const seriesColors = getSeriesColors(seriesCount, selectedTheme);
  const {
    legend: legendData,
    height
  } = useLegend({
    showLegend: true,
    data: [{
      series: allData,
      shape: "Bar"
    }],
    colors: seriesColors,
    dimensions,
    seriesNameFormatter
  });
  const {
    displayedData,
    hiddenData
  } = useOverflowLegend({
    direction: "vertical",
    data: legendData,
    height,
    legendItemDimensions,
    enableHideOverflow: true
  });
  const hasHiddenData = displayedData.length < allData.length;
  const maxTrendIndicatorWidth = allData.reduce((maxWidth, {
    metadata
  }) => {
    if (!(metadata !== null && metadata !== void 0 && metadata.trend)) {
      return maxWidth;
    }
    const {
      trendIndicatorWidth
    } = getTrendIndicatorData(metadata.trend);
    return Math.max(maxWidth, trendIndicatorWidth);
  }, 0);
  const longestLegendNameWidth = (0, import_react148.useMemo)(() => {
    return legendData.reduce((previous, current) => {
      const estimatedLegendNameWidth = estimateStringWidth(`${seriesNameFormatter(`${current.name || ""}`)}`, characterWidths2);
      if (estimatedLegendNameWidth > previous) {
        return estimatedLegendNameWidth;
      }
      return previous;
    }, 0);
  }, [legendData, seriesNameFormatter, characterWidths2]);
  const longestLegendValueWidth = (0, import_react148.useMemo)(() => {
    return legendData.reduce((previous, current) => {
      const estimatedLegendValueWidth = estimateStringWidth(`${labelFormatter(`${current.value || ""}`)}`, characterWidths2);
      if (estimatedLegendValueWidth > previous) {
        return estimatedLegendValueWidth;
      }
      return previous;
    }, 0);
  }, [legendData, labelFormatter, characterWidths2]);
  const legendTableMaxWidth = (0, import_react148.useMemo)(() => longestLegendNameWidth + longestLegendValueWidth + maxTrendIndicatorWidth + TABLE_LEGEND_PADDING, [longestLegendNameWidth, longestLegendValueWidth, maxTrendIndicatorWidth]);
  return (0, import_jsx_runtime124.jsxs)(import_react148.default.Fragment, {
    children: [(0, import_jsx_runtime124.jsx)("table", {
      className: styles43.Table,
      style: {
        maxWidth: legendTableMaxWidth,
        width: legendFullWidth ? "auto" : "100%"
      },
      children: (0, import_jsx_runtime124.jsx)("tbody", {
        children: displayedData.map(({
          name: name2,
          value,
          trend
        }, index2) => {
          return (0, import_jsx_runtime124.jsx)(LegendValueItem, {
            name: name2,
            value,
            trend,
            index: index2,
            longestLegendValueWidth,
            maxTrendIndicatorWidth,
            seriesColors,
            seriesNameFormatter,
            onDimensionChange: (dimensions2) => {
              if (legendItemDimensions.current) {
                legendItemDimensions.current[index2] = dimensions2;
              }
            },
            getColorVisionEventAttrs: getColorVisionEventAttrs2,
            getColorVisionStyles,
            labelFormatter
          }, index2);
        })
      })
    }), hasHiddenData && (0, import_jsx_runtime124.jsx)(HiddenLegendTooltip, {
      activeIndex,
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: hiddenData,
      theme,
      label: renderHiddenLegendLabel(allData.length - displayedData.length),
      lastVisibleIndex: allData.length - hiddenData.length,
      setActivatorWidth: () => null,
      dimensions,
      seriesNameFormatter
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/Chart.js
var FULL_CIRCLE2 = Math.PI * 2;
var RADIUS_PADDING2 = 20;
var SMALL_CHART_HEIGHT_THRESHOLD = 150;
function Chart11({
  data,
  labelFormatter,
  legendPosition = "right",
  showLegend,
  showLegendValues,
  state,
  theme,
  accessibilityLabel = "",
  comparisonMetric,
  dimensions = {
    height: 0,
    width: 0
  },
  errorText,
  legendFullWidth = false,
  renderInnerValueContent,
  renderLegendContent,
  renderHiddenLegendLabel,
  seriesNameFormatter,
  total
}) {
  var _points$activeIndex;
  const {
    shouldAnimate
  } = useChartContext();
  const chartId = useUniqueId("Donut");
  const [activeIndex, setActiveIndex] = (0, import_react149.useState)(-1);
  const selectedTheme = useTheme();
  const seriesCount = clamp({
    amount: data.length,
    min: 1,
    max: Infinity
  });
  const seriesColor = getSeriesColors(seriesCount, selectedTheme);
  const legendDirection = legendPosition === "right" || legendPosition === "left" ? "vertical" : "horizontal";
  const maxLegendWidth = legendDirection === "vertical" ? dimensions.width / 2 : 0;
  const {
    height,
    width,
    legend,
    setLegendDimensions,
    isLegendMounted
  } = useLegend({
    data: [{
      series: data,
      shape: "Bar"
    }],
    dimensions,
    showLegend,
    direction: legendDirection,
    colors: seriesColor,
    maxWidth: maxLegendWidth,
    seriesNameFormatter
  });
  const shouldUseColorVisionEvents = Boolean(width && height && isLegendMounted);
  useColorVisionEvents({
    enabled: shouldUseColorVisionEvents,
    dimensions: {
      ...dimensions,
      x: 0,
      y: 0
    }
  });
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => {
      setActiveIndex(detail.index);
    }
  });
  if (!width || !height) {
    return null;
  }
  const diameter = Math.min(height, width);
  const radius = diameter / 2;
  const dynamicThickness = height / 10;
  const maxThickness = selectedTheme.arc.thickness;
  const thickness = height > SMALL_CHART_HEIGHT_THRESHOLD ? Math.min(dynamicThickness, maxThickness) : THIN_ARC_CORNER_THICKNESS;
  const points = data.reduce((prev, {
    data: data2
  }) => prev.concat(data2), []);
  const createPie = pie_default().value(({
    value
  }) => value).sort(null);
  const pieChartData = createPie(points);
  const isEveryValueZero = points.every(({
    value
  }) => value === 0);
  const emptyState = pieChartData.length === 0 || isEveryValueZero;
  const totalValue = total || points.reduce((acc, {
    value
  }) => (value !== null && value !== void 0 ? value : 0) + acc, 0);
  const activeValue = (_points$activeIndex = points[activeIndex]) === null || _points$activeIndex === void 0 ? void 0 : _points$activeIndex.value;
  const minX = -40;
  const minY = -40;
  const viewBoxDimensions = {
    height: diameter + RADIUS_PADDING2,
    width: diameter + RADIUS_PADDING2
  };
  const containerAlignmentStyle = getContainerAlignmentForLegend(legendPosition);
  const dynamicStyles = {
    ...containerAlignmentStyle,
    gap: legendDirection === "vertical" ? "16px" : void 0
  };
  const renderLegendContentWithValues = ({
    getColorVisionStyles,
    getColorVisionEventAttrs: getColorVisionEventAttrs2
  }) => {
    return (0, import_jsx_runtime125.jsx)(LegendValues, {
      data,
      activeIndex,
      dimensions: {
        ...dimensions,
        x: 0,
        y: 0
      },
      legendFullWidth,
      labelFormatter,
      getColorVisionStyles,
      getColorVisionEventAttrs: getColorVisionEventAttrs2,
      renderHiddenLegendLabel,
      seriesNameFormatter
    });
  };
  const shouldRenderLegendContentWithValues = !renderLegendContent && showLegendValues && legendDirection === "vertical";
  const isCornerPosition = legendPosition.includes("-");
  return (0, import_jsx_runtime125.jsxs)("div", {
    className: styles42.DonutWrapper,
    style: dynamicStyles,
    children: [(0, import_jsx_runtime125.jsx)("div", {
      className: styles42.Donut,
      children: state === ChartState.Success ? (0, import_jsx_runtime125.jsxs)(import_react149.Fragment, {
        children: [(0, import_jsx_runtime125.jsx)("span", {
          className: styles42.VisuallyHidden,
          children: accessibilityLabel
        }), (0, import_jsx_runtime125.jsx)("svg", {
          viewBox: `${minX} ${minY} ${viewBoxDimensions.width} ${viewBoxDimensions.height}`,
          height: diameter,
          width: diameter,
          children: isLegendMounted && (0, import_jsx_runtime125.jsx)("g", {
            className: styles42.DonutChart,
            children: emptyState ? (0, import_jsx_runtime125.jsx)("g", {
              "aria-hidden": true,
              children: (0, import_jsx_runtime125.jsx)(Arc, {
                isAnimated: shouldAnimate,
                width: diameter,
                height: diameter,
                radius,
                startAngle: 0,
                endAngle: FULL_CIRCLE2,
                color: selectedTheme.grid.color,
                cornerRadius: selectedTheme.arc.cornerRadius,
                thickness
              })
            }) : pieChartData.map(({
              data: pieData,
              startAngle,
              endAngle
            }, index2) => {
              var _data$index$color, _data$index;
              const color2 = (_data$index$color = (_data$index = data[index2]) === null || _data$index === void 0 ? void 0 : _data$index.color) !== null && _data$index$color !== void 0 ? _data$index$color : seriesColor[index2];
              const name2 = data[index2].name;
              const accessibilityLabel2 = `${name2}: ${pieData.key} - ${pieData.value}`;
              return (0, import_jsx_runtime125.jsx)("g", {
                className: styles42.DonutChart,
                "aria-label": accessibilityLabel2,
                role: "img",
                children: (0, import_jsx_runtime125.jsx)(Arc, {
                  isAnimated: shouldAnimate,
                  animationDelay: getAnimationDelayForItems(pieChartData.length),
                  index: index2,
                  activeIndex,
                  width: diameter,
                  height: diameter,
                  radius,
                  startAngle,
                  endAngle,
                  color: color2,
                  cornerRadius: selectedTheme.arc.cornerRadius,
                  thickness
                })
              }, `${chartId}-arc-${index2}`);
            })
          })
        }), (0, import_jsx_runtime125.jsx)(InnerValue, {
          activeValue,
          activeIndex,
          isAnimated: shouldAnimate,
          totalValue,
          comparisonMetric,
          labelFormatter,
          renderInnerValueContent,
          diameter,
          dimensions
        })]
      }) : (0, import_jsx_runtime125.jsx)(ChartSkeleton, {
        dimensions: {
          width: diameter,
          height: diameter
        },
        state,
        type: "Donut",
        errorText,
        theme
      })
    }), showLegend && (0, import_jsx_runtime125.jsx)(LegendContainer, {
      fullWidth: legendFullWidth,
      onDimensionChange: setLegendDimensions,
      colorVisionType: COLOR_VISION_SINGLE_ITEM,
      data: legend,
      direction: legendDirection,
      position: legendPosition,
      maxWidth: maxLegendWidth,
      enableHideOverflow: !isCornerPosition,
      dimensions: {
        ...dimensions,
        x: 0,
        y: 0
      },
      renderLegendContent: shouldRenderLegendContentWithValues ? renderLegendContentWithValues : renderLegendContent
    })]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/DonutChart/DonutChart.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime());
function DonutChart(props) {
  const {
    defaultTheme
  } = usePolarisVizContext();
  const {
    data: dataSeries,
    theme = defaultTheme,
    comparisonMetric,
    showLegend = true,
    maxSeries,
    showLegendValues = false,
    labelFormatter = (value) => `${value}`,
    legendFullWidth,
    legendPosition = "left",
    onError,
    id,
    isAnimated: isAnimated2,
    state,
    errorText,
    renderInnerValueContent,
    renderLegendContent,
    renderHiddenLegendLabel,
    renderBucketLegendLabel,
    seriesNameFormatter = (value) => `${value}`
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const data = maxSeries ? bucketDataSeries({
    dataSeries,
    maxSeries,
    renderBucketLegendLabel
  }) : dataSeries;
  return (0, import_jsx_runtime126.jsx)(ChartContainer, {
    skeletonType: "Donut",
    data,
    onError,
    theme,
    isAnimated: isAnimated2,
    id,
    children: (0, import_jsx_runtime126.jsx)(Chart11, {
      errorText,
      state,
      data,
      labelFormatter,
      comparisonMetric,
      showLegend,
      showLegendValues,
      legendFullWidth,
      legendPosition,
      renderInnerValueContent,
      renderLegendContent,
      renderHiddenLegendLabel,
      seriesNameFormatter,
      theme
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/LineChartRelational.js
var import_react153 = __toESM(require_react());
var import_jsx_runtime131 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/CustomLegend/CustomLegend.scss.js
var styles45 = {
  "Container": "_Container_1fw4x_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/CustomLegend/CustomLegend.js
var import_jsx_runtime127 = __toESM(require_jsx_runtime());
function CustomLegend({
  data,
  getColorVisionEventAttrs: getColorVisionEventAttrs2,
  getColorVisionStyles,
  seriesNameFormatter,
  theme
}) {
  var _percentileItems$0$co, _percentileItems$, _percentileItems$$met, _percentileItems$2, _percentileItems$2$me;
  const lineSeries = data.filter((series) => {
    var _series$metadata;
    return (series === null || series === void 0 ? void 0 : (_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) == null;
  });
  const percentileItems = data.filter((series) => {
    var _series$metadata2;
    return (series === null || series === void 0 ? void 0 : (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) != null;
  });
  const percentileIndex = lineSeries.length + 1;
  return (0, import_jsx_runtime127.jsxs)("ul", {
    className: styles45.Container,
    children: [lineSeries.map(({
      color: color2,
      name: name2,
      isComparison,
      metadata
    }) => {
      if (metadata !== null && metadata !== void 0 && metadata.isPredictive) {
        return null;
      }
      const index2 = data.findIndex((series) => series.name === name2);
      return (0, import_jsx_runtime127.jsx)("li", {
        style: {
          ...getColorVisionStyles(index2)
        },
        ...getColorVisionEventAttrs2(index2),
        children: (0, import_jsx_runtime127.jsx)(LegendItem, {
          color: color2,
          index: index2,
          isComparison,
          name: seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : ""),
          shape: "Line",
          theme
        })
      }, index2);
    }), (0, import_jsx_runtime127.jsx)("li", {
      style: {
        ...getColorVisionStyles(percentileIndex)
      },
      ...getColorVisionEventAttrs2(percentileIndex),
      children: (0, import_jsx_runtime127.jsx)(LegendItem, {
        color: (_percentileItems$0$co = percentileItems[0].color) !== null && _percentileItems$0$co !== void 0 ? _percentileItems$0$co : (_percentileItems$ = percentileItems[0]) === null || _percentileItems$ === void 0 ? void 0 : (_percentileItems$$met = _percentileItems$.metadata) === null || _percentileItems$$met === void 0 ? void 0 : _percentileItems$$met.areaColor,
        index: percentileIndex,
        name: seriesNameFormatter((_percentileItems$2 = percentileItems[0]) === null || _percentileItems$2 === void 0 ? void 0 : (_percentileItems$2$me = _percentileItems$2.metadata) === null || _percentileItems$2$me === void 0 ? void 0 : _percentileItems$2$me.legendLabel),
        shape: "Bar",
        theme
      })
    }, percentileIndex)]
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/MissingDataArea/MissingDataArea.js
var import_react150 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/MissingDataArea/utilities/groupNumbersIntoRuns.js
function groupNumbersIntoRuns(indexes2) {
  const runs = [];
  let current = [];
  indexes2.forEach((value, index2) => {
    if (index2 === 0 || value - indexes2[index2 - 1] === 1) {
      current.push(value);
    } else {
      runs.push(current);
      current = [value];
    }
  });
  runs.push(current);
  return runs;
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/MissingDataArea/MissingDataArea.js
var import_jsx_runtime128 = __toESM(require_jsx_runtime());
function MissingDataAreaRaw({
  data,
  drawableHeight,
  xScale
}) {
  const selectedTheme = useTheme();
  const patternID = (0, import_react150.useRef)(uniqueId("missingDataPattern"));
  const dataSeriesHasNulls = (0, import_react150.useRef)(false);
  const dataLength = data[0].data.length - 1;
  const indexesWithData = /* @__PURE__ */ new Set([]);
  for (const series of data) {
    const hasAnyNulls = series.data.some(({
      value
    }) => value == null);
    if (!hasAnyNulls) {
      continue;
    }
    for (const [index2, {
      value
    }] of series.data.entries()) {
      if (value != null) {
        indexesWithData.add(index2);
      } else {
        dataSeriesHasNulls.current = true;
      }
    }
  }
  if (indexesWithData.size === 0 || dataSeriesHasNulls.current === false) {
    return null;
  }
  const sortedIndexes = [...indexesWithData].sort((current, next) => current - next);
  const groups2 = groupNumbersIntoRuns(sortedIndexes);
  return (0, import_jsx_runtime128.jsxs)(import_react150.Fragment, {
    children: [(0, import_jsx_runtime128.jsxs)("defs", {
      children: [(0, import_jsx_runtime128.jsx)("pattern", {
        id: patternID.current,
        patternUnits: "userSpaceOnUse",
        width: "12",
        height: "12",
        patternTransform: "rotate(135)",
        children: (0, import_jsx_runtime128.jsx)("line", {
          x1: "0",
          y: "0",
          x2: "0",
          y2: "12",
          stroke: selectedTheme.missingData.lineColor,
          strokeWidth: "12",
          opacity: "0.2"
        })
      }), (0, import_jsx_runtime128.jsxs)("mask", {
        id: `${patternID.current}-clip`,
        children: [(0, import_jsx_runtime128.jsx)("rect", {
          x: xScale(0),
          y: 0,
          height: drawableHeight,
          width: xScale(dataLength),
          fill: "white"
        }), groups2.map((indexes2, index2) => {
          const startIndex = Math.min(...indexes2);
          const endIndex = Math.max(...indexes2);
          const width = xScale(endIndex - startIndex);
          return (0, import_jsx_runtime128.jsx)("rect", {
            x: xScale(startIndex),
            y: 0,
            height: drawableHeight,
            width,
            fill: "black"
          }, index2);
        })]
      })]
    }), (0, import_jsx_runtime128.jsx)("rect", {
      x: xScale(0),
      y: 0,
      height: drawableHeight,
      width: xScale(dataLength),
      fill: `url(#${patternID.current})`,
      mask: `url(#${patternID.current}-clip)`
    })]
  });
}
var MissingDataArea = (0, import_react150.memo)(MissingDataAreaRaw);

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/RelatedAreas/RelatedAreas.js
var import_react152 = __toESM(require_react());
var import_jsx_runtime130 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/hooks/useWatchActiveSeries.js
var import_react151 = __toESM(require_react());
function useWatchActiveSeries(id, onIndexChange) {
  const onIndexChangeCallback = useCallbackRef(onIndexChange);
  (0, import_react151.useEffect)(() => {
    const clearActiveSeriesListener = setActiveSeriesListener(id, onIndexChangeCallback);
    return () => clearActiveSeriesListener();
  }, [id, onIndexChangeCallback]);
}
function setActiveSeriesListener(id, onIndexChange) {
  const eventName = getEventName(id, COLOR_VISION_SINGLE_ITEM);
  window.addEventListener(eventName, onIndexChange);
  return () => {
    window.removeEventListener(eventName, onIndexChange);
  };
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/Area/Area.js
var import_jsx_runtime129 = __toESM(require_jsx_runtime());
function Area3({
  activeIndex,
  fill,
  getAreaGenerator,
  hiddenIndexes = [],
  index: index2,
  series,
  shouldAnimate = false
}) {
  var _series$metadata$rela, _series$metadata;
  const pathD = getAreaGenerator(series);
  const previous = usePrevious(pathD);
  const spring = useSpring({
    from: {
      pathD: previous
    },
    to: {
      pathD
    },
    immediate: !shouldAnimate
  });
  if (hiddenIndexes.includes(index2)) {
    return null;
  }
  if (hiddenIndexes.includes((_series$metadata$rela = (_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) !== null && _series$metadata$rela !== void 0 ? _series$metadata$rela : -1)) {
    return null;
  }
  if (pathD == null) {
    return null;
  }
  return (0, import_jsx_runtime129.jsx)(animated.path, {
    d: spring.pathD,
    fill,
    style: {
      ...getColorVisionStylesForActiveIndex({
        activeIndex,
        index: index2,
        fadedOpacity: 0.2
      })
    }
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/components/RelatedAreas/RelatedAreas.js
function RelatedAreas({
  yScale,
  xScale,
  data
}) {
  const [activeIndex, setActiveIndex] = (0, import_react152.useState)(-1);
  const lineSeries = data.filter((series) => {
    var _series$metadata;
    return (series === null || series === void 0 ? void 0 : (_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) == null;
  });
  const percentileIndex = lineSeries.length + 1;
  const {
    hiddenIndexes
  } = useExternalHideEvents();
  const {
    id
  } = useChartContext();
  useWatchActiveSeries(id !== null && id !== void 0 ? id : "", ({
    detail: {
      index: index2
    }
  }) => {
    setActiveIndex(index2);
  });
  function getAreaGenerator(series) {
    var _series$metadata2;
    const relatedIndex = (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex;
    const areaGenerator = area_default().x((_2, index2) => {
      return xScale(index2);
    }).y0(({
      value
    }) => {
      return yScale(value !== null && value !== void 0 ? value : 0);
    }).y1((_2, index2) => {
      var _data$relatedIndex$da;
      if (data[relatedIndex] == null) {
        return yScale(0);
      }
      return yScale((_data$relatedIndex$da = data[relatedIndex].data[index2].value) !== null && _data$relatedIndex$da !== void 0 ? _data$relatedIndex$da : 0);
    }).defined(({
      value
    }) => value != null).curve(curveStepRounded);
    return areaGenerator(series.data);
  }
  return (0, import_jsx_runtime130.jsx)("g", {
    children: data.map((series, index2) => {
      var _series$metadata3, _series$metadata4, _series$metadata5;
      if (((_series$metadata3 = series.metadata) === null || _series$metadata3 === void 0 ? void 0 : _series$metadata3.relatedIndex) == null || ((_series$metadata4 = series.metadata) === null || _series$metadata4 === void 0 ? void 0 : _series$metadata4.areaColor) == null) {
        return null;
      }
      return (0, import_jsx_runtime130.jsx)(Area3, {
        activeIndex,
        fill: (_series$metadata5 = series.metadata) === null || _series$metadata5 === void 0 ? void 0 : _series$metadata5.areaColor,
        getAreaGenerator,
        hiddenIndexes,
        index: percentileIndex,
        series,
        shouldAnimate: false
      }, index2);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartRelational/LineChartRelational.js
function LineChartRelational(props) {
  const {
    annotations = [],
    data,
    errorText,
    emptyStateText,
    id,
    isAnimated: isAnimated2,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    skipLinkText,
    state,
    theme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const dataWithHiddenRelational = data.map((series) => {
    var _series$metadata;
    return {
      ...series,
      metadata: {
        ...series.metadata,
        isVisuallyHidden: ((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.relatedIndex) != null
      }
    };
  });
  const relatedAreasKey = buildRelatedAreasKey(dataWithHiddenRelational);
  return (0, import_jsx_runtime131.jsx)(LineChart, {
    annotations,
    data: dataWithHiddenRelational,
    emptyStateText,
    errorText,
    id,
    isAnimated: isAnimated2,
    renderLegendContent: ({
      getColorVisionStyles,
      getColorVisionEventAttrs: getColorVisionEventAttrs2
    }) => {
      return (0, import_jsx_runtime131.jsx)(CustomLegend, {
        getColorVisionStyles,
        getColorVisionEventAttrs: getColorVisionEventAttrs2,
        data,
        theme: theme !== null && theme !== void 0 ? theme : DEFAULT_THEME_NAME,
        seriesNameFormatter
      });
    },
    seriesNameFormatter,
    showLegend,
    skipLinkText,
    slots: {
      chart: (props2) => {
        return (0, import_jsx_runtime131.jsxs)(import_react153.Fragment, {
          children: [(0, import_jsx_runtime131.jsx)(MissingDataArea, {
            ...props2,
            data
          }), (0, import_jsx_runtime131.jsx)(RelatedAreas, {
            data,
            ...props2
          }, relatedAreasKey)]
        });
      }
    },
    state,
    theme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions
  });
}
function buildRelatedAreasKey(data) {
  const relatedSeries = data.find((series) => {
    var _series$metadata2;
    return (series === null || series === void 0 ? void 0 : (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) != null;
  });
  if (relatedSeries == null) {
    return "";
  }
  return relatedSeries.data.map(({
    value
  }) => value === null || value === void 0 ? void 0 : value.toString()).join(":");
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/LineChartPredictive.js
var import_react157 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/utilities/renderLinearPredictiveTooltipContent.js
var import_react155 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/utilities/Styles.scss.js
var styles46 = {
  "Icon": "_Icon_z9hgg_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/utilities/renderLinearPredictiveTooltipContent.js
var import_jsx_runtime133 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/SeriesIcon/SeriesIcon.js
var import_react154 = __toESM(require_react());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/SeriesIcon/SeriesIcon.scss.js
var styles47 = {
  "IconContainer": "_IconContainer_hkbfs_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/SeriesIcon/SeriesIcon.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime());
function SeriesIcon2({
  color: color2
}) {
  const id = (0, import_react154.useMemo)(() => uniqueId("SeriesIcon"), []);
  return (0, import_jsx_runtime132.jsx)("div", {
    className: styles47.IconContainer,
    children: (0, import_jsx_runtime132.jsxs)("svg", {
      width: "19",
      height: "4",
      viewBox: "0 0 19 4",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: [(0, import_jsx_runtime132.jsx)("path", {
        fillRule: "evenodd",
        clipRule: "evenodd",
        d: "M8 2C8 0.89543 8.89543 0 10 0C11.1046 0 12 0.89543 12 2C12 3.10457 11.1046 4 10 4C8.89543 4 8 3.10457 8 2ZM7.17071 1C7.06015 1.31278 7 1.64936 7 2C7 2.35064 7.06015 2.68722 7.17071 3H1C0.447715 3 0 2.55228 0 2C0 1.44772 0.447715 1 1 1H7.17071ZM13 2C13 2.55228 13.4477 3 14 3H14.4C14.9523 3 15.4 2.55228 15.4 2C15.4 1.44772 14.9523 1 14.4 1H14C13.4477 1 13 1.44772 13 2ZM17.6 1C17.0477 1 16.6 1.44772 16.6 2C16.6 2.55228 17.0477 3 17.6 3H18C18.5523 3 19 2.55228 19 2C19 1.44772 18.5523 1 18 1H17.6Z",
        fill: isGradientType(color2) ? `url(#${id})` : color2
      }), isGradientType(color2) ? (0, import_jsx_runtime132.jsx)("defs", {
        children: (0, import_jsx_runtime132.jsx)(LinearGradientWithStops, {
          id,
          gradient: changeGradientOpacity(color2),
          gradientUnits: "userSpaceOnUse",
          y1: "100%",
          y2: "0%"
        })
      }) : null]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/utilities/renderLinearPredictiveTooltipContent.js
function renderLinearPredictiveTooltipContent(tooltipData) {
  const {
    theme
  } = tooltipData;
  const formatters = {
    keyFormatter: (key) => `${key}`,
    valueFormatter: (value) => `${value}`,
    titleFormatter: (title) => `${title}`,
    ...tooltipData.formatters
  };
  function renderSeriesIcon(color2, isComparison) {
    return (0, import_jsx_runtime133.jsx)("div", {
      className: styles46.Icon,
      style: {
        height: PREVIEW_ICON_SIZE,
        width: PREVIEW_ICON_SIZE
      },
      children: isComparison ? (0, import_jsx_runtime133.jsx)(LinePreview, {
        color: color2,
        lineStyle: "dotted"
      }) : (0, import_jsx_runtime133.jsx)(SeriesIcon2, {
        color: color2
      })
    });
  }
  function renderContent({
    activeColorVisionIndex
  }) {
    const item = tooltipData.data[0];
    return item.data.map(({
      color: color2,
      key,
      value,
      isComparison
    }, seriesIndex) => {
      var _metadata$relatedInde;
      const metadata = tooltipData.dataSeries[seriesIndex].metadata;
      const activeKey = tooltipData.dataSeries[seriesIndex].data[tooltipData.activeIndex].key;
      const index2 = (_metadata$relatedInde = metadata === null || metadata === void 0 ? void 0 : metadata.relatedIndex) !== null && _metadata$relatedInde !== void 0 ? _metadata$relatedInde : seriesIndex;
      const isNull = value == null;
      const isPredictiveStartKey = (metadata === null || metadata === void 0 ? void 0 : metadata.startKey) === activeKey;
      const isHidden2 = isNull || isPredictiveStartKey;
      return (0, import_jsx_runtime133.jsx)(TooltipRow, {
        activeIndex: activeColorVisionIndex,
        color: color2,
        index: index2,
        isHidden: isHidden2,
        label: formatters.keyFormatter(key),
        renderSeriesIcon: () => renderSeriesIcon(color2, isComparison),
        shape: "Line",
        value: formatters.valueFormatter(value !== null && value !== void 0 ? value : 0)
      }, `row-${seriesIndex}`);
    });
  }
  return (0, import_jsx_runtime133.jsx)(TooltipContentContainer, {
    maxWidth: 300,
    theme,
    children: ({
      activeColorVisionIndex
    }) => (0, import_jsx_runtime133.jsxs)(import_react155.Fragment, {
      children: [tooltipData.title != null && (0, import_jsx_runtime133.jsx)(TooltipTitle, {
        theme,
        children: formatters.titleFormatter(tooltipData.title)
      }), renderContent({
        activeColorVisionIndex
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/LineChartPredictive.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime());

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/PredictiveLinePoints/PredictiveLinePoints.js
var import_react156 = __toESM(require_react());
var import_jsx_runtime134 = __toESM(require_jsx_runtime());
function PredictiveLinePoints({
  data,
  xScale,
  yScale
}) {
  const [activeLineIndex, setActiveLineIndex] = (0, import_react156.useState)(-1);
  const id = (0, import_react156.useMemo)(() => uniqueId("PredictiveLinePoints"), []);
  useWatchColorVisionEvents({
    type: COLOR_VISION_SINGLE_ITEM,
    onIndexChange: ({
      detail
    }) => setActiveLineIndex(detail.index)
  });
  return (0, import_jsx_runtime134.jsx)(import_react156.Fragment, {
    children: data.map((series, seriesIndex) => {
      var _series$metadata, _series$metadata$rela, _series$metadata2, _series$data$predicti, _series$data$predicti2;
      if (((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.isPredictive) == null) {
        return false;
      }
      const index2 = (_series$metadata$rela = (_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) !== null && _series$metadata$rela !== void 0 ? _series$metadata$rela : seriesIndex;
      const pointGradientId = `${id}-point-${index2}`;
      const predictiveStartIndex = series.data.findIndex(({
        key
      }) => {
        var _series$metadata3;
        return key === ((_series$metadata3 = series.metadata) === null || _series$metadata3 === void 0 ? void 0 : _series$metadata3.startKey);
      });
      const color2 = series.color;
      const pointColor = isGradientType(color2) ? `url(#${pointGradientId})` : changeColorOpacity(color2);
      return (0, import_jsx_runtime134.jsxs)(import_react156.Fragment, {
        children: [isGradientType(color2) ? (0, import_jsx_runtime134.jsx)("defs", {
          children: (0, import_jsx_runtime134.jsx)(LinearGradientWithStops, {
            id: pointGradientId,
            gradient: changeGradientOpacity(color2),
            gradientUnits: "userSpaceOnUse",
            y1: "100%",
            y2: "0%"
          })
        }) : null, (0, import_jsx_runtime134.jsx)(Point, {
          color: pointColor,
          cx: xScale(predictiveStartIndex),
          cy: yScale((_series$data$predicti = (_series$data$predicti2 = series.data[predictiveStartIndex]) === null || _series$data$predicti2 === void 0 ? void 0 : _series$data$predicti2.value) !== null && _series$data$predicti !== void 0 ? _series$data$predicti : -1),
          active: activeLineIndex === -1 || activeLineIndex === index2,
          index: index2,
          isAnimated: false,
          ariaHidden: true
        })]
      }, `${series.name}-${index2}`);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/CustomLegend/CustomLegend.scss.js
var styles48 = {
  "Container": "_Container_1fw4x_1"
};

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/components/CustomLegend/CustomLegend.js
var import_jsx_runtime135 = __toESM(require_jsx_runtime());
function CustomLegend2({
  data,
  predictiveSeriesNames,
  getColorVisionEventAttrs: getColorVisionEventAttrs2,
  getColorVisionStyles,
  seriesNameFormatter,
  theme
}) {
  return (0, import_jsx_runtime135.jsx)("ul", {
    className: styles48.Container,
    children: data.map(({
      color: color2,
      name: name2,
      isComparison,
      metadata
    }, index2) => {
      if (metadata !== null && metadata !== void 0 && metadata.isPredictive) {
        return null;
      }
      function renderSeriesIcon() {
        return (0, import_jsx_runtime135.jsx)(SeriesIcon2, {
          color: color2
        });
      }
      return (0, import_jsx_runtime135.jsx)("li", {
        style: {
          ...getColorVisionStyles(index2)
        },
        ...getColorVisionEventAttrs2(index2),
        children: (0, import_jsx_runtime135.jsx)(LegendItem, {
          color: color2,
          index: index2,
          renderSeriesIcon: predictiveSeriesNames.includes(name2 !== null && name2 !== void 0 ? name2 : "") ? renderSeriesIcon : void 0,
          isComparison,
          name: seriesNameFormatter(name2 !== null && name2 !== void 0 ? name2 : ""),
          shape: "Line",
          theme
        })
      }, index2);
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/components/LineChartPredictive/LineChartPredictive.js
function LineChartPredictive(props) {
  const {
    annotations = [],
    data,
    errorText,
    emptyStateText,
    id,
    isAnimated: isAnimated2,
    seriesNameFormatter = (value) => `${value}`,
    showLegend = true,
    skipLinkText,
    state,
    theme,
    tooltipOptions: initialTooltipOptions,
    xAxisOptions,
    yAxisOptions
  } = {
    ...DEFAULT_CHART_PROPS,
    ...props
  };
  const nonPredictiveData = [];
  const predictiveData = [];
  for (const series of data) {
    var _series$metadata;
    if (((_series$metadata = series.metadata) === null || _series$metadata === void 0 ? void 0 : _series$metadata.isPredictive) === true) {
      predictiveData.push(series);
    } else {
      nonPredictiveData.push(series);
    }
  }
  const selectedTheme = useTheme(theme);
  const seriesColors = useThemeSeriesColors(nonPredictiveData, selectedTheme);
  const predictiveSeriesNames = predictiveData.map(({
    metadata
  }) => {
    var _metadata$relatedInde;
    return data[(_metadata$relatedInde = metadata === null || metadata === void 0 ? void 0 : metadata.relatedIndex) !== null && _metadata$relatedInde !== void 0 ? _metadata$relatedInde : -1].name;
  }).filter((value) => value != null);
  const dataWithColors = [];
  let index2 = -1;
  for (const series of data) {
    var _series$metadata2;
    if (((_series$metadata2 = series.metadata) === null || _series$metadata2 === void 0 ? void 0 : _series$metadata2.relatedIndex) == null) {
      index2 += 1;
    }
    dataWithColors.push({
      ...series,
      color: seriesColors[index2]
    });
  }
  const tooltipOptions = (0, import_react157.useMemo)(() => {
    function renderTooltipContent(tooltipData) {
      return renderLinearPredictiveTooltipContent(tooltipData);
    }
    return {
      ...initialTooltipOptions,
      renderTooltipContent
    };
  }, [initialTooltipOptions]);
  return (0, import_jsx_runtime136.jsx)(LineChart, {
    annotations,
    data: dataWithColors,
    emptyStateText,
    errorText,
    id,
    isAnimated: isAnimated2,
    seriesNameFormatter,
    showLegend,
    skipLinkText,
    slots: {
      chart: ({
        xScale,
        yScale,
        drawableHeight,
        drawableWidth,
        theme: theme2
      }) => {
        return (0, import_jsx_runtime136.jsx)(PredictiveLinePoints, {
          data: dataWithColors,
          drawableHeight,
          drawableWidth,
          theme: theme2,
          xScale,
          yScale
        });
      }
    },
    state,
    theme,
    tooltipOptions,
    xAxisOptions,
    yAxisOptions,
    renderLegendContent: ({
      getColorVisionStyles,
      getColorVisionEventAttrs: getColorVisionEventAttrs2
    }) => {
      return (0, import_jsx_runtime136.jsx)(CustomLegend2, {
        getColorVisionStyles,
        getColorVisionEventAttrs: getColorVisionEventAttrs2,
        predictiveSeriesNames,
        data: dataWithColors,
        theme: theme !== null && theme !== void 0 ? theme : DEFAULT_THEME_NAME,
        seriesNameFormatter
      });
    }
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/renderLinearTooltipContent.js
var import_react158 = __toESM(require_react());
var import_jsx_runtime137 = __toESM(require_jsx_runtime());
function renderLinearTooltipContent(tooltipData, options = {}) {
  const {
    title,
    groups: groups2 = [{
      title: tooltipData.dataSeries[0].data[tooltipData.activeIndex].key,
      indexes: tooltipData.dataSeries.map((_2, index2) => index2)
    }]
  } = options;
  const {
    theme
  } = tooltipData;
  const formatters = {
    keyFormatter: (key) => `${key}`,
    valueFormatter: (value) => `${value}`,
    titleFormatter: (title2) => `${title2}`,
    ...tooltipData.formatters
  };
  function renderSeriesIcon(color2, styleOverride) {
    var _styleOverride$line$w, _styleOverride$line, _styleOverride$line2;
    if ((styleOverride === null || styleOverride === void 0 ? void 0 : styleOverride.line) == null) {
      return null;
    }
    return (0, import_jsx_runtime137.jsx)(LinePreview, {
      color: color2,
      lineStyle: "solid",
      width: (_styleOverride$line$w = styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$line = styleOverride.line) === null || _styleOverride$line === void 0 ? void 0 : _styleOverride$line.width) !== null && _styleOverride$line$w !== void 0 ? _styleOverride$line$w : 2,
      strokeDasharray: styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$line2 = styleOverride.line) === null || _styleOverride$line2 === void 0 ? void 0 : _styleOverride$line2.strokeDasharray
    });
  }
  function renderContent({
    activeColorVisionIndex
  }) {
    return groups2.map(({
      title: seriesName,
      indexes: indexes2
    }) => {
      const dataSeries = indexes2.map((groupIndex) => {
        if (tooltipData.data[0].data[groupIndex] == null) {
          return;
        }
        const rawDataSeries = tooltipData.data[0].data[groupIndex];
        return {
          ...tooltipData.dataSeries[groupIndex],
          color: rawDataSeries.color,
          groupIndex,
          isHidden: rawDataSeries.value == null || rawDataSeries.isHidden
        };
      }).filter((series) => Boolean(series));
      const hasTitle = dataSeries.some(({
        isHidden: isHidden2
      }) => isHidden2 !== true);
      return (0, import_jsx_runtime137.jsxs)(TooltipSeries, {
        isEmpty: !hasTitle,
        children: [hasTitle && (0, import_jsx_runtime137.jsx)(TooltipSeriesName, {
          theme,
          children: seriesName
        }), dataSeries.map(({
          name: name2,
          data,
          color: color2,
          groupIndex,
          styleOverride,
          isHidden: isHidden2
        }) => {
          var _styleOverride$toolti, _styleOverride$toolti2, _item$value;
          const item = data[tooltipData.activeIndex];
          return (0, import_jsx_runtime137.jsx)(TooltipRow, {
            activeIndex: activeColorVisionIndex,
            color: color2,
            index: groupIndex,
            isHidden: isHidden2,
            label: name2,
            renderSeriesIcon: () => renderSeriesIcon(color2, styleOverride),
            shape: (_styleOverride$toolti = styleOverride === null || styleOverride === void 0 ? void 0 : (_styleOverride$toolti2 = styleOverride.tooltip) === null || _styleOverride$toolti2 === void 0 ? void 0 : _styleOverride$toolti2.shape) !== null && _styleOverride$toolti !== void 0 ? _styleOverride$toolti : "Line",
            value: formatters.valueFormatter((_item$value = item.value) !== null && _item$value !== void 0 ? _item$value : 0)
          }, `row-${groupIndex}`);
        })]
      }, seriesName);
    });
  }
  return (0, import_jsx_runtime137.jsx)(TooltipContentContainer, {
    maxWidth: 300,
    theme,
    children: ({
      activeColorVisionIndex
    }) => (0, import_jsx_runtime137.jsxs)(import_react158.Fragment, {
      children: [title != null && (0, import_jsx_runtime137.jsx)(TooltipTitle, {
        theme,
        children: formatters.titleFormatter(title)
      }), renderContent({
        activeColorVisionIndex
      })]
    })
  });
}

// node_modules/@shopify/polaris-viz/build/esm/utilities/setSingleSeriesActive.js
function setSingleSeriesActive(id, index2) {
  const custom8 = new CustomEvent(getEventName(id, COLOR_VISION_SINGLE_ITEM), {
    detail: {
      index: index2
    }
  });
  window.dispatchEvent(custom8);
}

// node_modules/@shopify/polaris-viz/build/esm/hooks/ExternalEvents/utilities/setHiddenItems.js
function setHiddenItems(id, indexes2) {
  const custom8 = new CustomEvent(getEventName(id, EXTERNAL_EVENTS_SET_HIDDEN_ITEMS), {
    detail: {
      indexes: indexes2
    }
  });
  window.dispatchEvent(custom8);
}
export {
  BarChart,
  ChartSkeleton,
  ColorScale,
  ComboChart,
  DonutChart,
  FunnelChart,
  Legend,
  LineChart,
  LineChartPredictive,
  LineChartRelational,
  LinePreview,
  MissingDataArea,
  DARK_THEME as PolarisVizDarkTheme,
  LIGHT_THEME as PolarisVizLightTheme,
  PRINT_THEME as PolarisVizPrintTheme,
  PolarisVizProvider2 as PolarisVizProvider,
  SimpleBarChart,
  SimpleNormalizedChart,
  SparkBarChart,
  SparkLineChart,
  SquareColorPreview,
  StackedAreaChart,
  TooltipContent,
  TrendIndicator,
  changeColorOpacity,
  changeGradientOpacity,
  createGradient,
  createTheme,
  curveStepRounded,
  fillMissingDataPoints,
  getAverageColor,
  getColorVisionEventAttrs,
  getColorVisionStylesForActiveIndex,
  getFilteredSeries,
  getSeriesColors,
  getTooltipContentRenderer,
  isGradientType,
  paddingStringToObject,
  removeFalsyValues,
  renderLinearTooltipContent,
  setActiveSeriesListener,
  setHiddenItems,
  setSingleSeriesActive,
  uniqueId,
  useWatchActiveSeries
};
//# sourceMappingURL=@shopify_polaris-viz.js.map
