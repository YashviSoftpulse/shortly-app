import {
  __commonJS
} from "./chunk-BQWMX7FD.js";

// node_modules/highcharts-pattern-fill/pattern-fill-v2.js
var require_pattern_fill_v2 = __commonJS({
  "node_modules/highcharts-pattern-fill/pattern-fill-v2.js"(exports, module) {
    (function(factory) {
      if (typeof module === "object" && module.exports) {
        module.exports = factory;
      } else {
        factory(Highcharts);
      }
    })(function(Highcharts2) {
      "use strict";
      var idCounter = 0, wrap = Highcharts2.wrap, each = Highcharts2.each;
      Highcharts2.SVGRenderer.prototype.addPattern = function(id, options) {
        var pattern, path, w = options.width || 10, h = options.height || 10, ren = this;
        function rect(fill) {
          ren.rect(0, 0, w, h).attr({
            fill
          }).add(pattern);
        }
        if (!id) {
          id = "highcharts-pattern-" + idCounter;
          idCounter += 1;
        }
        pattern = this.createElement("pattern").attr({
          id,
          patternUnits: "userSpaceOnUse",
          width: options.width || 10,
          height: options.height || 10
        }).add(this.defs);
        pattern.id = pattern.element.id;
        if (options.path) {
          path = options.path;
          if (path.fill) {
            rect(path.fill);
          }
          this.createElement("path").attr({
            "d": path.d || path,
            "stroke": path.stroke || options.color || "#343434",
            "stroke-width": path.strokeWidth || 2
          }).add(pattern);
          pattern.color = options.color;
        } else if (options.image) {
          this.image(options.image, 0, 0, options.width, options.height).add(pattern);
        } else if (options.color) {
          rect(options.color);
        }
        if (options.opacity !== void 0) {
          each(pattern.element.children, function(child) {
            child.setAttribute("opacity", options.opacity);
          });
        }
        return pattern;
      };
      if (Highcharts2.VMLElement) {
        Highcharts2.VMLRenderer.prototype.addPattern = function(id, options) {
          var patterns;
          if (!id) {
            id = "highcharts-pattern-" + idCounter;
            idCounter += 1;
          }
          patterns = this.patterns || {};
          patterns[id] = options;
          this.patterns = patterns;
        };
        Highcharts2.wrap(Highcharts2.VMLRenderer.prototype.Element.prototype, "fillSetter", function(proceed, color, prop, elem) {
          if (typeof color === "string" && color.substring(0, 5) === "url(#") {
            var id = color.substring(5, color.length - 1), pattern = this.renderer.patterns[id], markup;
            if (pattern.image) {
              if (elem.getElementsByTagName("fill").length) {
                elem.removeChild(elem.getElementsByTagName("fill")[0]);
              }
              markup = this.renderer.prepVML(["<", prop, ' type="tile" src="', pattern.image, '" />']);
              elem.appendChild(document.createElement(markup));
              if (elem.parentNode.nodeType === 1) {
                elem.outerHTML = elem.outerHTML;
              }
            } else if (pattern.color) {
              proceed.call(this, pattern.color, prop, elem);
            } else {
              proceed.call(this, "#A0A0A0", prop, elem);
            }
          } else {
            proceed.call(this, color, prop, elem);
          }
        });
      }
      function addPredefinedPatterns(renderer) {
        var colors = Highcharts2.getOptions().colors;
        each([
          "M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11",
          "M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9",
          "M 3 0 L 3 10 M 8 0 L 8 10",
          "M 0 3 L 10 3 M 0 8 L 10 8",
          "M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7",
          "M 3 3 L 8 3 L 8 8 L 3 8 Z",
          "M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0",
          "M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7",
          "M 2 5 L 5 2 L 8 5 L 5 8 Z",
          "M 0 0 L 5 10 L 10 0"
        ], function(pattern, i) {
          renderer.addPattern("highcharts-default-pattern-" + i, {
            path: pattern,
            color: colors[i]
          });
        });
      }
      wrap(Highcharts2.Chart.prototype, "getContainer", function(proceed) {
        proceed.apply(this);
        var chart = this, renderer = chart.renderer, options = chart.options, patterns = options.defs && options.defs.patterns;
        addPredefinedPatterns(renderer);
        if (patterns) {
          each(patterns, function(pattern) {
            renderer.addPattern(pattern.id, pattern);
          });
        }
      });
    });
  }
});
export default require_pattern_fill_v2();
//# sourceMappingURL=highcharts-pattern-fill.js.map
