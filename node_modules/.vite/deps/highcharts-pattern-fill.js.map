{
  "version": 3,
  "sources": ["../../highcharts-pattern-fill/pattern-fill-v2.js"],
  "sourcesContent": ["/**\r\n * Highcharts pattern fill plugin\r\n *\r\n * Version         3.0.3\r\n * Author:         Torstein Honsi\r\n *                 Stephane Vanraes\r\n * Last revision:  2016-10-05\r\n * License:        MIT License\r\n *\r\n * Remark:         The latest version is not compatible with earlier versions.\r\n *\r\n * Usage:          Add a 'defs' object to the options\r\n *                 Create a 'patterns' array under 'defs'\r\n *                 Each item in this array represents a pattern\r\n *                 To use a pattern, set the color to `url(#id-of-pattern)'\r\n *\r\n * Options for the patterns:\r\n * - id:           The id for the pattern, defaults to highcharts-pattern-# with # an increasing number for each pattern without id\r\n * - width:        The width of the pattern, defaults to 10\r\n * - height:       The height of the pattern, defaults to 10\r\n * - opacity       A general opacity for the pattern\r\n * - path:         In SVG, the path for the pattern\r\n *                 (Note: this can be a string with only a path, or an object with d, stroke, strokeWidth and fill)\r\n * - image:        An image source for the pattern\r\n * - color:        A color to be used instead of a path\r\n *\r\n * Notes:          VML does not support the path setting\r\n *                 If all other fills fail (no path, image or color) the pattern will return #A0A0A0 as a color\r\n *                 Several patterns have been predefined, called highcharts-default-pattern-# (numbered 0-9)\r\n */\r\n\r\n/*global Highcharts, document */\r\n(function (factory) {\r\n    if (typeof module === 'object' && module.exports) {\r\n        module.exports = factory;\r\n    } else {\r\n        factory(Highcharts);\r\n    }\r\n}(function (Highcharts) {\r\n\r\n    'use strict';\r\n\r\n    var idCounter = 0,\r\n        wrap = Highcharts.wrap,\r\n        each = Highcharts.each;\r\n\r\n    /**\r\n     * Exposed method to add a pattern to the renderer.\r\n     */\r\n    Highcharts.SVGRenderer.prototype.addPattern = function (id, options) {\r\n        var pattern,\r\n            path,\r\n            w = options.width || 10,\r\n            h = options.height || 10,\r\n            ren = this;\r\n\r\n        /**\r\n         * Add a rectangle for solid color\r\n         */\r\n        function rect (fill) {\r\n            ren.rect(0, 0, w, h)\r\n                .attr({\r\n                    fill: fill\r\n                })\r\n                .add(pattern);\r\n        }\r\n\r\n        if (!id) {\r\n            id = 'highcharts-pattern-' + idCounter;\r\n            idCounter += 1;\r\n        }\r\n\r\n        pattern = this.createElement('pattern').attr({\r\n            id: id,\r\n            patternUnits: 'userSpaceOnUse',\r\n            width: options.width || 10,\r\n            height: options.height || 10\r\n        }).add(this.defs);\r\n\r\n        // Get id\r\n        pattern.id = pattern.element.id;\r\n\r\n        // Use an SVG path for the pattern\r\n        if (options.path) {\r\n            path = options.path;\r\n\r\n            // The background\r\n            if (path.fill) {\r\n                rect(path.fill);\r\n            }\r\n\r\n            // The pattern\r\n            this.createElement('path').attr({\r\n                'd': path.d || path,\r\n                'stroke': path.stroke || options.color || '#343434',\r\n                'stroke-width': path.strokeWidth || 2\r\n            }).add(pattern);\r\n            pattern.color = options.color;\r\n\r\n        // Image pattern\r\n        } else if (options.image) {\r\n\r\n            this.image(options.image, 0, 0, options.width, options.height).add(pattern);\r\n\r\n        // A solid color\r\n        } else if (options.color) {\r\n\r\n            rect(options.color);\r\n\r\n        }\r\n\r\n        if (options.opacity !== undefined) {\r\n            each(pattern.element.children, function (child) {\r\n                child.setAttribute('opacity', options.opacity);\r\n            });\r\n        }\r\n\r\n        return pattern;\r\n    };\r\n\r\n    if (Highcharts.VMLElement) {\r\n\r\n        Highcharts.VMLRenderer.prototype.addPattern = function (id, options) {\r\n\r\n            var patterns;\r\n            if (!id) {\r\n                id = 'highcharts-pattern-' + idCounter;\r\n                idCounter += 1;\r\n            }\r\n            patterns = this.patterns || {};\r\n            patterns[id] = options;\r\n            this.patterns = patterns;\r\n        };\r\n\r\n        Highcharts.wrap(Highcharts.VMLRenderer.prototype.Element.prototype, 'fillSetter', function (proceed, color, prop, elem) {\r\n            if (typeof color === 'string' && color.substring(0, 5) === 'url(#') {\r\n                var id = color.substring(5, color.length - 1),\r\n                    pattern = this.renderer.patterns[id],\r\n                    markup;\r\n\r\n                if (pattern.image) {\r\n                    // Remove Previous fills\r\n                    if (elem.getElementsByTagName('fill').length) {\r\n                        elem.removeChild(elem.getElementsByTagName('fill')[0]);\r\n                    }\r\n\r\n                    markup = this.renderer.prepVML(['<', prop, ' type=\"tile\" src=\"', pattern.image, '\" />']);\r\n                    elem.appendChild(document.createElement(markup));\r\n\r\n                    // Work around display bug on updating attached nodes\r\n                    if (elem.parentNode.nodeType === 1) {\r\n                        elem.outerHTML = elem.outerHTML;\r\n                    }\r\n\r\n                } else if (pattern.color) {\r\n                    proceed.call(this, pattern.color, prop, elem);\r\n                } else {\r\n                    proceed.call(this, '#A0A0A0', prop, elem);\r\n                }\r\n            } else {\r\n                proceed.call(this, color, prop, elem);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add the predefined patterns\r\n     */\r\n    function addPredefinedPatterns(renderer) {\r\n        var colors = Highcharts.getOptions().colors;\r\n\r\n        each([\r\n            'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',\r\n            'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9',\r\n            'M 3 0 L 3 10 M 8 0 L 8 10',\r\n            'M 0 3 L 10 3 M 0 8 L 10 8',\r\n            'M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7',\r\n            'M 3 3 L 8 3 L 8 8 L 3 8 Z',\r\n            'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0',\r\n            'M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7',\r\n            'M 2 5 L 5 2 L 8 5 L 5 8 Z',\r\n            'M 0 0 L 5 10 L 10 0'\r\n        ], function (pattern, i) {\r\n            renderer.addPattern('highcharts-default-pattern-' + i, {\r\n                path: pattern,\r\n                color: colors[i]\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add patterns to the defs element\r\n    wrap(Highcharts.Chart.prototype, 'getContainer', function (proceed) {\r\n        proceed.apply(this);\r\n\r\n        var chart = this,\r\n            renderer = chart.renderer,\r\n            options = chart.options,\r\n            patterns = options.defs && options.defs.patterns;\r\n\r\n        // First add default patterns\r\n        addPredefinedPatterns(renderer);\r\n\r\n        // Add user defined patterns\r\n        if (patterns) {\r\n            each(patterns, function (pattern) {\r\n                renderer.addPattern(pattern.id, pattern);\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n}));\r\n"],
  "mappings": "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",
  "names": ["Highcharts"]
}
